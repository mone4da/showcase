{"ast":null,"code":"import _classCallCheck from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport TempNode from './TempNode.js';\nvar ExpressionNode = /*#__PURE__*/function (_TempNode) {\n  _inherits(ExpressionNode, _TempNode);\n  var _super = _createSuper(ExpressionNode);\n  function ExpressionNode() {\n    var _this;\n    var snipped = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var nodeType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'void';\n    _classCallCheck(this, ExpressionNode);\n    _this = _super.call(this, nodeType);\n    _this.snipped = snipped;\n    return _this;\n  }\n  _createClass(ExpressionNode, [{\n    key: \"generate\",\n    value: function generate(builder) {\n      var type = this.getNodeType(builder);\n      var snipped = this.snipped;\n      if (type === 'void') {\n        builder.addFlowCode(snipped);\n      } else {\n        return \"( \".concat(snipped, \" )\");\n      }\n    }\n  }]);\n  return ExpressionNode;\n}(TempNode);\nexport default ExpressionNode;","map":{"version":3,"names":["TempNode","ExpressionNode","_TempNode","_inherits","_super","_createSuper","_this","snipped","arguments","length","undefined","nodeType","_classCallCheck","call","_createClass","key","value","generate","builder","type","getNodeType","addFlowCode","concat"],"sources":["/home/samuel/experiment/3d/farm/frontend/node_modules/three-stdlib/nodes/core/ExpressionNode.js"],"sourcesContent":["import TempNode from './TempNode.js';\n\nclass ExpressionNode extends TempNode {\n  constructor(snipped = '', nodeType = 'void') {\n    super(nodeType);\n    this.snipped = snipped;\n  }\n\n  generate(builder) {\n    const type = this.getNodeType(builder);\n    const snipped = this.snipped;\n\n    if (type === 'void') {\n      builder.addFlowCode(snipped);\n    } else {\n      return `( ${snipped} )`;\n    }\n  }\n\n}\n\nexport default ExpressionNode;\n"],"mappings":";;;;AAAA,OAAOA,QAAQ,MAAM,eAAe;AAAC,IAE/BC,cAAc,0BAAAC,SAAA;EAAAC,SAAA,CAAAF,cAAA,EAAAC,SAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,cAAA;EAClB,SAAAA,eAAA,EAA6C;IAAA,IAAAK,KAAA;IAAA,IAAjCC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;IAAA,IAAEG,QAAQ,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,MAAM;IAAAI,eAAA,OAAAX,cAAA;IACzCK,KAAA,GAAAF,MAAA,CAAAS,IAAA,OAAMF,QAAQ;IACdL,KAAA,CAAKC,OAAO,GAAGA,OAAO;IAAC,OAAAD,KAAA;EACzB;EAACQ,YAAA,CAAAb,cAAA;IAAAc,GAAA;IAAAC,KAAA,EAED,SAAAC,SAASC,OAAO,EAAE;MAChB,IAAMC,IAAI,GAAG,IAAI,CAACC,WAAW,CAACF,OAAO,CAAC;MACtC,IAAMX,OAAO,GAAG,IAAI,CAACA,OAAO;MAE5B,IAAIY,IAAI,KAAK,MAAM,EAAE;QACnBD,OAAO,CAACG,WAAW,CAACd,OAAO,CAAC;MAC9B,CAAC,MAAM;QACL,YAAAe,MAAA,CAAYf,OAAO;MACrB;IACF;EAAC;EAAA,OAAAN,cAAA;AAAA,EAf0BD,QAAQ;AAmBrC,eAAeC,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}