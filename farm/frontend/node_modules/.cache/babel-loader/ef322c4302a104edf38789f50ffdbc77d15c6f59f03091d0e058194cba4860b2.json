{"ast":null,"code":"import _classCallCheck from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport Node from '../core/Node.js';\nimport { ShaderNode, element, mul, positionLocal, add, transformDirection, normalLocal, assign, attribute, uniform, mat4, buffer } from '../ShaderNode.js';\nimport { NodeUpdateType } from '../core/constants.js';\nvar Skinning = new ShaderNode(function (inputs, builder) {\n  var index = inputs.index,\n    weight = inputs.weight,\n    bindMatrix = inputs.bindMatrix,\n    bindMatrixInverse = inputs.bindMatrixInverse,\n    boneMatrices = inputs.boneMatrices;\n  var boneMatX = element(boneMatrices, index.x);\n  var boneMatY = element(boneMatrices, index.y);\n  var boneMatZ = element(boneMatrices, index.z);\n  var boneMatW = element(boneMatrices, index.w); // POSITION\n\n  var skinVertex = mul(bindMatrix, positionLocal);\n  var skinned = add(mul(mul(boneMatX, skinVertex), weight.x), mul(mul(boneMatY, skinVertex), weight.y), mul(mul(boneMatZ, skinVertex), weight.z), mul(mul(boneMatW, skinVertex), weight.w));\n  var skinPosition = mul(bindMatrixInverse, skinned).xyz; // NORMAL\n\n  var skinMatrix = add(mul(weight.x, boneMatX), mul(weight.y, boneMatY), mul(weight.z, boneMatZ), mul(weight.w, boneMatW));\n  skinMatrix = mul(mul(bindMatrixInverse, skinMatrix), bindMatrix);\n  var skinNormal = transformDirection(skinMatrix, normalLocal).xyz; // ASSIGNS\n\n  assign(positionLocal, skinPosition).build(builder);\n  assign(normalLocal, skinNormal).build(builder);\n});\nvar SkinningNode = /*#__PURE__*/function (_Node) {\n  _inherits(SkinningNode, _Node);\n  var _super = _createSuper(SkinningNode);\n  function SkinningNode(skinnedMesh) {\n    var _this;\n    _classCallCheck(this, SkinningNode);\n    _this = _super.call(this, 'void');\n    _this.skinnedMesh = skinnedMesh;\n    _this.updateType = NodeUpdateType.Object; //\n\n    _this.skinIndexNode = attribute('skinIndex', 'uvec4');\n    _this.skinWeightNode = attribute('skinWeight', 'vec4');\n    _this.bindMatrixNode = uniform(mat4(skinnedMesh.bindMatrix));\n    _this.bindMatrixInverseNode = uniform(mat4(skinnedMesh.bindMatrixInverse));\n    _this.boneMatricesNode = buffer(skinnedMesh.skeleton.boneMatrices, 'mat4', skinnedMesh.skeleton.bones.length);\n    return _this;\n  }\n  _createClass(SkinningNode, [{\n    key: \"generate\",\n    value: function generate(builder) {\n      Skinning({\n        index: this.skinIndexNode,\n        weight: this.skinWeightNode,\n        bindMatrix: this.bindMatrixNode,\n        bindMatrixInverse: this.bindMatrixInverseNode,\n        boneMatrices: this.boneMatricesNode\n      }, builder);\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.skinnedMesh.skeleton.update();\n    }\n  }]);\n  return SkinningNode;\n}(Node);\nexport default SkinningNode;","map":{"version":3,"names":["Node","ShaderNode","element","mul","positionLocal","add","transformDirection","normalLocal","assign","attribute","uniform","mat4","buffer","NodeUpdateType","Skinning","inputs","builder","index","weight","bindMatrix","bindMatrixInverse","boneMatrices","boneMatX","x","boneMatY","y","boneMatZ","z","boneMatW","w","skinVertex","skinned","skinPosition","xyz","skinMatrix","skinNormal","build","SkinningNode","_Node","_inherits","_super","_createSuper","skinnedMesh","_this","_classCallCheck","call","updateType","Object","skinIndexNode","skinWeightNode","bindMatrixNode","bindMatrixInverseNode","boneMatricesNode","skeleton","bones","length","_createClass","key","value","generate","update"],"sources":["/home/samuel/experiment/3d/farm/frontend/node_modules/three-stdlib/nodes/accessors/SkinningNode.js"],"sourcesContent":["import Node from '../core/Node.js';\nimport { ShaderNode, element, mul, positionLocal, add, transformDirection, normalLocal, assign, attribute, uniform, mat4, buffer } from '../ShaderNode.js';\nimport { NodeUpdateType } from '../core/constants.js';\n\nconst Skinning = new ShaderNode((inputs, builder) => {\n  const {\n    index,\n    weight,\n    bindMatrix,\n    bindMatrixInverse,\n    boneMatrices\n  } = inputs;\n  const boneMatX = element(boneMatrices, index.x);\n  const boneMatY = element(boneMatrices, index.y);\n  const boneMatZ = element(boneMatrices, index.z);\n  const boneMatW = element(boneMatrices, index.w); // POSITION\n\n  const skinVertex = mul(bindMatrix, positionLocal);\n  const skinned = add(mul(mul(boneMatX, skinVertex), weight.x), mul(mul(boneMatY, skinVertex), weight.y), mul(mul(boneMatZ, skinVertex), weight.z), mul(mul(boneMatW, skinVertex), weight.w));\n  const skinPosition = mul(bindMatrixInverse, skinned).xyz; // NORMAL\n\n  let skinMatrix = add(mul(weight.x, boneMatX), mul(weight.y, boneMatY), mul(weight.z, boneMatZ), mul(weight.w, boneMatW));\n  skinMatrix = mul(mul(bindMatrixInverse, skinMatrix), bindMatrix);\n  const skinNormal = transformDirection(skinMatrix, normalLocal).xyz; // ASSIGNS\n\n  assign(positionLocal, skinPosition).build(builder);\n  assign(normalLocal, skinNormal).build(builder);\n});\n\nclass SkinningNode extends Node {\n  constructor(skinnedMesh) {\n    super('void');\n    this.skinnedMesh = skinnedMesh;\n    this.updateType = NodeUpdateType.Object; //\n\n    this.skinIndexNode = attribute('skinIndex', 'uvec4');\n    this.skinWeightNode = attribute('skinWeight', 'vec4');\n    this.bindMatrixNode = uniform(mat4(skinnedMesh.bindMatrix));\n    this.bindMatrixInverseNode = uniform(mat4(skinnedMesh.bindMatrixInverse));\n    this.boneMatricesNode = buffer(skinnedMesh.skeleton.boneMatrices, 'mat4', skinnedMesh.skeleton.bones.length);\n  }\n\n  generate(builder) {\n    Skinning({\n      index: this.skinIndexNode,\n      weight: this.skinWeightNode,\n      bindMatrix: this.bindMatrixNode,\n      bindMatrixInverse: this.bindMatrixInverseNode,\n      boneMatrices: this.boneMatricesNode\n    }, builder);\n  }\n\n  update() {\n    this.skinnedMesh.skeleton.update();\n  }\n\n}\n\nexport default SkinningNode;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}