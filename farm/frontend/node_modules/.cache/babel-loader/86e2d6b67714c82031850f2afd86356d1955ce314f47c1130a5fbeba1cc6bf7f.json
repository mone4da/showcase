{"ast":null,"code":"import _classCallCheck from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport Node from '../core/Node.js';\nimport PropertyNode from '../core/PropertyNode.js';\nimport ContextNode from '../core/ContextNode.js';\nvar CondNode = /*#__PURE__*/function (_Node) {\n  _inherits(CondNode, _Node);\n  var _super = _createSuper(CondNode);\n  function CondNode(node, ifNode, elseNode) {\n    var _this;\n    _classCallCheck(this, CondNode);\n    _this = _super.call(this);\n    _this.node = node;\n    _this.ifNode = ifNode;\n    _this.elseNode = elseNode;\n    return _this;\n  }\n  _createClass(CondNode, [{\n    key: \"getNodeType\",\n    value: function getNodeType(builder) {\n      var ifType = this.ifNode.getNodeType(builder);\n      var elseType = this.elseNode.getNodeType(builder);\n      if (builder.getTypeLength(elseType) > builder.getTypeLength(ifType)) {\n        return elseType;\n      }\n      return ifType;\n    }\n  }, {\n    key: \"generate\",\n    value: function generate(builder) {\n      var type = this.getNodeType(builder);\n      var context = {\n        temp: false\n      };\n      var nodeProperty = new PropertyNode(null, type).build(builder);\n      var nodeSnippet = new ContextNode(this.node\n        /*, context*/).build(builder, 'bool'),\n        ifSnippet = new ContextNode(this.ifNode, context).build(builder, type),\n        elseSnippet = new ContextNode(this.elseNode, context).build(builder, type);\n      builder.addFlowCode(\"if ( \".concat(nodeSnippet, \" ) {\\n\\n\\t\\t\").concat(nodeProperty, \" = \").concat(ifSnippet, \";\\n\\n\\t} else {\\n\\n\\t\\t\").concat(nodeProperty, \" = \").concat(elseSnippet, \";\\n\\n\\t}\"));\n      return nodeProperty;\n    }\n  }]);\n  return CondNode;\n}(Node);\nexport default CondNode;","map":{"version":3,"names":["Node","PropertyNode","ContextNode","CondNode","_Node","_inherits","_super","_createSuper","node","ifNode","elseNode","_this","_classCallCheck","call","_createClass","key","value","getNodeType","builder","ifType","elseType","getTypeLength","generate","type","context","temp","nodeProperty","build","nodeSnippet","ifSnippet","elseSnippet","addFlowCode","concat"],"sources":["/home/samuel/experiment/3d/farm/frontend/node_modules/three-stdlib/nodes/math/CondNode.js"],"sourcesContent":["import Node from '../core/Node.js';\nimport PropertyNode from '../core/PropertyNode.js';\nimport ContextNode from '../core/ContextNode.js';\n\nclass CondNode extends Node {\n  constructor(node, ifNode, elseNode) {\n    super();\n    this.node = node;\n    this.ifNode = ifNode;\n    this.elseNode = elseNode;\n  }\n\n  getNodeType(builder) {\n    const ifType = this.ifNode.getNodeType(builder);\n    const elseType = this.elseNode.getNodeType(builder);\n\n    if (builder.getTypeLength(elseType) > builder.getTypeLength(ifType)) {\n      return elseType;\n    }\n\n    return ifType;\n  }\n\n  generate(builder) {\n    const type = this.getNodeType(builder);\n    const context = {\n      temp: false\n    };\n    const nodeProperty = new PropertyNode(null, type).build(builder);\n    const nodeSnippet = new ContextNode(this.node\n    /*, context*/\n    ).build(builder, 'bool'),\n          ifSnippet = new ContextNode(this.ifNode, context).build(builder, type),\n          elseSnippet = new ContextNode(this.elseNode, context).build(builder, type);\n    builder.addFlowCode(`if ( ${nodeSnippet} ) {\n\n\\t\\t${nodeProperty} = ${ifSnippet};\n\n\\t} else {\n\n\\t\\t${nodeProperty} = ${elseSnippet};\n\n\\t}`);\n    return nodeProperty;\n  }\n\n}\n\nexport default CondNode;\n"],"mappings":";;;;AAAA,OAAOA,IAAI,MAAM,iBAAiB;AAClC,OAAOC,YAAY,MAAM,yBAAyB;AAClD,OAAOC,WAAW,MAAM,wBAAwB;AAAC,IAE3CC,QAAQ,0BAAAC,KAAA;EAAAC,SAAA,CAAAF,QAAA,EAAAC,KAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,QAAA;EACZ,SAAAA,SAAYK,IAAI,EAAEC,MAAM,EAAEC,QAAQ,EAAE;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAT,QAAA;IAClCQ,KAAA,GAAAL,MAAA,CAAAO,IAAA;IACAF,KAAA,CAAKH,IAAI,GAAGA,IAAI;IAChBG,KAAA,CAAKF,MAAM,GAAGA,MAAM;IACpBE,KAAA,CAAKD,QAAQ,GAAGA,QAAQ;IAAC,OAAAC,KAAA;EAC3B;EAACG,YAAA,CAAAX,QAAA;IAAAY,GAAA;IAAAC,KAAA,EAED,SAAAC,YAAYC,OAAO,EAAE;MACnB,IAAMC,MAAM,GAAG,IAAI,CAACV,MAAM,CAACQ,WAAW,CAACC,OAAO,CAAC;MAC/C,IAAME,QAAQ,GAAG,IAAI,CAACV,QAAQ,CAACO,WAAW,CAACC,OAAO,CAAC;MAEnD,IAAIA,OAAO,CAACG,aAAa,CAACD,QAAQ,CAAC,GAAGF,OAAO,CAACG,aAAa,CAACF,MAAM,CAAC,EAAE;QACnE,OAAOC,QAAQ;MACjB;MAEA,OAAOD,MAAM;IACf;EAAC;IAAAJ,GAAA;IAAAC,KAAA,EAED,SAAAM,SAASJ,OAAO,EAAE;MAChB,IAAMK,IAAI,GAAG,IAAI,CAACN,WAAW,CAACC,OAAO,CAAC;MACtC,IAAMM,OAAO,GAAG;QACdC,IAAI,EAAE;MACR,CAAC;MACD,IAAMC,YAAY,GAAG,IAAIzB,YAAY,CAAC,IAAI,EAAEsB,IAAI,CAAC,CAACI,KAAK,CAACT,OAAO,CAAC;MAChE,IAAMU,WAAW,GAAG,IAAI1B,WAAW,CAAC,IAAI,CAACM;QACzC,cACC,CAACmB,KAAK,CAACT,OAAO,EAAE,MAAM,CAAC;QAClBW,SAAS,GAAG,IAAI3B,WAAW,CAAC,IAAI,CAACO,MAAM,EAAEe,OAAO,CAAC,CAACG,KAAK,CAACT,OAAO,EAAEK,IAAI,CAAC;QACtEO,WAAW,GAAG,IAAI5B,WAAW,CAAC,IAAI,CAACQ,QAAQ,EAAEc,OAAO,CAAC,CAACG,KAAK,CAACT,OAAO,EAAEK,IAAI,CAAC;MAChFL,OAAO,CAACa,WAAW,SAAAC,MAAA,CAASJ,WAAW,kBAAAI,MAAA,CAErCN,YAAY,SAAAM,MAAA,CAAMH,SAAS,6BAAAG,MAAA,CAI3BN,YAAY,SAAAM,MAAA,CAAMF,WAAW,cAE9B;MACD,OAAOJ,YAAY;IACrB;EAAC;EAAA,OAAAvB,QAAA;AAAA,EAxCoBH,IAAI;AA4C3B,eAAeG,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}