{"ast":null,"code":"import _createClass from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { BufferGeometry, Vector3, Matrix4, Float32BufferAttribute } from 'three';\n\n/**\n * You can use this geometry to create a decal mesh, that serves different kinds of purposes.\n * e.g. adding unique details to models, performing dynamic visual environmental changes or covering seams.\n *\n * Constructor parameter:\n *\n * mesh — Any mesh object\n * position — Position of the decal projector\n * orientation — Orientation of the decal projector\n * size — Size of the decal projector\n *\n * reference: http://blog.wolfire.com/2009/06/how-to-project-decals/\n *\n */\nvar DecalGeometry = /*#__PURE__*/function (_BufferGeometry) {\n  _inherits(DecalGeometry, _BufferGeometry);\n  var _super = _createSuper(DecalGeometry);\n  function DecalGeometry(mesh, position, orientation, size) {\n    var _this;\n    _classCallCheck(this, DecalGeometry);\n    _this = _super.call(this); // buffers\n\n    var vertices = [];\n    var normals = [];\n    var uvs = []; // helpers\n\n    var plane = new Vector3(); // this matrix represents the transformation of the decal projector\n\n    var projectorMatrix = new Matrix4();\n    projectorMatrix.makeRotationFromEuler(orientation);\n    projectorMatrix.setPosition(position);\n    var projectorMatrixInverse = new Matrix4();\n    projectorMatrixInverse.copy(projectorMatrix).invert(); // generate buffers\n\n    generate(); // build geometry\n\n    _this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    _this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    _this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n    function generate() {\n      var i;\n      var decalVertices = [];\n      var vertex = new Vector3();\n      var normal = new Vector3(); // handle different geometry types\n\n      if (mesh.geometry.isGeometry === true) {\n        console.error('THREE.DecalGeometry no longer supports THREE.Geometry. Use BufferGeometry instead.');\n        return;\n      }\n      var geometry = mesh.geometry;\n      var positionAttribute = geometry.attributes.position;\n      var normalAttribute = geometry.attributes.normal; // first, create an array of 'DecalVertex' objects\n      // three consecutive 'DecalVertex' objects represent a single face\n      //\n      // this data structure will be later used to perform the clipping\n\n      if (geometry.index !== null) {\n        // indexed BufferGeometry\n        var index = geometry.index;\n        for (i = 0; i < index.count; i++) {\n          vertex.fromBufferAttribute(positionAttribute, index.getX(i));\n          normal.fromBufferAttribute(normalAttribute, index.getX(i));\n          pushDecalVertex(decalVertices, vertex, normal);\n        }\n      } else {\n        // non-indexed BufferGeometry\n        for (i = 0; i < positionAttribute.count; i++) {\n          vertex.fromBufferAttribute(positionAttribute, i);\n          normal.fromBufferAttribute(normalAttribute, i);\n          pushDecalVertex(decalVertices, vertex, normal);\n        }\n      } // second, clip the geometry so that it doesn't extend out from the projector\n\n      decalVertices = clipGeometry(decalVertices, plane.set(1, 0, 0));\n      decalVertices = clipGeometry(decalVertices, plane.set(-1, 0, 0));\n      decalVertices = clipGeometry(decalVertices, plane.set(0, 1, 0));\n      decalVertices = clipGeometry(decalVertices, plane.set(0, -1, 0));\n      decalVertices = clipGeometry(decalVertices, plane.set(0, 0, 1));\n      decalVertices = clipGeometry(decalVertices, plane.set(0, 0, -1)); // third, generate final vertices, normals and uvs\n\n      for (i = 0; i < decalVertices.length; i++) {\n        var decalVertex = decalVertices[i]; // create texture coordinates (we are still in projector space)\n\n        uvs.push(0.5 + decalVertex.position.x / size.x, 0.5 + decalVertex.position.y / size.y); // transform the vertex back to world space\n\n        decalVertex.position.applyMatrix4(projectorMatrix); // now create vertex and normal buffer data\n\n        vertices.push(decalVertex.position.x, decalVertex.position.y, decalVertex.position.z);\n        normals.push(decalVertex.normal.x, decalVertex.normal.y, decalVertex.normal.z);\n      }\n    }\n    function pushDecalVertex(decalVertices, vertex, normal) {\n      // transform the vertex to world space, then to projector space\n      vertex.applyMatrix4(mesh.matrixWorld);\n      vertex.applyMatrix4(projectorMatrixInverse);\n      normal.transformDirection(mesh.matrixWorld);\n      decalVertices.push(new DecalVertex(vertex.clone(), normal.clone()));\n    }\n    function clipGeometry(inVertices, plane) {\n      var outVertices = [];\n      var s = 0.5 * Math.abs(size.dot(plane)); // a single iteration clips one face,\n      // which consists of three consecutive 'DecalVertex' objects\n\n      for (var i = 0; i < inVertices.length; i += 3) {\n        var v1Out = void 0,\n          v2Out = void 0,\n          v3Out = void 0,\n          total = 0;\n        var nV1 = void 0,\n          nV2 = void 0,\n          nV3 = void 0,\n          nV4 = void 0;\n        var d1 = inVertices[i + 0].position.dot(plane) - s;\n        var d2 = inVertices[i + 1].position.dot(plane) - s;\n        var d3 = inVertices[i + 2].position.dot(plane) - s;\n        v1Out = d1 > 0;\n        v2Out = d2 > 0;\n        v3Out = d3 > 0; // calculate, how many vertices of the face lie outside of the clipping plane\n\n        total = (v1Out ? 1 : 0) + (v2Out ? 1 : 0) + (v3Out ? 1 : 0);\n        switch (total) {\n          case 0:\n            {\n              // the entire face lies inside of the plane, no clipping needed\n              outVertices.push(inVertices[i]);\n              outVertices.push(inVertices[i + 1]);\n              outVertices.push(inVertices[i + 2]);\n              break;\n            }\n          case 1:\n            {\n              // one vertex lies outside of the plane, perform clipping\n              if (v1Out) {\n                nV1 = inVertices[i + 1];\n                nV2 = inVertices[i + 2];\n                nV3 = clip(inVertices[i], nV1, plane, s);\n                nV4 = clip(inVertices[i], nV2, plane, s);\n              }\n              if (v2Out) {\n                nV1 = inVertices[i];\n                nV2 = inVertices[i + 2];\n                nV3 = clip(inVertices[i + 1], nV1, plane, s);\n                nV4 = clip(inVertices[i + 1], nV2, plane, s);\n                outVertices.push(nV3);\n                outVertices.push(nV2.clone());\n                outVertices.push(nV1.clone());\n                outVertices.push(nV2.clone());\n                outVertices.push(nV3.clone());\n                outVertices.push(nV4);\n                break;\n              }\n              if (v3Out) {\n                nV1 = inVertices[i];\n                nV2 = inVertices[i + 1];\n                nV3 = clip(inVertices[i + 2], nV1, plane, s);\n                nV4 = clip(inVertices[i + 2], nV2, plane, s);\n              }\n              outVertices.push(nV1.clone());\n              outVertices.push(nV2.clone());\n              outVertices.push(nV3);\n              outVertices.push(nV4);\n              outVertices.push(nV3.clone());\n              outVertices.push(nV2.clone());\n              break;\n            }\n          case 2:\n            {\n              // two vertices lies outside of the plane, perform clipping\n              if (!v1Out) {\n                nV1 = inVertices[i].clone();\n                nV2 = clip(nV1, inVertices[i + 1], plane, s);\n                nV3 = clip(nV1, inVertices[i + 2], plane, s);\n                outVertices.push(nV1);\n                outVertices.push(nV2);\n                outVertices.push(nV3);\n              }\n              if (!v2Out) {\n                nV1 = inVertices[i + 1].clone();\n                nV2 = clip(nV1, inVertices[i + 2], plane, s);\n                nV3 = clip(nV1, inVertices[i], plane, s);\n                outVertices.push(nV1);\n                outVertices.push(nV2);\n                outVertices.push(nV3);\n              }\n              if (!v3Out) {\n                nV1 = inVertices[i + 2].clone();\n                nV2 = clip(nV1, inVertices[i], plane, s);\n                nV3 = clip(nV1, inVertices[i + 1], plane, s);\n                outVertices.push(nV1);\n                outVertices.push(nV2);\n                outVertices.push(nV3);\n              }\n              break;\n            }\n        }\n      }\n      return outVertices;\n    }\n    function clip(v0, v1, p, s) {\n      var d0 = v0.position.dot(p) - s;\n      var d1 = v1.position.dot(p) - s;\n      var s0 = d0 / (d0 - d1);\n      var v = new DecalVertex(new Vector3(v0.position.x + s0 * (v1.position.x - v0.position.x), v0.position.y + s0 * (v1.position.y - v0.position.y), v0.position.z + s0 * (v1.position.z - v0.position.z)), new Vector3(v0.normal.x + s0 * (v1.normal.x - v0.normal.x), v0.normal.y + s0 * (v1.normal.y - v0.normal.y), v0.normal.z + s0 * (v1.normal.z - v0.normal.z))); // need to clip more values (texture coordinates)? do it this way:\n      // intersectpoint.value = a.value + s * ( b.value - a.value );\n\n      return v;\n    }\n    return _this;\n  }\n  return _createClass(DecalGeometry);\n}(BufferGeometry); // helper\nvar DecalVertex = /*#__PURE__*/function () {\n  function DecalVertex(position, normal) {\n    _classCallCheck(this, DecalVertex);\n    this.position = position;\n    this.normal = normal;\n  }\n  _createClass(DecalVertex, [{\n    key: \"clone\",\n    value: function clone() {\n      return new this.constructor(this.position.clone(), this.normal.clone());\n    }\n  }]);\n  return DecalVertex;\n}();\nexport { DecalGeometry, DecalVertex };","map":{"version":3,"names":["BufferGeometry","Vector3","Matrix4","Float32BufferAttribute","DecalGeometry","_BufferGeometry","_inherits","_super","_createSuper","mesh","position","orientation","size","_this","_classCallCheck","call","vertices","normals","uvs","plane","projectorMatrix","makeRotationFromEuler","setPosition","projectorMatrixInverse","copy","invert","generate","setAttribute","i","decalVertices","vertex","normal","geometry","isGeometry","console","error","positionAttribute","attributes","normalAttribute","index","count","fromBufferAttribute","getX","pushDecalVertex","clipGeometry","set","length","decalVertex","push","x","y","applyMatrix4","z","matrixWorld","transformDirection","DecalVertex","clone","inVertices","outVertices","s","Math","abs","dot","v1Out","v2Out","v3Out","total","nV1","nV2","nV3","nV4","d1","d2","d3","clip","v0","v1","p","d0","s0","v","_createClass","key","value","constructor"],"sources":["/home/samuel/experiment/3d/farm/frontend/node_modules/three-stdlib/geometries/DecalGeometry.js"],"sourcesContent":["import { BufferGeometry, Vector3, Matrix4, Float32BufferAttribute } from 'three';\n\n/**\n * You can use this geometry to create a decal mesh, that serves different kinds of purposes.\n * e.g. adding unique details to models, performing dynamic visual environmental changes or covering seams.\n *\n * Constructor parameter:\n *\n * mesh — Any mesh object\n * position — Position of the decal projector\n * orientation — Orientation of the decal projector\n * size — Size of the decal projector\n *\n * reference: http://blog.wolfire.com/2009/06/how-to-project-decals/\n *\n */\n\nclass DecalGeometry extends BufferGeometry {\n  constructor(mesh, position, orientation, size) {\n    super(); // buffers\n\n    const vertices = [];\n    const normals = [];\n    const uvs = []; // helpers\n\n    const plane = new Vector3(); // this matrix represents the transformation of the decal projector\n\n    const projectorMatrix = new Matrix4();\n    projectorMatrix.makeRotationFromEuler(orientation);\n    projectorMatrix.setPosition(position);\n    const projectorMatrixInverse = new Matrix4();\n    projectorMatrixInverse.copy(projectorMatrix).invert(); // generate buffers\n\n    generate(); // build geometry\n\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n    function generate() {\n      let i;\n      let decalVertices = [];\n      const vertex = new Vector3();\n      const normal = new Vector3(); // handle different geometry types\n\n      if (mesh.geometry.isGeometry === true) {\n        console.error('THREE.DecalGeometry no longer supports THREE.Geometry. Use BufferGeometry instead.');\n        return;\n      }\n\n      const geometry = mesh.geometry;\n      const positionAttribute = geometry.attributes.position;\n      const normalAttribute = geometry.attributes.normal; // first, create an array of 'DecalVertex' objects\n      // three consecutive 'DecalVertex' objects represent a single face\n      //\n      // this data structure will be later used to perform the clipping\n\n      if (geometry.index !== null) {\n        // indexed BufferGeometry\n        const index = geometry.index;\n\n        for (i = 0; i < index.count; i++) {\n          vertex.fromBufferAttribute(positionAttribute, index.getX(i));\n          normal.fromBufferAttribute(normalAttribute, index.getX(i));\n          pushDecalVertex(decalVertices, vertex, normal);\n        }\n      } else {\n        // non-indexed BufferGeometry\n        for (i = 0; i < positionAttribute.count; i++) {\n          vertex.fromBufferAttribute(positionAttribute, i);\n          normal.fromBufferAttribute(normalAttribute, i);\n          pushDecalVertex(decalVertices, vertex, normal);\n        }\n      } // second, clip the geometry so that it doesn't extend out from the projector\n\n\n      decalVertices = clipGeometry(decalVertices, plane.set(1, 0, 0));\n      decalVertices = clipGeometry(decalVertices, plane.set(-1, 0, 0));\n      decalVertices = clipGeometry(decalVertices, plane.set(0, 1, 0));\n      decalVertices = clipGeometry(decalVertices, plane.set(0, -1, 0));\n      decalVertices = clipGeometry(decalVertices, plane.set(0, 0, 1));\n      decalVertices = clipGeometry(decalVertices, plane.set(0, 0, -1)); // third, generate final vertices, normals and uvs\n\n      for (i = 0; i < decalVertices.length; i++) {\n        const decalVertex = decalVertices[i]; // create texture coordinates (we are still in projector space)\n\n        uvs.push(0.5 + decalVertex.position.x / size.x, 0.5 + decalVertex.position.y / size.y); // transform the vertex back to world space\n\n        decalVertex.position.applyMatrix4(projectorMatrix); // now create vertex and normal buffer data\n\n        vertices.push(decalVertex.position.x, decalVertex.position.y, decalVertex.position.z);\n        normals.push(decalVertex.normal.x, decalVertex.normal.y, decalVertex.normal.z);\n      }\n    }\n\n    function pushDecalVertex(decalVertices, vertex, normal) {\n      // transform the vertex to world space, then to projector space\n      vertex.applyMatrix4(mesh.matrixWorld);\n      vertex.applyMatrix4(projectorMatrixInverse);\n      normal.transformDirection(mesh.matrixWorld);\n      decalVertices.push(new DecalVertex(vertex.clone(), normal.clone()));\n    }\n\n    function clipGeometry(inVertices, plane) {\n      const outVertices = [];\n      const s = 0.5 * Math.abs(size.dot(plane)); // a single iteration clips one face,\n      // which consists of three consecutive 'DecalVertex' objects\n\n      for (let i = 0; i < inVertices.length; i += 3) {\n        let v1Out,\n            v2Out,\n            v3Out,\n            total = 0;\n        let nV1, nV2, nV3, nV4;\n        const d1 = inVertices[i + 0].position.dot(plane) - s;\n        const d2 = inVertices[i + 1].position.dot(plane) - s;\n        const d3 = inVertices[i + 2].position.dot(plane) - s;\n        v1Out = d1 > 0;\n        v2Out = d2 > 0;\n        v3Out = d3 > 0; // calculate, how many vertices of the face lie outside of the clipping plane\n\n        total = (v1Out ? 1 : 0) + (v2Out ? 1 : 0) + (v3Out ? 1 : 0);\n\n        switch (total) {\n          case 0:\n            {\n              // the entire face lies inside of the plane, no clipping needed\n              outVertices.push(inVertices[i]);\n              outVertices.push(inVertices[i + 1]);\n              outVertices.push(inVertices[i + 2]);\n              break;\n            }\n\n          case 1:\n            {\n              // one vertex lies outside of the plane, perform clipping\n              if (v1Out) {\n                nV1 = inVertices[i + 1];\n                nV2 = inVertices[i + 2];\n                nV3 = clip(inVertices[i], nV1, plane, s);\n                nV4 = clip(inVertices[i], nV2, plane, s);\n              }\n\n              if (v2Out) {\n                nV1 = inVertices[i];\n                nV2 = inVertices[i + 2];\n                nV3 = clip(inVertices[i + 1], nV1, plane, s);\n                nV4 = clip(inVertices[i + 1], nV2, plane, s);\n                outVertices.push(nV3);\n                outVertices.push(nV2.clone());\n                outVertices.push(nV1.clone());\n                outVertices.push(nV2.clone());\n                outVertices.push(nV3.clone());\n                outVertices.push(nV4);\n                break;\n              }\n\n              if (v3Out) {\n                nV1 = inVertices[i];\n                nV2 = inVertices[i + 1];\n                nV3 = clip(inVertices[i + 2], nV1, plane, s);\n                nV4 = clip(inVertices[i + 2], nV2, plane, s);\n              }\n\n              outVertices.push(nV1.clone());\n              outVertices.push(nV2.clone());\n              outVertices.push(nV3);\n              outVertices.push(nV4);\n              outVertices.push(nV3.clone());\n              outVertices.push(nV2.clone());\n              break;\n            }\n\n          case 2:\n            {\n              // two vertices lies outside of the plane, perform clipping\n              if (!v1Out) {\n                nV1 = inVertices[i].clone();\n                nV2 = clip(nV1, inVertices[i + 1], plane, s);\n                nV3 = clip(nV1, inVertices[i + 2], plane, s);\n                outVertices.push(nV1);\n                outVertices.push(nV2);\n                outVertices.push(nV3);\n              }\n\n              if (!v2Out) {\n                nV1 = inVertices[i + 1].clone();\n                nV2 = clip(nV1, inVertices[i + 2], plane, s);\n                nV3 = clip(nV1, inVertices[i], plane, s);\n                outVertices.push(nV1);\n                outVertices.push(nV2);\n                outVertices.push(nV3);\n              }\n\n              if (!v3Out) {\n                nV1 = inVertices[i + 2].clone();\n                nV2 = clip(nV1, inVertices[i], plane, s);\n                nV3 = clip(nV1, inVertices[i + 1], plane, s);\n                outVertices.push(nV1);\n                outVertices.push(nV2);\n                outVertices.push(nV3);\n              }\n\n              break;\n            }\n        }\n      }\n\n      return outVertices;\n    }\n\n    function clip(v0, v1, p, s) {\n      const d0 = v0.position.dot(p) - s;\n      const d1 = v1.position.dot(p) - s;\n      const s0 = d0 / (d0 - d1);\n      const v = new DecalVertex(new Vector3(v0.position.x + s0 * (v1.position.x - v0.position.x), v0.position.y + s0 * (v1.position.y - v0.position.y), v0.position.z + s0 * (v1.position.z - v0.position.z)), new Vector3(v0.normal.x + s0 * (v1.normal.x - v0.normal.x), v0.normal.y + s0 * (v1.normal.y - v0.normal.y), v0.normal.z + s0 * (v1.normal.z - v0.normal.z))); // need to clip more values (texture coordinates)? do it this way:\n      // intersectpoint.value = a.value + s * ( b.value - a.value );\n\n      return v;\n    }\n  }\n\n} // helper\n\n\nclass DecalVertex {\n  constructor(position, normal) {\n    this.position = position;\n    this.normal = normal;\n  }\n\n  clone() {\n    return new this.constructor(this.position.clone(), this.normal.clone());\n  }\n\n}\n\nexport { DecalGeometry, DecalVertex };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}