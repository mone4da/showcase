{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _createClass from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector3, BufferAttribute, BufferGeometry } from 'three';\nimport * as BufferGeometryUtils from '../utils/BufferGeometryUtils.js';\nimport { mergeVertices } from '../utils/BufferGeometryUtils.js';\nvar EdgeSplitModifier = /*#__PURE__*/_createClass(function EdgeSplitModifier() {\n  var _this = this;\n  _classCallCheck(this, EdgeSplitModifier);\n  _defineProperty(this, \"A\", new Vector3());\n  _defineProperty(this, \"B\", new Vector3());\n  _defineProperty(this, \"C\", new Vector3());\n  _defineProperty(this, \"positions\", []);\n  _defineProperty(this, \"normals\", new Float32Array());\n  _defineProperty(this, \"indexes\", []);\n  _defineProperty(this, \"pointToIndexMap\", []);\n  _defineProperty(this, \"splitIndexes\", []);\n  _defineProperty(this, \"oldNormals\", []);\n  _defineProperty(this, \"computeNormals\", function () {\n    _this.normals = new Float32Array(_this.indexes.length * 3);\n    for (var i = 0; i < _this.indexes.length; i += 3) {\n      var index = _this.indexes[i];\n      _this.A.set(_this.positions[3 * index], _this.positions[3 * index + 1], _this.positions[3 * index + 2]);\n      index = _this.indexes[i + 1];\n      _this.B.set(_this.positions[3 * index], _this.positions[3 * index + 1], _this.positions[3 * index + 2]);\n      index = _this.indexes[i + 2];\n      _this.C.set(_this.positions[3 * index], _this.positions[3 * index + 1], _this.positions[3 * index + 2]);\n      _this.C.sub(_this.B);\n      _this.A.sub(_this.B);\n      var normal = _this.C.cross(_this.A).normalize();\n      for (var j = 0; j < 3; j++) {\n        _this.normals[3 * (i + j)] = normal.x;\n        _this.normals[3 * (i + j) + 1] = normal.y;\n        _this.normals[3 * (i + j) + 2] = normal.z;\n      }\n    }\n  });\n  _defineProperty(this, \"mapPositionsToIndexes\", function () {\n    _this.pointToIndexMap = Array(_this.positions.length / 3);\n    for (var i = 0; i < _this.indexes.length; i++) {\n      var index = _this.indexes[i];\n      if (_this.pointToIndexMap[index] == null) {\n        _this.pointToIndexMap[index] = [];\n      }\n      _this.pointToIndexMap[index].push(i);\n    }\n  });\n  _defineProperty(this, \"edgeSplitToGroups\", function (indexes, cutOff, firstIndex) {\n    _this.A.set(_this.normals[3 * firstIndex], _this.normals[3 * firstIndex + 1], _this.normals[3 * firstIndex + 2]).normalize();\n    var result = {\n      splitGroup: [],\n      currentGroup: [firstIndex]\n    };\n    var _iterator = _createForOfIteratorHelper(indexes),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var j = _step.value;\n        if (j !== firstIndex) {\n          _this.B.set(_this.normals[3 * j], _this.normals[3 * j + 1], _this.normals[3 * j + 2]).normalize();\n          if (_this.B.dot(_this.A) < cutOff) {\n            result.splitGroup.push(j);\n          } else {\n            result.currentGroup.push(j);\n          }\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    return result;\n  });\n  _defineProperty(this, \"edgeSplit\", function (indexes, cutOff) {\n    var original = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    if (indexes.length === 0) return;\n    var groupResults = [];\n    var _iterator2 = _createForOfIteratorHelper(indexes),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var index = _step2.value;\n        groupResults.push(_this.edgeSplitToGroups(indexes, cutOff, index));\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    var result = groupResults[0];\n    for (var _i = 0, _groupResults = groupResults; _i < _groupResults.length; _i++) {\n      var groupResult = _groupResults[_i];\n      if (groupResult.currentGroup.length > result.currentGroup.length) {\n        result = groupResult;\n      }\n    }\n    if (original != null) {\n      _this.splitIndexes.push({\n        original: original,\n        indexes: result.currentGroup\n      });\n    }\n    if (result.splitGroup.length) {\n      _this.edgeSplit(result.splitGroup, cutOff, original || result.currentGroup[0]);\n    }\n  });\n  _defineProperty(this, \"modify\", function (geometry, cutOffAngle) {\n    var tryKeepNormals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var hadNormals = false;\n    if (geometry.attributes.normal) {\n      hadNormals = true;\n      geometry = geometry.clone();\n      if (tryKeepNormals === true && geometry.index !== null) {\n        _this.oldNormals = geometry.attributes.normal.array;\n      }\n      geometry.deleteAttribute('normal');\n    }\n    if (geometry.index == null) {\n      if (BufferGeometryUtils === undefined) {\n        throw 'THREE.EdgeSplitModifier relies on BufferGeometryUtils';\n      }\n      geometry = mergeVertices(geometry);\n    }\n    _this.indexes = geometry.index.array;\n    _this.positions = geometry.getAttribute('position').array;\n    _this.computeNormals();\n    _this.mapPositionsToIndexes();\n    _this.splitIndexes = [];\n    var _iterator3 = _createForOfIteratorHelper(_this.pointToIndexMap),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var vertexIndexes = _step3.value;\n        _this.edgeSplit(vertexIndexes, Math.cos(cutOffAngle) - 0.001);\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n    var newAttributes = {};\n    for (var _i2 = 0, _Object$keys = Object.keys(geometry.attributes); _i2 < _Object$keys.length; _i2++) {\n      var name = _Object$keys[_i2];\n      var oldAttribute = geometry.attributes[name]; // @ts-ignore\n\n      var newArray = new oldAttribute.array.constructor((_this.indexes.length + _this.splitIndexes.length) * oldAttribute.itemSize);\n      newArray.set(oldAttribute.array);\n      newAttributes[name] = new BufferAttribute(newArray, oldAttribute.itemSize, oldAttribute.normalized);\n    }\n    var newIndexes = new Uint32Array(_this.indexes.length);\n    newIndexes.set(_this.indexes);\n    for (var i = 0; i < _this.splitIndexes.length; i++) {\n      var split = _this.splitIndexes[i];\n      var index = _this.indexes[split.original];\n      for (var _i3 = 0, _Object$values = Object.values(newAttributes); _i3 < _Object$values.length; _i3++) {\n        var attribute = _Object$values[_i3];\n        for (var j = 0; j < attribute.itemSize; j++) {\n          // @ts-expect-error ArrayLike can't be mutated, but this works – https://github.com/three-types/three-ts-types/issues/35\n          attribute.array[(_this.indexes.length + i) * attribute.itemSize + j] = attribute.array[index * attribute.itemSize + j];\n        }\n      }\n      var _iterator4 = _createForOfIteratorHelper(split.indexes),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _j = _step4.value;\n          newIndexes[_j] = _this.indexes.length + i;\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n    geometry = new BufferGeometry();\n    geometry.setIndex(new BufferAttribute(newIndexes, 1));\n    for (var _i4 = 0, _Object$keys2 = Object.keys(newAttributes); _i4 < _Object$keys2.length; _i4++) {\n      var _name = _Object$keys2[_i4];\n      geometry.setAttribute(_name, newAttributes[_name]);\n    }\n    if (hadNormals) {\n      geometry.computeVertexNormals();\n      if (_this.oldNormals !== null) {\n        var changedNormals = new Array(_this.oldNormals.length / 3).fill(false);\n        var _iterator5 = _createForOfIteratorHelper(_this.splitIndexes),\n          _step5;\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var splitData = _step5.value;\n            changedNormals[splitData.original] = true;\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n        for (var _i5 = 0; _i5 < changedNormals.length; _i5++) {\n          if (changedNormals[_i5] === false) {\n            for (var _j2 = 0; _j2 < 3; _j2++) {\n              // @ts-expect-error ArrayLike can't be mutated, but this works – https://github.com/three-types/three-ts-types/issues/35\n              geometry.attributes.normal.array[3 * _i5 + _j2] = _this.oldNormals[3 * _i5 + _j2];\n            }\n          }\n        }\n      }\n    }\n    return geometry;\n  });\n});\nexport { EdgeSplitModifier };","map":{"version":3,"names":["_defineProperty","Vector3","BufferAttribute","BufferGeometry","BufferGeometryUtils","mergeVertices","EdgeSplitModifier","_createClass","_this","_classCallCheck","Float32Array","normals","indexes","length","i","index","A","set","positions","B","C","sub","normal","cross","normalize","j","x","y","z","pointToIndexMap","Array","push","cutOff","firstIndex","result","splitGroup","currentGroup","_iterator","_createForOfIteratorHelper","_step","s","n","done","value","dot","err","e","f","original","arguments","undefined","groupResults","_iterator2","_step2","edgeSplitToGroups","_i","_groupResults","groupResult","splitIndexes","edgeSplit","geometry","cutOffAngle","tryKeepNormals","hadNormals","attributes","clone","oldNormals","array","deleteAttribute","getAttribute","computeNormals","mapPositionsToIndexes","_iterator3","_step3","vertexIndexes","Math","cos","newAttributes","_i2","_Object$keys","Object","keys","name","oldAttribute","newArray","constructor","itemSize","normalized","newIndexes","Uint32Array","split","_i3","_Object$values","values","attribute","_iterator4","_step4","setIndex","_i4","_Object$keys2","setAttribute","computeVertexNormals","changedNormals","fill","_iterator5","_step5","splitData"],"sources":["/home/samuel/experiment/3d/farm/frontend/node_modules/three-stdlib/modifiers/EdgeSplitModifier.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector3, BufferAttribute, BufferGeometry } from 'three';\nimport * as BufferGeometryUtils from '../utils/BufferGeometryUtils.js';\nimport { mergeVertices } from '../utils/BufferGeometryUtils.js';\n\nclass EdgeSplitModifier {\n  constructor() {\n    _defineProperty(this, \"A\", new Vector3());\n\n    _defineProperty(this, \"B\", new Vector3());\n\n    _defineProperty(this, \"C\", new Vector3());\n\n    _defineProperty(this, \"positions\", []);\n\n    _defineProperty(this, \"normals\", new Float32Array());\n\n    _defineProperty(this, \"indexes\", []);\n\n    _defineProperty(this, \"pointToIndexMap\", []);\n\n    _defineProperty(this, \"splitIndexes\", []);\n\n    _defineProperty(this, \"oldNormals\", []);\n\n    _defineProperty(this, \"computeNormals\", () => {\n      this.normals = new Float32Array(this.indexes.length * 3);\n\n      for (let i = 0; i < this.indexes.length; i += 3) {\n        let index = this.indexes[i];\n        this.A.set(this.positions[3 * index], this.positions[3 * index + 1], this.positions[3 * index + 2]);\n        index = this.indexes[i + 1];\n        this.B.set(this.positions[3 * index], this.positions[3 * index + 1], this.positions[3 * index + 2]);\n        index = this.indexes[i + 2];\n        this.C.set(this.positions[3 * index], this.positions[3 * index + 1], this.positions[3 * index + 2]);\n        this.C.sub(this.B);\n        this.A.sub(this.B);\n        const normal = this.C.cross(this.A).normalize();\n\n        for (let j = 0; j < 3; j++) {\n          this.normals[3 * (i + j)] = normal.x;\n          this.normals[3 * (i + j) + 1] = normal.y;\n          this.normals[3 * (i + j) + 2] = normal.z;\n        }\n      }\n    });\n\n    _defineProperty(this, \"mapPositionsToIndexes\", () => {\n      this.pointToIndexMap = Array(this.positions.length / 3);\n\n      for (let i = 0; i < this.indexes.length; i++) {\n        const index = this.indexes[i];\n\n        if (this.pointToIndexMap[index] == null) {\n          this.pointToIndexMap[index] = [];\n        }\n\n        this.pointToIndexMap[index].push(i);\n      }\n    });\n\n    _defineProperty(this, \"edgeSplitToGroups\", (indexes, cutOff, firstIndex) => {\n      this.A.set(this.normals[3 * firstIndex], this.normals[3 * firstIndex + 1], this.normals[3 * firstIndex + 2]).normalize();\n      const result = {\n        splitGroup: [],\n        currentGroup: [firstIndex]\n      };\n\n      for (let j of indexes) {\n        if (j !== firstIndex) {\n          this.B.set(this.normals[3 * j], this.normals[3 * j + 1], this.normals[3 * j + 2]).normalize();\n\n          if (this.B.dot(this.A) < cutOff) {\n            result.splitGroup.push(j);\n          } else {\n            result.currentGroup.push(j);\n          }\n        }\n      }\n\n      return result;\n    });\n\n    _defineProperty(this, \"edgeSplit\", (indexes, cutOff, original = null) => {\n      if (indexes.length === 0) return;\n      const groupResults = [];\n\n      for (let index of indexes) {\n        groupResults.push(this.edgeSplitToGroups(indexes, cutOff, index));\n      }\n\n      let result = groupResults[0];\n\n      for (let groupResult of groupResults) {\n        if (groupResult.currentGroup.length > result.currentGroup.length) {\n          result = groupResult;\n        }\n      }\n\n      if (original != null) {\n        this.splitIndexes.push({\n          original,\n          indexes: result.currentGroup\n        });\n      }\n\n      if (result.splitGroup.length) {\n        this.edgeSplit(result.splitGroup, cutOff, original || result.currentGroup[0]);\n      }\n    });\n\n    _defineProperty(this, \"modify\", (geometry, cutOffAngle, tryKeepNormals = true) => {\n      let hadNormals = false;\n\n      if (geometry.attributes.normal) {\n        hadNormals = true;\n        geometry = geometry.clone();\n\n        if (tryKeepNormals === true && geometry.index !== null) {\n          this.oldNormals = geometry.attributes.normal.array;\n        }\n\n        geometry.deleteAttribute('normal');\n      }\n\n      if (geometry.index == null) {\n        if (BufferGeometryUtils === undefined) {\n          throw 'THREE.EdgeSplitModifier relies on BufferGeometryUtils';\n        }\n\n        geometry = mergeVertices(geometry);\n      }\n\n      this.indexes = geometry.index.array;\n      this.positions = geometry.getAttribute('position').array;\n      this.computeNormals();\n      this.mapPositionsToIndexes();\n      this.splitIndexes = [];\n\n      for (let vertexIndexes of this.pointToIndexMap) {\n        this.edgeSplit(vertexIndexes, Math.cos(cutOffAngle) - 0.001);\n      }\n\n      const newAttributes = {};\n\n      for (let name of Object.keys(geometry.attributes)) {\n        const oldAttribute = geometry.attributes[name]; // @ts-ignore\n\n        const newArray = new oldAttribute.array.constructor((this.indexes.length + this.splitIndexes.length) * oldAttribute.itemSize);\n        newArray.set(oldAttribute.array);\n        newAttributes[name] = new BufferAttribute(newArray, oldAttribute.itemSize, oldAttribute.normalized);\n      }\n\n      const newIndexes = new Uint32Array(this.indexes.length);\n      newIndexes.set(this.indexes);\n\n      for (let i = 0; i < this.splitIndexes.length; i++) {\n        const split = this.splitIndexes[i];\n        const index = this.indexes[split.original];\n\n        for (let attribute of Object.values(newAttributes)) {\n          for (let j = 0; j < attribute.itemSize; j++) {\n            // @ts-expect-error ArrayLike can't be mutated, but this works – https://github.com/three-types/three-ts-types/issues/35\n            attribute.array[(this.indexes.length + i) * attribute.itemSize + j] = attribute.array[index * attribute.itemSize + j];\n          }\n        }\n\n        for (let j of split.indexes) {\n          newIndexes[j] = this.indexes.length + i;\n        }\n      }\n\n      geometry = new BufferGeometry();\n      geometry.setIndex(new BufferAttribute(newIndexes, 1));\n\n      for (let name of Object.keys(newAttributes)) {\n        geometry.setAttribute(name, newAttributes[name]);\n      }\n\n      if (hadNormals) {\n        geometry.computeVertexNormals();\n\n        if (this.oldNormals !== null) {\n          const changedNormals = new Array(this.oldNormals.length / 3).fill(false);\n\n          for (let splitData of this.splitIndexes) changedNormals[splitData.original] = true;\n\n          for (let i = 0; i < changedNormals.length; i++) {\n            if (changedNormals[i] === false) {\n              for (let j = 0; j < 3; j++) {\n                // @ts-expect-error ArrayLike can't be mutated, but this works – https://github.com/three-types/three-ts-types/issues/35\n                geometry.attributes.normal.array[3 * i + j] = this.oldNormals[3 * i + j];\n              }\n            }\n          }\n        }\n      }\n\n      return geometry;\n    });\n  }\n\n}\n\nexport { EdgeSplitModifier };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}