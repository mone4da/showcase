{"ast":null,"code":"import _assertThisInitialized from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _classCallCheck from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, LoaderUtils, FileLoader, Vector3, Vector2, TextureLoader, Scene, Object3D, Group, SphereGeometry, MeshBasicMaterial, BackSide, Mesh, PointsMaterial, Points, LineBasicMaterial, LineSegments, FrontSide, DoubleSide, MeshPhongMaterial, Color, DataTexture, BufferGeometry, Float32BufferAttribute, BoxGeometry, ConeGeometry, CylinderGeometry, Quaternion, ShapeUtils, BufferAttribute, RepeatWrapping, ClampToEdgeWrapping } from 'three';\nimport { createToken, Lexer, CstParser } from 'chevrotain';\nvar VRMLLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(VRMLLoader, _Loader);\n  var _super = _createSuper(VRMLLoader);\n  function VRMLLoader(manager) {\n    _classCallCheck(this, VRMLLoader);\n    return _super.call(this, manager);\n  }\n  _createClass(VRMLLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var path = scope.path === '' ? LoaderUtils.extractUrlBase(url) : scope.path;\n      var loader = new FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (text) {\n        try {\n          onLoad(scope.parse(text, path));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(data, path) {\n      var nodeMap = {};\n      function generateVRMLTree(data) {\n        // create lexer, parser and visitor\n        var tokenData = createTokens();\n        var lexer = new VRMLLexer(tokenData.tokens);\n        var parser = new VRMLParser(tokenData.tokenVocabulary);\n        var visitor = createVisitor(parser.getBaseCstVisitorConstructor()); // lexing\n\n        var lexingResult = lexer.lex(data);\n        parser.input = lexingResult.tokens; // parsing\n\n        var cstOutput = parser.vrml();\n        if (parser.errors.length > 0) {\n          console.error(parser.errors);\n          throw Error('THREE.VRMLLoader: Parsing errors detected.');\n        } // actions\n\n        var ast = visitor.visit(cstOutput);\n        return ast;\n      }\n      function createTokens() {\n        // from http://gun.teipir.gr/VRML-amgem/spec/part1/concepts.html#SyntaxBasics\n        var RouteIdentifier = createToken({\n          name: 'RouteIdentifier',\n          pattern: /[^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*[\\.][^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*/\n        });\n        var Identifier = createToken({\n          name: 'Identifier',\n          pattern: /[^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*/,\n          longer_alt: RouteIdentifier\n        }); // from http://gun.teipir.gr/VRML-amgem/spec/part1/nodesRef.html\n\n        var nodeTypes = ['Anchor', 'Billboard', 'Collision', 'Group', 'Transform',\n        // grouping nodes\n        'Inline', 'LOD', 'Switch',\n        // special groups\n        'AudioClip', 'DirectionalLight', 'PointLight', 'Script', 'Shape', 'Sound', 'SpotLight', 'WorldInfo',\n        // common nodes\n        'CylinderSensor', 'PlaneSensor', 'ProximitySensor', 'SphereSensor', 'TimeSensor', 'TouchSensor', 'VisibilitySensor',\n        // sensors\n        'Box', 'Cone', 'Cylinder', 'ElevationGrid', 'Extrusion', 'IndexedFaceSet', 'IndexedLineSet', 'PointSet', 'Sphere',\n        // geometries\n        'Color', 'Coordinate', 'Normal', 'TextureCoordinate',\n        // geometric properties\n        'Appearance', 'FontStyle', 'ImageTexture', 'Material', 'MovieTexture', 'PixelTexture', 'TextureTransform',\n        // appearance\n        'ColorInterpolator', 'CoordinateInterpolator', 'NormalInterpolator', 'OrientationInterpolator', 'PositionInterpolator', 'ScalarInterpolator',\n        // interpolators\n        'Background', 'Fog', 'NavigationInfo', 'Viewpoint',\n        // bindable nodes\n        'Text' // Text must be placed at the end of the regex so there are no matches for TextureTransform and TextureCoordinate\n        ]; //\n\n        var Version = createToken({\n          name: 'Version',\n          pattern: /#VRML.*/,\n          longer_alt: Identifier\n        });\n        var NodeName = createToken({\n          name: 'NodeName',\n          pattern: new RegExp(nodeTypes.join('|')),\n          longer_alt: Identifier\n        });\n        var DEF = createToken({\n          name: 'DEF',\n          pattern: /DEF/,\n          longer_alt: Identifier\n        });\n        var USE = createToken({\n          name: 'USE',\n          pattern: /USE/,\n          longer_alt: Identifier\n        });\n        var ROUTE = createToken({\n          name: 'ROUTE',\n          pattern: /ROUTE/,\n          longer_alt: Identifier\n        });\n        var TO = createToken({\n          name: 'TO',\n          pattern: /TO/,\n          longer_alt: Identifier\n        }); //\n\n        var StringLiteral = createToken({\n          name: 'StringLiteral',\n          pattern: /\"(?:[^\\\\\"\\n\\r]|\\\\[bfnrtv\"\\\\/]|\\\\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])*\"/\n        });\n        var HexLiteral = createToken({\n          name: 'HexLiteral',\n          pattern: /0[xX][0-9a-fA-F]+/\n        });\n        var NumberLiteral = createToken({\n          name: 'NumberLiteral',\n          pattern: /[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?/\n        });\n        var TrueLiteral = createToken({\n          name: 'TrueLiteral',\n          pattern: /TRUE/\n        });\n        var FalseLiteral = createToken({\n          name: 'FalseLiteral',\n          pattern: /FALSE/\n        });\n        var NullLiteral = createToken({\n          name: 'NullLiteral',\n          pattern: /NULL/\n        });\n        var LSquare = createToken({\n          name: 'LSquare',\n          pattern: /\\[/\n        });\n        var RSquare = createToken({\n          name: 'RSquare',\n          pattern: /]/\n        });\n        var LCurly = createToken({\n          name: 'LCurly',\n          pattern: /{/\n        });\n        var RCurly = createToken({\n          name: 'RCurly',\n          pattern: /}/\n        });\n        var Comment = createToken({\n          name: 'Comment',\n          pattern: /#.*/,\n          group: Lexer.SKIPPED // eslint-disable-line no-undef\n        }); // commas, blanks, tabs, newlines and carriage returns are whitespace characters wherever they appear outside of string fields\n\n        var WhiteSpace = createToken({\n          name: 'WhiteSpace',\n          pattern: /[ ,\\s]/,\n          group: Lexer.SKIPPED // eslint-disable-line no-undef\n        });\n\n        var tokens = [WhiteSpace,\n        // keywords appear before the Identifier\n        NodeName, DEF, USE, ROUTE, TO, TrueLiteral, FalseLiteral, NullLiteral,\n        // the Identifier must appear after the keywords because all keywords are valid identifiers\n        Version, Identifier, RouteIdentifier, StringLiteral, HexLiteral, NumberLiteral, LSquare, RSquare, LCurly, RCurly, Comment];\n        var tokenVocabulary = {};\n        for (var i = 0, l = tokens.length; i < l; i++) {\n          var token = tokens[i];\n          tokenVocabulary[token.name] = token;\n        }\n        return {\n          tokens: tokens,\n          tokenVocabulary: tokenVocabulary\n        };\n      }\n      function createVisitor(BaseVRMLVisitor) {\n        // the visitor is created dynmaically based on the given base class\n        function VRMLToASTVisitor() {\n          BaseVRMLVisitor.call(this);\n          this.validateVisitor();\n        }\n        VRMLToASTVisitor.prototype = Object.assign(Object.create(BaseVRMLVisitor.prototype), {\n          constructor: VRMLToASTVisitor,\n          vrml: function vrml(ctx) {\n            var data = {\n              version: this.visit(ctx.version),\n              nodes: [],\n              routes: []\n            };\n            for (var i = 0, l = ctx.node.length; i < l; i++) {\n              var node = ctx.node[i];\n              data.nodes.push(this.visit(node));\n            }\n            if (ctx.route) {\n              for (var _i = 0, _l = ctx.route.length; _i < _l; _i++) {\n                var route = ctx.route[_i];\n                data.routes.push(this.visit(route));\n              }\n            }\n            return data;\n          },\n          version: function version(ctx) {\n            return ctx.Version[0].image;\n          },\n          node: function node(ctx) {\n            var data = {\n              name: ctx.NodeName[0].image,\n              fields: []\n            };\n            if (ctx.field) {\n              for (var i = 0, l = ctx.field.length; i < l; i++) {\n                var field = ctx.field[i];\n                data.fields.push(this.visit(field));\n              }\n            } // DEF\n\n            if (ctx.def) {\n              data.DEF = this.visit(ctx.def[0]);\n            }\n            return data;\n          },\n          field: function field(ctx) {\n            var data = {\n              name: ctx.Identifier[0].image,\n              type: null,\n              values: null\n            };\n            var result; // SFValue\n\n            if (ctx.singleFieldValue) {\n              result = this.visit(ctx.singleFieldValue[0]);\n            } // MFValue\n\n            if (ctx.multiFieldValue) {\n              result = this.visit(ctx.multiFieldValue[0]);\n            }\n            data.type = result.type;\n            data.values = result.values;\n            return data;\n          },\n          def: function def(ctx) {\n            return (ctx.Identifier || ctx.NodeName)[0].image;\n          },\n          use: function use(ctx) {\n            return {\n              USE: (ctx.Identifier || ctx.NodeName)[0].image\n            };\n          },\n          singleFieldValue: function singleFieldValue(ctx) {\n            return processField(this, ctx);\n          },\n          multiFieldValue: function multiFieldValue(ctx) {\n            return processField(this, ctx);\n          },\n          route: function route(ctx) {\n            var data = {\n              FROM: ctx.RouteIdentifier[0].image,\n              TO: ctx.RouteIdentifier[1].image\n            };\n            return data;\n          }\n        });\n        function processField(scope, ctx) {\n          var field = {\n            type: null,\n            values: []\n          };\n          if (ctx.node) {\n            field.type = 'node';\n            for (var i = 0, l = ctx.node.length; i < l; i++) {\n              var node = ctx.node[i];\n              field.values.push(scope.visit(node));\n            }\n          }\n          if (ctx.use) {\n            field.type = 'use';\n            for (var _i2 = 0, _l2 = ctx.use.length; _i2 < _l2; _i2++) {\n              var use = ctx.use[_i2];\n              field.values.push(scope.visit(use));\n            }\n          }\n          if (ctx.StringLiteral) {\n            field.type = 'string';\n            for (var _i3 = 0, _l3 = ctx.StringLiteral.length; _i3 < _l3; _i3++) {\n              var stringLiteral = ctx.StringLiteral[_i3];\n              field.values.push(stringLiteral.image.replace(/'|\"/g, ''));\n            }\n          }\n          if (ctx.NumberLiteral) {\n            field.type = 'number';\n            for (var _i4 = 0, _l4 = ctx.NumberLiteral.length; _i4 < _l4; _i4++) {\n              var numberLiteral = ctx.NumberLiteral[_i4];\n              field.values.push(parseFloat(numberLiteral.image));\n            }\n          }\n          if (ctx.HexLiteral) {\n            field.type = 'hex';\n            for (var _i5 = 0, _l5 = ctx.HexLiteral.length; _i5 < _l5; _i5++) {\n              var hexLiteral = ctx.HexLiteral[_i5];\n              field.values.push(hexLiteral.image);\n            }\n          }\n          if (ctx.TrueLiteral) {\n            field.type = 'boolean';\n            for (var _i6 = 0, _l6 = ctx.TrueLiteral.length; _i6 < _l6; _i6++) {\n              var trueLiteral = ctx.TrueLiteral[_i6];\n              if (trueLiteral.image === 'TRUE') field.values.push(true);\n            }\n          }\n          if (ctx.FalseLiteral) {\n            field.type = 'boolean';\n            for (var _i7 = 0, _l7 = ctx.FalseLiteral.length; _i7 < _l7; _i7++) {\n              var falseLiteral = ctx.FalseLiteral[_i7];\n              if (falseLiteral.image === 'FALSE') field.values.push(false);\n            }\n          }\n          if (ctx.NullLiteral) {\n            field.type = 'null';\n            ctx.NullLiteral.forEach(function () {\n              field.values.push(null);\n            });\n          }\n          return field;\n        }\n        return new VRMLToASTVisitor();\n      }\n      function parseTree(tree) {\n        // console.log( JSON.stringify( tree, null, 2 ) );\n        var nodes = tree.nodes;\n        var scene = new Scene(); // first iteration: build nodemap based on DEF statements\n\n        for (var i = 0, l = nodes.length; i < l; i++) {\n          var node = nodes[i];\n          buildNodeMap(node);\n        } // second iteration: build nodes\n\n        for (var _i8 = 0, _l8 = nodes.length; _i8 < _l8; _i8++) {\n          var _node = nodes[_i8];\n          var object = getNode(_node);\n          if (object instanceof Object3D) scene.add(object);\n          if (_node.name === 'WorldInfo') scene.userData.worldInfo = object;\n        }\n        return scene;\n      }\n      function buildNodeMap(node) {\n        if (node.DEF) {\n          nodeMap[node.DEF] = node;\n        }\n        var fields = node.fields;\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          if (field.type === 'node') {\n            var fieldValues = field.values;\n            for (var j = 0, jl = fieldValues.length; j < jl; j++) {\n              buildNodeMap(fieldValues[j]);\n            }\n          }\n        }\n      }\n      function getNode(node) {\n        // handle case where a node refers to a different one\n        if (node.USE) {\n          return resolveUSE(node.USE);\n        }\n        if (node.build !== undefined) return node.build;\n        node.build = buildNode(node);\n        return node.build;\n      } // node builder\n\n      function buildNode(node) {\n        var nodeName = node.name;\n        var build;\n        switch (nodeName) {\n          case 'Group':\n          case 'Transform':\n          case 'Collision':\n            build = buildGroupingNode(node);\n            break;\n          case 'Background':\n            build = buildBackgroundNode(node);\n            break;\n          case 'Shape':\n            build = buildShapeNode(node);\n            break;\n          case 'Appearance':\n            build = buildAppearanceNode(node);\n            break;\n          case 'Material':\n            build = buildMaterialNode(node);\n            break;\n          case 'ImageTexture':\n            build = buildImageTextureNode(node);\n            break;\n          case 'PixelTexture':\n            build = buildPixelTextureNode(node);\n            break;\n          case 'TextureTransform':\n            build = buildTextureTransformNode(node);\n            break;\n          case 'IndexedFaceSet':\n            build = buildIndexedFaceSetNode(node);\n            break;\n          case 'IndexedLineSet':\n            build = buildIndexedLineSetNode(node);\n            break;\n          case 'PointSet':\n            build = buildPointSetNode(node);\n            break;\n          case 'Box':\n            build = buildBoxNode(node);\n            break;\n          case 'Cone':\n            build = buildConeNode(node);\n            break;\n          case 'Cylinder':\n            build = buildCylinderNode(node);\n            break;\n          case 'Sphere':\n            build = buildSphereNode(node);\n            break;\n          case 'ElevationGrid':\n            build = buildElevationGridNode(node);\n            break;\n          case 'Extrusion':\n            build = buildExtrusionNode(node);\n            break;\n          case 'Color':\n          case 'Coordinate':\n          case 'Normal':\n          case 'TextureCoordinate':\n            build = buildGeometricNode(node);\n            break;\n          case 'WorldInfo':\n            build = buildWorldInfoNode(node);\n            break;\n          case 'Anchor':\n          case 'Billboard':\n          case 'Inline':\n          case 'LOD':\n          case 'Switch':\n          case 'AudioClip':\n          case 'DirectionalLight':\n          case 'PointLight':\n          case 'Script':\n          case 'Sound':\n          case 'SpotLight':\n          case 'CylinderSensor':\n          case 'PlaneSensor':\n          case 'ProximitySensor':\n          case 'SphereSensor':\n          case 'TimeSensor':\n          case 'TouchSensor':\n          case 'VisibilitySensor':\n          case 'Text':\n          case 'FontStyle':\n          case 'MovieTexture':\n          case 'ColorInterpolator':\n          case 'CoordinateInterpolator':\n          case 'NormalInterpolator':\n          case 'OrientationInterpolator':\n          case 'PositionInterpolator':\n          case 'ScalarInterpolator':\n          case 'Fog':\n          case 'NavigationInfo':\n          case 'Viewpoint':\n            // node not supported yet\n            break;\n          default:\n            console.warn('THREE.VRMLLoader: Unknown node:', nodeName);\n            break;\n        }\n        if (build !== undefined && node.DEF !== undefined && build.hasOwnProperty('name') === true) {\n          build.name = node.DEF;\n        }\n        return build;\n      }\n      function buildGroupingNode(node) {\n        var object = new Group(); //\n\n        var fields = node.fields;\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n          switch (fieldName) {\n            case 'bboxCenter':\n              // field not supported\n              break;\n            case 'bboxSize':\n              // field not supported\n              break;\n            case 'center':\n              // field not supported\n              break;\n            case 'children':\n              parseFieldChildren(fieldValues, object);\n              break;\n            case 'collide':\n              // field not supported\n              break;\n            case 'rotation':\n              var axis = new Vector3(fieldValues[0], fieldValues[1], fieldValues[2]);\n              var angle = fieldValues[3];\n              object.quaternion.setFromAxisAngle(axis, angle);\n              break;\n            case 'scale':\n              object.scale.set(fieldValues[0], fieldValues[1], fieldValues[2]);\n              break;\n            case 'scaleOrientation':\n              // field not supported\n              break;\n            case 'translation':\n              object.position.set(fieldValues[0], fieldValues[1], fieldValues[2]);\n              break;\n            case 'proxy':\n              // field not supported\n              break;\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n        return object;\n      }\n      function buildBackgroundNode(node) {\n        var group = new Group();\n        var groundAngle, groundColor;\n        var skyAngle, skyColor;\n        var fields = node.fields;\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n          switch (fieldName) {\n            case 'groundAngle':\n              groundAngle = fieldValues;\n              break;\n            case 'groundColor':\n              groundColor = fieldValues;\n              break;\n            case 'backUrl':\n              // field not supported\n              break;\n            case 'bottomUrl':\n              // field not supported\n              break;\n            case 'frontUrl':\n              // field not supported\n              break;\n            case 'leftUrl':\n              // field not supported\n              break;\n            case 'rightUrl':\n              // field not supported\n              break;\n            case 'topUrl':\n              // field not supported\n              break;\n            case 'skyAngle':\n              skyAngle = fieldValues;\n              break;\n            case 'skyColor':\n              skyColor = fieldValues;\n              break;\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n        var radius = 10000; // sky\n\n        if (skyColor) {\n          var skyGeometry = new SphereGeometry(radius, 32, 16);\n          var skyMaterial = new MeshBasicMaterial({\n            fog: false,\n            side: BackSide,\n            depthWrite: false,\n            depthTest: false\n          });\n          if (skyColor.length > 3) {\n            paintFaces(skyGeometry, radius, skyAngle, toColorArray(skyColor), true);\n            skyMaterial.vertexColors = true;\n          } else {\n            skyMaterial.color.setRGB(skyColor[0], skyColor[1], skyColor[2]);\n          }\n          var sky = new Mesh(skyGeometry, skyMaterial);\n          group.add(sky);\n        } // ground\n\n        if (groundColor) {\n          if (groundColor.length > 0) {\n            var groundGeometry = new SphereGeometry(radius, 32, 16, 0, 2 * Math.PI, 0.5 * Math.PI, 1.5 * Math.PI);\n            var groundMaterial = new MeshBasicMaterial({\n              fog: false,\n              side: BackSide,\n              vertexColors: true,\n              depthWrite: false,\n              depthTest: false\n            });\n            paintFaces(groundGeometry, radius, groundAngle, toColorArray(groundColor), false);\n            var ground = new Mesh(groundGeometry, groundMaterial);\n            group.add(ground);\n          }\n        } // render background group first\n\n        group.renderOrder = -Infinity;\n        return group;\n      }\n      function buildShapeNode(node) {\n        var fields = node.fields; // if the appearance field is NULL or unspecified, lighting is off and the unlit object color is (0, 0, 0)\n\n        var material = new MeshBasicMaterial({\n          color: 0x000000\n        });\n        var geometry;\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n          switch (fieldName) {\n            case 'appearance':\n              if (fieldValues[0] !== null) {\n                material = getNode(fieldValues[0]);\n              }\n              break;\n            case 'geometry':\n              if (fieldValues[0] !== null) {\n                geometry = getNode(fieldValues[0]);\n              }\n              break;\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        } // build 3D object\n\n        var object;\n        if (geometry && geometry.attributes.position) {\n          var type = geometry._type;\n          if (type === 'points') {\n            // points\n            var pointsMaterial = new PointsMaterial({\n              color: 0xffffff\n            });\n            if (geometry.attributes.color !== undefined) {\n              pointsMaterial.vertexColors = true;\n            } else {\n              // if the color field is NULL and there is a material defined for the appearance affecting this PointSet, then use the emissiveColor of the material to draw the points\n              if (material.isMeshPhongMaterial) {\n                pointsMaterial.color.copy(material.emissive);\n              }\n            }\n            object = new Points(geometry, pointsMaterial);\n          } else if (type === 'line') {\n            // lines\n            var lineMaterial = new LineBasicMaterial({\n              color: 0xffffff\n            });\n            if (geometry.attributes.color !== undefined) {\n              lineMaterial.vertexColors = true;\n            } else {\n              // if the color field is NULL and there is a material defined for the appearance affecting this IndexedLineSet, then use the emissiveColor of the material to draw the lines\n              if (material.isMeshPhongMaterial) {\n                lineMaterial.color.copy(material.emissive);\n              }\n            }\n            object = new LineSegments(geometry, lineMaterial);\n          } else {\n            // consider meshes\n            // check \"solid\" hint (it's placed in the geometry but affects the material)\n            if (geometry._solid !== undefined) {\n              material.side = geometry._solid ? FrontSide : DoubleSide;\n            } // check for vertex colors\n\n            if (geometry.attributes.color !== undefined) {\n              material.vertexColors = true;\n            }\n            object = new Mesh(geometry, material);\n          }\n        } else {\n          object = new Object3D(); // if the geometry field is NULL or no vertices are defined the object is not drawn\n\n          object.visible = false;\n        }\n        return object;\n      }\n      function buildAppearanceNode(node) {\n        var material = new MeshPhongMaterial();\n        var transformData;\n        var fields = node.fields;\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n          switch (fieldName) {\n            case 'material':\n              if (fieldValues[0] !== null) {\n                var materialData = getNode(fieldValues[0]);\n                if (materialData.diffuseColor) material.color.copy(materialData.diffuseColor);\n                if (materialData.emissiveColor) material.emissive.copy(materialData.emissiveColor);\n                if (materialData.shininess) material.shininess = materialData.shininess;\n                if (materialData.specularColor) material.specular.copy(materialData.specularColor);\n                if (materialData.transparency) material.opacity = 1 - materialData.transparency;\n                if (materialData.transparency > 0) material.transparent = true;\n              } else {\n                // if the material field is NULL or unspecified, lighting is off and the unlit object color is (0, 0, 0)\n                material = new MeshBasicMaterial({\n                  color: 0x000000\n                });\n              }\n              break;\n            case 'texture':\n              var textureNode = fieldValues[0];\n              if (textureNode !== null) {\n                if (textureNode.name === 'ImageTexture' || textureNode.name === 'PixelTexture') {\n                  material.map = getNode(textureNode);\n                }\n              }\n              break;\n            case 'textureTransform':\n              if (fieldValues[0] !== null) {\n                transformData = getNode(fieldValues[0]);\n              }\n              break;\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        } // only apply texture transform data if a texture was defined\n\n        if (material.map) {\n          // respect VRML lighting model\n          if (material.map.__type) {\n            switch (material.map.__type) {\n              case TEXTURE_TYPE.INTENSITY_ALPHA:\n                material.opacity = 1; // ignore transparency\n\n                break;\n              case TEXTURE_TYPE.RGB:\n                material.color.set(0xffffff); // ignore material color\n\n                break;\n              case TEXTURE_TYPE.RGBA:\n                material.color.set(0xffffff); // ignore material color\n\n                material.opacity = 1; // ignore transparency\n\n                break;\n            }\n            delete material.map.__type;\n          } // apply texture transform\n\n          if (transformData) {\n            material.map.center.copy(transformData.center);\n            material.map.rotation = transformData.rotation;\n            material.map.repeat.copy(transformData.scale);\n            material.map.offset.copy(transformData.translation);\n          }\n        }\n        return material;\n      }\n      function buildMaterialNode(node) {\n        var materialData = {};\n        var fields = node.fields;\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n          switch (fieldName) {\n            case 'ambientIntensity':\n              // field not supported\n              break;\n            case 'diffuseColor':\n              materialData.diffuseColor = new Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n              break;\n            case 'emissiveColor':\n              materialData.emissiveColor = new Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n              break;\n            case 'shininess':\n              materialData.shininess = fieldValues[0];\n              break;\n            case 'specularColor':\n              materialData.emissiveColor = new Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n              break;\n            case 'transparency':\n              materialData.transparency = fieldValues[0];\n              break;\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n        return materialData;\n      }\n      function parseHexColor(hex, textureType, color) {\n        var value;\n        switch (textureType) {\n          case TEXTURE_TYPE.INTENSITY:\n            // Intensity texture: A one-component image specifies one-byte hexadecimal or integer values representing the intensity of the image\n            value = parseInt(hex);\n            color.r = value;\n            color.g = value;\n            color.b = value;\n            color.a = 1;\n            break;\n          case TEXTURE_TYPE.INTENSITY_ALPHA:\n            // Intensity+Alpha texture: A two-component image specifies the intensity in the first (high) byte and the alpha opacity in the second (low) byte.\n            value = parseInt('0x' + hex.substring(2, 4));\n            color.r = value;\n            color.g = value;\n            color.b = value;\n            color.a = parseInt('0x' + hex.substring(4, 6));\n            break;\n          case TEXTURE_TYPE.RGB:\n            // RGB texture: Pixels in a three-component image specify the red component in the first (high) byte, followed by the green and blue components\n            color.r = parseInt('0x' + hex.substring(2, 4));\n            color.g = parseInt('0x' + hex.substring(4, 6));\n            color.b = parseInt('0x' + hex.substring(6, 8));\n            color.a = 1;\n            break;\n          case TEXTURE_TYPE.RGBA:\n            // RGBA texture: Four-component images specify the alpha opacity byte after red/green/blue\n            color.r = parseInt('0x' + hex.substring(2, 4));\n            color.g = parseInt('0x' + hex.substring(4, 6));\n            color.b = parseInt('0x' + hex.substring(6, 8));\n            color.a = parseInt('0x' + hex.substring(8, 10));\n            break;\n        }\n      }\n      function getTextureType(num_components) {\n        var type;\n        switch (num_components) {\n          case 1:\n            type = TEXTURE_TYPE.INTENSITY;\n            break;\n          case 2:\n            type = TEXTURE_TYPE.INTENSITY_ALPHA;\n            break;\n          case 3:\n            type = TEXTURE_TYPE.RGB;\n            break;\n          case 4:\n            type = TEXTURE_TYPE.RGBA;\n            break;\n        }\n        return type;\n      }\n      function buildPixelTextureNode(node) {\n        var texture;\n        var wrapS = RepeatWrapping;\n        var wrapT = RepeatWrapping;\n        var fields = node.fields;\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n          switch (fieldName) {\n            case 'image':\n              var width = fieldValues[0];\n              var height = fieldValues[1];\n              var num_components = fieldValues[2];\n              var textureType = getTextureType(num_components);\n              var _data = new Uint8Array(4 * width * height);\n              var color = {\n                r: 0,\n                g: 0,\n                b: 0,\n                a: 0\n              };\n              for (var j = 3, k = 0, jl = fieldValues.length; j < jl; j++, k++) {\n                parseHexColor(fieldValues[j], textureType, color);\n                var stride = k * 4;\n                _data[stride + 0] = color.r;\n                _data[stride + 1] = color.g;\n                _data[stride + 2] = color.b;\n                _data[stride + 3] = color.a;\n              }\n              texture = new DataTexture(_data, width, height);\n              texture.needsUpdate = true;\n              texture.__type = textureType; // needed for material modifications\n\n              break;\n            case 'repeatS':\n              if (fieldValues[0] === false) wrapS = ClampToEdgeWrapping;\n              break;\n            case 'repeatT':\n              if (fieldValues[0] === false) wrapT = ClampToEdgeWrapping;\n              break;\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n        if (texture) {\n          texture.wrapS = wrapS;\n          texture.wrapT = wrapT;\n        }\n        return texture;\n      }\n      function buildImageTextureNode(node) {\n        var texture;\n        var wrapS = RepeatWrapping;\n        var wrapT = RepeatWrapping;\n        var fields = node.fields;\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n          switch (fieldName) {\n            case 'url':\n              var url = fieldValues[0];\n              if (url) texture = textureLoader.load(url);\n              break;\n            case 'repeatS':\n              if (fieldValues[0] === false) wrapS = ClampToEdgeWrapping;\n              break;\n            case 'repeatT':\n              if (fieldValues[0] === false) wrapT = ClampToEdgeWrapping;\n              break;\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n        if (texture) {\n          texture.wrapS = wrapS;\n          texture.wrapT = wrapT;\n        }\n        return texture;\n      }\n      function buildTextureTransformNode(node) {\n        var transformData = {\n          center: new Vector2(),\n          rotation: new Vector2(),\n          scale: new Vector2(),\n          translation: new Vector2()\n        };\n        var fields = node.fields;\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n          switch (fieldName) {\n            case 'center':\n              transformData.center.set(fieldValues[0], fieldValues[1]);\n              break;\n            case 'rotation':\n              transformData.rotation = fieldValues[0];\n              break;\n            case 'scale':\n              transformData.scale.set(fieldValues[0], fieldValues[1]);\n              break;\n            case 'translation':\n              transformData.translation.set(fieldValues[0], fieldValues[1]);\n              break;\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n        return transformData;\n      }\n      function buildGeometricNode(node) {\n        return node.fields[0].values;\n      }\n      function buildWorldInfoNode(node) {\n        var worldInfo = {};\n        var fields = node.fields;\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n          switch (fieldName) {\n            case 'title':\n              worldInfo.title = fieldValues[0];\n              break;\n            case 'info':\n              worldInfo.info = fieldValues;\n              break;\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n        return worldInfo;\n      }\n      function buildIndexedFaceSetNode(node) {\n        var color, coord, normal, texCoord;\n        var ccw = true,\n          solid = true,\n          creaseAngle = 0;\n        var colorIndex, coordIndex, normalIndex, texCoordIndex;\n        var colorPerVertex = true,\n          normalPerVertex = true;\n        var fields = node.fields;\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n          switch (fieldName) {\n            case 'color':\n              var colorNode = fieldValues[0];\n              if (colorNode !== null) {\n                color = getNode(colorNode);\n              }\n              break;\n            case 'coord':\n              var coordNode = fieldValues[0];\n              if (coordNode !== null) {\n                coord = getNode(coordNode);\n              }\n              break;\n            case 'normal':\n              var normalNode = fieldValues[0];\n              if (normalNode !== null) {\n                normal = getNode(normalNode);\n              }\n              break;\n            case 'texCoord':\n              var texCoordNode = fieldValues[0];\n              if (texCoordNode !== null) {\n                texCoord = getNode(texCoordNode);\n              }\n              break;\n            case 'ccw':\n              ccw = fieldValues[0];\n              break;\n            case 'colorIndex':\n              colorIndex = fieldValues;\n              break;\n            case 'colorPerVertex':\n              colorPerVertex = fieldValues[0];\n              break;\n            case 'convex':\n              // field not supported\n              break;\n            case 'coordIndex':\n              coordIndex = fieldValues;\n              break;\n            case 'creaseAngle':\n              creaseAngle = fieldValues[0];\n              break;\n            case 'normalIndex':\n              normalIndex = fieldValues;\n              break;\n            case 'normalPerVertex':\n              normalPerVertex = fieldValues[0];\n              break;\n            case 'solid':\n              solid = fieldValues[0];\n              break;\n            case 'texCoordIndex':\n              texCoordIndex = fieldValues;\n              break;\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n        if (coordIndex === undefined) {\n          console.warn('THREE.VRMLLoader: Missing coordIndex.');\n          return new BufferGeometry(); // handle VRML files with incomplete geometry definition\n        }\n\n        var triangulatedCoordIndex = triangulateFaceIndex(coordIndex, ccw);\n        var colorAttribute;\n        var normalAttribute;\n        var uvAttribute;\n        if (color) {\n          if (colorPerVertex === true) {\n            if (colorIndex && colorIndex.length > 0) {\n              // if the colorIndex field is not empty, then it is used to choose colors for each vertex of the IndexedFaceSet.\n              var triangulatedColorIndex = triangulateFaceIndex(colorIndex, ccw);\n              colorAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedColorIndex, color, 3);\n            } else {\n              // if the colorIndex field is empty, then the coordIndex field is used to choose colors from the Color node\n              colorAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(color, 3));\n            }\n          } else {\n            if (colorIndex && colorIndex.length > 0) {\n              // if the colorIndex field is not empty, then they are used to choose one color for each face of the IndexedFaceSet\n              var flattenFaceColors = flattenData(color, colorIndex);\n              var triangulatedFaceColors = triangulateFaceData(flattenFaceColors, coordIndex);\n              colorAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceColors);\n            } else {\n              // if the colorIndex field is empty, then the color are applied to each face of the IndexedFaceSet in order\n              var _triangulatedFaceColors = triangulateFaceData(color, coordIndex);\n              colorAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, _triangulatedFaceColors);\n            }\n          }\n        }\n        if (normal) {\n          if (normalPerVertex === true) {\n            // consider vertex normals\n            if (normalIndex && normalIndex.length > 0) {\n              // if the normalIndex field is not empty, then it is used to choose normals for each vertex of the IndexedFaceSet.\n              var triangulatedNormalIndex = triangulateFaceIndex(normalIndex, ccw);\n              normalAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedNormalIndex, normal, 3);\n            } else {\n              // if the normalIndex field is empty, then the coordIndex field is used to choose normals from the Normal node\n              normalAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(normal, 3));\n            }\n          } else {\n            // consider face normals\n            if (normalIndex && normalIndex.length > 0) {\n              // if the normalIndex field is not empty, then they are used to choose one normal for each face of the IndexedFaceSet\n              var flattenFaceNormals = flattenData(normal, normalIndex);\n              var triangulatedFaceNormals = triangulateFaceData(flattenFaceNormals, coordIndex);\n              normalAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceNormals);\n            } else {\n              // if the normalIndex field is empty, then the normals are applied to each face of the IndexedFaceSet in order\n              var _triangulatedFaceNormals = triangulateFaceData(normal, coordIndex);\n              normalAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, _triangulatedFaceNormals);\n            }\n          }\n        } else {\n          // if the normal field is NULL, then the loader should automatically generate normals, using creaseAngle to determine if and how normals are smoothed across shared vertices\n          normalAttribute = computeNormalAttribute(triangulatedCoordIndex, coord, creaseAngle);\n        }\n        if (texCoord) {\n          // texture coordinates are always defined on vertex level\n          if (texCoordIndex && texCoordIndex.length > 0) {\n            // if the texCoordIndex field is not empty, then it is used to choose texture coordinates for each vertex of the IndexedFaceSet.\n            var triangulatedTexCoordIndex = triangulateFaceIndex(texCoordIndex, ccw);\n            uvAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedTexCoordIndex, texCoord, 2);\n          } else {\n            // if the texCoordIndex field is empty, then the coordIndex array is used to choose texture coordinates from the TextureCoordinate node\n            uvAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(texCoord, 2));\n          }\n        }\n        var geometry = new BufferGeometry();\n        var positionAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(coord, 3));\n        geometry.setAttribute('position', positionAttribute);\n        geometry.setAttribute('normal', normalAttribute); // optional attributes\n\n        if (colorAttribute) geometry.setAttribute('color', colorAttribute);\n        if (uvAttribute) geometry.setAttribute('uv', uvAttribute); // \"solid\" influences the material so let's store it for later use\n\n        geometry._solid = solid;\n        geometry._type = 'mesh';\n        return geometry;\n      }\n      function buildIndexedLineSetNode(node) {\n        var color, coord;\n        var colorIndex, coordIndex;\n        var colorPerVertex = true;\n        var fields = node.fields;\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n          switch (fieldName) {\n            case 'color':\n              var colorNode = fieldValues[0];\n              if (colorNode !== null) {\n                color = getNode(colorNode);\n              }\n              break;\n            case 'coord':\n              var coordNode = fieldValues[0];\n              if (coordNode !== null) {\n                coord = getNode(coordNode);\n              }\n              break;\n            case 'colorIndex':\n              colorIndex = fieldValues;\n              break;\n            case 'colorPerVertex':\n              colorPerVertex = fieldValues[0];\n              break;\n            case 'coordIndex':\n              coordIndex = fieldValues;\n              break;\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        } // build lines\n\n        var colorAttribute;\n        var expandedLineIndex = expandLineIndex(coordIndex); // create an index for three.js's linesegment primitive\n\n        if (color) {\n          if (colorPerVertex === true) {\n            if (colorIndex.length > 0) {\n              // if the colorIndex field is not empty, then one color is used for each polyline of the IndexedLineSet.\n              var expandedColorIndex = expandLineIndex(colorIndex); // compute colors for each line segment (rendering primitve)\n\n              colorAttribute = computeAttributeFromIndexedData(expandedLineIndex, expandedColorIndex, color, 3); // compute data on vertex level\n            } else {\n              // if the colorIndex field is empty, then the colors are applied to each polyline of the IndexedLineSet in order.\n              colorAttribute = toNonIndexedAttribute(expandedLineIndex, new Float32BufferAttribute(color, 3));\n            }\n          } else {\n            if (colorIndex.length > 0) {\n              // if the colorIndex field is not empty, then colors are applied to each vertex of the IndexedLineSet\n              var flattenLineColors = flattenData(color, colorIndex); // compute colors for each VRML primitve\n\n              var expandedLineColors = expandLineData(flattenLineColors, coordIndex); // compute colors for each line segment (rendering primitve)\n\n              colorAttribute = computeAttributeFromLineData(expandedLineIndex, expandedLineColors); // compute data on vertex level\n            } else {\n              // if the colorIndex field is empty, then the coordIndex field is used to choose colors from the Color node\n              var _expandedLineColors = expandLineData(color, coordIndex); // compute colors for each line segment (rendering primitve)\n\n              colorAttribute = computeAttributeFromLineData(expandedLineIndex, _expandedLineColors); // compute data on vertex level\n            }\n          }\n        } //\n\n        var geometry = new BufferGeometry();\n        var positionAttribute = toNonIndexedAttribute(expandedLineIndex, new Float32BufferAttribute(coord, 3));\n        geometry.setAttribute('position', positionAttribute);\n        if (colorAttribute) geometry.setAttribute('color', colorAttribute);\n        geometry._type = 'line';\n        return geometry;\n      }\n      function buildPointSetNode(node) {\n        var color, coord;\n        var fields = node.fields;\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n          switch (fieldName) {\n            case 'color':\n              var colorNode = fieldValues[0];\n              if (colorNode !== null) {\n                color = getNode(colorNode);\n              }\n              break;\n            case 'coord':\n              var coordNode = fieldValues[0];\n              if (coordNode !== null) {\n                coord = getNode(coordNode);\n              }\n              break;\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n        var geometry = new BufferGeometry();\n        geometry.setAttribute('position', new Float32BufferAttribute(coord, 3));\n        if (color) geometry.setAttribute('color', new Float32BufferAttribute(color, 3));\n        geometry._type = 'points';\n        return geometry;\n      }\n      function buildBoxNode(node) {\n        var size = new Vector3(2, 2, 2);\n        var fields = node.fields;\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n          switch (fieldName) {\n            case 'size':\n              size.x = fieldValues[0];\n              size.y = fieldValues[1];\n              size.z = fieldValues[2];\n              break;\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n        var geometry = new BoxGeometry(size.x, size.y, size.z);\n        return geometry;\n      }\n      function buildConeNode(node) {\n        var radius = 1,\n          height = 2,\n          openEnded = false;\n        var fields = node.fields;\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n          switch (fieldName) {\n            case 'bottom':\n              openEnded = !fieldValues[0];\n              break;\n            case 'bottomRadius':\n              radius = fieldValues[0];\n              break;\n            case 'height':\n              height = fieldValues[0];\n              break;\n            case 'side':\n              // field not supported\n              break;\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n        var geometry = new ConeGeometry(radius, height, 16, 1, openEnded);\n        return geometry;\n      }\n      function buildCylinderNode(node) {\n        var radius = 1,\n          height = 2;\n        var fields = node.fields;\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n          switch (fieldName) {\n            case 'bottom':\n              // field not supported\n              break;\n            case 'radius':\n              radius = fieldValues[0];\n              break;\n            case 'height':\n              height = fieldValues[0];\n              break;\n            case 'side':\n              // field not supported\n              break;\n            case 'top':\n              // field not supported\n              break;\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n        var geometry = new CylinderGeometry(radius, radius, height, 16, 1);\n        return geometry;\n      }\n      function buildSphereNode(node) {\n        var radius = 1;\n        var fields = node.fields;\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n          switch (fieldName) {\n            case 'radius':\n              radius = fieldValues[0];\n              break;\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n        var geometry = new SphereGeometry(radius, 16, 16);\n        return geometry;\n      }\n      function buildElevationGridNode(node) {\n        var color;\n        var normal;\n        var texCoord;\n        var height;\n        var colorPerVertex = true;\n        var normalPerVertex = true;\n        var solid = true;\n        var ccw = true;\n        var creaseAngle = 0;\n        var xDimension = 2;\n        var zDimension = 2;\n        var xSpacing = 1;\n        var zSpacing = 1;\n        var fields = node.fields;\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n          switch (fieldName) {\n            case 'color':\n              var colorNode = fieldValues[0];\n              if (colorNode !== null) {\n                color = getNode(colorNode);\n              }\n              break;\n            case 'normal':\n              var normalNode = fieldValues[0];\n              if (normalNode !== null) {\n                normal = getNode(normalNode);\n              }\n              break;\n            case 'texCoord':\n              var texCoordNode = fieldValues[0];\n              if (texCoordNode !== null) {\n                texCoord = getNode(texCoordNode);\n              }\n              break;\n            case 'height':\n              height = fieldValues;\n              break;\n            case 'ccw':\n              ccw = fieldValues[0];\n              break;\n            case 'colorPerVertex':\n              colorPerVertex = fieldValues[0];\n              break;\n            case 'creaseAngle':\n              creaseAngle = fieldValues[0];\n              break;\n            case 'normalPerVertex':\n              normalPerVertex = fieldValues[0];\n              break;\n            case 'solid':\n              solid = fieldValues[0];\n              break;\n            case 'xDimension':\n              xDimension = fieldValues[0];\n              break;\n            case 'xSpacing':\n              xSpacing = fieldValues[0];\n              break;\n            case 'zDimension':\n              zDimension = fieldValues[0];\n              break;\n            case 'zSpacing':\n              zSpacing = fieldValues[0];\n              break;\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        } // vertex data\n\n        var vertices = [];\n        var normals = [];\n        var colors = [];\n        var uvs = [];\n        for (var _i9 = 0; _i9 < zDimension; _i9++) {\n          for (var j = 0; j < xDimension; j++) {\n            // compute a row major index\n            var index = _i9 * xDimension + j; // vertices\n\n            var x = xSpacing * _i9;\n            var y = height[index];\n            var z = zSpacing * j;\n            vertices.push(x, y, z); // colors\n\n            if (color && colorPerVertex === true) {\n              var r = color[index * 3 + 0];\n              var g = color[index * 3 + 1];\n              var b = color[index * 3 + 2];\n              colors.push(r, g, b);\n            } // normals\n\n            if (normal && normalPerVertex === true) {\n              var xn = normal[index * 3 + 0];\n              var yn = normal[index * 3 + 1];\n              var zn = normal[index * 3 + 2];\n              normals.push(xn, yn, zn);\n            } // uvs\n\n            if (texCoord) {\n              var s = texCoord[index * 2 + 0];\n              var t = texCoord[index * 2 + 1];\n              uvs.push(s, t);\n            } else {\n              uvs.push(_i9 / (xDimension - 1), j / (zDimension - 1));\n            }\n          }\n        } // indices\n\n        var indices = [];\n        for (var _i10 = 0; _i10 < xDimension - 1; _i10++) {\n          for (var _j = 0; _j < zDimension - 1; _j++) {\n            // from https://tecfa.unige.ch/guides/vrml/vrml97/spec/part1/nodesRef.html#ElevationGrid\n            var a = _i10 + _j * xDimension;\n            var _b = _i10 + (_j + 1) * xDimension;\n            var c = _i10 + 1 + (_j + 1) * xDimension;\n            var d = _i10 + 1 + _j * xDimension; // faces\n\n            if (ccw === true) {\n              indices.push(a, c, _b);\n              indices.push(c, a, d);\n            } else {\n              indices.push(a, _b, c);\n              indices.push(c, d, a);\n            }\n          }\n        } //\n\n        var positionAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(vertices, 3));\n        var uvAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(uvs, 2));\n        var colorAttribute;\n        var normalAttribute; // color attribute\n\n        if (color) {\n          if (colorPerVertex === false) {\n            for (var _i11 = 0; _i11 < xDimension - 1; _i11++) {\n              for (var _j2 = 0; _j2 < zDimension - 1; _j2++) {\n                var _index = _i11 + _j2 * (xDimension - 1);\n                var _r = color[_index * 3 + 0];\n                var _g = color[_index * 3 + 1];\n                var _b2 = color[_index * 3 + 2]; // one color per quad\n\n                colors.push(_r, _g, _b2);\n                colors.push(_r, _g, _b2);\n                colors.push(_r, _g, _b2);\n                colors.push(_r, _g, _b2);\n                colors.push(_r, _g, _b2);\n                colors.push(_r, _g, _b2);\n              }\n            }\n            colorAttribute = new Float32BufferAttribute(colors, 3);\n          } else {\n            colorAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(colors, 3));\n          }\n        } // normal attribute\n\n        if (normal) {\n          if (normalPerVertex === false) {\n            for (var _i12 = 0; _i12 < xDimension - 1; _i12++) {\n              for (var _j3 = 0; _j3 < zDimension - 1; _j3++) {\n                var _index2 = _i12 + _j3 * (xDimension - 1);\n                var _xn = normal[_index2 * 3 + 0];\n                var _yn = normal[_index2 * 3 + 1];\n                var _zn = normal[_index2 * 3 + 2]; // one normal per quad\n\n                normals.push(_xn, _yn, _zn);\n                normals.push(_xn, _yn, _zn);\n                normals.push(_xn, _yn, _zn);\n                normals.push(_xn, _yn, _zn);\n                normals.push(_xn, _yn, _zn);\n                normals.push(_xn, _yn, _zn);\n              }\n            }\n            normalAttribute = new Float32BufferAttribute(normals, 3);\n          } else {\n            normalAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(normals, 3));\n          }\n        } else {\n          normalAttribute = computeNormalAttribute(indices, vertices, creaseAngle);\n        } // build geometry\n\n        var geometry = new BufferGeometry();\n        geometry.setAttribute('position', positionAttribute);\n        geometry.setAttribute('normal', normalAttribute);\n        geometry.setAttribute('uv', uvAttribute);\n        if (colorAttribute) geometry.setAttribute('color', colorAttribute); // \"solid\" influences the material so let's store it for later use\n\n        geometry._solid = solid;\n        geometry._type = 'mesh';\n        return geometry;\n      }\n      function buildExtrusionNode(node) {\n        var crossSection = [1, 1, 1, -1, -1, -1, -1, 1, 1, 1];\n        var spine = [0, 0, 0, 0, 1, 0];\n        var scale;\n        var orientation;\n        var beginCap = true;\n        var ccw = true;\n        var creaseAngle = 0;\n        var endCap = true;\n        var solid = true;\n        var fields = node.fields;\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n          switch (fieldName) {\n            case 'beginCap':\n              beginCap = fieldValues[0];\n              break;\n            case 'ccw':\n              ccw = fieldValues[0];\n              break;\n            case 'convex':\n              // field not supported\n              break;\n            case 'creaseAngle':\n              creaseAngle = fieldValues[0];\n              break;\n            case 'crossSection':\n              crossSection = fieldValues;\n              break;\n            case 'endCap':\n              endCap = fieldValues[0];\n              break;\n            case 'orientation':\n              orientation = fieldValues;\n              break;\n            case 'scale':\n              scale = fieldValues;\n              break;\n            case 'solid':\n              solid = fieldValues[0];\n              break;\n            case 'spine':\n              spine = fieldValues; // only extrusion along the Y-axis are supported so far\n\n              break;\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n        var crossSectionClosed = crossSection[0] === crossSection[crossSection.length - 2] && crossSection[1] === crossSection[crossSection.length - 1]; // vertices\n\n        var vertices = [];\n        var spineVector = new Vector3();\n        var scaling = new Vector3();\n        var axis = new Vector3();\n        var vertex = new Vector3();\n        var quaternion = new Quaternion();\n        for (var _i13 = 0, j = 0, o = 0, il = spine.length; _i13 < il; _i13 += 3, j += 2, o += 4) {\n          spineVector.fromArray(spine, _i13);\n          scaling.x = scale ? scale[j + 0] : 1;\n          scaling.y = 1;\n          scaling.z = scale ? scale[j + 1] : 1;\n          axis.x = orientation ? orientation[o + 0] : 0;\n          axis.y = orientation ? orientation[o + 1] : 0;\n          axis.z = orientation ? orientation[o + 2] : 1;\n          var angle = orientation ? orientation[o + 3] : 0;\n          for (var k = 0, kl = crossSection.length; k < kl; k += 2) {\n            vertex.x = crossSection[k + 0];\n            vertex.y = 0;\n            vertex.z = crossSection[k + 1]; // scale\n\n            vertex.multiply(scaling); // rotate\n\n            quaternion.setFromAxisAngle(axis, angle);\n            vertex.applyQuaternion(quaternion); // translate\n\n            vertex.add(spineVector);\n            vertices.push(vertex.x, vertex.y, vertex.z);\n          }\n        } // indices\n\n        var indices = [];\n        var spineCount = spine.length / 3;\n        var crossSectionCount = crossSection.length / 2;\n        for (var _i14 = 0; _i14 < spineCount - 1; _i14++) {\n          for (var _j4 = 0; _j4 < crossSectionCount - 1; _j4++) {\n            var a = _j4 + _i14 * crossSectionCount;\n            var b = _j4 + 1 + _i14 * crossSectionCount;\n            var c = _j4 + (_i14 + 1) * crossSectionCount;\n            var d = _j4 + 1 + (_i14 + 1) * crossSectionCount;\n            if (_j4 === crossSectionCount - 2 && crossSectionClosed === true) {\n              b = _i14 * crossSectionCount;\n              d = (_i14 + 1) * crossSectionCount;\n            }\n            if (ccw === true) {\n              indices.push(a, b, c);\n              indices.push(c, b, d);\n            } else {\n              indices.push(a, c, b);\n              indices.push(c, d, b);\n            }\n          }\n        } // triangulate cap\n\n        if (beginCap === true || endCap === true) {\n          var contour = [];\n          for (var _i15 = 0, _l9 = crossSection.length; _i15 < _l9; _i15 += 2) {\n            contour.push(new Vector2(crossSection[_i15], crossSection[_i15 + 1]));\n          }\n          var faces = ShapeUtils.triangulateShape(contour, []);\n          var capIndices = [];\n          for (var _i16 = 0, _l10 = faces.length; _i16 < _l10; _i16++) {\n            var face = faces[_i16];\n            capIndices.push(face[0], face[1], face[2]);\n          } // begin cap\n\n          if (beginCap === true) {\n            for (var _i17 = 0, _l11 = capIndices.length; _i17 < _l11; _i17 += 3) {\n              if (ccw === true) {\n                indices.push(capIndices[_i17 + 0], capIndices[_i17 + 1], capIndices[_i17 + 2]);\n              } else {\n                indices.push(capIndices[_i17 + 0], capIndices[_i17 + 2], capIndices[_i17 + 1]);\n              }\n            }\n          } // end cap\n\n          if (endCap === true) {\n            var indexOffset = crossSectionCount * (spineCount - 1); // references to the first vertex of the last cross section\n\n            for (var _i18 = 0, _l12 = capIndices.length; _i18 < _l12; _i18 += 3) {\n              if (ccw === true) {\n                indices.push(indexOffset + capIndices[_i18 + 0], indexOffset + capIndices[_i18 + 2], indexOffset + capIndices[_i18 + 1]);\n              } else {\n                indices.push(indexOffset + capIndices[_i18 + 0], indexOffset + capIndices[_i18 + 1], indexOffset + capIndices[_i18 + 2]);\n              }\n            }\n          }\n        }\n        var positionAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(vertices, 3));\n        var normalAttribute = computeNormalAttribute(indices, vertices, creaseAngle);\n        var geometry = new BufferGeometry();\n        geometry.setAttribute('position', positionAttribute);\n        geometry.setAttribute('normal', normalAttribute); // no uvs yet\n        // \"solid\" influences the material so let's store it for later use\n\n        geometry._solid = solid;\n        geometry._type = 'mesh';\n        return geometry;\n      } // helper functions\n\n      function resolveUSE(identifier) {\n        var node = nodeMap[identifier];\n        var build = getNode(node); // because the same 3D objects can have different transformations, it's necessary to clone them.\n        // materials can be influenced by the geometry (e.g. vertex normals). cloning is necessary to avoid\n        // any side effects\n\n        return build.isObject3D || build.isMaterial ? build.clone() : build;\n      }\n      function parseFieldChildren(children, owner) {\n        for (var i = 0, l = children.length; i < l; i++) {\n          var object = getNode(children[i]);\n          if (object instanceof Object3D) owner.add(object);\n        }\n      }\n      function triangulateFaceIndex(index, ccw) {\n        var indices = []; // since face defintions can have more than three vertices, it's necessary to\n        // perform a simple triangulation\n\n        var start = 0;\n        for (var i = 0, l = index.length; i < l; i++) {\n          var i1 = index[start];\n          var i2 = index[i + (ccw ? 1 : 2)];\n          var i3 = index[i + (ccw ? 2 : 1)];\n          indices.push(i1, i2, i3); // an index of -1 indicates that the current face has ended and the next one begins\n\n          if (index[i + 3] === -1 || i + 3 >= l) {\n            i += 3;\n            start = i + 1;\n          }\n        }\n        return indices;\n      }\n      function triangulateFaceData(data, index) {\n        var triangulatedData = [];\n        var start = 0;\n        for (var i = 0, l = index.length; i < l; i++) {\n          var stride = start * 3;\n          var x = data[stride];\n          var y = data[stride + 1];\n          var z = data[stride + 2];\n          triangulatedData.push(x, y, z); // an index of -1 indicates that the current face has ended and the next one begins\n\n          if (index[i + 3] === -1 || i + 3 >= l) {\n            i += 3;\n            start++;\n          }\n        }\n        return triangulatedData;\n      }\n      function flattenData(data, index) {\n        var flattenData = [];\n        for (var i = 0, l = index.length; i < l; i++) {\n          var i1 = index[i];\n          var stride = i1 * 3;\n          var x = data[stride];\n          var y = data[stride + 1];\n          var z = data[stride + 2];\n          flattenData.push(x, y, z);\n        }\n        return flattenData;\n      }\n      function expandLineIndex(index) {\n        var indices = [];\n        for (var i = 0, l = index.length; i < l; i++) {\n          var i1 = index[i];\n          var i2 = index[i + 1];\n          indices.push(i1, i2); // an index of -1 indicates that the current line has ended and the next one begins\n\n          if (index[i + 2] === -1 || i + 2 >= l) {\n            i += 2;\n          }\n        }\n        return indices;\n      }\n      function expandLineData(data, index) {\n        var triangulatedData = [];\n        var start = 0;\n        for (var i = 0, l = index.length; i < l; i++) {\n          var stride = start * 3;\n          var x = data[stride];\n          var y = data[stride + 1];\n          var z = data[stride + 2];\n          triangulatedData.push(x, y, z); // an index of -1 indicates that the current line has ended and the next one begins\n\n          if (index[i + 2] === -1 || i + 2 >= l) {\n            i += 2;\n            start++;\n          }\n        }\n        return triangulatedData;\n      }\n      var vA = new Vector3();\n      var vB = new Vector3();\n      var vC = new Vector3();\n      var uvA = new Vector2();\n      var uvB = new Vector2();\n      var uvC = new Vector2();\n      function computeAttributeFromIndexedData(coordIndex, index, data, itemSize) {\n        var array = []; // we use the coordIndex.length as delimiter since normalIndex must contain at least as many indices\n\n        for (var i = 0, l = coordIndex.length; i < l; i += 3) {\n          var a = index[i];\n          var b = index[i + 1];\n          var c = index[i + 2];\n          if (itemSize === 2) {\n            uvA.fromArray(data, a * itemSize);\n            uvB.fromArray(data, b * itemSize);\n            uvC.fromArray(data, c * itemSize);\n            array.push(uvA.x, uvA.y);\n            array.push(uvB.x, uvB.y);\n            array.push(uvC.x, uvC.y);\n          } else {\n            vA.fromArray(data, a * itemSize);\n            vB.fromArray(data, b * itemSize);\n            vC.fromArray(data, c * itemSize);\n            array.push(vA.x, vA.y, vA.z);\n            array.push(vB.x, vB.y, vB.z);\n            array.push(vC.x, vC.y, vC.z);\n          }\n        }\n        return new Float32BufferAttribute(array, itemSize);\n      }\n      function computeAttributeFromFaceData(index, faceData) {\n        var array = [];\n        for (var i = 0, j = 0, l = index.length; i < l; i += 3, j++) {\n          vA.fromArray(faceData, j * 3);\n          array.push(vA.x, vA.y, vA.z);\n          array.push(vA.x, vA.y, vA.z);\n          array.push(vA.x, vA.y, vA.z);\n        }\n        return new Float32BufferAttribute(array, 3);\n      }\n      function computeAttributeFromLineData(index, lineData) {\n        var array = [];\n        for (var i = 0, j = 0, l = index.length; i < l; i += 2, j++) {\n          vA.fromArray(lineData, j * 3);\n          array.push(vA.x, vA.y, vA.z);\n          array.push(vA.x, vA.y, vA.z);\n        }\n        return new Float32BufferAttribute(array, 3);\n      }\n      function toNonIndexedAttribute(indices, attribute) {\n        var array = attribute.array;\n        var itemSize = attribute.itemSize;\n        var array2 = new array.constructor(indices.length * itemSize);\n        var index = 0,\n          index2 = 0;\n        for (var i = 0, l = indices.length; i < l; i++) {\n          index = indices[i] * itemSize;\n          for (var j = 0; j < itemSize; j++) {\n            array2[index2++] = array[index++];\n          }\n        }\n        return new Float32BufferAttribute(array2, itemSize);\n      }\n      var ab = new Vector3();\n      var cb = new Vector3();\n      function computeNormalAttribute(index, coord, creaseAngle) {\n        var faces = [];\n        var vertexNormals = {}; // prepare face and raw vertex normals\n\n        for (var i = 0, l = index.length; i < l; i += 3) {\n          var a = index[i];\n          var b = index[i + 1];\n          var c = index[i + 2];\n          var face = new Face(a, b, c);\n          vA.fromArray(coord, a * 3);\n          vB.fromArray(coord, b * 3);\n          vC.fromArray(coord, c * 3);\n          cb.subVectors(vC, vB);\n          ab.subVectors(vA, vB);\n          cb.cross(ab);\n          cb.normalize();\n          face.normal.copy(cb);\n          if (vertexNormals[a] === undefined) vertexNormals[a] = [];\n          if (vertexNormals[b] === undefined) vertexNormals[b] = [];\n          if (vertexNormals[c] === undefined) vertexNormals[c] = [];\n          vertexNormals[a].push(face.normal);\n          vertexNormals[b].push(face.normal);\n          vertexNormals[c].push(face.normal);\n          faces.push(face);\n        } // compute vertex normals and build final geometry\n\n        var normals = [];\n        for (var _i19 = 0, _l13 = faces.length; _i19 < _l13; _i19++) {\n          var _face = faces[_i19];\n          var nA = weightedNormal(vertexNormals[_face.a], _face.normal, creaseAngle);\n          var nB = weightedNormal(vertexNormals[_face.b], _face.normal, creaseAngle);\n          var nC = weightedNormal(vertexNormals[_face.c], _face.normal, creaseAngle);\n          vA.fromArray(coord, _face.a * 3);\n          vB.fromArray(coord, _face.b * 3);\n          vC.fromArray(coord, _face.c * 3);\n          normals.push(nA.x, nA.y, nA.z);\n          normals.push(nB.x, nB.y, nB.z);\n          normals.push(nC.x, nC.y, nC.z);\n        }\n        return new Float32BufferAttribute(normals, 3);\n      }\n      function weightedNormal(normals, vector, creaseAngle) {\n        var normal = new Vector3();\n        if (creaseAngle === 0) {\n          normal.copy(vector);\n        } else {\n          for (var i = 0, l = normals.length; i < l; i++) {\n            if (normals[i].angleTo(vector) < creaseAngle) {\n              normal.add(normals[i]);\n            }\n          }\n        }\n        return normal.normalize();\n      }\n      function toColorArray(colors) {\n        var array = [];\n        for (var i = 0, l = colors.length; i < l; i += 3) {\n          array.push(new Color(colors[i], colors[i + 1], colors[i + 2]));\n        }\n        return array;\n      }\n      /**\n       * Vertically paints the faces interpolating between the\n       * specified colors at the specified angels. This is used for the Background\n       * node, but could be applied to other nodes with multiple faces as well.\n       *\n       * When used with the Background node, default is directionIsDown is true if\n       * interpolating the skyColor down from the Zenith. When interpolationg up from\n       * the Nadir i.e. interpolating the groundColor, the directionIsDown is false.\n       *\n       * The first angle is never specified, it is the Zenith (0 rad). Angles are specified\n       * in radians. The geometry is thought a sphere, but could be anything. The color interpolation\n       * is linear along the Y axis in any case.\n       *\n       * You must specify one more color than you have angles at the beginning of the colors array.\n       * This is the color of the Zenith (the top of the shape).\n       *\n       * @param {BufferGeometry} geometry\n       * @param {number} radius\n       * @param {array} angles\n       * @param {array} colors\n       * @param {boolean} topDown - Whether to work top down or bottom up.\n       */\n\n      function paintFaces(geometry, radius, angles, colors, topDown) {\n        // compute threshold values\n        var thresholds = [];\n        var startAngle = topDown === true ? 0 : Math.PI;\n        for (var i = 0, l = colors.length; i < l; i++) {\n          var angle = i === 0 ? 0 : angles[i - 1];\n          angle = topDown === true ? angle : startAngle - angle;\n          var point = new Vector3();\n          point.setFromSphericalCoords(radius, angle, 0);\n          thresholds.push(point);\n        } // generate vertex colors\n\n        var indices = geometry.index;\n        var positionAttribute = geometry.attributes.position;\n        var colorAttribute = new BufferAttribute(new Float32Array(geometry.attributes.position.count * 3), 3);\n        var position = new Vector3();\n        var color = new Color();\n        for (var _i20 = 0; _i20 < indices.count; _i20++) {\n          var index = indices.getX(_i20);\n          position.fromBufferAttribute(positionAttribute, index);\n          var thresholdIndexA = void 0,\n            thresholdIndexB = void 0;\n          var t = 1;\n          for (var j = 1; j < thresholds.length; j++) {\n            thresholdIndexA = j - 1;\n            thresholdIndexB = j;\n            var thresholdA = thresholds[thresholdIndexA];\n            var thresholdB = thresholds[thresholdIndexB];\n            if (topDown === true) {\n              // interpolation for sky color\n              if (position.y <= thresholdA.y && position.y > thresholdB.y) {\n                t = Math.abs(thresholdA.y - position.y) / Math.abs(thresholdA.y - thresholdB.y);\n                break;\n              }\n            } else {\n              // interpolation for ground color\n              if (position.y >= thresholdA.y && position.y < thresholdB.y) {\n                t = Math.abs(thresholdA.y - position.y) / Math.abs(thresholdA.y - thresholdB.y);\n                break;\n              }\n            }\n          }\n          var colorA = colors[thresholdIndexA];\n          var colorB = colors[thresholdIndexB];\n          color.copy(colorA).lerp(colorB, t);\n          colorAttribute.setXYZ(index, color.r, color.g, color.b);\n        }\n        geometry.setAttribute('color', colorAttribute);\n      } //\n\n      var textureLoader = new TextureLoader(this.manager);\n      textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin); // check version (only 2.0 is supported)\n\n      if (data.indexOf('#VRML V2.0') === -1) {\n        throw Error('THREE.VRMLLexer: Version of VRML asset not supported.');\n      } // create JSON representing the tree structure of the VRML asset\n\n      var tree = generateVRMLTree(data); // parse the tree structure to a three.js scene\n\n      var scene = parseTree(tree);\n      return scene;\n    }\n  }]);\n  return VRMLLoader;\n}(Loader);\nvar VRMLLexer = /*#__PURE__*/function () {\n  function VRMLLexer(tokens) {\n    _classCallCheck(this, VRMLLexer);\n    this.lexer = new Lexer(tokens); // eslint-disable-line no-undef\n  }\n  _createClass(VRMLLexer, [{\n    key: \"lex\",\n    value: function lex(inputText) {\n      var lexingResult = this.lexer.tokenize(inputText);\n      if (lexingResult.errors.length > 0) {\n        console.error(lexingResult.errors);\n        throw Error('THREE.VRMLLexer: Lexing errors detected.');\n      }\n      return lexingResult;\n    }\n  }]);\n  return VRMLLexer;\n}();\nvar VRMLParser = /*#__PURE__*/function (_CstParser) {\n  _inherits(VRMLParser, _CstParser);\n  var _super2 = _createSuper(VRMLParser);\n  function VRMLParser(tokenVocabulary) {\n    var _this;\n    _classCallCheck(this, VRMLParser);\n    _this = _super2.call(this, tokenVocabulary);\n    var $ = _assertThisInitialized(_this);\n    var Version = tokenVocabulary['Version'];\n    var LCurly = tokenVocabulary['LCurly'];\n    var RCurly = tokenVocabulary['RCurly'];\n    var LSquare = tokenVocabulary['LSquare'];\n    var RSquare = tokenVocabulary['RSquare'];\n    var Identifier = tokenVocabulary['Identifier'];\n    var RouteIdentifier = tokenVocabulary['RouteIdentifier'];\n    var StringLiteral = tokenVocabulary['StringLiteral'];\n    var HexLiteral = tokenVocabulary['HexLiteral'];\n    var NumberLiteral = tokenVocabulary['NumberLiteral'];\n    var TrueLiteral = tokenVocabulary['TrueLiteral'];\n    var FalseLiteral = tokenVocabulary['FalseLiteral'];\n    var NullLiteral = tokenVocabulary['NullLiteral'];\n    var DEF = tokenVocabulary['DEF'];\n    var USE = tokenVocabulary['USE'];\n    var ROUTE = tokenVocabulary['ROUTE'];\n    var TO = tokenVocabulary['TO'];\n    var NodeName = tokenVocabulary['NodeName'];\n    $.RULE('vrml', function () {\n      $.SUBRULE($.version);\n      $.AT_LEAST_ONE(function () {\n        $.SUBRULE($.node);\n      });\n      $.MANY(function () {\n        $.SUBRULE($.route);\n      });\n    });\n    $.RULE('version', function () {\n      $.CONSUME(Version);\n    });\n    $.RULE('node', function () {\n      $.OPTION(function () {\n        $.SUBRULE($.def);\n      });\n      $.CONSUME(NodeName);\n      $.CONSUME(LCurly);\n      $.MANY(function () {\n        $.SUBRULE($.field);\n      });\n      $.CONSUME(RCurly);\n    });\n    $.RULE('field', function () {\n      $.CONSUME(Identifier);\n      $.OR2([{\n        ALT: function ALT() {\n          $.SUBRULE($.singleFieldValue);\n        }\n      }, {\n        ALT: function ALT() {\n          $.SUBRULE($.multiFieldValue);\n        }\n      }]);\n    });\n    $.RULE('def', function () {\n      $.CONSUME(DEF);\n      $.OR([{\n        ALT: function ALT() {\n          $.CONSUME(Identifier);\n        }\n      }, {\n        ALT: function ALT() {\n          $.CONSUME(NodeName);\n        }\n      }]);\n    });\n    $.RULE('use', function () {\n      $.CONSUME(USE);\n      $.OR([{\n        ALT: function ALT() {\n          $.CONSUME(Identifier);\n        }\n      }, {\n        ALT: function ALT() {\n          $.CONSUME(NodeName);\n        }\n      }]);\n    });\n    $.RULE('singleFieldValue', function () {\n      $.AT_LEAST_ONE(function () {\n        $.OR([{\n          ALT: function ALT() {\n            $.SUBRULE($.node);\n          }\n        }, {\n          ALT: function ALT() {\n            $.SUBRULE($.use);\n          }\n        }, {\n          ALT: function ALT() {\n            $.CONSUME(StringLiteral);\n          }\n        }, {\n          ALT: function ALT() {\n            $.CONSUME(HexLiteral);\n          }\n        }, {\n          ALT: function ALT() {\n            $.CONSUME(NumberLiteral);\n          }\n        }, {\n          ALT: function ALT() {\n            $.CONSUME(TrueLiteral);\n          }\n        }, {\n          ALT: function ALT() {\n            $.CONSUME(FalseLiteral);\n          }\n        }, {\n          ALT: function ALT() {\n            $.CONSUME(NullLiteral);\n          }\n        }]);\n      });\n    });\n    $.RULE('multiFieldValue', function () {\n      $.CONSUME(LSquare);\n      $.MANY(function () {\n        $.OR([{\n          ALT: function ALT() {\n            $.SUBRULE($.node);\n          }\n        }, {\n          ALT: function ALT() {\n            $.SUBRULE($.use);\n          }\n        }, {\n          ALT: function ALT() {\n            $.CONSUME(StringLiteral);\n          }\n        }, {\n          ALT: function ALT() {\n            $.CONSUME(HexLiteral);\n          }\n        }, {\n          ALT: function ALT() {\n            $.CONSUME(NumberLiteral);\n          }\n        }, {\n          ALT: function ALT() {\n            $.CONSUME(NullLiteral);\n          }\n        }]);\n      });\n      $.CONSUME(RSquare);\n    });\n    $.RULE('route', function () {\n      $.CONSUME(ROUTE);\n      $.CONSUME(RouteIdentifier);\n      $.CONSUME(TO);\n      $.CONSUME2(RouteIdentifier);\n    });\n    _this.performSelfAnalysis();\n    return _this;\n  }\n  return _createClass(VRMLParser);\n}(CstParser);\nvar Face = /*#__PURE__*/_createClass(function Face(a, b, c) {\n  _classCallCheck(this, Face);\n  this.a = a;\n  this.b = b;\n  this.c = c;\n  this.normal = new Vector3();\n});\nvar TEXTURE_TYPE = {\n  INTENSITY: 1,\n  INTENSITY_ALPHA: 2,\n  RGB: 3,\n  RGBA: 4\n};\nexport { VRMLLoader };","map":{"version":3,"names":["Loader","LoaderUtils","FileLoader","Vector3","Vector2","TextureLoader","Scene","Object3D","Group","SphereGeometry","MeshBasicMaterial","BackSide","Mesh","PointsMaterial","Points","LineBasicMaterial","LineSegments","FrontSide","DoubleSide","MeshPhongMaterial","Color","DataTexture","BufferGeometry","Float32BufferAttribute","BoxGeometry","ConeGeometry","CylinderGeometry","Quaternion","ShapeUtils","BufferAttribute","RepeatWrapping","ClampToEdgeWrapping","createToken","Lexer","CstParser","VRMLLoader","_Loader","_inherits","_super","_createSuper","manager","_classCallCheck","call","_createClass","key","value","load","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","data","nodeMap","generateVRMLTree","tokenData","createTokens","lexer","VRMLLexer","tokens","parser","VRMLParser","tokenVocabulary","visitor","createVisitor","getBaseCstVisitorConstructor","lexingResult","lex","input","cstOutput","vrml","errors","length","Error","ast","visit","RouteIdentifier","name","pattern","Identifier","longer_alt","nodeTypes","Version","NodeName","RegExp","join","DEF","USE","ROUTE","TO","StringLiteral","HexLiteral","NumberLiteral","TrueLiteral","FalseLiteral","NullLiteral","LSquare","RSquare","LCurly","RCurly","Comment","group","SKIPPED","WhiteSpace","i","l","token","BaseVRMLVisitor","VRMLToASTVisitor","validateVisitor","prototype","Object","assign","create","constructor","ctx","version","nodes","routes","node","push","route","image","fields","field","def","type","values","result","singleFieldValue","multiFieldValue","use","processField","FROM","stringLiteral","replace","numberLiteral","parseFloat","hexLiteral","trueLiteral","falseLiteral","forEach","parseTree","tree","scene","buildNodeMap","object","getNode","add","userData","worldInfo","fieldValues","j","jl","resolveUSE","build","undefined","buildNode","nodeName","buildGroupingNode","buildBackgroundNode","buildShapeNode","buildAppearanceNode","buildMaterialNode","buildImageTextureNode","buildPixelTextureNode","buildTextureTransformNode","buildIndexedFaceSetNode","buildIndexedLineSetNode","buildPointSetNode","buildBoxNode","buildConeNode","buildCylinderNode","buildSphereNode","buildElevationGridNode","buildExtrusionNode","buildGeometricNode","buildWorldInfoNode","warn","hasOwnProperty","fieldName","parseFieldChildren","axis","angle","quaternion","setFromAxisAngle","scale","set","position","groundAngle","groundColor","skyAngle","skyColor","radius","skyGeometry","skyMaterial","fog","side","depthWrite","depthTest","paintFaces","toColorArray","vertexColors","color","setRGB","sky","groundGeometry","Math","PI","groundMaterial","ground","renderOrder","Infinity","material","geometry","attributes","_type","pointsMaterial","isMeshPhongMaterial","copy","emissive","lineMaterial","_solid","visible","transformData","materialData","diffuseColor","emissiveColor","shininess","specularColor","specular","transparency","opacity","transparent","textureNode","map","__type","TEXTURE_TYPE","INTENSITY_ALPHA","RGB","RGBA","center","rotation","repeat","offset","translation","parseHexColor","hex","textureType","INTENSITY","parseInt","r","g","b","a","substring","getTextureType","num_components","texture","wrapS","wrapT","width","height","Uint8Array","k","stride","needsUpdate","textureLoader","title","info","coord","normal","texCoord","ccw","solid","creaseAngle","colorIndex","coordIndex","normalIndex","texCoordIndex","colorPerVertex","normalPerVertex","colorNode","coordNode","normalNode","texCoordNode","triangulatedCoordIndex","triangulateFaceIndex","colorAttribute","normalAttribute","uvAttribute","triangulatedColorIndex","computeAttributeFromIndexedData","toNonIndexedAttribute","flattenFaceColors","flattenData","triangulatedFaceColors","triangulateFaceData","computeAttributeFromFaceData","triangulatedNormalIndex","flattenFaceNormals","triangulatedFaceNormals","computeNormalAttribute","triangulatedTexCoordIndex","positionAttribute","setAttribute","expandedLineIndex","expandLineIndex","expandedColorIndex","flattenLineColors","expandedLineColors","expandLineData","computeAttributeFromLineData","size","x","y","z","openEnded","xDimension","zDimension","xSpacing","zSpacing","vertices","normals","colors","uvs","index","xn","yn","zn","s","t","indices","c","d","crossSection","spine","orientation","beginCap","endCap","crossSectionClosed","spineVector","scaling","vertex","o","il","fromArray","kl","multiply","applyQuaternion","spineCount","crossSectionCount","contour","faces","triangulateShape","capIndices","face","indexOffset","identifier","isObject3D","isMaterial","clone","children","owner","start","i1","i2","i3","triangulatedData","vA","vB","vC","uvA","uvB","uvC","itemSize","array","faceData","lineData","attribute","array2","index2","ab","cb","vertexNormals","Face","subVectors","cross","normalize","nA","weightedNormal","nB","nC","vector","angleTo","angles","topDown","thresholds","startAngle","point","setFromSphericalCoords","Float32Array","count","getX","fromBufferAttribute","thresholdIndexA","thresholdIndexB","thresholdA","thresholdB","abs","colorA","colorB","lerp","setXYZ","resourcePath","setCrossOrigin","crossOrigin","indexOf","inputText","tokenize","_CstParser","_super2","_this","$","_assertThisInitialized","RULE","SUBRULE","AT_LEAST_ONE","MANY","CONSUME","OPTION","OR2","ALT","OR","CONSUME2","performSelfAnalysis"],"sources":["/home/samuel/experiment/3d/farm/frontend/node_modules/three-stdlib/loaders/VRMLLoader.js"],"sourcesContent":["import { Loader, LoaderUtils, FileLoader, Vector3, Vector2, TextureLoader, Scene, Object3D, Group, SphereGeometry, MeshBasicMaterial, BackSide, Mesh, PointsMaterial, Points, LineBasicMaterial, LineSegments, FrontSide, DoubleSide, MeshPhongMaterial, Color, DataTexture, BufferGeometry, Float32BufferAttribute, BoxGeometry, ConeGeometry, CylinderGeometry, Quaternion, ShapeUtils, BufferAttribute, RepeatWrapping, ClampToEdgeWrapping } from 'three';\nimport { createToken, Lexer, CstParser } from 'chevrotain';\n\nclass VRMLLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = scope.path === '' ? LoaderUtils.extractUrlBase(url) : scope.path;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(data, path) {\n    const nodeMap = {};\n\n    function generateVRMLTree(data) {\n      // create lexer, parser and visitor\n      const tokenData = createTokens();\n      const lexer = new VRMLLexer(tokenData.tokens);\n      const parser = new VRMLParser(tokenData.tokenVocabulary);\n      const visitor = createVisitor(parser.getBaseCstVisitorConstructor()); // lexing\n\n      const lexingResult = lexer.lex(data);\n      parser.input = lexingResult.tokens; // parsing\n\n      const cstOutput = parser.vrml();\n\n      if (parser.errors.length > 0) {\n        console.error(parser.errors);\n        throw Error('THREE.VRMLLoader: Parsing errors detected.');\n      } // actions\n\n\n      const ast = visitor.visit(cstOutput);\n      return ast;\n    }\n\n    function createTokens() {\n      // from http://gun.teipir.gr/VRML-amgem/spec/part1/concepts.html#SyntaxBasics\n      const RouteIdentifier = createToken({\n        name: 'RouteIdentifier',\n        pattern: /[^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*[\\.][^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*/\n      });\n      const Identifier = createToken({\n        name: 'Identifier',\n        pattern: /[^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*/,\n        longer_alt: RouteIdentifier\n      }); // from http://gun.teipir.gr/VRML-amgem/spec/part1/nodesRef.html\n\n      const nodeTypes = ['Anchor', 'Billboard', 'Collision', 'Group', 'Transform', // grouping nodes\n      'Inline', 'LOD', 'Switch', // special groups\n      'AudioClip', 'DirectionalLight', 'PointLight', 'Script', 'Shape', 'Sound', 'SpotLight', 'WorldInfo', // common nodes\n      'CylinderSensor', 'PlaneSensor', 'ProximitySensor', 'SphereSensor', 'TimeSensor', 'TouchSensor', 'VisibilitySensor', // sensors\n      'Box', 'Cone', 'Cylinder', 'ElevationGrid', 'Extrusion', 'IndexedFaceSet', 'IndexedLineSet', 'PointSet', 'Sphere', // geometries\n      'Color', 'Coordinate', 'Normal', 'TextureCoordinate', // geometric properties\n      'Appearance', 'FontStyle', 'ImageTexture', 'Material', 'MovieTexture', 'PixelTexture', 'TextureTransform', // appearance\n      'ColorInterpolator', 'CoordinateInterpolator', 'NormalInterpolator', 'OrientationInterpolator', 'PositionInterpolator', 'ScalarInterpolator', // interpolators\n      'Background', 'Fog', 'NavigationInfo', 'Viewpoint', // bindable nodes\n      'Text' // Text must be placed at the end of the regex so there are no matches for TextureTransform and TextureCoordinate\n      ]; //\n\n      const Version = createToken({\n        name: 'Version',\n        pattern: /#VRML.*/,\n        longer_alt: Identifier\n      });\n      const NodeName = createToken({\n        name: 'NodeName',\n        pattern: new RegExp(nodeTypes.join('|')),\n        longer_alt: Identifier\n      });\n      const DEF = createToken({\n        name: 'DEF',\n        pattern: /DEF/,\n        longer_alt: Identifier\n      });\n      const USE = createToken({\n        name: 'USE',\n        pattern: /USE/,\n        longer_alt: Identifier\n      });\n      const ROUTE = createToken({\n        name: 'ROUTE',\n        pattern: /ROUTE/,\n        longer_alt: Identifier\n      });\n      const TO = createToken({\n        name: 'TO',\n        pattern: /TO/,\n        longer_alt: Identifier\n      }); //\n\n      const StringLiteral = createToken({\n        name: 'StringLiteral',\n        pattern: /\"(?:[^\\\\\"\\n\\r]|\\\\[bfnrtv\"\\\\/]|\\\\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])*\"/\n      });\n      const HexLiteral = createToken({\n        name: 'HexLiteral',\n        pattern: /0[xX][0-9a-fA-F]+/\n      });\n      const NumberLiteral = createToken({\n        name: 'NumberLiteral',\n        pattern: /[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?/\n      });\n      const TrueLiteral = createToken({\n        name: 'TrueLiteral',\n        pattern: /TRUE/\n      });\n      const FalseLiteral = createToken({\n        name: 'FalseLiteral',\n        pattern: /FALSE/\n      });\n      const NullLiteral = createToken({\n        name: 'NullLiteral',\n        pattern: /NULL/\n      });\n      const LSquare = createToken({\n        name: 'LSquare',\n        pattern: /\\[/\n      });\n      const RSquare = createToken({\n        name: 'RSquare',\n        pattern: /]/\n      });\n      const LCurly = createToken({\n        name: 'LCurly',\n        pattern: /{/\n      });\n      const RCurly = createToken({\n        name: 'RCurly',\n        pattern: /}/\n      });\n      const Comment = createToken({\n        name: 'Comment',\n        pattern: /#.*/,\n        group: Lexer.SKIPPED // eslint-disable-line no-undef\n\n      }); // commas, blanks, tabs, newlines and carriage returns are whitespace characters wherever they appear outside of string fields\n\n      const WhiteSpace = createToken({\n        name: 'WhiteSpace',\n        pattern: /[ ,\\s]/,\n        group: Lexer.SKIPPED // eslint-disable-line no-undef\n\n      });\n      const tokens = [WhiteSpace, // keywords appear before the Identifier\n      NodeName, DEF, USE, ROUTE, TO, TrueLiteral, FalseLiteral, NullLiteral, // the Identifier must appear after the keywords because all keywords are valid identifiers\n      Version, Identifier, RouteIdentifier, StringLiteral, HexLiteral, NumberLiteral, LSquare, RSquare, LCurly, RCurly, Comment];\n      const tokenVocabulary = {};\n\n      for (let i = 0, l = tokens.length; i < l; i++) {\n        const token = tokens[i];\n        tokenVocabulary[token.name] = token;\n      }\n\n      return {\n        tokens: tokens,\n        tokenVocabulary: tokenVocabulary\n      };\n    }\n\n    function createVisitor(BaseVRMLVisitor) {\n      // the visitor is created dynmaically based on the given base class\n      function VRMLToASTVisitor() {\n        BaseVRMLVisitor.call(this);\n        this.validateVisitor();\n      }\n\n      VRMLToASTVisitor.prototype = Object.assign(Object.create(BaseVRMLVisitor.prototype), {\n        constructor: VRMLToASTVisitor,\n        vrml: function (ctx) {\n          const data = {\n            version: this.visit(ctx.version),\n            nodes: [],\n            routes: []\n          };\n\n          for (let i = 0, l = ctx.node.length; i < l; i++) {\n            const node = ctx.node[i];\n            data.nodes.push(this.visit(node));\n          }\n\n          if (ctx.route) {\n            for (let i = 0, l = ctx.route.length; i < l; i++) {\n              const route = ctx.route[i];\n              data.routes.push(this.visit(route));\n            }\n          }\n\n          return data;\n        },\n        version: function (ctx) {\n          return ctx.Version[0].image;\n        },\n        node: function (ctx) {\n          const data = {\n            name: ctx.NodeName[0].image,\n            fields: []\n          };\n\n          if (ctx.field) {\n            for (let i = 0, l = ctx.field.length; i < l; i++) {\n              const field = ctx.field[i];\n              data.fields.push(this.visit(field));\n            }\n          } // DEF\n\n\n          if (ctx.def) {\n            data.DEF = this.visit(ctx.def[0]);\n          }\n\n          return data;\n        },\n        field: function (ctx) {\n          const data = {\n            name: ctx.Identifier[0].image,\n            type: null,\n            values: null\n          };\n          let result; // SFValue\n\n          if (ctx.singleFieldValue) {\n            result = this.visit(ctx.singleFieldValue[0]);\n          } // MFValue\n\n\n          if (ctx.multiFieldValue) {\n            result = this.visit(ctx.multiFieldValue[0]);\n          }\n\n          data.type = result.type;\n          data.values = result.values;\n          return data;\n        },\n        def: function (ctx) {\n          return (ctx.Identifier || ctx.NodeName)[0].image;\n        },\n        use: function (ctx) {\n          return {\n            USE: (ctx.Identifier || ctx.NodeName)[0].image\n          };\n        },\n        singleFieldValue: function (ctx) {\n          return processField(this, ctx);\n        },\n        multiFieldValue: function (ctx) {\n          return processField(this, ctx);\n        },\n        route: function (ctx) {\n          const data = {\n            FROM: ctx.RouteIdentifier[0].image,\n            TO: ctx.RouteIdentifier[1].image\n          };\n          return data;\n        }\n      });\n\n      function processField(scope, ctx) {\n        const field = {\n          type: null,\n          values: []\n        };\n\n        if (ctx.node) {\n          field.type = 'node';\n\n          for (let i = 0, l = ctx.node.length; i < l; i++) {\n            const node = ctx.node[i];\n            field.values.push(scope.visit(node));\n          }\n        }\n\n        if (ctx.use) {\n          field.type = 'use';\n\n          for (let i = 0, l = ctx.use.length; i < l; i++) {\n            const use = ctx.use[i];\n            field.values.push(scope.visit(use));\n          }\n        }\n\n        if (ctx.StringLiteral) {\n          field.type = 'string';\n\n          for (let i = 0, l = ctx.StringLiteral.length; i < l; i++) {\n            const stringLiteral = ctx.StringLiteral[i];\n            field.values.push(stringLiteral.image.replace(/'|\"/g, ''));\n          }\n        }\n\n        if (ctx.NumberLiteral) {\n          field.type = 'number';\n\n          for (let i = 0, l = ctx.NumberLiteral.length; i < l; i++) {\n            const numberLiteral = ctx.NumberLiteral[i];\n            field.values.push(parseFloat(numberLiteral.image));\n          }\n        }\n\n        if (ctx.HexLiteral) {\n          field.type = 'hex';\n\n          for (let i = 0, l = ctx.HexLiteral.length; i < l; i++) {\n            const hexLiteral = ctx.HexLiteral[i];\n            field.values.push(hexLiteral.image);\n          }\n        }\n\n        if (ctx.TrueLiteral) {\n          field.type = 'boolean';\n\n          for (let i = 0, l = ctx.TrueLiteral.length; i < l; i++) {\n            const trueLiteral = ctx.TrueLiteral[i];\n            if (trueLiteral.image === 'TRUE') field.values.push(true);\n          }\n        }\n\n        if (ctx.FalseLiteral) {\n          field.type = 'boolean';\n\n          for (let i = 0, l = ctx.FalseLiteral.length; i < l; i++) {\n            const falseLiteral = ctx.FalseLiteral[i];\n            if (falseLiteral.image === 'FALSE') field.values.push(false);\n          }\n        }\n\n        if (ctx.NullLiteral) {\n          field.type = 'null';\n          ctx.NullLiteral.forEach(function () {\n            field.values.push(null);\n          });\n        }\n\n        return field;\n      }\n\n      return new VRMLToASTVisitor();\n    }\n\n    function parseTree(tree) {\n      // console.log( JSON.stringify( tree, null, 2 ) );\n      const nodes = tree.nodes;\n      const scene = new Scene(); // first iteration: build nodemap based on DEF statements\n\n      for (let i = 0, l = nodes.length; i < l; i++) {\n        const node = nodes[i];\n        buildNodeMap(node);\n      } // second iteration: build nodes\n\n\n      for (let i = 0, l = nodes.length; i < l; i++) {\n        const node = nodes[i];\n        const object = getNode(node);\n        if (object instanceof Object3D) scene.add(object);\n        if (node.name === 'WorldInfo') scene.userData.worldInfo = object;\n      }\n\n      return scene;\n    }\n\n    function buildNodeMap(node) {\n      if (node.DEF) {\n        nodeMap[node.DEF] = node;\n      }\n\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n\n        if (field.type === 'node') {\n          const fieldValues = field.values;\n\n          for (let j = 0, jl = fieldValues.length; j < jl; j++) {\n            buildNodeMap(fieldValues[j]);\n          }\n        }\n      }\n    }\n\n    function getNode(node) {\n      // handle case where a node refers to a different one\n      if (node.USE) {\n        return resolveUSE(node.USE);\n      }\n\n      if (node.build !== undefined) return node.build;\n      node.build = buildNode(node);\n      return node.build;\n    } // node builder\n\n\n    function buildNode(node) {\n      const nodeName = node.name;\n      let build;\n\n      switch (nodeName) {\n        case 'Group':\n        case 'Transform':\n        case 'Collision':\n          build = buildGroupingNode(node);\n          break;\n\n        case 'Background':\n          build = buildBackgroundNode(node);\n          break;\n\n        case 'Shape':\n          build = buildShapeNode(node);\n          break;\n\n        case 'Appearance':\n          build = buildAppearanceNode(node);\n          break;\n\n        case 'Material':\n          build = buildMaterialNode(node);\n          break;\n\n        case 'ImageTexture':\n          build = buildImageTextureNode(node);\n          break;\n\n        case 'PixelTexture':\n          build = buildPixelTextureNode(node);\n          break;\n\n        case 'TextureTransform':\n          build = buildTextureTransformNode(node);\n          break;\n\n        case 'IndexedFaceSet':\n          build = buildIndexedFaceSetNode(node);\n          break;\n\n        case 'IndexedLineSet':\n          build = buildIndexedLineSetNode(node);\n          break;\n\n        case 'PointSet':\n          build = buildPointSetNode(node);\n          break;\n\n        case 'Box':\n          build = buildBoxNode(node);\n          break;\n\n        case 'Cone':\n          build = buildConeNode(node);\n          break;\n\n        case 'Cylinder':\n          build = buildCylinderNode(node);\n          break;\n\n        case 'Sphere':\n          build = buildSphereNode(node);\n          break;\n\n        case 'ElevationGrid':\n          build = buildElevationGridNode(node);\n          break;\n\n        case 'Extrusion':\n          build = buildExtrusionNode(node);\n          break;\n\n        case 'Color':\n        case 'Coordinate':\n        case 'Normal':\n        case 'TextureCoordinate':\n          build = buildGeometricNode(node);\n          break;\n\n        case 'WorldInfo':\n          build = buildWorldInfoNode(node);\n          break;\n\n        case 'Anchor':\n        case 'Billboard':\n        case 'Inline':\n        case 'LOD':\n        case 'Switch':\n        case 'AudioClip':\n        case 'DirectionalLight':\n        case 'PointLight':\n        case 'Script':\n        case 'Sound':\n        case 'SpotLight':\n        case 'CylinderSensor':\n        case 'PlaneSensor':\n        case 'ProximitySensor':\n        case 'SphereSensor':\n        case 'TimeSensor':\n        case 'TouchSensor':\n        case 'VisibilitySensor':\n        case 'Text':\n        case 'FontStyle':\n        case 'MovieTexture':\n        case 'ColorInterpolator':\n        case 'CoordinateInterpolator':\n        case 'NormalInterpolator':\n        case 'OrientationInterpolator':\n        case 'PositionInterpolator':\n        case 'ScalarInterpolator':\n        case 'Fog':\n        case 'NavigationInfo':\n        case 'Viewpoint':\n          // node not supported yet\n          break;\n\n        default:\n          console.warn('THREE.VRMLLoader: Unknown node:', nodeName);\n          break;\n      }\n\n      if (build !== undefined && node.DEF !== undefined && build.hasOwnProperty('name') === true) {\n        build.name = node.DEF;\n      }\n\n      return build;\n    }\n\n    function buildGroupingNode(node) {\n      const object = new Group(); //\n\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'bboxCenter':\n            // field not supported\n            break;\n\n          case 'bboxSize':\n            // field not supported\n            break;\n\n          case 'center':\n            // field not supported\n            break;\n\n          case 'children':\n            parseFieldChildren(fieldValues, object);\n            break;\n\n          case 'collide':\n            // field not supported\n            break;\n\n          case 'rotation':\n            const axis = new Vector3(fieldValues[0], fieldValues[1], fieldValues[2]);\n            const angle = fieldValues[3];\n            object.quaternion.setFromAxisAngle(axis, angle);\n            break;\n\n          case 'scale':\n            object.scale.set(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n\n          case 'scaleOrientation':\n            // field not supported\n            break;\n\n          case 'translation':\n            object.position.set(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n\n          case 'proxy':\n            // field not supported\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      return object;\n    }\n\n    function buildBackgroundNode(node) {\n      const group = new Group();\n      let groundAngle, groundColor;\n      let skyAngle, skyColor;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'groundAngle':\n            groundAngle = fieldValues;\n            break;\n\n          case 'groundColor':\n            groundColor = fieldValues;\n            break;\n\n          case 'backUrl':\n            // field not supported\n            break;\n\n          case 'bottomUrl':\n            // field not supported\n            break;\n\n          case 'frontUrl':\n            // field not supported\n            break;\n\n          case 'leftUrl':\n            // field not supported\n            break;\n\n          case 'rightUrl':\n            // field not supported\n            break;\n\n          case 'topUrl':\n            // field not supported\n            break;\n\n          case 'skyAngle':\n            skyAngle = fieldValues;\n            break;\n\n          case 'skyColor':\n            skyColor = fieldValues;\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      const radius = 10000; // sky\n\n      if (skyColor) {\n        const skyGeometry = new SphereGeometry(radius, 32, 16);\n        const skyMaterial = new MeshBasicMaterial({\n          fog: false,\n          side: BackSide,\n          depthWrite: false,\n          depthTest: false\n        });\n\n        if (skyColor.length > 3) {\n          paintFaces(skyGeometry, radius, skyAngle, toColorArray(skyColor), true);\n          skyMaterial.vertexColors = true;\n        } else {\n          skyMaterial.color.setRGB(skyColor[0], skyColor[1], skyColor[2]);\n        }\n\n        const sky = new Mesh(skyGeometry, skyMaterial);\n        group.add(sky);\n      } // ground\n\n\n      if (groundColor) {\n        if (groundColor.length > 0) {\n          const groundGeometry = new SphereGeometry(radius, 32, 16, 0, 2 * Math.PI, 0.5 * Math.PI, 1.5 * Math.PI);\n          const groundMaterial = new MeshBasicMaterial({\n            fog: false,\n            side: BackSide,\n            vertexColors: true,\n            depthWrite: false,\n            depthTest: false\n          });\n          paintFaces(groundGeometry, radius, groundAngle, toColorArray(groundColor), false);\n          const ground = new Mesh(groundGeometry, groundMaterial);\n          group.add(ground);\n        }\n      } // render background group first\n\n\n      group.renderOrder = -Infinity;\n      return group;\n    }\n\n    function buildShapeNode(node) {\n      const fields = node.fields; // if the appearance field is NULL or unspecified, lighting is off and the unlit object color is (0, 0, 0)\n\n      let material = new MeshBasicMaterial({\n        color: 0x000000\n      });\n      let geometry;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'appearance':\n            if (fieldValues[0] !== null) {\n              material = getNode(fieldValues[0]);\n            }\n\n            break;\n\n          case 'geometry':\n            if (fieldValues[0] !== null) {\n              geometry = getNode(fieldValues[0]);\n            }\n\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      } // build 3D object\n\n\n      let object;\n\n      if (geometry && geometry.attributes.position) {\n        const type = geometry._type;\n\n        if (type === 'points') {\n          // points\n          const pointsMaterial = new PointsMaterial({\n            color: 0xffffff\n          });\n\n          if (geometry.attributes.color !== undefined) {\n            pointsMaterial.vertexColors = true;\n          } else {\n            // if the color field is NULL and there is a material defined for the appearance affecting this PointSet, then use the emissiveColor of the material to draw the points\n            if (material.isMeshPhongMaterial) {\n              pointsMaterial.color.copy(material.emissive);\n            }\n          }\n\n          object = new Points(geometry, pointsMaterial);\n        } else if (type === 'line') {\n          // lines\n          const lineMaterial = new LineBasicMaterial({\n            color: 0xffffff\n          });\n\n          if (geometry.attributes.color !== undefined) {\n            lineMaterial.vertexColors = true;\n          } else {\n            // if the color field is NULL and there is a material defined for the appearance affecting this IndexedLineSet, then use the emissiveColor of the material to draw the lines\n            if (material.isMeshPhongMaterial) {\n              lineMaterial.color.copy(material.emissive);\n            }\n          }\n\n          object = new LineSegments(geometry, lineMaterial);\n        } else {\n          // consider meshes\n          // check \"solid\" hint (it's placed in the geometry but affects the material)\n          if (geometry._solid !== undefined) {\n            material.side = geometry._solid ? FrontSide : DoubleSide;\n          } // check for vertex colors\n\n\n          if (geometry.attributes.color !== undefined) {\n            material.vertexColors = true;\n          }\n\n          object = new Mesh(geometry, material);\n        }\n      } else {\n        object = new Object3D(); // if the geometry field is NULL or no vertices are defined the object is not drawn\n\n        object.visible = false;\n      }\n\n      return object;\n    }\n\n    function buildAppearanceNode(node) {\n      let material = new MeshPhongMaterial();\n      let transformData;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'material':\n            if (fieldValues[0] !== null) {\n              const materialData = getNode(fieldValues[0]);\n              if (materialData.diffuseColor) material.color.copy(materialData.diffuseColor);\n              if (materialData.emissiveColor) material.emissive.copy(materialData.emissiveColor);\n              if (materialData.shininess) material.shininess = materialData.shininess;\n              if (materialData.specularColor) material.specular.copy(materialData.specularColor);\n              if (materialData.transparency) material.opacity = 1 - materialData.transparency;\n              if (materialData.transparency > 0) material.transparent = true;\n            } else {\n              // if the material field is NULL or unspecified, lighting is off and the unlit object color is (0, 0, 0)\n              material = new MeshBasicMaterial({\n                color: 0x000000\n              });\n            }\n\n            break;\n\n          case 'texture':\n            const textureNode = fieldValues[0];\n\n            if (textureNode !== null) {\n              if (textureNode.name === 'ImageTexture' || textureNode.name === 'PixelTexture') {\n                material.map = getNode(textureNode);\n              }\n            }\n\n            break;\n\n          case 'textureTransform':\n            if (fieldValues[0] !== null) {\n              transformData = getNode(fieldValues[0]);\n            }\n\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      } // only apply texture transform data if a texture was defined\n\n\n      if (material.map) {\n        // respect VRML lighting model\n        if (material.map.__type) {\n          switch (material.map.__type) {\n            case TEXTURE_TYPE.INTENSITY_ALPHA:\n              material.opacity = 1; // ignore transparency\n\n              break;\n\n            case TEXTURE_TYPE.RGB:\n              material.color.set(0xffffff); // ignore material color\n\n              break;\n\n            case TEXTURE_TYPE.RGBA:\n              material.color.set(0xffffff); // ignore material color\n\n              material.opacity = 1; // ignore transparency\n\n              break;\n          }\n\n          delete material.map.__type;\n        } // apply texture transform\n\n\n        if (transformData) {\n          material.map.center.copy(transformData.center);\n          material.map.rotation = transformData.rotation;\n          material.map.repeat.copy(transformData.scale);\n          material.map.offset.copy(transformData.translation);\n        }\n      }\n\n      return material;\n    }\n\n    function buildMaterialNode(node) {\n      const materialData = {};\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'ambientIntensity':\n            // field not supported\n            break;\n\n          case 'diffuseColor':\n            materialData.diffuseColor = new Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n\n          case 'emissiveColor':\n            materialData.emissiveColor = new Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n\n          case 'shininess':\n            materialData.shininess = fieldValues[0];\n            break;\n\n          case 'specularColor':\n            materialData.emissiveColor = new Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n\n          case 'transparency':\n            materialData.transparency = fieldValues[0];\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      return materialData;\n    }\n\n    function parseHexColor(hex, textureType, color) {\n      let value;\n\n      switch (textureType) {\n        case TEXTURE_TYPE.INTENSITY:\n          // Intensity texture: A one-component image specifies one-byte hexadecimal or integer values representing the intensity of the image\n          value = parseInt(hex);\n          color.r = value;\n          color.g = value;\n          color.b = value;\n          color.a = 1;\n          break;\n\n        case TEXTURE_TYPE.INTENSITY_ALPHA:\n          // Intensity+Alpha texture: A two-component image specifies the intensity in the first (high) byte and the alpha opacity in the second (low) byte.\n          value = parseInt('0x' + hex.substring(2, 4));\n          color.r = value;\n          color.g = value;\n          color.b = value;\n          color.a = parseInt('0x' + hex.substring(4, 6));\n          break;\n\n        case TEXTURE_TYPE.RGB:\n          // RGB texture: Pixels in a three-component image specify the red component in the first (high) byte, followed by the green and blue components\n          color.r = parseInt('0x' + hex.substring(2, 4));\n          color.g = parseInt('0x' + hex.substring(4, 6));\n          color.b = parseInt('0x' + hex.substring(6, 8));\n          color.a = 1;\n          break;\n\n        case TEXTURE_TYPE.RGBA:\n          // RGBA texture: Four-component images specify the alpha opacity byte after red/green/blue\n          color.r = parseInt('0x' + hex.substring(2, 4));\n          color.g = parseInt('0x' + hex.substring(4, 6));\n          color.b = parseInt('0x' + hex.substring(6, 8));\n          color.a = parseInt('0x' + hex.substring(8, 10));\n          break;\n      }\n    }\n\n    function getTextureType(num_components) {\n      let type;\n\n      switch (num_components) {\n        case 1:\n          type = TEXTURE_TYPE.INTENSITY;\n          break;\n\n        case 2:\n          type = TEXTURE_TYPE.INTENSITY_ALPHA;\n          break;\n\n        case 3:\n          type = TEXTURE_TYPE.RGB;\n          break;\n\n        case 4:\n          type = TEXTURE_TYPE.RGBA;\n          break;\n      }\n\n      return type;\n    }\n\n    function buildPixelTextureNode(node) {\n      let texture;\n      let wrapS = RepeatWrapping;\n      let wrapT = RepeatWrapping;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'image':\n            const width = fieldValues[0];\n            const height = fieldValues[1];\n            const num_components = fieldValues[2];\n            const textureType = getTextureType(num_components);\n            const data = new Uint8Array(4 * width * height);\n            const color = {\n              r: 0,\n              g: 0,\n              b: 0,\n              a: 0\n            };\n\n            for (let j = 3, k = 0, jl = fieldValues.length; j < jl; j++, k++) {\n              parseHexColor(fieldValues[j], textureType, color);\n              const stride = k * 4;\n              data[stride + 0] = color.r;\n              data[stride + 1] = color.g;\n              data[stride + 2] = color.b;\n              data[stride + 3] = color.a;\n            }\n\n            texture = new DataTexture(data, width, height);\n            texture.needsUpdate = true;\n            texture.__type = textureType; // needed for material modifications\n\n            break;\n\n          case 'repeatS':\n            if (fieldValues[0] === false) wrapS = ClampToEdgeWrapping;\n            break;\n\n          case 'repeatT':\n            if (fieldValues[0] === false) wrapT = ClampToEdgeWrapping;\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      if (texture) {\n        texture.wrapS = wrapS;\n        texture.wrapT = wrapT;\n      }\n\n      return texture;\n    }\n\n    function buildImageTextureNode(node) {\n      let texture;\n      let wrapS = RepeatWrapping;\n      let wrapT = RepeatWrapping;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'url':\n            const url = fieldValues[0];\n            if (url) texture = textureLoader.load(url);\n            break;\n\n          case 'repeatS':\n            if (fieldValues[0] === false) wrapS = ClampToEdgeWrapping;\n            break;\n\n          case 'repeatT':\n            if (fieldValues[0] === false) wrapT = ClampToEdgeWrapping;\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      if (texture) {\n        texture.wrapS = wrapS;\n        texture.wrapT = wrapT;\n      }\n\n      return texture;\n    }\n\n    function buildTextureTransformNode(node) {\n      const transformData = {\n        center: new Vector2(),\n        rotation: new Vector2(),\n        scale: new Vector2(),\n        translation: new Vector2()\n      };\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'center':\n            transformData.center.set(fieldValues[0], fieldValues[1]);\n            break;\n\n          case 'rotation':\n            transformData.rotation = fieldValues[0];\n            break;\n\n          case 'scale':\n            transformData.scale.set(fieldValues[0], fieldValues[1]);\n            break;\n\n          case 'translation':\n            transformData.translation.set(fieldValues[0], fieldValues[1]);\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      return transformData;\n    }\n\n    function buildGeometricNode(node) {\n      return node.fields[0].values;\n    }\n\n    function buildWorldInfoNode(node) {\n      const worldInfo = {};\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'title':\n            worldInfo.title = fieldValues[0];\n            break;\n\n          case 'info':\n            worldInfo.info = fieldValues;\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      return worldInfo;\n    }\n\n    function buildIndexedFaceSetNode(node) {\n      let color, coord, normal, texCoord;\n      let ccw = true,\n          solid = true,\n          creaseAngle = 0;\n      let colorIndex, coordIndex, normalIndex, texCoordIndex;\n      let colorPerVertex = true,\n          normalPerVertex = true;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'color':\n            const colorNode = fieldValues[0];\n\n            if (colorNode !== null) {\n              color = getNode(colorNode);\n            }\n\n            break;\n\n          case 'coord':\n            const coordNode = fieldValues[0];\n\n            if (coordNode !== null) {\n              coord = getNode(coordNode);\n            }\n\n            break;\n\n          case 'normal':\n            const normalNode = fieldValues[0];\n\n            if (normalNode !== null) {\n              normal = getNode(normalNode);\n            }\n\n            break;\n\n          case 'texCoord':\n            const texCoordNode = fieldValues[0];\n\n            if (texCoordNode !== null) {\n              texCoord = getNode(texCoordNode);\n            }\n\n            break;\n\n          case 'ccw':\n            ccw = fieldValues[0];\n            break;\n\n          case 'colorIndex':\n            colorIndex = fieldValues;\n            break;\n\n          case 'colorPerVertex':\n            colorPerVertex = fieldValues[0];\n            break;\n\n          case 'convex':\n            // field not supported\n            break;\n\n          case 'coordIndex':\n            coordIndex = fieldValues;\n            break;\n\n          case 'creaseAngle':\n            creaseAngle = fieldValues[0];\n            break;\n\n          case 'normalIndex':\n            normalIndex = fieldValues;\n            break;\n\n          case 'normalPerVertex':\n            normalPerVertex = fieldValues[0];\n            break;\n\n          case 'solid':\n            solid = fieldValues[0];\n            break;\n\n          case 'texCoordIndex':\n            texCoordIndex = fieldValues;\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      if (coordIndex === undefined) {\n        console.warn('THREE.VRMLLoader: Missing coordIndex.');\n        return new BufferGeometry(); // handle VRML files with incomplete geometry definition\n      }\n\n      const triangulatedCoordIndex = triangulateFaceIndex(coordIndex, ccw);\n      let colorAttribute;\n      let normalAttribute;\n      let uvAttribute;\n\n      if (color) {\n        if (colorPerVertex === true) {\n          if (colorIndex && colorIndex.length > 0) {\n            // if the colorIndex field is not empty, then it is used to choose colors for each vertex of the IndexedFaceSet.\n            const triangulatedColorIndex = triangulateFaceIndex(colorIndex, ccw);\n            colorAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedColorIndex, color, 3);\n          } else {\n            // if the colorIndex field is empty, then the coordIndex field is used to choose colors from the Color node\n            colorAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(color, 3));\n          }\n        } else {\n          if (colorIndex && colorIndex.length > 0) {\n            // if the colorIndex field is not empty, then they are used to choose one color for each face of the IndexedFaceSet\n            const flattenFaceColors = flattenData(color, colorIndex);\n            const triangulatedFaceColors = triangulateFaceData(flattenFaceColors, coordIndex);\n            colorAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceColors);\n          } else {\n            // if the colorIndex field is empty, then the color are applied to each face of the IndexedFaceSet in order\n            const triangulatedFaceColors = triangulateFaceData(color, coordIndex);\n            colorAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceColors);\n          }\n        }\n      }\n\n      if (normal) {\n        if (normalPerVertex === true) {\n          // consider vertex normals\n          if (normalIndex && normalIndex.length > 0) {\n            // if the normalIndex field is not empty, then it is used to choose normals for each vertex of the IndexedFaceSet.\n            const triangulatedNormalIndex = triangulateFaceIndex(normalIndex, ccw);\n            normalAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedNormalIndex, normal, 3);\n          } else {\n            // if the normalIndex field is empty, then the coordIndex field is used to choose normals from the Normal node\n            normalAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(normal, 3));\n          }\n        } else {\n          // consider face normals\n          if (normalIndex && normalIndex.length > 0) {\n            // if the normalIndex field is not empty, then they are used to choose one normal for each face of the IndexedFaceSet\n            const flattenFaceNormals = flattenData(normal, normalIndex);\n            const triangulatedFaceNormals = triangulateFaceData(flattenFaceNormals, coordIndex);\n            normalAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceNormals);\n          } else {\n            // if the normalIndex field is empty, then the normals are applied to each face of the IndexedFaceSet in order\n            const triangulatedFaceNormals = triangulateFaceData(normal, coordIndex);\n            normalAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceNormals);\n          }\n        }\n      } else {\n        // if the normal field is NULL, then the loader should automatically generate normals, using creaseAngle to determine if and how normals are smoothed across shared vertices\n        normalAttribute = computeNormalAttribute(triangulatedCoordIndex, coord, creaseAngle);\n      }\n\n      if (texCoord) {\n        // texture coordinates are always defined on vertex level\n        if (texCoordIndex && texCoordIndex.length > 0) {\n          // if the texCoordIndex field is not empty, then it is used to choose texture coordinates for each vertex of the IndexedFaceSet.\n          const triangulatedTexCoordIndex = triangulateFaceIndex(texCoordIndex, ccw);\n          uvAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedTexCoordIndex, texCoord, 2);\n        } else {\n          // if the texCoordIndex field is empty, then the coordIndex array is used to choose texture coordinates from the TextureCoordinate node\n          uvAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(texCoord, 2));\n        }\n      }\n\n      const geometry = new BufferGeometry();\n      const positionAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(coord, 3));\n      geometry.setAttribute('position', positionAttribute);\n      geometry.setAttribute('normal', normalAttribute); // optional attributes\n\n      if (colorAttribute) geometry.setAttribute('color', colorAttribute);\n      if (uvAttribute) geometry.setAttribute('uv', uvAttribute); // \"solid\" influences the material so let's store it for later use\n\n      geometry._solid = solid;\n      geometry._type = 'mesh';\n      return geometry;\n    }\n\n    function buildIndexedLineSetNode(node) {\n      let color, coord;\n      let colorIndex, coordIndex;\n      let colorPerVertex = true;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'color':\n            const colorNode = fieldValues[0];\n\n            if (colorNode !== null) {\n              color = getNode(colorNode);\n            }\n\n            break;\n\n          case 'coord':\n            const coordNode = fieldValues[0];\n\n            if (coordNode !== null) {\n              coord = getNode(coordNode);\n            }\n\n            break;\n\n          case 'colorIndex':\n            colorIndex = fieldValues;\n            break;\n\n          case 'colorPerVertex':\n            colorPerVertex = fieldValues[0];\n            break;\n\n          case 'coordIndex':\n            coordIndex = fieldValues;\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      } // build lines\n\n\n      let colorAttribute;\n      const expandedLineIndex = expandLineIndex(coordIndex); // create an index for three.js's linesegment primitive\n\n      if (color) {\n        if (colorPerVertex === true) {\n          if (colorIndex.length > 0) {\n            // if the colorIndex field is not empty, then one color is used for each polyline of the IndexedLineSet.\n            const expandedColorIndex = expandLineIndex(colorIndex); // compute colors for each line segment (rendering primitve)\n\n            colorAttribute = computeAttributeFromIndexedData(expandedLineIndex, expandedColorIndex, color, 3); // compute data on vertex level\n          } else {\n            // if the colorIndex field is empty, then the colors are applied to each polyline of the IndexedLineSet in order.\n            colorAttribute = toNonIndexedAttribute(expandedLineIndex, new Float32BufferAttribute(color, 3));\n          }\n        } else {\n          if (colorIndex.length > 0) {\n            // if the colorIndex field is not empty, then colors are applied to each vertex of the IndexedLineSet\n            const flattenLineColors = flattenData(color, colorIndex); // compute colors for each VRML primitve\n\n            const expandedLineColors = expandLineData(flattenLineColors, coordIndex); // compute colors for each line segment (rendering primitve)\n\n            colorAttribute = computeAttributeFromLineData(expandedLineIndex, expandedLineColors); // compute data on vertex level\n          } else {\n            // if the colorIndex field is empty, then the coordIndex field is used to choose colors from the Color node\n            const expandedLineColors = expandLineData(color, coordIndex); // compute colors for each line segment (rendering primitve)\n\n            colorAttribute = computeAttributeFromLineData(expandedLineIndex, expandedLineColors); // compute data on vertex level\n          }\n        }\n      } //\n\n\n      const geometry = new BufferGeometry();\n      const positionAttribute = toNonIndexedAttribute(expandedLineIndex, new Float32BufferAttribute(coord, 3));\n      geometry.setAttribute('position', positionAttribute);\n      if (colorAttribute) geometry.setAttribute('color', colorAttribute);\n      geometry._type = 'line';\n      return geometry;\n    }\n\n    function buildPointSetNode(node) {\n      let color, coord;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'color':\n            const colorNode = fieldValues[0];\n\n            if (colorNode !== null) {\n              color = getNode(colorNode);\n            }\n\n            break;\n\n          case 'coord':\n            const coordNode = fieldValues[0];\n\n            if (coordNode !== null) {\n              coord = getNode(coordNode);\n            }\n\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      const geometry = new BufferGeometry();\n      geometry.setAttribute('position', new Float32BufferAttribute(coord, 3));\n      if (color) geometry.setAttribute('color', new Float32BufferAttribute(color, 3));\n      geometry._type = 'points';\n      return geometry;\n    }\n\n    function buildBoxNode(node) {\n      const size = new Vector3(2, 2, 2);\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'size':\n            size.x = fieldValues[0];\n            size.y = fieldValues[1];\n            size.z = fieldValues[2];\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      const geometry = new BoxGeometry(size.x, size.y, size.z);\n      return geometry;\n    }\n\n    function buildConeNode(node) {\n      let radius = 1,\n          height = 2,\n          openEnded = false;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'bottom':\n            openEnded = !fieldValues[0];\n            break;\n\n          case 'bottomRadius':\n            radius = fieldValues[0];\n            break;\n\n          case 'height':\n            height = fieldValues[0];\n            break;\n\n          case 'side':\n            // field not supported\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      const geometry = new ConeGeometry(radius, height, 16, 1, openEnded);\n      return geometry;\n    }\n\n    function buildCylinderNode(node) {\n      let radius = 1,\n          height = 2;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'bottom':\n            // field not supported\n            break;\n\n          case 'radius':\n            radius = fieldValues[0];\n            break;\n\n          case 'height':\n            height = fieldValues[0];\n            break;\n\n          case 'side':\n            // field not supported\n            break;\n\n          case 'top':\n            // field not supported\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      const geometry = new CylinderGeometry(radius, radius, height, 16, 1);\n      return geometry;\n    }\n\n    function buildSphereNode(node) {\n      let radius = 1;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'radius':\n            radius = fieldValues[0];\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      const geometry = new SphereGeometry(radius, 16, 16);\n      return geometry;\n    }\n\n    function buildElevationGridNode(node) {\n      let color;\n      let normal;\n      let texCoord;\n      let height;\n      let colorPerVertex = true;\n      let normalPerVertex = true;\n      let solid = true;\n      let ccw = true;\n      let creaseAngle = 0;\n      let xDimension = 2;\n      let zDimension = 2;\n      let xSpacing = 1;\n      let zSpacing = 1;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'color':\n            const colorNode = fieldValues[0];\n\n            if (colorNode !== null) {\n              color = getNode(colorNode);\n            }\n\n            break;\n\n          case 'normal':\n            const normalNode = fieldValues[0];\n\n            if (normalNode !== null) {\n              normal = getNode(normalNode);\n            }\n\n            break;\n\n          case 'texCoord':\n            const texCoordNode = fieldValues[0];\n\n            if (texCoordNode !== null) {\n              texCoord = getNode(texCoordNode);\n            }\n\n            break;\n\n          case 'height':\n            height = fieldValues;\n            break;\n\n          case 'ccw':\n            ccw = fieldValues[0];\n            break;\n\n          case 'colorPerVertex':\n            colorPerVertex = fieldValues[0];\n            break;\n\n          case 'creaseAngle':\n            creaseAngle = fieldValues[0];\n            break;\n\n          case 'normalPerVertex':\n            normalPerVertex = fieldValues[0];\n            break;\n\n          case 'solid':\n            solid = fieldValues[0];\n            break;\n\n          case 'xDimension':\n            xDimension = fieldValues[0];\n            break;\n\n          case 'xSpacing':\n            xSpacing = fieldValues[0];\n            break;\n\n          case 'zDimension':\n            zDimension = fieldValues[0];\n            break;\n\n          case 'zSpacing':\n            zSpacing = fieldValues[0];\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      } // vertex data\n\n\n      const vertices = [];\n      const normals = [];\n      const colors = [];\n      const uvs = [];\n\n      for (let i = 0; i < zDimension; i++) {\n        for (let j = 0; j < xDimension; j++) {\n          // compute a row major index\n          const index = i * xDimension + j; // vertices\n\n          const x = xSpacing * i;\n          const y = height[index];\n          const z = zSpacing * j;\n          vertices.push(x, y, z); // colors\n\n          if (color && colorPerVertex === true) {\n            const r = color[index * 3 + 0];\n            const g = color[index * 3 + 1];\n            const b = color[index * 3 + 2];\n            colors.push(r, g, b);\n          } // normals\n\n\n          if (normal && normalPerVertex === true) {\n            const xn = normal[index * 3 + 0];\n            const yn = normal[index * 3 + 1];\n            const zn = normal[index * 3 + 2];\n            normals.push(xn, yn, zn);\n          } // uvs\n\n\n          if (texCoord) {\n            const s = texCoord[index * 2 + 0];\n            const t = texCoord[index * 2 + 1];\n            uvs.push(s, t);\n          } else {\n            uvs.push(i / (xDimension - 1), j / (zDimension - 1));\n          }\n        }\n      } // indices\n\n\n      const indices = [];\n\n      for (let i = 0; i < xDimension - 1; i++) {\n        for (let j = 0; j < zDimension - 1; j++) {\n          // from https://tecfa.unige.ch/guides/vrml/vrml97/spec/part1/nodesRef.html#ElevationGrid\n          const a = i + j * xDimension;\n          const b = i + (j + 1) * xDimension;\n          const c = i + 1 + (j + 1) * xDimension;\n          const d = i + 1 + j * xDimension; // faces\n\n          if (ccw === true) {\n            indices.push(a, c, b);\n            indices.push(c, a, d);\n          } else {\n            indices.push(a, b, c);\n            indices.push(c, d, a);\n          }\n        }\n      } //\n\n\n      const positionAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(vertices, 3));\n      const uvAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(uvs, 2));\n      let colorAttribute;\n      let normalAttribute; // color attribute\n\n      if (color) {\n        if (colorPerVertex === false) {\n          for (let i = 0; i < xDimension - 1; i++) {\n            for (let j = 0; j < zDimension - 1; j++) {\n              const index = i + j * (xDimension - 1);\n              const r = color[index * 3 + 0];\n              const g = color[index * 3 + 1];\n              const b = color[index * 3 + 2]; // one color per quad\n\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n            }\n          }\n\n          colorAttribute = new Float32BufferAttribute(colors, 3);\n        } else {\n          colorAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(colors, 3));\n        }\n      } // normal attribute\n\n\n      if (normal) {\n        if (normalPerVertex === false) {\n          for (let i = 0; i < xDimension - 1; i++) {\n            for (let j = 0; j < zDimension - 1; j++) {\n              const index = i + j * (xDimension - 1);\n              const xn = normal[index * 3 + 0];\n              const yn = normal[index * 3 + 1];\n              const zn = normal[index * 3 + 2]; // one normal per quad\n\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n            }\n          }\n\n          normalAttribute = new Float32BufferAttribute(normals, 3);\n        } else {\n          normalAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(normals, 3));\n        }\n      } else {\n        normalAttribute = computeNormalAttribute(indices, vertices, creaseAngle);\n      } // build geometry\n\n\n      const geometry = new BufferGeometry();\n      geometry.setAttribute('position', positionAttribute);\n      geometry.setAttribute('normal', normalAttribute);\n      geometry.setAttribute('uv', uvAttribute);\n      if (colorAttribute) geometry.setAttribute('color', colorAttribute); // \"solid\" influences the material so let's store it for later use\n\n      geometry._solid = solid;\n      geometry._type = 'mesh';\n      return geometry;\n    }\n\n    function buildExtrusionNode(node) {\n      let crossSection = [1, 1, 1, -1, -1, -1, -1, 1, 1, 1];\n      let spine = [0, 0, 0, 0, 1, 0];\n      let scale;\n      let orientation;\n      let beginCap = true;\n      let ccw = true;\n      let creaseAngle = 0;\n      let endCap = true;\n      let solid = true;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'beginCap':\n            beginCap = fieldValues[0];\n            break;\n\n          case 'ccw':\n            ccw = fieldValues[0];\n            break;\n\n          case 'convex':\n            // field not supported\n            break;\n\n          case 'creaseAngle':\n            creaseAngle = fieldValues[0];\n            break;\n\n          case 'crossSection':\n            crossSection = fieldValues;\n            break;\n\n          case 'endCap':\n            endCap = fieldValues[0];\n            break;\n\n          case 'orientation':\n            orientation = fieldValues;\n            break;\n\n          case 'scale':\n            scale = fieldValues;\n            break;\n\n          case 'solid':\n            solid = fieldValues[0];\n            break;\n\n          case 'spine':\n            spine = fieldValues; // only extrusion along the Y-axis are supported so far\n\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      const crossSectionClosed = crossSection[0] === crossSection[crossSection.length - 2] && crossSection[1] === crossSection[crossSection.length - 1]; // vertices\n\n      const vertices = [];\n      const spineVector = new Vector3();\n      const scaling = new Vector3();\n      const axis = new Vector3();\n      const vertex = new Vector3();\n      const quaternion = new Quaternion();\n\n      for (let i = 0, j = 0, o = 0, il = spine.length; i < il; i += 3, j += 2, o += 4) {\n        spineVector.fromArray(spine, i);\n        scaling.x = scale ? scale[j + 0] : 1;\n        scaling.y = 1;\n        scaling.z = scale ? scale[j + 1] : 1;\n        axis.x = orientation ? orientation[o + 0] : 0;\n        axis.y = orientation ? orientation[o + 1] : 0;\n        axis.z = orientation ? orientation[o + 2] : 1;\n        const angle = orientation ? orientation[o + 3] : 0;\n\n        for (let k = 0, kl = crossSection.length; k < kl; k += 2) {\n          vertex.x = crossSection[k + 0];\n          vertex.y = 0;\n          vertex.z = crossSection[k + 1]; // scale\n\n          vertex.multiply(scaling); // rotate\n\n          quaternion.setFromAxisAngle(axis, angle);\n          vertex.applyQuaternion(quaternion); // translate\n\n          vertex.add(spineVector);\n          vertices.push(vertex.x, vertex.y, vertex.z);\n        }\n      } // indices\n\n\n      const indices = [];\n      const spineCount = spine.length / 3;\n      const crossSectionCount = crossSection.length / 2;\n\n      for (let i = 0; i < spineCount - 1; i++) {\n        for (let j = 0; j < crossSectionCount - 1; j++) {\n          const a = j + i * crossSectionCount;\n          let b = j + 1 + i * crossSectionCount;\n          const c = j + (i + 1) * crossSectionCount;\n          let d = j + 1 + (i + 1) * crossSectionCount;\n\n          if (j === crossSectionCount - 2 && crossSectionClosed === true) {\n            b = i * crossSectionCount;\n            d = (i + 1) * crossSectionCount;\n          }\n\n          if (ccw === true) {\n            indices.push(a, b, c);\n            indices.push(c, b, d);\n          } else {\n            indices.push(a, c, b);\n            indices.push(c, d, b);\n          }\n        }\n      } // triangulate cap\n\n\n      if (beginCap === true || endCap === true) {\n        const contour = [];\n\n        for (let i = 0, l = crossSection.length; i < l; i += 2) {\n          contour.push(new Vector2(crossSection[i], crossSection[i + 1]));\n        }\n\n        const faces = ShapeUtils.triangulateShape(contour, []);\n        const capIndices = [];\n\n        for (let i = 0, l = faces.length; i < l; i++) {\n          const face = faces[i];\n          capIndices.push(face[0], face[1], face[2]);\n        } // begin cap\n\n\n        if (beginCap === true) {\n          for (let i = 0, l = capIndices.length; i < l; i += 3) {\n            if (ccw === true) {\n              indices.push(capIndices[i + 0], capIndices[i + 1], capIndices[i + 2]);\n            } else {\n              indices.push(capIndices[i + 0], capIndices[i + 2], capIndices[i + 1]);\n            }\n          }\n        } // end cap\n\n\n        if (endCap === true) {\n          const indexOffset = crossSectionCount * (spineCount - 1); // references to the first vertex of the last cross section\n\n          for (let i = 0, l = capIndices.length; i < l; i += 3) {\n            if (ccw === true) {\n              indices.push(indexOffset + capIndices[i + 0], indexOffset + capIndices[i + 2], indexOffset + capIndices[i + 1]);\n            } else {\n              indices.push(indexOffset + capIndices[i + 0], indexOffset + capIndices[i + 1], indexOffset + capIndices[i + 2]);\n            }\n          }\n        }\n      }\n\n      const positionAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(vertices, 3));\n      const normalAttribute = computeNormalAttribute(indices, vertices, creaseAngle);\n      const geometry = new BufferGeometry();\n      geometry.setAttribute('position', positionAttribute);\n      geometry.setAttribute('normal', normalAttribute); // no uvs yet\n      // \"solid\" influences the material so let's store it for later use\n\n      geometry._solid = solid;\n      geometry._type = 'mesh';\n      return geometry;\n    } // helper functions\n\n\n    function resolveUSE(identifier) {\n      const node = nodeMap[identifier];\n      const build = getNode(node); // because the same 3D objects can have different transformations, it's necessary to clone them.\n      // materials can be influenced by the geometry (e.g. vertex normals). cloning is necessary to avoid\n      // any side effects\n\n      return build.isObject3D || build.isMaterial ? build.clone() : build;\n    }\n\n    function parseFieldChildren(children, owner) {\n      for (let i = 0, l = children.length; i < l; i++) {\n        const object = getNode(children[i]);\n        if (object instanceof Object3D) owner.add(object);\n      }\n    }\n\n    function triangulateFaceIndex(index, ccw) {\n      const indices = []; // since face defintions can have more than three vertices, it's necessary to\n      // perform a simple triangulation\n\n      let start = 0;\n\n      for (let i = 0, l = index.length; i < l; i++) {\n        const i1 = index[start];\n        const i2 = index[i + (ccw ? 1 : 2)];\n        const i3 = index[i + (ccw ? 2 : 1)];\n        indices.push(i1, i2, i3); // an index of -1 indicates that the current face has ended and the next one begins\n\n        if (index[i + 3] === -1 || i + 3 >= l) {\n          i += 3;\n          start = i + 1;\n        }\n      }\n\n      return indices;\n    }\n\n    function triangulateFaceData(data, index) {\n      const triangulatedData = [];\n      let start = 0;\n\n      for (let i = 0, l = index.length; i < l; i++) {\n        const stride = start * 3;\n        const x = data[stride];\n        const y = data[stride + 1];\n        const z = data[stride + 2];\n        triangulatedData.push(x, y, z); // an index of -1 indicates that the current face has ended and the next one begins\n\n        if (index[i + 3] === -1 || i + 3 >= l) {\n          i += 3;\n          start++;\n        }\n      }\n\n      return triangulatedData;\n    }\n\n    function flattenData(data, index) {\n      const flattenData = [];\n\n      for (let i = 0, l = index.length; i < l; i++) {\n        const i1 = index[i];\n        const stride = i1 * 3;\n        const x = data[stride];\n        const y = data[stride + 1];\n        const z = data[stride + 2];\n        flattenData.push(x, y, z);\n      }\n\n      return flattenData;\n    }\n\n    function expandLineIndex(index) {\n      const indices = [];\n\n      for (let i = 0, l = index.length; i < l; i++) {\n        const i1 = index[i];\n        const i2 = index[i + 1];\n        indices.push(i1, i2); // an index of -1 indicates that the current line has ended and the next one begins\n\n        if (index[i + 2] === -1 || i + 2 >= l) {\n          i += 2;\n        }\n      }\n\n      return indices;\n    }\n\n    function expandLineData(data, index) {\n      const triangulatedData = [];\n      let start = 0;\n\n      for (let i = 0, l = index.length; i < l; i++) {\n        const stride = start * 3;\n        const x = data[stride];\n        const y = data[stride + 1];\n        const z = data[stride + 2];\n        triangulatedData.push(x, y, z); // an index of -1 indicates that the current line has ended and the next one begins\n\n        if (index[i + 2] === -1 || i + 2 >= l) {\n          i += 2;\n          start++;\n        }\n      }\n\n      return triangulatedData;\n    }\n\n    const vA = new Vector3();\n    const vB = new Vector3();\n    const vC = new Vector3();\n    const uvA = new Vector2();\n    const uvB = new Vector2();\n    const uvC = new Vector2();\n\n    function computeAttributeFromIndexedData(coordIndex, index, data, itemSize) {\n      const array = []; // we use the coordIndex.length as delimiter since normalIndex must contain at least as many indices\n\n      for (let i = 0, l = coordIndex.length; i < l; i += 3) {\n        const a = index[i];\n        const b = index[i + 1];\n        const c = index[i + 2];\n\n        if (itemSize === 2) {\n          uvA.fromArray(data, a * itemSize);\n          uvB.fromArray(data, b * itemSize);\n          uvC.fromArray(data, c * itemSize);\n          array.push(uvA.x, uvA.y);\n          array.push(uvB.x, uvB.y);\n          array.push(uvC.x, uvC.y);\n        } else {\n          vA.fromArray(data, a * itemSize);\n          vB.fromArray(data, b * itemSize);\n          vC.fromArray(data, c * itemSize);\n          array.push(vA.x, vA.y, vA.z);\n          array.push(vB.x, vB.y, vB.z);\n          array.push(vC.x, vC.y, vC.z);\n        }\n      }\n\n      return new Float32BufferAttribute(array, itemSize);\n    }\n\n    function computeAttributeFromFaceData(index, faceData) {\n      const array = [];\n\n      for (let i = 0, j = 0, l = index.length; i < l; i += 3, j++) {\n        vA.fromArray(faceData, j * 3);\n        array.push(vA.x, vA.y, vA.z);\n        array.push(vA.x, vA.y, vA.z);\n        array.push(vA.x, vA.y, vA.z);\n      }\n\n      return new Float32BufferAttribute(array, 3);\n    }\n\n    function computeAttributeFromLineData(index, lineData) {\n      const array = [];\n\n      for (let i = 0, j = 0, l = index.length; i < l; i += 2, j++) {\n        vA.fromArray(lineData, j * 3);\n        array.push(vA.x, vA.y, vA.z);\n        array.push(vA.x, vA.y, vA.z);\n      }\n\n      return new Float32BufferAttribute(array, 3);\n    }\n\n    function toNonIndexedAttribute(indices, attribute) {\n      const array = attribute.array;\n      const itemSize = attribute.itemSize;\n      const array2 = new array.constructor(indices.length * itemSize);\n      let index = 0,\n          index2 = 0;\n\n      for (let i = 0, l = indices.length; i < l; i++) {\n        index = indices[i] * itemSize;\n\n        for (let j = 0; j < itemSize; j++) {\n          array2[index2++] = array[index++];\n        }\n      }\n\n      return new Float32BufferAttribute(array2, itemSize);\n    }\n\n    const ab = new Vector3();\n    const cb = new Vector3();\n\n    function computeNormalAttribute(index, coord, creaseAngle) {\n      const faces = [];\n      const vertexNormals = {}; // prepare face and raw vertex normals\n\n      for (let i = 0, l = index.length; i < l; i += 3) {\n        const a = index[i];\n        const b = index[i + 1];\n        const c = index[i + 2];\n        const face = new Face(a, b, c);\n        vA.fromArray(coord, a * 3);\n        vB.fromArray(coord, b * 3);\n        vC.fromArray(coord, c * 3);\n        cb.subVectors(vC, vB);\n        ab.subVectors(vA, vB);\n        cb.cross(ab);\n        cb.normalize();\n        face.normal.copy(cb);\n        if (vertexNormals[a] === undefined) vertexNormals[a] = [];\n        if (vertexNormals[b] === undefined) vertexNormals[b] = [];\n        if (vertexNormals[c] === undefined) vertexNormals[c] = [];\n        vertexNormals[a].push(face.normal);\n        vertexNormals[b].push(face.normal);\n        vertexNormals[c].push(face.normal);\n        faces.push(face);\n      } // compute vertex normals and build final geometry\n\n\n      const normals = [];\n\n      for (let i = 0, l = faces.length; i < l; i++) {\n        const face = faces[i];\n        const nA = weightedNormal(vertexNormals[face.a], face.normal, creaseAngle);\n        const nB = weightedNormal(vertexNormals[face.b], face.normal, creaseAngle);\n        const nC = weightedNormal(vertexNormals[face.c], face.normal, creaseAngle);\n        vA.fromArray(coord, face.a * 3);\n        vB.fromArray(coord, face.b * 3);\n        vC.fromArray(coord, face.c * 3);\n        normals.push(nA.x, nA.y, nA.z);\n        normals.push(nB.x, nB.y, nB.z);\n        normals.push(nC.x, nC.y, nC.z);\n      }\n\n      return new Float32BufferAttribute(normals, 3);\n    }\n\n    function weightedNormal(normals, vector, creaseAngle) {\n      const normal = new Vector3();\n\n      if (creaseAngle === 0) {\n        normal.copy(vector);\n      } else {\n        for (let i = 0, l = normals.length; i < l; i++) {\n          if (normals[i].angleTo(vector) < creaseAngle) {\n            normal.add(normals[i]);\n          }\n        }\n      }\n\n      return normal.normalize();\n    }\n\n    function toColorArray(colors) {\n      const array = [];\n\n      for (let i = 0, l = colors.length; i < l; i += 3) {\n        array.push(new Color(colors[i], colors[i + 1], colors[i + 2]));\n      }\n\n      return array;\n    }\n    /**\n     * Vertically paints the faces interpolating between the\n     * specified colors at the specified angels. This is used for the Background\n     * node, but could be applied to other nodes with multiple faces as well.\n     *\n     * When used with the Background node, default is directionIsDown is true if\n     * interpolating the skyColor down from the Zenith. When interpolationg up from\n     * the Nadir i.e. interpolating the groundColor, the directionIsDown is false.\n     *\n     * The first angle is never specified, it is the Zenith (0 rad). Angles are specified\n     * in radians. The geometry is thought a sphere, but could be anything. The color interpolation\n     * is linear along the Y axis in any case.\n     *\n     * You must specify one more color than you have angles at the beginning of the colors array.\n     * This is the color of the Zenith (the top of the shape).\n     *\n     * @param {BufferGeometry} geometry\n     * @param {number} radius\n     * @param {array} angles\n     * @param {array} colors\n     * @param {boolean} topDown - Whether to work top down or bottom up.\n     */\n\n\n    function paintFaces(geometry, radius, angles, colors, topDown) {\n      // compute threshold values\n      const thresholds = [];\n      const startAngle = topDown === true ? 0 : Math.PI;\n\n      for (let i = 0, l = colors.length; i < l; i++) {\n        let angle = i === 0 ? 0 : angles[i - 1];\n        angle = topDown === true ? angle : startAngle - angle;\n        const point = new Vector3();\n        point.setFromSphericalCoords(radius, angle, 0);\n        thresholds.push(point);\n      } // generate vertex colors\n\n\n      const indices = geometry.index;\n      const positionAttribute = geometry.attributes.position;\n      const colorAttribute = new BufferAttribute(new Float32Array(geometry.attributes.position.count * 3), 3);\n      const position = new Vector3();\n      const color = new Color();\n\n      for (let i = 0; i < indices.count; i++) {\n        const index = indices.getX(i);\n        position.fromBufferAttribute(positionAttribute, index);\n        let thresholdIndexA, thresholdIndexB;\n        let t = 1;\n\n        for (let j = 1; j < thresholds.length; j++) {\n          thresholdIndexA = j - 1;\n          thresholdIndexB = j;\n          const thresholdA = thresholds[thresholdIndexA];\n          const thresholdB = thresholds[thresholdIndexB];\n\n          if (topDown === true) {\n            // interpolation for sky color\n            if (position.y <= thresholdA.y && position.y > thresholdB.y) {\n              t = Math.abs(thresholdA.y - position.y) / Math.abs(thresholdA.y - thresholdB.y);\n              break;\n            }\n          } else {\n            // interpolation for ground color\n            if (position.y >= thresholdA.y && position.y < thresholdB.y) {\n              t = Math.abs(thresholdA.y - position.y) / Math.abs(thresholdA.y - thresholdB.y);\n              break;\n            }\n          }\n        }\n\n        const colorA = colors[thresholdIndexA];\n        const colorB = colors[thresholdIndexB];\n        color.copy(colorA).lerp(colorB, t);\n        colorAttribute.setXYZ(index, color.r, color.g, color.b);\n      }\n\n      geometry.setAttribute('color', colorAttribute);\n    } //\n\n\n    const textureLoader = new TextureLoader(this.manager);\n    textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin); // check version (only 2.0 is supported)\n\n    if (data.indexOf('#VRML V2.0') === -1) {\n      throw Error('THREE.VRMLLexer: Version of VRML asset not supported.');\n    } // create JSON representing the tree structure of the VRML asset\n\n\n    const tree = generateVRMLTree(data); // parse the tree structure to a three.js scene\n\n    const scene = parseTree(tree);\n    return scene;\n  }\n\n}\n\nclass VRMLLexer {\n  constructor(tokens) {\n    this.lexer = new Lexer(tokens); // eslint-disable-line no-undef\n  }\n\n  lex(inputText) {\n    const lexingResult = this.lexer.tokenize(inputText);\n\n    if (lexingResult.errors.length > 0) {\n      console.error(lexingResult.errors);\n      throw Error('THREE.VRMLLexer: Lexing errors detected.');\n    }\n\n    return lexingResult;\n  }\n\n}\n\nclass VRMLParser extends CstParser {\n  constructor(tokenVocabulary) {\n    super(tokenVocabulary);\n    const $ = this;\n    const Version = tokenVocabulary['Version'];\n    const LCurly = tokenVocabulary['LCurly'];\n    const RCurly = tokenVocabulary['RCurly'];\n    const LSquare = tokenVocabulary['LSquare'];\n    const RSquare = tokenVocabulary['RSquare'];\n    const Identifier = tokenVocabulary['Identifier'];\n    const RouteIdentifier = tokenVocabulary['RouteIdentifier'];\n    const StringLiteral = tokenVocabulary['StringLiteral'];\n    const HexLiteral = tokenVocabulary['HexLiteral'];\n    const NumberLiteral = tokenVocabulary['NumberLiteral'];\n    const TrueLiteral = tokenVocabulary['TrueLiteral'];\n    const FalseLiteral = tokenVocabulary['FalseLiteral'];\n    const NullLiteral = tokenVocabulary['NullLiteral'];\n    const DEF = tokenVocabulary['DEF'];\n    const USE = tokenVocabulary['USE'];\n    const ROUTE = tokenVocabulary['ROUTE'];\n    const TO = tokenVocabulary['TO'];\n    const NodeName = tokenVocabulary['NodeName'];\n    $.RULE('vrml', function () {\n      $.SUBRULE($.version);\n      $.AT_LEAST_ONE(function () {\n        $.SUBRULE($.node);\n      });\n      $.MANY(function () {\n        $.SUBRULE($.route);\n      });\n    });\n    $.RULE('version', function () {\n      $.CONSUME(Version);\n    });\n    $.RULE('node', function () {\n      $.OPTION(function () {\n        $.SUBRULE($.def);\n      });\n      $.CONSUME(NodeName);\n      $.CONSUME(LCurly);\n      $.MANY(function () {\n        $.SUBRULE($.field);\n      });\n      $.CONSUME(RCurly);\n    });\n    $.RULE('field', function () {\n      $.CONSUME(Identifier);\n      $.OR2([{\n        ALT: function () {\n          $.SUBRULE($.singleFieldValue);\n        }\n      }, {\n        ALT: function () {\n          $.SUBRULE($.multiFieldValue);\n        }\n      }]);\n    });\n    $.RULE('def', function () {\n      $.CONSUME(DEF);\n      $.OR([{\n        ALT: function () {\n          $.CONSUME(Identifier);\n        }\n      }, {\n        ALT: function () {\n          $.CONSUME(NodeName);\n        }\n      }]);\n    });\n    $.RULE('use', function () {\n      $.CONSUME(USE);\n      $.OR([{\n        ALT: function () {\n          $.CONSUME(Identifier);\n        }\n      }, {\n        ALT: function () {\n          $.CONSUME(NodeName);\n        }\n      }]);\n    });\n    $.RULE('singleFieldValue', function () {\n      $.AT_LEAST_ONE(function () {\n        $.OR([{\n          ALT: function () {\n            $.SUBRULE($.node);\n          }\n        }, {\n          ALT: function () {\n            $.SUBRULE($.use);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(StringLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(HexLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(NumberLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(TrueLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(FalseLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(NullLiteral);\n          }\n        }]);\n      });\n    });\n    $.RULE('multiFieldValue', function () {\n      $.CONSUME(LSquare);\n      $.MANY(function () {\n        $.OR([{\n          ALT: function () {\n            $.SUBRULE($.node);\n          }\n        }, {\n          ALT: function () {\n            $.SUBRULE($.use);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(StringLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(HexLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(NumberLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(NullLiteral);\n          }\n        }]);\n      });\n      $.CONSUME(RSquare);\n    });\n    $.RULE('route', function () {\n      $.CONSUME(ROUTE);\n      $.CONSUME(RouteIdentifier);\n      $.CONSUME(TO);\n      $.CONSUME2(RouteIdentifier);\n    });\n    this.performSelfAnalysis();\n  }\n\n}\n\nclass Face {\n  constructor(a, b, c) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.normal = new Vector3();\n  }\n\n}\n\nconst TEXTURE_TYPE = {\n  INTENSITY: 1,\n  INTENSITY_ALPHA: 2,\n  RGB: 3,\n  RGBA: 4\n};\n\nexport { VRMLLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}