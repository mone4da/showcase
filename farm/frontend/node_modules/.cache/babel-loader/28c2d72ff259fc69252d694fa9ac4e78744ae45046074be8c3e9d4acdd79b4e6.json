{"ast":null,"code":"import _objectSpread from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { InterleavedBufferAttribute, Matrix4, MeshLambertMaterial, MeshBasicMaterial, MeshPhongMaterial, Color, DoubleSide, Mesh } from 'three';\nvar ColladaExporter = /*#__PURE__*/function () {\n  function ColladaExporter() {\n    _classCallCheck(this, ColladaExporter);\n    _defineProperty(this, \"options\", void 0);\n    _defineProperty(this, \"geometryInfo\", void 0);\n    _defineProperty(this, \"materialMap\", void 0);\n    _defineProperty(this, \"imageMap\", void 0);\n    _defineProperty(this, \"textures\", void 0);\n    _defineProperty(this, \"libraryImages\", void 0);\n    _defineProperty(this, \"libraryGeometries\", void 0);\n    _defineProperty(this, \"libraryEffects\", void 0);\n    _defineProperty(this, \"libraryMaterials\", void 0);\n    _defineProperty(this, \"canvas\", void 0);\n    _defineProperty(this, \"ctx\", void 0);\n    _defineProperty(this, \"transMat\", void 0);\n    _defineProperty(this, \"getFuncs\", ['getX', 'getY', 'getZ', 'getW']);\n    this.options = {\n      version: '1.4.1',\n      author: null,\n      textureDirectory: '',\n      upAxis: 'Y_UP',\n      unitName: null,\n      unitMeter: null\n    };\n    this.geometryInfo = new WeakMap();\n    this.materialMap = new WeakMap();\n    this.imageMap = new WeakMap();\n    this.textures = [];\n    this.libraryImages = [];\n    this.libraryGeometries = [];\n    this.libraryEffects = [];\n    this.libraryMaterials = [];\n    this.canvas = null;\n    this.ctx = null;\n    this.transMat = null;\n  }\n  _createClass(ColladaExporter, [{\n    key: \"parse\",\n    value: function parse(object, onDone) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      this.options = _objectSpread(_objectSpread({}, this.options), options);\n      if (this.options.upAxis.match(/^[XYZ]_UP$/) === null) {\n        console.error('ColladaExporter: Invalid upAxis: valid values are X_UP, Y_UP or Z_UP.');\n        return null;\n      }\n      if (this.options.unitName !== null && this.options.unitMeter === null) {\n        console.error('ColladaExporter: unitMeter needs to be specified if unitName is specified.');\n        return null;\n      }\n      if (this.options.unitMeter !== null && this.options.unitName === null) {\n        console.error('ColladaExporter: unitName needs to be specified if unitMeter is specified.');\n        return null;\n      }\n      if (this.options.textureDirectory !== '') {\n        this.options.textureDirectory = \"\".concat(this.options.textureDirectory, \"/\").replace(/\\\\/g, '/').replace(/\\/+/g, '/');\n      }\n      if (this.options.version !== '1.4.1' && this.options.version !== '1.5.0') {\n        console.warn(\"ColladaExporter : Version \".concat(this.options.version, \" not supported for export. Only 1.4.1 and 1.5.0.\"));\n        return null;\n      }\n      var libraryVisualScenes = this.processObject(object);\n      var specLink = this.options.version === '1.4.1' ? 'http://www.collada.org/2005/11/COLLADASchema' : 'https://www.khronos.org/collada/';\n      var dae = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"no\\\" ?>\".concat(\"<COLLADA xmlns=\\\"\".concat(specLink, \"\\\" version=\\\"\").concat(this.options.version, \"\\\">\"), \"<asset><contributor><authoring_tool>three.js Collada Exporter</authoring_tool>\", this.options.author !== null ? \"<author>\".concat(this.options.author, \"</author>\") : '', \"</contributor>\", \"<created>\".concat(new Date().toISOString(), \"</created>\"), \"<modified>\".concat(new Date().toISOString(), \"</modified>\"), \"<up_axis>Y_UP</up_axis></asset>\");\n      dae += \"<library_images>\".concat(this.libraryImages.join(''), \"</library_images>\");\n      dae += \"<library_effects>\".concat(this.libraryEffects.join(''), \"</library_effects>\");\n      dae += \"<library_materials>\".concat(this.libraryMaterials.join(''), \"</library_materials>\");\n      dae += \"<library_geometries>\".concat(this.libraryGeometries.join(''), \"</library_geometries>\");\n      dae += \"<library_visual_scenes><visual_scene id=\\\"Scene\\\" name=\\\"scene\\\">\".concat(libraryVisualScenes, \"</visual_scene></library_visual_scenes>\");\n      dae += '<scene><instance_visual_scene url=\"#Scene\"/></scene>';\n      dae += '</COLLADA>';\n      var res = {\n        data: this.format(dae),\n        textures: this.textures\n      };\n      if (typeof onDone === 'function') {\n        requestAnimationFrame(function () {\n          return onDone(res);\n        });\n      }\n      return res;\n    } // Convert the urdf xml into a well-formatted, indented format\n  }, {\n    key: \"format\",\n    value: function format(urdf) {\n      var _urdf$match$map$join, _urdf$match;\n      var IS_END_TAG = /^<\\//;\n      var IS_SELF_CLOSING = /(\\?>$)|(\\/>$)/;\n      var HAS_TEXT = /<[^>]+>[^<]*<\\/[^<]+>/;\n      var pad = function pad(ch, num) {\n        return num > 0 ? ch + pad(ch, num - 1) : '';\n      };\n      var tagnum = 0;\n      return (_urdf$match$map$join = (_urdf$match = urdf.match(/(<[^>]+>[^<]+<\\/[^<]+>)|(<[^>]+>)/g)) === null || _urdf$match === void 0 ? void 0 : _urdf$match.map(function (tag) {\n        if (!HAS_TEXT.test(tag) && !IS_SELF_CLOSING.test(tag) && IS_END_TAG.test(tag)) {\n          tagnum--;\n        }\n        var res = \"\".concat(pad('  ', tagnum)).concat(tag);\n        if (!HAS_TEXT.test(tag) && !IS_SELF_CLOSING.test(tag) && !IS_END_TAG.test(tag)) {\n          tagnum++;\n        }\n        return res;\n      }).join('\\n')) != null ? _urdf$match$map$join : '';\n    } // Convert an image into a png format for saving\n  }, {\n    key: \"base64ToBuffer\",\n    value: function base64ToBuffer(str) {\n      var b = atob(str);\n      var buf = new Uint8Array(b.length);\n      for (var i = 0, l = buf.length; i < l; i++) {\n        buf[i] = b.charCodeAt(i);\n      }\n      return buf;\n    }\n  }, {\n    key: \"imageToData\",\n    value: function imageToData(image, ext) {\n      var _this$ctx;\n      this.canvas = this.canvas || document.createElement('canvas');\n      this.ctx = this.ctx || this.canvas.getContext('2d');\n      this.canvas.width = image.width instanceof SVGAnimatedLength ? 0 : image.width;\n      this.canvas.height = image.height instanceof SVGAnimatedLength ? 0 : image.height;\n      (_this$ctx = this.ctx) === null || _this$ctx === void 0 ? void 0 : _this$ctx.drawImage(image, 0, 0); // Get the base64 encoded data\n\n      var base64data = this.canvas.toDataURL(\"image/\".concat(ext), 1).replace(/^data:image\\/(png|jpg);base64,/, ''); // Convert to a uint8 array\n\n      return this.base64ToBuffer(base64data);\n    } // gets the attribute array. Generate a new array if the attribute is interleaved\n  }, {\n    key: \"attrBufferToArray\",\n    value: function attrBufferToArray(attr) {\n      if (attr instanceof InterleavedBufferAttribute && attr.isInterleavedBufferAttribute) {\n        // use the typed array constructor to save on memory\n        var TypedArrayConstructor = attr.array.constructor; // @ts-expect-error\n\n        var arr = new TypedArrayConstructor(attr.count * attr.itemSize);\n        var size = attr.itemSize;\n        for (var i = 0, l = attr.count; i < l; i++) {\n          for (var j = 0; j < size; j++) {\n            arr[i * size + j] = attr[this.getFuncs[j]](i);\n          }\n        }\n        return arr;\n      } else {\n        return attr.array;\n      }\n    } // Returns an array of the same type starting at the `st` index,\n    // and `ct` length\n  }, {\n    key: \"subArray\",\n    value: function subArray(arr, st, ct) {\n      if (Array.isArray(arr)) {\n        return arr.slice(st, st + ct);\n      } else {\n        var TypedArrayConstructor = arr.constructor; // @ts-expect-error\n\n        return new TypedArrayConstructor(arr.buffer, st * arr.BYTES_PER_ELEMENT, ct);\n      }\n    } // Returns the string for a geometry's attribute\n  }, {\n    key: \"getAttribute\",\n    value: function getAttribute(attr, name, params, type) {\n      var array = this.attrBufferToArray(attr);\n      var res = Array.isArray(array) ? \"\".concat(\"<source id=\\\"\".concat(name, \"\\\">\") + \"<float_array id=\\\"\".concat(name, \"-array\\\" count=\\\"\").concat(array.length, \"\\\">\") + array.join(' '), \"</float_array><technique_common>\", \"<accessor source=\\\"#\".concat(name, \"-array\\\" count=\\\"\").concat(Math.floor(array.length / attr.itemSize), \"\\\" stride=\\\"\").concat(attr.itemSize, \"\\\">\")).concat(params.map(function (n) {\n        return \"<param name=\\\"\".concat(n, \"\\\" type=\\\"\").concat(type, \"\\\" />\");\n      }).join(''), \"</accessor></technique_common></source>\") : '';\n      return res;\n    } // Returns the string for a node's transform information\n  }, {\n    key: \"getTransform\",\n    value: function getTransform(o) {\n      // ensure the object's matrix is up to date\n      // before saving the transform\n      o.updateMatrix();\n      this.transMat = this.transMat || new Matrix4();\n      this.transMat.copy(o.matrix);\n      this.transMat.transpose();\n      return \"<matrix>\".concat(this.transMat.toArray().join(' '), \"</matrix>\");\n    } // Process the given piece of geometry into the geometry library\n    // Returns the mesh id\n  }, {\n    key: \"processGeometry\",\n    value: function processGeometry(g) {\n      var info = this.geometryInfo.get(g);\n      if (!info) {\n        // convert the geometry to bufferGeometry if it isn't already\n        var bufferGeometry = g;\n        if (!bufferGeometry.isBufferGeometry) {\n          throw new Error('THREE.ColladaExporter: Geometry is not of type THREE.BufferGeometry.');\n        }\n        var meshid = \"Mesh\".concat(this.libraryGeometries.length + 1);\n        var indexCount = bufferGeometry.index ? bufferGeometry.index.count * bufferGeometry.index.itemSize : bufferGeometry.attributes.position.count;\n        var groups = bufferGeometry.groups != null && bufferGeometry.groups.length !== 0 ? bufferGeometry.groups : [{\n          start: 0,\n          count: indexCount,\n          materialIndex: 0\n        }];\n        var gname = g.name ? \" name=\\\"\".concat(g.name, \"\\\"\") : '';\n        var gnode = \"<geometry id=\\\"\".concat(meshid, \"\\\"\").concat(gname, \"><mesh>\"); // define the geometry node and the vertices for the geometry\n\n        var posName = \"\".concat(meshid, \"-position\");\n        var vertName = \"\".concat(meshid, \"-vertices\");\n        gnode += this.getAttribute(bufferGeometry.attributes.position, posName, ['X', 'Y', 'Z'], 'float');\n        gnode += \"<vertices id=\\\"\".concat(vertName, \"\\\"><input semantic=\\\"POSITION\\\" source=\\\"#\").concat(posName, \"\\\" /></vertices>\"); // NOTE: We're not optimizing the attribute arrays here, so they're all the same length and\n        // can therefore share the same triangle indices. However, MeshLab seems to have trouble opening\n        // models with attributes that share an offset.\n        // MeshLab Bug#424: https://sourceforge.net/p/meshlab/bugs/424/\n        // serialize normals\n\n        var triangleInputs = \"<input semantic=\\\"VERTEX\\\" source=\\\"#\".concat(vertName, \"\\\" offset=\\\"0\\\" />\");\n        if ('normal' in bufferGeometry.attributes) {\n          var normName = \"\".concat(meshid, \"-normal\");\n          gnode += this.getAttribute(bufferGeometry.attributes.normal, normName, ['X', 'Y', 'Z'], 'float');\n          triangleInputs += \"<input semantic=\\\"NORMAL\\\" source=\\\"#\".concat(normName, \"\\\" offset=\\\"0\\\" />\");\n        } // serialize uvs\n\n        if ('uv' in bufferGeometry.attributes) {\n          var uvName = \"\".concat(meshid, \"-texcoord\");\n          gnode += this.getAttribute(bufferGeometry.attributes.uv, uvName, ['S', 'T'], 'float');\n          triangleInputs += \"<input semantic=\\\"TEXCOORD\\\" source=\\\"#\".concat(uvName, \"\\\" offset=\\\"0\\\" set=\\\"0\\\" />\");\n        } // serialize lightmap uvs\n\n        if ('uv2' in bufferGeometry.attributes) {\n          var _uvName = \"\".concat(meshid, \"-texcoord2\");\n          gnode += this.getAttribute(bufferGeometry.attributes.uv2, _uvName, ['S', 'T'], 'float');\n          triangleInputs += \"<input semantic=\\\"TEXCOORD\\\" source=\\\"#\".concat(_uvName, \"\\\" offset=\\\"0\\\" set=\\\"1\\\" />\");\n        } // serialize colors\n\n        if ('color' in bufferGeometry.attributes) {\n          var colName = \"\".concat(meshid, \"-color\");\n          gnode += this.getAttribute(bufferGeometry.attributes.color, colName, ['X', 'Y', 'Z'], 'uint8');\n          triangleInputs += \"<input semantic=\\\"COLOR\\\" source=\\\"#\".concat(colName, \"\\\" offset=\\\"0\\\" />\");\n        }\n        var indexArray = null;\n        if (bufferGeometry.index) {\n          indexArray = this.attrBufferToArray(bufferGeometry.index);\n        } else {\n          indexArray = new Array(indexCount);\n          for (var i = 0, l = indexArray.length; i < l && Array.isArray(indexArray); i++) indexArray[i] = i;\n        }\n        for (var _i = 0, _l = groups.length; _i < _l; _i++) {\n          var group = groups[_i];\n          var subarr = this.subArray(indexArray, group.start, group.count);\n          var polycount = subarr.length / 3;\n          gnode += \"<triangles material=\\\"MESH_MATERIAL_\".concat(group.materialIndex, \"\\\" count=\\\"\").concat(polycount, \"\\\">\");\n          gnode += triangleInputs;\n          gnode += \"<p>\".concat(subarr.join(' '), \"</p>\");\n          gnode += '</triangles>';\n        }\n        gnode += '</mesh></geometry>';\n        this.libraryGeometries.push(gnode);\n        info = {\n          meshid: meshid,\n          bufferGeometry: bufferGeometry\n        };\n        this.geometryInfo.set(g, info);\n      }\n      return info;\n    } // Process the given texture into the image library\n    // Returns the image library\n  }, {\n    key: \"processTexture\",\n    value: function processTexture(tex) {\n      var texid = this.imageMap.get(tex);\n      if (texid == null) {\n        texid = \"image-\".concat(this.libraryImages.length + 1);\n        var ext = 'png';\n        var name = tex.name || texid;\n        var imageNode = \"<image id=\\\"\".concat(texid, \"\\\" name=\\\"\").concat(name, \"\\\">\");\n        if (this.options.version === '1.5.0') {\n          imageNode += \"<init_from><ref>\".concat(this.options.textureDirectory).concat(name, \".\").concat(ext, \"</ref></init_from>\");\n        } else {\n          // version image node 1.4.1\n          imageNode += \"<init_from>\".concat(this.options.textureDirectory).concat(name, \".\").concat(ext, \"</init_from>\");\n        }\n        imageNode += '</image>';\n        this.libraryImages.push(imageNode);\n        this.imageMap.set(tex, texid);\n        this.textures.push({\n          directory: this.options.textureDirectory,\n          name: name,\n          ext: ext,\n          data: this.imageToData(tex.image, ext),\n          original: tex\n        });\n      }\n      return texid;\n    } // Process the given material into the material and effect libraries\n    // Returns the material id\n  }, {\n    key: \"processMaterial\",\n    value: function processMaterial(m) {\n      var matid = this.materialMap.get(m);\n      if (matid == null) {\n        matid = \"Mat\".concat(this.libraryEffects.length + 1);\n        var type = 'phong';\n        if (m instanceof MeshLambertMaterial) {\n          type = 'lambert';\n        } else if (m instanceof MeshBasicMaterial) {\n          type = 'constant';\n          if (m.map !== null) {\n            // The Collada spec does not support diffuse texture maps with the\n            // constant shader type.\n            // mrdoob/three.js#15469\n            console.warn('ColladaExporter: Texture maps not supported with MeshBasicMaterial.');\n          }\n        }\n        if (m instanceof MeshPhongMaterial) {\n          var emissive = m.emissive ? m.emissive : new Color(0, 0, 0);\n          var diffuse = m.color ? m.color : new Color(0, 0, 0);\n          var specular = m.specular ? m.specular : new Color(1, 1, 1);\n          var shininess = m.shininess || 0;\n          var reflectivity = m.reflectivity || 0; // Do not export and alpha map for the reasons mentioned in issue (#13792)\n          // in three.js alpha maps are black and white, but collada expects the alpha\n          // channel to specify the transparency\n\n          var transparencyNode = '';\n          if (m.transparent) {\n            transparencyNode += \"<transparent>\".concat(m.map ? '<texture texture=\"diffuse-sampler\"></texture>' : '<float>1</float>', \"</transparent>\");\n            if (m.opacity < 1) {\n              transparencyNode += \"<transparency><float>\".concat(m.opacity, \"</float></transparency>\");\n            }\n          }\n          var techniqueNode = \"\".concat(\"<technique sid=\\\"common\\\"><\".concat(type, \">\"), \"<emission>\", m.emissiveMap ? '<texture texture=\"emissive-sampler\" texcoord=\"TEXCOORD\" />' : \"<color sid=\\\"emission\\\">\".concat(emissive.r, \" \").concat(emissive.g, \" \").concat(emissive.b, \" 1</color>\"), \"</emission>\").concat(type !== 'constant' ? \"<diffuse>\".concat(m.map ? '<texture texture=\"diffuse-sampler\" texcoord=\"TEXCOORD\" />' : \"<color sid=\\\"diffuse\\\">\".concat(diffuse.r, \" \").concat(diffuse.g, \" \").concat(diffuse.b, \" 1</color>\"), \"</diffuse>\") : '').concat(type !== 'constant' ? \"<bump>\".concat(m.normalMap ? '<texture texture=\"bump-sampler\" texcoord=\"TEXCOORD\" />' : '', \"</bump>\") : '').concat(type === 'phong' ? \"\".concat(\"<specular><color sid=\\\"specular\\\">\".concat(specular.r, \" \").concat(specular.g, \" \").concat(specular.b, \" 1</color></specular>\"), \"<shininess>\", m.specularMap ? '<texture texture=\"specular-sampler\" texcoord=\"TEXCOORD\" />' : \"<float sid=\\\"shininess\\\">\".concat(shininess, \"</float>\"), \"</shininess>\") : '', \"<reflective><color>\".concat(diffuse.r, \" \").concat(diffuse.g, \" \").concat(diffuse.b, \" 1</color></reflective>\"), \"<reflectivity><float>\".concat(reflectivity, \"</float></reflectivity>\")).concat(transparencyNode, \"</\".concat(type, \"></technique>\"));\n          var effectnode = \"\".concat(\"<effect id=\\\"\".concat(matid, \"-effect\\\">\"), \"<profile_COMMON>\", m.map ? \"<newparam sid=\\\"diffuse-surface\\\"><surface type=\\\"2D\\\">\".concat(\"<init_from>\".concat(this.processTexture(m.map), \"</init_from>\"), \"</surface></newparam><newparam sid=\\\"diffuse-sampler\\\"><sampler2D><source>diffuse-surface</source></sampler2D></newparam>\") : '').concat(m.specularMap ? \"<newparam sid=\\\"specular-surface\\\"><surface type=\\\"2D\\\">\".concat(\"<init_from>\".concat(this.processTexture(m.specularMap), \"</init_from>\"), \"</surface></newparam><newparam sid=\\\"specular-sampler\\\"><sampler2D><source>specular-surface</source></sampler2D></newparam>\") : '').concat(m.emissiveMap ? \"<newparam sid=\\\"emissive-surface\\\"><surface type=\\\"2D\\\">\".concat(\"<init_from>\".concat(this.processTexture(m.emissiveMap), \"</init_from>\"), \"</surface></newparam><newparam sid=\\\"emissive-sampler\\\"><sampler2D><source>emissive-surface</source></sampler2D></newparam>\") : '').concat(m.normalMap ? \"<newparam sid=\\\"bump-surface\\\"><surface type=\\\"2D\\\">\".concat(\"<init_from>\".concat(this.processTexture(m.normalMap), \"</init_from>\"), \"</surface></newparam><newparam sid=\\\"bump-sampler\\\"><sampler2D><source>bump-surface</source></sampler2D></newparam>\") : '').concat(techniqueNode).concat(m.side === DoubleSide ? '<extra><technique profile=\"THREEJS\"><double_sided sid=\"double_sided\" type=\"int\">1</double_sided></technique></extra>' : '', \"</profile_COMMON></effect>\");\n          var materialName = m.name ? \" name=\\\"\".concat(m.name, \"\\\"\") : '';\n          var materialNode = \"<material id=\\\"\".concat(matid, \"\\\"\").concat(materialName, \"><instance_effect url=\\\"#\").concat(matid, \"-effect\\\" /></material>\");\n          this.libraryMaterials.push(materialNode);\n          this.libraryEffects.push(effectnode);\n          this.materialMap.set(m, matid);\n        }\n      }\n      return matid;\n    } // Recursively process the object into a scene\n  }, {\n    key: \"processObject\",\n    value: function processObject(o) {\n      var _this = this;\n      var node = \"<node name=\\\"\".concat(o.name, \"\\\">\");\n      node += this.getTransform(o);\n      new Mesh();\n      if (o instanceof Mesh && o.isMesh && o.geometry !== null) {\n        // function returns the id associated with the mesh and a \"BufferGeometry\" version\n        // of the geometry in case it's not a geometry.\n        var geomInfo = this.processGeometry(o.geometry);\n        var meshid = geomInfo.meshid;\n        var geometry = geomInfo.bufferGeometry; // ids of the materials to bind to the geometry\n\n        var matids = null;\n        var matidsArray; // get a list of materials to bind to the sub groups of the geometry.\n        // If the amount of subgroups is greater than the materials, than reuse\n        // the materials.\n\n        var mat = o.material || new MeshBasicMaterial();\n        var materials = Array.isArray(mat) ? mat : [mat];\n        if (geometry.groups.length > materials.length) {\n          matidsArray = new Array(geometry.groups.length);\n        } else {\n          matidsArray = new Array(materials.length);\n        }\n        matids = matidsArray.fill(null).map(function (_, i) {\n          return _this.processMaterial(materials[i % materials.length]);\n        });\n        node += \"\".concat(\"<instance_geometry url=\\\"#\".concat(meshid, \"\\\">\") + (matids != null ? \"<bind_material><technique_common>\".concat(matids.map(function (id, i) {\n          return \"\".concat(\"<instance_material symbol=\\\"MESH_MATERIAL_\".concat(i, \"\\\" target=\\\"#\").concat(id, \"\\\" >\"), \"<bind_vertex_input semantic=\\\"TEXCOORD\\\" input_semantic=\\\"TEXCOORD\\\" input_set=\\\"0\\\" /></instance_material>\");\n        }).join(''), \"</technique_common></bind_material>\") : ''), \"</instance_geometry>\");\n      }\n      o.children.forEach(function (c) {\n        return node += _this.processObject(c);\n      });\n      node += '</node>';\n      return node;\n    }\n  }]);\n  return ColladaExporter;\n}();\nexport { ColladaExporter };","map":{"version":3,"names":["_defineProperty","InterleavedBufferAttribute","Matrix4","MeshLambertMaterial","MeshBasicMaterial","MeshPhongMaterial","Color","DoubleSide","Mesh","ColladaExporter","_classCallCheck","options","version","author","textureDirectory","upAxis","unitName","unitMeter","geometryInfo","WeakMap","materialMap","imageMap","textures","libraryImages","libraryGeometries","libraryEffects","libraryMaterials","canvas","ctx","transMat","_createClass","key","value","parse","object","onDone","arguments","length","undefined","_objectSpread","match","console","error","concat","replace","warn","libraryVisualScenes","processObject","specLink","dae","Date","toISOString","join","res","data","format","requestAnimationFrame","urdf","_urdf$match$map$join","_urdf$match","IS_END_TAG","IS_SELF_CLOSING","HAS_TEXT","pad","ch","num","tagnum","map","tag","test","base64ToBuffer","str","b","atob","buf","Uint8Array","i","l","charCodeAt","imageToData","image","ext","_this$ctx","document","createElement","getContext","width","SVGAnimatedLength","height","drawImage","base64data","toDataURL","attrBufferToArray","attr","isInterleavedBufferAttribute","TypedArrayConstructor","array","constructor","arr","count","itemSize","size","j","getFuncs","subArray","st","ct","Array","isArray","slice","buffer","BYTES_PER_ELEMENT","getAttribute","name","params","type","Math","floor","n","getTransform","o","updateMatrix","copy","matrix","transpose","toArray","processGeometry","g","info","get","bufferGeometry","isBufferGeometry","Error","meshid","indexCount","index","attributes","position","groups","start","materialIndex","gname","gnode","posName","vertName","triangleInputs","normName","normal","uvName","uv","uv2","colName","color","indexArray","group","subarr","polycount","push","set","processTexture","tex","texid","imageNode","directory","original","processMaterial","m","matid","emissive","diffuse","specular","shininess","reflectivity","transparencyNode","transparent","opacity","techniqueNode","emissiveMap","r","normalMap","specularMap","effectnode","side","materialName","materialNode","_this","node","isMesh","geometry","geomInfo","matids","matidsArray","mat","material","materials","fill","_","id","children","forEach","c"],"sources":["/home/samuel/experiment/3d/farm/frontend/node_modules/three-stdlib/exporters/ColladaExporter.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { InterleavedBufferAttribute, Matrix4, MeshLambertMaterial, MeshBasicMaterial, MeshPhongMaterial, Color, DoubleSide, Mesh } from 'three';\n\nclass ColladaExporter {\n  constructor() {\n    _defineProperty(this, \"options\", void 0);\n\n    _defineProperty(this, \"geometryInfo\", void 0);\n\n    _defineProperty(this, \"materialMap\", void 0);\n\n    _defineProperty(this, \"imageMap\", void 0);\n\n    _defineProperty(this, \"textures\", void 0);\n\n    _defineProperty(this, \"libraryImages\", void 0);\n\n    _defineProperty(this, \"libraryGeometries\", void 0);\n\n    _defineProperty(this, \"libraryEffects\", void 0);\n\n    _defineProperty(this, \"libraryMaterials\", void 0);\n\n    _defineProperty(this, \"canvas\", void 0);\n\n    _defineProperty(this, \"ctx\", void 0);\n\n    _defineProperty(this, \"transMat\", void 0);\n\n    _defineProperty(this, \"getFuncs\", ['getX', 'getY', 'getZ', 'getW']);\n\n    this.options = {\n      version: '1.4.1',\n      author: null,\n      textureDirectory: '',\n      upAxis: 'Y_UP',\n      unitName: null,\n      unitMeter: null\n    };\n    this.geometryInfo = new WeakMap();\n    this.materialMap = new WeakMap();\n    this.imageMap = new WeakMap();\n    this.textures = [];\n    this.libraryImages = [];\n    this.libraryGeometries = [];\n    this.libraryEffects = [];\n    this.libraryMaterials = [];\n    this.canvas = null;\n    this.ctx = null;\n    this.transMat = null;\n  }\n\n  parse(object, onDone, options = {}) {\n    this.options = { ...this.options,\n      ...options\n    };\n\n    if (this.options.upAxis.match(/^[XYZ]_UP$/) === null) {\n      console.error('ColladaExporter: Invalid upAxis: valid values are X_UP, Y_UP or Z_UP.');\n      return null;\n    }\n\n    if (this.options.unitName !== null && this.options.unitMeter === null) {\n      console.error('ColladaExporter: unitMeter needs to be specified if unitName is specified.');\n      return null;\n    }\n\n    if (this.options.unitMeter !== null && this.options.unitName === null) {\n      console.error('ColladaExporter: unitName needs to be specified if unitMeter is specified.');\n      return null;\n    }\n\n    if (this.options.textureDirectory !== '') {\n      this.options.textureDirectory = `${this.options.textureDirectory}/`.replace(/\\\\/g, '/').replace(/\\/+/g, '/');\n    }\n\n    if (this.options.version !== '1.4.1' && this.options.version !== '1.5.0') {\n      console.warn(`ColladaExporter : Version ${this.options.version} not supported for export. Only 1.4.1 and 1.5.0.`);\n      return null;\n    }\n\n    const libraryVisualScenes = this.processObject(object);\n    const specLink = this.options.version === '1.4.1' ? 'http://www.collada.org/2005/11/COLLADASchema' : 'https://www.khronos.org/collada/';\n    let dae = `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>${`<COLLADA xmlns=\"${specLink}\" version=\"${this.options.version}\">`}<asset><contributor><authoring_tool>three.js Collada Exporter</authoring_tool>${this.options.author !== null ? `<author>${this.options.author}</author>` : ''}</contributor>${`<created>${new Date().toISOString()}</created>`}${`<modified>${new Date().toISOString()}</modified>`}<up_axis>Y_UP</up_axis></asset>`;\n    dae += `<library_images>${this.libraryImages.join('')}</library_images>`;\n    dae += `<library_effects>${this.libraryEffects.join('')}</library_effects>`;\n    dae += `<library_materials>${this.libraryMaterials.join('')}</library_materials>`;\n    dae += `<library_geometries>${this.libraryGeometries.join('')}</library_geometries>`;\n    dae += `<library_visual_scenes><visual_scene id=\"Scene\" name=\"scene\">${libraryVisualScenes}</visual_scene></library_visual_scenes>`;\n    dae += '<scene><instance_visual_scene url=\"#Scene\"/></scene>';\n    dae += '</COLLADA>';\n    const res = {\n      data: this.format(dae),\n      textures: this.textures\n    };\n\n    if (typeof onDone === 'function') {\n      requestAnimationFrame(() => onDone(res));\n    }\n\n    return res;\n  } // Convert the urdf xml into a well-formatted, indented format\n\n\n  format(urdf) {\n    var _urdf$match$map$join, _urdf$match;\n\n    const IS_END_TAG = /^<\\//;\n    const IS_SELF_CLOSING = /(\\?>$)|(\\/>$)/;\n    const HAS_TEXT = /<[^>]+>[^<]*<\\/[^<]+>/;\n\n    const pad = (ch, num) => num > 0 ? ch + pad(ch, num - 1) : '';\n\n    let tagnum = 0;\n    return (_urdf$match$map$join = (_urdf$match = urdf.match(/(<[^>]+>[^<]+<\\/[^<]+>)|(<[^>]+>)/g)) === null || _urdf$match === void 0 ? void 0 : _urdf$match.map(tag => {\n      if (!HAS_TEXT.test(tag) && !IS_SELF_CLOSING.test(tag) && IS_END_TAG.test(tag)) {\n        tagnum--;\n      }\n\n      const res = `${pad('  ', tagnum)}${tag}`;\n\n      if (!HAS_TEXT.test(tag) && !IS_SELF_CLOSING.test(tag) && !IS_END_TAG.test(tag)) {\n        tagnum++;\n      }\n\n      return res;\n    }).join('\\n')) != null ? _urdf$match$map$join : '';\n  } // Convert an image into a png format for saving\n\n\n  base64ToBuffer(str) {\n    const b = atob(str);\n    const buf = new Uint8Array(b.length);\n\n    for (let i = 0, l = buf.length; i < l; i++) {\n      buf[i] = b.charCodeAt(i);\n    }\n\n    return buf;\n  }\n\n  imageToData(image, ext) {\n    var _this$ctx;\n\n    this.canvas = this.canvas || document.createElement('canvas');\n    this.ctx = this.ctx || this.canvas.getContext('2d');\n    this.canvas.width = image.width instanceof SVGAnimatedLength ? 0 : image.width;\n    this.canvas.height = image.height instanceof SVGAnimatedLength ? 0 : image.height;\n    (_this$ctx = this.ctx) === null || _this$ctx === void 0 ? void 0 : _this$ctx.drawImage(image, 0, 0); // Get the base64 encoded data\n\n    const base64data = this.canvas.toDataURL(`image/${ext}`, 1).replace(/^data:image\\/(png|jpg);base64,/, ''); // Convert to a uint8 array\n\n    return this.base64ToBuffer(base64data);\n  } // gets the attribute array. Generate a new array if the attribute is interleaved\n\n\n  attrBufferToArray(attr) {\n    if (attr instanceof InterleavedBufferAttribute && attr.isInterleavedBufferAttribute) {\n      // use the typed array constructor to save on memory\n      const TypedArrayConstructor = attr.array.constructor; // @ts-expect-error\n\n      const arr = new TypedArrayConstructor(attr.count * attr.itemSize);\n      const size = attr.itemSize;\n\n      for (let i = 0, l = attr.count; i < l; i++) {\n        for (let j = 0; j < size; j++) {\n          arr[i * size + j] = attr[this.getFuncs[j]](i);\n        }\n      }\n\n      return arr;\n    } else {\n      return attr.array;\n    }\n  } // Returns an array of the same type starting at the `st` index,\n  // and `ct` length\n\n\n  subArray(arr, st, ct) {\n    if (Array.isArray(arr)) {\n      return arr.slice(st, st + ct);\n    } else {\n      const TypedArrayConstructor = arr.constructor; // @ts-expect-error\n\n      return new TypedArrayConstructor(arr.buffer, st * arr.BYTES_PER_ELEMENT, ct);\n    }\n  } // Returns the string for a geometry's attribute\n\n\n  getAttribute(attr, name, params, type) {\n    const array = this.attrBufferToArray(attr);\n    const res = Array.isArray(array) ? `${`<source id=\"${name}\">` + `<float_array id=\"${name}-array\" count=\"${array.length}\">` + array.join(' ')}</float_array><technique_common>${`<accessor source=\"#${name}-array\" count=\"${Math.floor(array.length / attr.itemSize)}\" stride=\"${attr.itemSize}\">`}${params.map(n => `<param name=\"${n}\" type=\"${type}\" />`).join('')}</accessor></technique_common></source>` : '';\n    return res;\n  } // Returns the string for a node's transform information\n\n\n  getTransform(o) {\n    // ensure the object's matrix is up to date\n    // before saving the transform\n    o.updateMatrix();\n    this.transMat = this.transMat || new Matrix4();\n    this.transMat.copy(o.matrix);\n    this.transMat.transpose();\n    return `<matrix>${this.transMat.toArray().join(' ')}</matrix>`;\n  } // Process the given piece of geometry into the geometry library\n  // Returns the mesh id\n\n\n  processGeometry(g) {\n    let info = this.geometryInfo.get(g);\n\n    if (!info) {\n      // convert the geometry to bufferGeometry if it isn't already\n      const bufferGeometry = g;\n\n      if (!bufferGeometry.isBufferGeometry) {\n        throw new Error('THREE.ColladaExporter: Geometry is not of type THREE.BufferGeometry.');\n      }\n\n      const meshid = `Mesh${this.libraryGeometries.length + 1}`;\n      const indexCount = bufferGeometry.index ? bufferGeometry.index.count * bufferGeometry.index.itemSize : bufferGeometry.attributes.position.count;\n      const groups = bufferGeometry.groups != null && bufferGeometry.groups.length !== 0 ? bufferGeometry.groups : [{\n        start: 0,\n        count: indexCount,\n        materialIndex: 0\n      }];\n      const gname = g.name ? ` name=\"${g.name}\"` : '';\n      let gnode = `<geometry id=\"${meshid}\"${gname}><mesh>`; // define the geometry node and the vertices for the geometry\n\n      const posName = `${meshid}-position`;\n      const vertName = `${meshid}-vertices`;\n      gnode += this.getAttribute(bufferGeometry.attributes.position, posName, ['X', 'Y', 'Z'], 'float');\n      gnode += `<vertices id=\"${vertName}\"><input semantic=\"POSITION\" source=\"#${posName}\" /></vertices>`; // NOTE: We're not optimizing the attribute arrays here, so they're all the same length and\n      // can therefore share the same triangle indices. However, MeshLab seems to have trouble opening\n      // models with attributes that share an offset.\n      // MeshLab Bug#424: https://sourceforge.net/p/meshlab/bugs/424/\n      // serialize normals\n\n      let triangleInputs = `<input semantic=\"VERTEX\" source=\"#${vertName}\" offset=\"0\" />`;\n\n      if ('normal' in bufferGeometry.attributes) {\n        const normName = `${meshid}-normal`;\n        gnode += this.getAttribute(bufferGeometry.attributes.normal, normName, ['X', 'Y', 'Z'], 'float');\n        triangleInputs += `<input semantic=\"NORMAL\" source=\"#${normName}\" offset=\"0\" />`;\n      } // serialize uvs\n\n\n      if ('uv' in bufferGeometry.attributes) {\n        const uvName = `${meshid}-texcoord`;\n        gnode += this.getAttribute(bufferGeometry.attributes.uv, uvName, ['S', 'T'], 'float');\n        triangleInputs += `<input semantic=\"TEXCOORD\" source=\"#${uvName}\" offset=\"0\" set=\"0\" />`;\n      } // serialize lightmap uvs\n\n\n      if ('uv2' in bufferGeometry.attributes) {\n        const uvName = `${meshid}-texcoord2`;\n        gnode += this.getAttribute(bufferGeometry.attributes.uv2, uvName, ['S', 'T'], 'float');\n        triangleInputs += `<input semantic=\"TEXCOORD\" source=\"#${uvName}\" offset=\"0\" set=\"1\" />`;\n      } // serialize colors\n\n\n      if ('color' in bufferGeometry.attributes) {\n        const colName = `${meshid}-color`;\n        gnode += this.getAttribute(bufferGeometry.attributes.color, colName, ['X', 'Y', 'Z'], 'uint8');\n        triangleInputs += `<input semantic=\"COLOR\" source=\"#${colName}\" offset=\"0\" />`;\n      }\n\n      let indexArray = null;\n\n      if (bufferGeometry.index) {\n        indexArray = this.attrBufferToArray(bufferGeometry.index);\n      } else {\n        indexArray = new Array(indexCount);\n\n        for (let i = 0, l = indexArray.length; i < l && Array.isArray(indexArray); i++) indexArray[i] = i;\n      }\n\n      for (let i = 0, l = groups.length; i < l; i++) {\n        const group = groups[i];\n        const subarr = this.subArray(indexArray, group.start, group.count);\n        const polycount = subarr.length / 3;\n        gnode += `<triangles material=\"MESH_MATERIAL_${group.materialIndex}\" count=\"${polycount}\">`;\n        gnode += triangleInputs;\n        gnode += `<p>${subarr.join(' ')}</p>`;\n        gnode += '</triangles>';\n      }\n\n      gnode += '</mesh></geometry>';\n      this.libraryGeometries.push(gnode);\n      info = {\n        meshid,\n        bufferGeometry\n      };\n      this.geometryInfo.set(g, info);\n    }\n\n    return info;\n  } // Process the given texture into the image library\n  // Returns the image library\n\n\n  processTexture(tex) {\n    let texid = this.imageMap.get(tex);\n\n    if (texid == null) {\n      texid = `image-${this.libraryImages.length + 1}`;\n      const ext = 'png';\n      const name = tex.name || texid;\n      let imageNode = `<image id=\"${texid}\" name=\"${name}\">`;\n\n      if (this.options.version === '1.5.0') {\n        imageNode += `<init_from><ref>${this.options.textureDirectory}${name}.${ext}</ref></init_from>`;\n      } else {\n        // version image node 1.4.1\n        imageNode += `<init_from>${this.options.textureDirectory}${name}.${ext}</init_from>`;\n      }\n\n      imageNode += '</image>';\n      this.libraryImages.push(imageNode);\n      this.imageMap.set(tex, texid);\n      this.textures.push({\n        directory: this.options.textureDirectory,\n        name,\n        ext,\n        data: this.imageToData(tex.image, ext),\n        original: tex\n      });\n    }\n\n    return texid;\n  } // Process the given material into the material and effect libraries\n  // Returns the material id\n\n\n  processMaterial(m) {\n    let matid = this.materialMap.get(m);\n\n    if (matid == null) {\n      matid = `Mat${this.libraryEffects.length + 1}`;\n      let type = 'phong';\n\n      if (m instanceof MeshLambertMaterial) {\n        type = 'lambert';\n      } else if (m instanceof MeshBasicMaterial) {\n        type = 'constant';\n\n        if (m.map !== null) {\n          // The Collada spec does not support diffuse texture maps with the\n          // constant shader type.\n          // mrdoob/three.js#15469\n          console.warn('ColladaExporter: Texture maps not supported with MeshBasicMaterial.');\n        }\n      }\n\n      if (m instanceof MeshPhongMaterial) {\n        const emissive = m.emissive ? m.emissive : new Color(0, 0, 0);\n        const diffuse = m.color ? m.color : new Color(0, 0, 0);\n        const specular = m.specular ? m.specular : new Color(1, 1, 1);\n        const shininess = m.shininess || 0;\n        const reflectivity = m.reflectivity || 0; // Do not export and alpha map for the reasons mentioned in issue (#13792)\n        // in three.js alpha maps are black and white, but collada expects the alpha\n        // channel to specify the transparency\n\n        let transparencyNode = '';\n\n        if (m.transparent) {\n          transparencyNode += `<transparent>${m.map ? '<texture texture=\"diffuse-sampler\"></texture>' : '<float>1</float>'}</transparent>`;\n\n          if (m.opacity < 1) {\n            transparencyNode += `<transparency><float>${m.opacity}</float></transparency>`;\n          }\n        }\n\n        const techniqueNode = `${`<technique sid=\"common\"><${type}>`}<emission>${m.emissiveMap ? '<texture texture=\"emissive-sampler\" texcoord=\"TEXCOORD\" />' : `<color sid=\"emission\">${emissive.r} ${emissive.g} ${emissive.b} 1</color>`}</emission>${type !== 'constant' ? `<diffuse>${m.map ? '<texture texture=\"diffuse-sampler\" texcoord=\"TEXCOORD\" />' : `<color sid=\"diffuse\">${diffuse.r} ${diffuse.g} ${diffuse.b} 1</color>`}</diffuse>` : ''}${type !== 'constant' ? `<bump>${m.normalMap ? '<texture texture=\"bump-sampler\" texcoord=\"TEXCOORD\" />' : ''}</bump>` : ''}${type === 'phong' ? `${`<specular><color sid=\"specular\">${specular.r} ${specular.g} ${specular.b} 1</color></specular>`}<shininess>${m.specularMap ? '<texture texture=\"specular-sampler\" texcoord=\"TEXCOORD\" />' : `<float sid=\"shininess\">${shininess}</float>`}</shininess>` : ''}${`<reflective><color>${diffuse.r} ${diffuse.g} ${diffuse.b} 1</color></reflective>`}${`<reflectivity><float>${reflectivity}</float></reflectivity>`}${transparencyNode}${`</${type}></technique>`}`;\n        const effectnode = `${`<effect id=\"${matid}-effect\">`}<profile_COMMON>${m.map ? `<newparam sid=\"diffuse-surface\"><surface type=\"2D\">${`<init_from>${this.processTexture(m.map)}</init_from>`}</surface></newparam><newparam sid=\"diffuse-sampler\"><sampler2D><source>diffuse-surface</source></sampler2D></newparam>` : ''}${m.specularMap ? `<newparam sid=\"specular-surface\"><surface type=\"2D\">${`<init_from>${this.processTexture(m.specularMap)}</init_from>`}</surface></newparam><newparam sid=\"specular-sampler\"><sampler2D><source>specular-surface</source></sampler2D></newparam>` : ''}${m.emissiveMap ? `<newparam sid=\"emissive-surface\"><surface type=\"2D\">${`<init_from>${this.processTexture(m.emissiveMap)}</init_from>`}</surface></newparam><newparam sid=\"emissive-sampler\"><sampler2D><source>emissive-surface</source></sampler2D></newparam>` : ''}${m.normalMap ? `<newparam sid=\"bump-surface\"><surface type=\"2D\">${`<init_from>${this.processTexture(m.normalMap)}</init_from>`}</surface></newparam><newparam sid=\"bump-sampler\"><sampler2D><source>bump-surface</source></sampler2D></newparam>` : ''}${techniqueNode}${m.side === DoubleSide ? '<extra><technique profile=\"THREEJS\"><double_sided sid=\"double_sided\" type=\"int\">1</double_sided></technique></extra>' : ''}</profile_COMMON></effect>`;\n        const materialName = m.name ? ` name=\"${m.name}\"` : '';\n        const materialNode = `<material id=\"${matid}\"${materialName}><instance_effect url=\"#${matid}-effect\" /></material>`;\n        this.libraryMaterials.push(materialNode);\n        this.libraryEffects.push(effectnode);\n        this.materialMap.set(m, matid);\n      }\n    }\n\n    return matid;\n  } // Recursively process the object into a scene\n\n\n  processObject(o) {\n    let node = `<node name=\"${o.name}\">`;\n    node += this.getTransform(o);\n    new Mesh();\n\n    if (o instanceof Mesh && o.isMesh && o.geometry !== null) {\n      // function returns the id associated with the mesh and a \"BufferGeometry\" version\n      // of the geometry in case it's not a geometry.\n      const geomInfo = this.processGeometry(o.geometry);\n      const meshid = geomInfo.meshid;\n      const geometry = geomInfo.bufferGeometry; // ids of the materials to bind to the geometry\n\n      let matids = null;\n      let matidsArray; // get a list of materials to bind to the sub groups of the geometry.\n      // If the amount of subgroups is greater than the materials, than reuse\n      // the materials.\n\n      const mat = o.material || new MeshBasicMaterial();\n      const materials = Array.isArray(mat) ? mat : [mat];\n\n      if (geometry.groups.length > materials.length) {\n        matidsArray = new Array(geometry.groups.length);\n      } else {\n        matidsArray = new Array(materials.length);\n      }\n\n      matids = matidsArray.fill(null).map((_, i) => this.processMaterial(materials[i % materials.length]));\n      node += `${`<instance_geometry url=\"#${meshid}\">` + (matids != null ? `<bind_material><technique_common>${matids.map((id, i) => `${`<instance_material symbol=\"MESH_MATERIAL_${i}\" target=\"#${id}\" >`}<bind_vertex_input semantic=\"TEXCOORD\" input_semantic=\"TEXCOORD\" input_set=\"0\" /></instance_material>`).join('')}</technique_common></bind_material>` : '')}</instance_geometry>`;\n    }\n\n    o.children.forEach(c => node += this.processObject(c));\n    node += '</node>';\n    return node;\n  }\n\n}\n\nexport { ColladaExporter };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}