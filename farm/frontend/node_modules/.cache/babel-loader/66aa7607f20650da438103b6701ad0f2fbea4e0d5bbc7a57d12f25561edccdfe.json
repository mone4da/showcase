{"ast":null,"code":"import _classCallCheck from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector3, Color, Vector2, Mesh, Line, Points, Matrix3, BufferAttribute } from 'three';\nvar OBJExporter = /*#__PURE__*/function () {\n  function OBJExporter() {\n    _classCallCheck(this, OBJExporter);\n    _defineProperty(this, \"output\", void 0);\n    _defineProperty(this, \"indexVertex\", void 0);\n    _defineProperty(this, \"indexVertexUvs\", void 0);\n    _defineProperty(this, \"indexNormals\", void 0);\n    _defineProperty(this, \"vertex\", void 0);\n    _defineProperty(this, \"color\", void 0);\n    _defineProperty(this, \"normal\", void 0);\n    _defineProperty(this, \"uv\", void 0);\n    _defineProperty(this, \"face\", void 0);\n    this.output = '';\n    this.indexVertex = 0;\n    this.indexVertexUvs = 0;\n    this.indexNormals = 0;\n    this.vertex = new Vector3();\n    this.color = new Color();\n    this.normal = new Vector3();\n    this.uv = new Vector2();\n    this.face = [];\n  }\n  _createClass(OBJExporter, [{\n    key: \"parse\",\n    value: function parse(object) {\n      var _this = this;\n      object.traverse(function (child) {\n        if (child instanceof Mesh && child.isMesh) {\n          _this.parseMesh(child);\n        }\n        if (child instanceof Line && child.isLine) {\n          _this.parseLine(child);\n        }\n        if (child instanceof Points && child.isPoints) {\n          _this.parsePoints(child);\n        }\n      });\n      return this.output;\n    }\n  }, {\n    key: \"parseMesh\",\n    value: function parseMesh(mesh) {\n      var nbVertex = 0;\n      var nbNormals = 0;\n      var nbVertexUvs = 0;\n      var geometry = mesh.geometry;\n      var normalMatrixWorld = new Matrix3();\n      if (!geometry.isBufferGeometry) {\n        throw new Error('THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.');\n      } // shortcuts\n\n      var vertices = geometry.getAttribute('position');\n      var normals = geometry.getAttribute('normal');\n      var uvs = geometry.getAttribute('uv');\n      var indices = geometry.getIndex(); // name of the mesh object\n\n      this.output += \"o \".concat(mesh.name, \"\\n\"); // name of the mesh material\n\n      if (mesh.material && !Array.isArray(mesh.material) && mesh.material.name) {\n        this.output += \"usemtl \".concat(mesh.material.name, \"\\n\");\n      } // vertices\n\n      if (vertices !== undefined) {\n        for (var i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n          this.vertex.x = vertices.getX(i);\n          this.vertex.y = vertices.getY(i);\n          this.vertex.z = vertices.getZ(i); // transform the vertex to world space\n\n          this.vertex.applyMatrix4(mesh.matrixWorld); // transform the vertex to export format\n\n          this.output += \"v \".concat(this.vertex.x, \" \").concat(this.vertex.y, \" \").concat(this.vertex.z, \"\\n\");\n        }\n      } // uvs\n\n      if (uvs !== undefined) {\n        for (var _i = 0, _l = uvs.count; _i < _l; _i++, nbVertexUvs++) {\n          this.uv.x = uvs.getX(_i);\n          this.uv.y = uvs.getY(_i); // transform the uv to export format\n\n          this.output += \"vt \".concat(this.uv.x, \" \").concat(this.uv.y, \"\\n\");\n        }\n      } // normals\n\n      if (normals !== undefined) {\n        normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);\n        for (var _i2 = 0, _l2 = normals.count; _i2 < _l2; _i2++, nbNormals++) {\n          this.normal.x = normals.getX(_i2);\n          this.normal.y = normals.getY(_i2);\n          this.normal.z = normals.getZ(_i2); // transform the normal to world space\n\n          this.normal.applyMatrix3(normalMatrixWorld).normalize(); // transform the normal to export format\n\n          this.output += \"vn \".concat(this.normal.x, \" \").concat(this.normal.y, \" \").concat(this.normal.z, \"\\n\");\n        }\n      } // faces\n\n      if (indices !== null) {\n        for (var _i3 = 0, _l3 = indices.count; _i3 < _l3; _i3 += 3) {\n          for (var m = 0; m < 3; m++) {\n            var j = indices.getX(_i3 + m) + 1;\n            this.face[m] = this.indexVertex + j + (normals || uvs ? \"/\".concat(uvs ? this.indexVertexUvs + j : '').concat(normals ? \"/\".concat(this.indexNormals + j) : '') : '');\n          } // transform the face to export format\n\n          this.output += \"f \".concat(this.face.join(' '), \"\\n\");\n        }\n      } else {\n        for (var _i4 = 0, _l4 = vertices.count; _i4 < _l4; _i4 += 3) {\n          for (var _m = 0; _m < 3; _m++) {\n            var _j = _i4 + _m + 1;\n            this.face[_m] = this.indexVertex + _j + (normals || uvs ? \"/\".concat(uvs ? this.indexVertexUvs + _j : '').concat(normals ? \"/\".concat(this.indexNormals + _j) : '') : '');\n          } // transform the face to export format\n\n          this.output += \"f \".concat(this.face.join(' '), \"\\n\");\n        }\n      } // update index\n\n      this.indexVertex += nbVertex;\n      this.indexVertexUvs += nbVertexUvs;\n      this.indexNormals += nbNormals;\n    }\n  }, {\n    key: \"parseLine\",\n    value: function parseLine(line) {\n      var nbVertex = 0;\n      var geometry = line.geometry;\n      var type = line.type;\n      if (geometry.isBufferGeometry) {\n        throw new Error('THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.');\n      } // shortcuts\n\n      var vertices = geometry.getAttribute('position'); // name of the line object\n\n      this.output += \"o \".concat(line.name, \"\\n\");\n      if (vertices !== undefined) {\n        for (var i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n          this.vertex.x = vertices.getX(i);\n          this.vertex.y = vertices.getY(i);\n          this.vertex.z = vertices.getZ(i); // transform the vertex to world space\n\n          this.vertex.applyMatrix4(line.matrixWorld); // transform the vertex to export format\n\n          this.output += \"v \".concat(this.vertex.x, \" \").concat(this.vertex.y, \" \").concat(this.vertex.z, \"\\n\");\n        }\n      }\n      if (type === 'Line') {\n        this.output += 'l ';\n        for (var j = 1, _l5 = vertices.count; j <= _l5; j++) {\n          this.output += \"\".concat(this.indexVertex + j, \" \");\n        }\n        this.output += '\\n';\n      }\n      if (type === 'LineSegments') {\n        for (var _j2 = 1, k = _j2 + 1, _l6 = vertices.count; _j2 < _l6; _j2 += 2, k = _j2 + 1) {\n          this.output += \"l \".concat(this.indexVertex + _j2, \" \").concat(this.indexVertex + k, \"\\n\");\n        }\n      } // update index\n\n      this.indexVertex += nbVertex;\n    }\n  }, {\n    key: \"parsePoints\",\n    value: function parsePoints(points) {\n      var nbVertex = 0;\n      var geometry = points.geometry;\n      if (!geometry.isBufferGeometry) {\n        throw new Error('THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.');\n      }\n      var vertices = geometry.getAttribute('position');\n      var colors = geometry.getAttribute('color');\n      this.output += \"o \".concat(points.name, \"\\n\");\n      if (vertices !== undefined) {\n        for (var i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n          this.vertex.fromBufferAttribute(vertices, i);\n          this.vertex.applyMatrix4(points.matrixWorld);\n          this.output += \"v \".concat(this.vertex.x, \" \").concat(this.vertex.y, \" \").concat(this.vertex.z);\n          if (colors !== undefined && colors instanceof BufferAttribute) {\n            this.color.fromBufferAttribute(colors, i);\n            this.output += \" \".concat(this.color.r, \" \").concat(this.color.g, \" \").concat(this.color.b);\n          }\n          this.output += '\\n';\n        }\n      }\n      this.output += 'p ';\n      for (var j = 1, _l7 = vertices.count; j <= _l7; j++) {\n        this.output += \"\".concat(this.indexVertex + j, \" \");\n      }\n      this.output += '\\n'; // update index\n\n      this.indexVertex += nbVertex;\n    }\n  }]);\n  return OBJExporter;\n}();\nexport { OBJExporter };","map":{"version":3,"names":["_defineProperty","Vector3","Color","Vector2","Mesh","Line","Points","Matrix3","BufferAttribute","OBJExporter","_classCallCheck","output","indexVertex","indexVertexUvs","indexNormals","vertex","color","normal","uv","face","_createClass","key","value","parse","object","_this","traverse","child","isMesh","parseMesh","isLine","parseLine","isPoints","parsePoints","mesh","nbVertex","nbNormals","nbVertexUvs","geometry","normalMatrixWorld","isBufferGeometry","Error","vertices","getAttribute","normals","uvs","indices","getIndex","concat","name","material","Array","isArray","undefined","i","l","count","x","getX","y","getY","z","getZ","applyMatrix4","matrixWorld","getNormalMatrix","applyMatrix3","normalize","m","j","join","line","type","k","points","colors","fromBufferAttribute","r","g","b"],"sources":["/home/samuel/experiment/3d/farm/frontend/node_modules/three-stdlib/exporters/OBJExporter.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector3, Color, Vector2, Mesh, Line, Points, Matrix3, BufferAttribute } from 'three';\n\nclass OBJExporter {\n  constructor() {\n    _defineProperty(this, \"output\", void 0);\n\n    _defineProperty(this, \"indexVertex\", void 0);\n\n    _defineProperty(this, \"indexVertexUvs\", void 0);\n\n    _defineProperty(this, \"indexNormals\", void 0);\n\n    _defineProperty(this, \"vertex\", void 0);\n\n    _defineProperty(this, \"color\", void 0);\n\n    _defineProperty(this, \"normal\", void 0);\n\n    _defineProperty(this, \"uv\", void 0);\n\n    _defineProperty(this, \"face\", void 0);\n\n    this.output = '';\n    this.indexVertex = 0;\n    this.indexVertexUvs = 0;\n    this.indexNormals = 0;\n    this.vertex = new Vector3();\n    this.color = new Color();\n    this.normal = new Vector3();\n    this.uv = new Vector2();\n    this.face = [];\n  }\n\n  parse(object) {\n    object.traverse(child => {\n      if (child instanceof Mesh && child.isMesh) {\n        this.parseMesh(child);\n      }\n\n      if (child instanceof Line && child.isLine) {\n        this.parseLine(child);\n      }\n\n      if (child instanceof Points && child.isPoints) {\n        this.parsePoints(child);\n      }\n    });\n    return this.output;\n  }\n\n  parseMesh(mesh) {\n    let nbVertex = 0;\n    let nbNormals = 0;\n    let nbVertexUvs = 0;\n    const geometry = mesh.geometry;\n    const normalMatrixWorld = new Matrix3();\n\n    if (!geometry.isBufferGeometry) {\n      throw new Error('THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.');\n    } // shortcuts\n\n\n    const vertices = geometry.getAttribute('position');\n    const normals = geometry.getAttribute('normal');\n    const uvs = geometry.getAttribute('uv');\n    const indices = geometry.getIndex(); // name of the mesh object\n\n    this.output += `o ${mesh.name}\\n`; // name of the mesh material\n\n    if (mesh.material && !Array.isArray(mesh.material) && mesh.material.name) {\n      this.output += `usemtl ${mesh.material.name}\\n`;\n    } // vertices\n\n\n    if (vertices !== undefined) {\n      for (let i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n        this.vertex.x = vertices.getX(i);\n        this.vertex.y = vertices.getY(i);\n        this.vertex.z = vertices.getZ(i); // transform the vertex to world space\n\n        this.vertex.applyMatrix4(mesh.matrixWorld); // transform the vertex to export format\n\n        this.output += `v ${this.vertex.x} ${this.vertex.y} ${this.vertex.z}\\n`;\n      }\n    } // uvs\n\n\n    if (uvs !== undefined) {\n      for (let i = 0, l = uvs.count; i < l; i++, nbVertexUvs++) {\n        this.uv.x = uvs.getX(i);\n        this.uv.y = uvs.getY(i); // transform the uv to export format\n\n        this.output += `vt ${this.uv.x} ${this.uv.y}\\n`;\n      }\n    } // normals\n\n\n    if (normals !== undefined) {\n      normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);\n\n      for (let i = 0, l = normals.count; i < l; i++, nbNormals++) {\n        this.normal.x = normals.getX(i);\n        this.normal.y = normals.getY(i);\n        this.normal.z = normals.getZ(i); // transform the normal to world space\n\n        this.normal.applyMatrix3(normalMatrixWorld).normalize(); // transform the normal to export format\n\n        this.output += `vn ${this.normal.x} ${this.normal.y} ${this.normal.z}\\n`;\n      }\n    } // faces\n\n\n    if (indices !== null) {\n      for (let i = 0, l = indices.count; i < l; i += 3) {\n        for (let m = 0; m < 3; m++) {\n          const j = indices.getX(i + m) + 1;\n          this.face[m] = this.indexVertex + j + (normals || uvs ? `/${uvs ? this.indexVertexUvs + j : ''}${normals ? `/${this.indexNormals + j}` : ''}` : '');\n        } // transform the face to export format\n\n\n        this.output += `f ${this.face.join(' ')}\\n`;\n      }\n    } else {\n      for (let i = 0, l = vertices.count; i < l; i += 3) {\n        for (let m = 0; m < 3; m++) {\n          const j = i + m + 1;\n          this.face[m] = this.indexVertex + j + (normals || uvs ? `/${uvs ? this.indexVertexUvs + j : ''}${normals ? `/${this.indexNormals + j}` : ''}` : '');\n        } // transform the face to export format\n\n\n        this.output += `f ${this.face.join(' ')}\\n`;\n      }\n    } // update index\n\n\n    this.indexVertex += nbVertex;\n    this.indexVertexUvs += nbVertexUvs;\n    this.indexNormals += nbNormals;\n  }\n\n  parseLine(line) {\n    let nbVertex = 0;\n    const geometry = line.geometry;\n    const type = line.type;\n\n    if (geometry.isBufferGeometry) {\n      throw new Error('THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.');\n    } // shortcuts\n\n\n    const vertices = geometry.getAttribute('position'); // name of the line object\n\n    this.output += `o ${line.name}\\n`;\n\n    if (vertices !== undefined) {\n      for (let i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n        this.vertex.x = vertices.getX(i);\n        this.vertex.y = vertices.getY(i);\n        this.vertex.z = vertices.getZ(i); // transform the vertex to world space\n\n        this.vertex.applyMatrix4(line.matrixWorld); // transform the vertex to export format\n\n        this.output += `v ${this.vertex.x} ${this.vertex.y} ${this.vertex.z}\\n`;\n      }\n    }\n\n    if (type === 'Line') {\n      this.output += 'l ';\n\n      for (let j = 1, l = vertices.count; j <= l; j++) {\n        this.output += `${this.indexVertex + j} `;\n      }\n\n      this.output += '\\n';\n    }\n\n    if (type === 'LineSegments') {\n      for (let j = 1, k = j + 1, l = vertices.count; j < l; j += 2, k = j + 1) {\n        this.output += `l ${this.indexVertex + j} ${this.indexVertex + k}\\n`;\n      }\n    } // update index\n\n\n    this.indexVertex += nbVertex;\n  }\n\n  parsePoints(points) {\n    let nbVertex = 0;\n    const geometry = points.geometry;\n\n    if (!geometry.isBufferGeometry) {\n      throw new Error('THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.');\n    }\n\n    const vertices = geometry.getAttribute('position');\n    const colors = geometry.getAttribute('color');\n    this.output += `o ${points.name}\\n`;\n\n    if (vertices !== undefined) {\n      for (let i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n        this.vertex.fromBufferAttribute(vertices, i);\n        this.vertex.applyMatrix4(points.matrixWorld);\n        this.output += `v ${this.vertex.x} ${this.vertex.y} ${this.vertex.z}`;\n\n        if (colors !== undefined && colors instanceof BufferAttribute) {\n          this.color.fromBufferAttribute(colors, i);\n          this.output += ` ${this.color.r} ${this.color.g} ${this.color.b}`;\n        }\n\n        this.output += '\\n';\n      }\n    }\n\n    this.output += 'p ';\n\n    for (let j = 1, l = vertices.count; j <= l; j++) {\n      this.output += `${this.indexVertex + j} `;\n    }\n\n    this.output += '\\n'; // update index\n\n    this.indexVertex += nbVertex;\n  }\n\n}\n\nexport { OBJExporter };\n"],"mappings":";;AAAA,OAAOA,eAAe,MAAM,2CAA2C;AACvE,SAASC,OAAO,EAAEC,KAAK,EAAEC,OAAO,EAAEC,IAAI,EAAEC,IAAI,EAAEC,MAAM,EAAEC,OAAO,EAAEC,eAAe,QAAQ,OAAO;AAAC,IAExFC,WAAW;EACf,SAAAA,YAAA,EAAc;IAAAC,eAAA,OAAAD,WAAA;IACZT,eAAe,CAAC,IAAI,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;IAEvCA,eAAe,CAAC,IAAI,EAAE,aAAa,EAAE,KAAK,CAAC,CAAC;IAE5CA,eAAe,CAAC,IAAI,EAAE,gBAAgB,EAAE,KAAK,CAAC,CAAC;IAE/CA,eAAe,CAAC,IAAI,EAAE,cAAc,EAAE,KAAK,CAAC,CAAC;IAE7CA,eAAe,CAAC,IAAI,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;IAEvCA,eAAe,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;IAEtCA,eAAe,CAAC,IAAI,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;IAEvCA,eAAe,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;IAEnCA,eAAe,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;IAErC,IAAI,CAACW,MAAM,GAAG,EAAE;IAChB,IAAI,CAACC,WAAW,GAAG,CAAC;IACpB,IAAI,CAACC,cAAc,GAAG,CAAC;IACvB,IAAI,CAACC,YAAY,GAAG,CAAC;IACrB,IAAI,CAACC,MAAM,GAAG,IAAId,OAAO,EAAE;IAC3B,IAAI,CAACe,KAAK,GAAG,IAAId,KAAK,EAAE;IACxB,IAAI,CAACe,MAAM,GAAG,IAAIhB,OAAO,EAAE;IAC3B,IAAI,CAACiB,EAAE,GAAG,IAAIf,OAAO,EAAE;IACvB,IAAI,CAACgB,IAAI,GAAG,EAAE;EAChB;EAACC,YAAA,CAAAX,WAAA;IAAAY,GAAA;IAAAC,KAAA,EAED,SAAAC,MAAMC,MAAM,EAAE;MAAA,IAAAC,KAAA;MACZD,MAAM,CAACE,QAAQ,CAAC,UAAAC,KAAK,EAAI;QACvB,IAAIA,KAAK,YAAYvB,IAAI,IAAIuB,KAAK,CAACC,MAAM,EAAE;UACzCH,KAAI,CAACI,SAAS,CAACF,KAAK,CAAC;QACvB;QAEA,IAAIA,KAAK,YAAYtB,IAAI,IAAIsB,KAAK,CAACG,MAAM,EAAE;UACzCL,KAAI,CAACM,SAAS,CAACJ,KAAK,CAAC;QACvB;QAEA,IAAIA,KAAK,YAAYrB,MAAM,IAAIqB,KAAK,CAACK,QAAQ,EAAE;UAC7CP,KAAI,CAACQ,WAAW,CAACN,KAAK,CAAC;QACzB;MACF,CAAC,CAAC;MACF,OAAO,IAAI,CAAChB,MAAM;IACpB;EAAC;IAAAU,GAAA;IAAAC,KAAA,EAED,SAAAO,UAAUK,IAAI,EAAE;MACd,IAAIC,QAAQ,GAAG,CAAC;MAChB,IAAIC,SAAS,GAAG,CAAC;MACjB,IAAIC,WAAW,GAAG,CAAC;MACnB,IAAMC,QAAQ,GAAGJ,IAAI,CAACI,QAAQ;MAC9B,IAAMC,iBAAiB,GAAG,IAAIhC,OAAO,EAAE;MAEvC,IAAI,CAAC+B,QAAQ,CAACE,gBAAgB,EAAE;QAC9B,MAAM,IAAIC,KAAK,CAAC,kEAAkE,CAAC;MACrF,CAAC,CAAC;;MAGF,IAAMC,QAAQ,GAAGJ,QAAQ,CAACK,YAAY,CAAC,UAAU,CAAC;MAClD,IAAMC,OAAO,GAAGN,QAAQ,CAACK,YAAY,CAAC,QAAQ,CAAC;MAC/C,IAAME,GAAG,GAAGP,QAAQ,CAACK,YAAY,CAAC,IAAI,CAAC;MACvC,IAAMG,OAAO,GAAGR,QAAQ,CAACS,QAAQ,EAAE,CAAC,CAAC;;MAErC,IAAI,CAACpC,MAAM,SAAAqC,MAAA,CAASd,IAAI,CAACe,IAAI,OAAI,CAAC,CAAC;;MAEnC,IAAIf,IAAI,CAACgB,QAAQ,IAAI,CAACC,KAAK,CAACC,OAAO,CAAClB,IAAI,CAACgB,QAAQ,CAAC,IAAIhB,IAAI,CAACgB,QAAQ,CAACD,IAAI,EAAE;QACxE,IAAI,CAACtC,MAAM,cAAAqC,MAAA,CAAcd,IAAI,CAACgB,QAAQ,CAACD,IAAI,OAAI;MACjD,CAAC,CAAC;;MAGF,IAAIP,QAAQ,KAAKW,SAAS,EAAE;QAC1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGb,QAAQ,CAACc,KAAK,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAEnB,QAAQ,EAAE,EAAE;UAC1D,IAAI,CAACpB,MAAM,CAAC0C,CAAC,GAAGf,QAAQ,CAACgB,IAAI,CAACJ,CAAC,CAAC;UAChC,IAAI,CAACvC,MAAM,CAAC4C,CAAC,GAAGjB,QAAQ,CAACkB,IAAI,CAACN,CAAC,CAAC;UAChC,IAAI,CAACvC,MAAM,CAAC8C,CAAC,GAAGnB,QAAQ,CAACoB,IAAI,CAACR,CAAC,CAAC,CAAC,CAAC;;UAElC,IAAI,CAACvC,MAAM,CAACgD,YAAY,CAAC7B,IAAI,CAAC8B,WAAW,CAAC,CAAC,CAAC;;UAE5C,IAAI,CAACrD,MAAM,SAAAqC,MAAA,CAAS,IAAI,CAACjC,MAAM,CAAC0C,CAAC,OAAAT,MAAA,CAAI,IAAI,CAACjC,MAAM,CAAC4C,CAAC,OAAAX,MAAA,CAAI,IAAI,CAACjC,MAAM,CAAC8C,CAAC,OAAI;QACzE;MACF,CAAC,CAAC;;MAGF,IAAIhB,GAAG,KAAKQ,SAAS,EAAE;QACrB,KAAK,IAAIC,EAAC,GAAG,CAAC,EAAEC,EAAC,GAAGV,GAAG,CAACW,KAAK,EAAEF,EAAC,GAAGC,EAAC,EAAED,EAAC,EAAE,EAAEjB,WAAW,EAAE,EAAE;UACxD,IAAI,CAACnB,EAAE,CAACuC,CAAC,GAAGZ,GAAG,CAACa,IAAI,CAACJ,EAAC,CAAC;UACvB,IAAI,CAACpC,EAAE,CAACyC,CAAC,GAAGd,GAAG,CAACe,IAAI,CAACN,EAAC,CAAC,CAAC,CAAC;;UAEzB,IAAI,CAAC3C,MAAM,UAAAqC,MAAA,CAAU,IAAI,CAAC9B,EAAE,CAACuC,CAAC,OAAAT,MAAA,CAAI,IAAI,CAAC9B,EAAE,CAACyC,CAAC,OAAI;QACjD;MACF,CAAC,CAAC;;MAGF,IAAIf,OAAO,KAAKS,SAAS,EAAE;QACzBd,iBAAiB,CAAC0B,eAAe,CAAC/B,IAAI,CAAC8B,WAAW,CAAC;QAEnD,KAAK,IAAIV,GAAC,GAAG,CAAC,EAAEC,GAAC,GAAGX,OAAO,CAACY,KAAK,EAAEF,GAAC,GAAGC,GAAC,EAAED,GAAC,EAAE,EAAElB,SAAS,EAAE,EAAE;UAC1D,IAAI,CAACnB,MAAM,CAACwC,CAAC,GAAGb,OAAO,CAACc,IAAI,CAACJ,GAAC,CAAC;UAC/B,IAAI,CAACrC,MAAM,CAAC0C,CAAC,GAAGf,OAAO,CAACgB,IAAI,CAACN,GAAC,CAAC;UAC/B,IAAI,CAACrC,MAAM,CAAC4C,CAAC,GAAGjB,OAAO,CAACkB,IAAI,CAACR,GAAC,CAAC,CAAC,CAAC;;UAEjC,IAAI,CAACrC,MAAM,CAACiD,YAAY,CAAC3B,iBAAiB,CAAC,CAAC4B,SAAS,EAAE,CAAC,CAAC;;UAEzD,IAAI,CAACxD,MAAM,UAAAqC,MAAA,CAAU,IAAI,CAAC/B,MAAM,CAACwC,CAAC,OAAAT,MAAA,CAAI,IAAI,CAAC/B,MAAM,CAAC0C,CAAC,OAAAX,MAAA,CAAI,IAAI,CAAC/B,MAAM,CAAC4C,CAAC,OAAI;QAC1E;MACF,CAAC,CAAC;;MAGF,IAAIf,OAAO,KAAK,IAAI,EAAE;QACpB,KAAK,IAAIQ,GAAC,GAAG,CAAC,EAAEC,GAAC,GAAGT,OAAO,CAACU,KAAK,EAAEF,GAAC,GAAGC,GAAC,EAAED,GAAC,IAAI,CAAC,EAAE;UAChD,KAAK,IAAIc,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;YAC1B,IAAMC,CAAC,GAAGvB,OAAO,CAACY,IAAI,CAACJ,GAAC,GAAGc,CAAC,CAAC,GAAG,CAAC;YACjC,IAAI,CAACjD,IAAI,CAACiD,CAAC,CAAC,GAAG,IAAI,CAACxD,WAAW,GAAGyD,CAAC,IAAIzB,OAAO,IAAIC,GAAG,OAAAG,MAAA,CAAOH,GAAG,GAAG,IAAI,CAAChC,cAAc,GAAGwD,CAAC,GAAG,EAAE,EAAArB,MAAA,CAAGJ,OAAO,OAAAI,MAAA,CAAO,IAAI,CAAClC,YAAY,GAAGuD,CAAC,IAAK,EAAE,IAAK,EAAE,CAAC;UACrJ,CAAC,CAAC;;UAGF,IAAI,CAAC1D,MAAM,SAAAqC,MAAA,CAAS,IAAI,CAAC7B,IAAI,CAACmD,IAAI,CAAC,GAAG,CAAC,OAAI;QAC7C;MACF,CAAC,MAAM;QACL,KAAK,IAAIhB,GAAC,GAAG,CAAC,EAAEC,GAAC,GAAGb,QAAQ,CAACc,KAAK,EAAEF,GAAC,GAAGC,GAAC,EAAED,GAAC,IAAI,CAAC,EAAE;UACjD,KAAK,IAAIc,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAG,CAAC,EAAEA,EAAC,EAAE,EAAE;YAC1B,IAAMC,EAAC,GAAGf,GAAC,GAAGc,EAAC,GAAG,CAAC;YACnB,IAAI,CAACjD,IAAI,CAACiD,EAAC,CAAC,GAAG,IAAI,CAACxD,WAAW,GAAGyD,EAAC,IAAIzB,OAAO,IAAIC,GAAG,OAAAG,MAAA,CAAOH,GAAG,GAAG,IAAI,CAAChC,cAAc,GAAGwD,EAAC,GAAG,EAAE,EAAArB,MAAA,CAAGJ,OAAO,OAAAI,MAAA,CAAO,IAAI,CAAClC,YAAY,GAAGuD,EAAC,IAAK,EAAE,IAAK,EAAE,CAAC;UACrJ,CAAC,CAAC;;UAGF,IAAI,CAAC1D,MAAM,SAAAqC,MAAA,CAAS,IAAI,CAAC7B,IAAI,CAACmD,IAAI,CAAC,GAAG,CAAC,OAAI;QAC7C;MACF,CAAC,CAAC;;MAGF,IAAI,CAAC1D,WAAW,IAAIuB,QAAQ;MAC5B,IAAI,CAACtB,cAAc,IAAIwB,WAAW;MAClC,IAAI,CAACvB,YAAY,IAAIsB,SAAS;IAChC;EAAC;IAAAf,GAAA;IAAAC,KAAA,EAED,SAAAS,UAAUwC,IAAI,EAAE;MACd,IAAIpC,QAAQ,GAAG,CAAC;MAChB,IAAMG,QAAQ,GAAGiC,IAAI,CAACjC,QAAQ;MAC9B,IAAMkC,IAAI,GAAGD,IAAI,CAACC,IAAI;MAEtB,IAAIlC,QAAQ,CAACE,gBAAgB,EAAE;QAC7B,MAAM,IAAIC,KAAK,CAAC,kEAAkE,CAAC;MACrF,CAAC,CAAC;;MAGF,IAAMC,QAAQ,GAAGJ,QAAQ,CAACK,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC;;MAEpD,IAAI,CAAChC,MAAM,SAAAqC,MAAA,CAASuB,IAAI,CAACtB,IAAI,OAAI;MAEjC,IAAIP,QAAQ,KAAKW,SAAS,EAAE;QAC1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGb,QAAQ,CAACc,KAAK,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAEnB,QAAQ,EAAE,EAAE;UAC1D,IAAI,CAACpB,MAAM,CAAC0C,CAAC,GAAGf,QAAQ,CAACgB,IAAI,CAACJ,CAAC,CAAC;UAChC,IAAI,CAACvC,MAAM,CAAC4C,CAAC,GAAGjB,QAAQ,CAACkB,IAAI,CAACN,CAAC,CAAC;UAChC,IAAI,CAACvC,MAAM,CAAC8C,CAAC,GAAGnB,QAAQ,CAACoB,IAAI,CAACR,CAAC,CAAC,CAAC,CAAC;;UAElC,IAAI,CAACvC,MAAM,CAACgD,YAAY,CAACQ,IAAI,CAACP,WAAW,CAAC,CAAC,CAAC;;UAE5C,IAAI,CAACrD,MAAM,SAAAqC,MAAA,CAAS,IAAI,CAACjC,MAAM,CAAC0C,CAAC,OAAAT,MAAA,CAAI,IAAI,CAACjC,MAAM,CAAC4C,CAAC,OAAAX,MAAA,CAAI,IAAI,CAACjC,MAAM,CAAC8C,CAAC,OAAI;QACzE;MACF;MAEA,IAAIW,IAAI,KAAK,MAAM,EAAE;QACnB,IAAI,CAAC7D,MAAM,IAAI,IAAI;QAEnB,KAAK,IAAI0D,CAAC,GAAG,CAAC,EAAEd,GAAC,GAAGb,QAAQ,CAACc,KAAK,EAAEa,CAAC,IAAId,GAAC,EAAEc,CAAC,EAAE,EAAE;UAC/C,IAAI,CAAC1D,MAAM,OAAAqC,MAAA,CAAO,IAAI,CAACpC,WAAW,GAAGyD,CAAC,MAAG;QAC3C;QAEA,IAAI,CAAC1D,MAAM,IAAI,IAAI;MACrB;MAEA,IAAI6D,IAAI,KAAK,cAAc,EAAE;QAC3B,KAAK,IAAIH,GAAC,GAAG,CAAC,EAAEI,CAAC,GAAGJ,GAAC,GAAG,CAAC,EAAEd,GAAC,GAAGb,QAAQ,CAACc,KAAK,EAAEa,GAAC,GAAGd,GAAC,EAAEc,GAAC,IAAI,CAAC,EAAEI,CAAC,GAAGJ,GAAC,GAAG,CAAC,EAAE;UACvE,IAAI,CAAC1D,MAAM,SAAAqC,MAAA,CAAS,IAAI,CAACpC,WAAW,GAAGyD,GAAC,OAAArB,MAAA,CAAI,IAAI,CAACpC,WAAW,GAAG6D,CAAC,OAAI;QACtE;MACF,CAAC,CAAC;;MAGF,IAAI,CAAC7D,WAAW,IAAIuB,QAAQ;IAC9B;EAAC;IAAAd,GAAA;IAAAC,KAAA,EAED,SAAAW,YAAYyC,MAAM,EAAE;MAClB,IAAIvC,QAAQ,GAAG,CAAC;MAChB,IAAMG,QAAQ,GAAGoC,MAAM,CAACpC,QAAQ;MAEhC,IAAI,CAACA,QAAQ,CAACE,gBAAgB,EAAE;QAC9B,MAAM,IAAIC,KAAK,CAAC,kEAAkE,CAAC;MACrF;MAEA,IAAMC,QAAQ,GAAGJ,QAAQ,CAACK,YAAY,CAAC,UAAU,CAAC;MAClD,IAAMgC,MAAM,GAAGrC,QAAQ,CAACK,YAAY,CAAC,OAAO,CAAC;MAC7C,IAAI,CAAChC,MAAM,SAAAqC,MAAA,CAAS0B,MAAM,CAACzB,IAAI,OAAI;MAEnC,IAAIP,QAAQ,KAAKW,SAAS,EAAE;QAC1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGb,QAAQ,CAACc,KAAK,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAEnB,QAAQ,EAAE,EAAE;UAC1D,IAAI,CAACpB,MAAM,CAAC6D,mBAAmB,CAAClC,QAAQ,EAAEY,CAAC,CAAC;UAC5C,IAAI,CAACvC,MAAM,CAACgD,YAAY,CAACW,MAAM,CAACV,WAAW,CAAC;UAC5C,IAAI,CAACrD,MAAM,SAAAqC,MAAA,CAAS,IAAI,CAACjC,MAAM,CAAC0C,CAAC,OAAAT,MAAA,CAAI,IAAI,CAACjC,MAAM,CAAC4C,CAAC,OAAAX,MAAA,CAAI,IAAI,CAACjC,MAAM,CAAC8C,CAAC,CAAE;UAErE,IAAIc,MAAM,KAAKtB,SAAS,IAAIsB,MAAM,YAAYnE,eAAe,EAAE;YAC7D,IAAI,CAACQ,KAAK,CAAC4D,mBAAmB,CAACD,MAAM,EAAErB,CAAC,CAAC;YACzC,IAAI,CAAC3C,MAAM,QAAAqC,MAAA,CAAQ,IAAI,CAAChC,KAAK,CAAC6D,CAAC,OAAA7B,MAAA,CAAI,IAAI,CAAChC,KAAK,CAAC8D,CAAC,OAAA9B,MAAA,CAAI,IAAI,CAAChC,KAAK,CAAC+D,CAAC,CAAE;UACnE;UAEA,IAAI,CAACpE,MAAM,IAAI,IAAI;QACrB;MACF;MAEA,IAAI,CAACA,MAAM,IAAI,IAAI;MAEnB,KAAK,IAAI0D,CAAC,GAAG,CAAC,EAAEd,GAAC,GAAGb,QAAQ,CAACc,KAAK,EAAEa,CAAC,IAAId,GAAC,EAAEc,CAAC,EAAE,EAAE;QAC/C,IAAI,CAAC1D,MAAM,OAAAqC,MAAA,CAAO,IAAI,CAACpC,WAAW,GAAGyD,CAAC,MAAG;MAC3C;MAEA,IAAI,CAAC1D,MAAM,IAAI,IAAI,CAAC,CAAC;;MAErB,IAAI,CAACC,WAAW,IAAIuB,QAAQ;IAC9B;EAAC;EAAA,OAAA1B,WAAA;AAAA;AAIH,SAASA,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}