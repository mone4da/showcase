{"ast":null,"code":"import _classCallCheck from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { BufferGeometry, Mesh, Points } from 'three';\n\n/**\n * Export draco compressed files from threejs geometry objects.\n *\n * Draco files are compressed and usually are smaller than conventional 3D file formats.\n *\n * The exporter receives a options object containing\n *  - decodeSpeed, indicates how to tune the encoder regarding decode speed (0 gives better speed but worst quality)\n *  - encodeSpeed, indicates how to tune the encoder parameters (0 gives better speed but worst quality)\n *  - encoderMethod\n *  - quantization, indicates the presision of each type of data stored in the draco file in the order (POSITION, NORMAL, COLOR, TEX_COORD, GENERIC)\n *  - exportUvs\n *  - exportNormals\n */\nvar DRACOExporter = /*#__PURE__*/function () {\n  function DRACOExporter() {\n    _classCallCheck(this, DRACOExporter);\n  }\n  _createClass(DRACOExporter, [{\n    key: \"parse\",\n    value:\n    // Encoder methods\n    // Geometry type\n    // Attribute type\n    function parse(object) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        decodeSpeed: 5,\n        encodeSpeed: 5,\n        encoderMethod: DRACOExporter.MESH_EDGEBREAKER_ENCODING,\n        quantization: [16, 8, 8, 8, 8],\n        exportUvs: true,\n        exportNormals: true,\n        exportColor: false\n      };\n      if (object instanceof BufferGeometry && object.isBufferGeometry) {\n        throw new Error('DRACOExporter: The first parameter of parse() is now an instance of Mesh or Points.');\n      }\n      if (DracoEncoderModule === undefined) {\n        throw new Error('THREE.DRACOExporter: required the draco_encoder to work.');\n      }\n      var geometry = object.geometry;\n      var dracoEncoder = DracoEncoderModule();\n      var encoder = new dracoEncoder.Encoder();\n      var builder;\n      var dracoObject;\n      if (!geometry.isBufferGeometry) {\n        throw new Error('THREE.DRACOExporter.parse(geometry, options): geometry is not a THREE.BufferGeometry instance.');\n      }\n      if (object instanceof Mesh && object.isMesh) {\n        builder = new dracoEncoder.MeshBuilder();\n        dracoObject = new dracoEncoder.Mesh();\n        var vertices = geometry.getAttribute('position'); // @ts-expect-error\n\n        builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.POSITION, vertices.count, vertices.itemSize, vertices.array);\n        var faces = geometry.getIndex();\n        if (faces !== null) {\n          // @ts-expect-error\n          builder.AddFacesToMesh(dracoObject, faces.count / 3, faces.array);\n        } else {\n          var _faces = new (vertices.count > 65535 ? Uint32Array : Uint16Array)(vertices.count);\n          for (var i = 0; i < _faces.length; i++) {\n            _faces[i] = i;\n          }\n          builder.AddFacesToMesh(dracoObject, vertices.count, _faces);\n        }\n        if (options.exportNormals) {\n          var normals = geometry.getAttribute('normal');\n          if (normals !== undefined) {\n            // @ts-expect-error\n            builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.NORMAL, normals.count, normals.itemSize, normals.array);\n          }\n        }\n        if (options.exportUvs) {\n          var uvs = geometry.getAttribute('uv');\n          if (uvs !== undefined) {\n            // @ts-expect-error\n            builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.TEX_COORD, uvs.count, uvs.itemSize, uvs.array);\n          }\n        }\n        if (options.exportColor) {\n          var colors = geometry.getAttribute('color');\n          if (colors !== undefined) {\n            // @ts-expect-error\n            builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.COLOR, colors.count, colors.itemSize, colors.array);\n          }\n        }\n      } else if (object instanceof Points && object.isPoints) {\n        // @ts-expect-error\n        builder = new dracoEncoder.PointCloudBuilder(); // @ts-expect-error\n\n        dracoObject = new dracoEncoder.PointCloud();\n        var _vertices = geometry.getAttribute('position');\n        builder.AddFloatAttribute(dracoObject, dracoEncoder.POSITION, _vertices.count, _vertices.itemSize, _vertices.array);\n        if (options.exportColor) {\n          var _colors = geometry.getAttribute('color');\n          if (_colors !== undefined) {\n            builder.AddFloatAttribute(dracoObject, dracoEncoder.COLOR, _colors.count, _colors.itemSize, _colors.array);\n          }\n        }\n      } else {\n        throw new Error('DRACOExporter: Unsupported object type.');\n      } //Compress using draco encoder\n\n      var encodedData = new dracoEncoder.DracoInt8Array(); //Sets the desired encoding and decoding speed for the given options from 0 (slowest speed, but the best compression) to 10 (fastest, but the worst compression).\n\n      var encodeSpeed = options.encodeSpeed !== undefined ? options.encodeSpeed : 5;\n      var decodeSpeed = options.decodeSpeed !== undefined ? options.decodeSpeed : 5;\n      encoder.SetSpeedOptions(encodeSpeed, decodeSpeed); // Sets the desired encoding method for a given geometry.\n\n      if (options.encoderMethod !== undefined) {\n        encoder.SetEncodingMethod(options.encoderMethod);\n      } // Sets the quantization (number of bits used to represent) compression options for a named attribute.\n      // The attribute values will be quantized in a box defined by the maximum extent of the attribute values.\n\n      if (options.quantization !== undefined) {\n        for (var _i = 0; _i < 5; _i++) {\n          if (options.quantization[_i] !== undefined) {\n            encoder.SetAttributeQuantization(_i, options.quantization[_i]);\n          }\n        }\n      }\n      var length;\n      if (object instanceof Mesh && object.isMesh) {\n        length = encoder.EncodeMeshToDracoBuffer(dracoObject, encodedData);\n      } else {\n        // @ts-expect-error\n        length = encoder.EncodePointCloudToDracoBuffer(dracoObject, true, encodedData);\n      }\n      dracoEncoder.destroy(dracoObject);\n      if (length === 0) {\n        throw new Error('THREE.DRACOExporter: Draco encoding failed.');\n      } //Copy encoded data to buffer.\n\n      var outputData = new Int8Array(new ArrayBuffer(length));\n      for (var _i2 = 0; _i2 < length; _i2++) {\n        outputData[_i2] = encodedData.GetValue(_i2);\n      }\n      dracoEncoder.destroy(encodedData);\n      dracoEncoder.destroy(encoder);\n      dracoEncoder.destroy(builder);\n      return outputData;\n    }\n  }]);\n  return DRACOExporter;\n}();\n_defineProperty(DRACOExporter, \"MESH_EDGEBREAKER_ENCODING\", 1);\n_defineProperty(DRACOExporter, \"MESH_SEQUENTIAL_ENCODING\", 0);\n_defineProperty(DRACOExporter, \"POINT_CLOUD\", 0);\n_defineProperty(DRACOExporter, \"TRIANGULAR_MESH\", 1);\n_defineProperty(DRACOExporter, \"INVALID\", -1);\n_defineProperty(DRACOExporter, \"POSITION\", 0);\n_defineProperty(DRACOExporter, \"NORMAL\", 1);\n_defineProperty(DRACOExporter, \"COLOR\", 2);\n_defineProperty(DRACOExporter, \"TEX_COORD\", 3);\n_defineProperty(DRACOExporter, \"GENERIC\", 4);\nexport { DRACOExporter };","map":{"version":3,"names":["_defineProperty","BufferGeometry","Mesh","Points","DRACOExporter","_classCallCheck","_createClass","key","value","parse","object","options","arguments","length","undefined","decodeSpeed","encodeSpeed","encoderMethod","MESH_EDGEBREAKER_ENCODING","quantization","exportUvs","exportNormals","exportColor","isBufferGeometry","Error","DracoEncoderModule","geometry","dracoEncoder","encoder","Encoder","builder","dracoObject","isMesh","MeshBuilder","vertices","getAttribute","AddFloatAttributeToMesh","POSITION","count","itemSize","array","faces","getIndex","AddFacesToMesh","Uint32Array","Uint16Array","i","normals","NORMAL","uvs","TEX_COORD","colors","COLOR","isPoints","PointCloudBuilder","PointCloud","AddFloatAttribute","encodedData","DracoInt8Array","SetSpeedOptions","SetEncodingMethod","SetAttributeQuantization","EncodeMeshToDracoBuffer","EncodePointCloudToDracoBuffer","destroy","outputData","Int8Array","ArrayBuffer","GetValue"],"sources":["/home/samuel/experiment/3d/farm/frontend/node_modules/three-stdlib/exporters/DRACOExporter.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { BufferGeometry, Mesh, Points } from 'three';\n\n/**\n * Export draco compressed files from threejs geometry objects.\n *\n * Draco files are compressed and usually are smaller than conventional 3D file formats.\n *\n * The exporter receives a options object containing\n *  - decodeSpeed, indicates how to tune the encoder regarding decode speed (0 gives better speed but worst quality)\n *  - encodeSpeed, indicates how to tune the encoder parameters (0 gives better speed but worst quality)\n *  - encoderMethod\n *  - quantization, indicates the presision of each type of data stored in the draco file in the order (POSITION, NORMAL, COLOR, TEX_COORD, GENERIC)\n *  - exportUvs\n *  - exportNormals\n */\n\nclass DRACOExporter {\n  // Encoder methods\n  // Geometry type\n  // Attribute type\n  parse(object, options = {\n    decodeSpeed: 5,\n    encodeSpeed: 5,\n    encoderMethod: DRACOExporter.MESH_EDGEBREAKER_ENCODING,\n    quantization: [16, 8, 8, 8, 8],\n    exportUvs: true,\n    exportNormals: true,\n    exportColor: false\n  }) {\n    if (object instanceof BufferGeometry && object.isBufferGeometry) {\n      throw new Error('DRACOExporter: The first parameter of parse() is now an instance of Mesh or Points.');\n    }\n\n    if (DracoEncoderModule === undefined) {\n      throw new Error('THREE.DRACOExporter: required the draco_encoder to work.');\n    }\n\n    const geometry = object.geometry;\n    const dracoEncoder = DracoEncoderModule();\n    const encoder = new dracoEncoder.Encoder();\n    let builder;\n    let dracoObject;\n\n    if (!geometry.isBufferGeometry) {\n      throw new Error('THREE.DRACOExporter.parse(geometry, options): geometry is not a THREE.BufferGeometry instance.');\n    }\n\n    if (object instanceof Mesh && object.isMesh) {\n      builder = new dracoEncoder.MeshBuilder();\n      dracoObject = new dracoEncoder.Mesh();\n      const vertices = geometry.getAttribute('position'); // @ts-expect-error\n\n      builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.POSITION, vertices.count, vertices.itemSize, vertices.array);\n      const faces = geometry.getIndex();\n\n      if (faces !== null) {\n        // @ts-expect-error\n        builder.AddFacesToMesh(dracoObject, faces.count / 3, faces.array);\n      } else {\n        const faces = new (vertices.count > 65535 ? Uint32Array : Uint16Array)(vertices.count);\n\n        for (let i = 0; i < faces.length; i++) {\n          faces[i] = i;\n        }\n\n        builder.AddFacesToMesh(dracoObject, vertices.count, faces);\n      }\n\n      if (options.exportNormals) {\n        const normals = geometry.getAttribute('normal');\n\n        if (normals !== undefined) {\n          // @ts-expect-error\n          builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.NORMAL, normals.count, normals.itemSize, normals.array);\n        }\n      }\n\n      if (options.exportUvs) {\n        const uvs = geometry.getAttribute('uv');\n\n        if (uvs !== undefined) {\n          // @ts-expect-error\n          builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.TEX_COORD, uvs.count, uvs.itemSize, uvs.array);\n        }\n      }\n\n      if (options.exportColor) {\n        const colors = geometry.getAttribute('color');\n\n        if (colors !== undefined) {\n          // @ts-expect-error\n          builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.COLOR, colors.count, colors.itemSize, colors.array);\n        }\n      }\n    } else if (object instanceof Points && object.isPoints) {\n      // @ts-expect-error\n      builder = new dracoEncoder.PointCloudBuilder(); // @ts-expect-error\n\n      dracoObject = new dracoEncoder.PointCloud();\n      const vertices = geometry.getAttribute('position');\n      builder.AddFloatAttribute(dracoObject, dracoEncoder.POSITION, vertices.count, vertices.itemSize, vertices.array);\n\n      if (options.exportColor) {\n        const colors = geometry.getAttribute('color');\n\n        if (colors !== undefined) {\n          builder.AddFloatAttribute(dracoObject, dracoEncoder.COLOR, colors.count, colors.itemSize, colors.array);\n        }\n      }\n    } else {\n      throw new Error('DRACOExporter: Unsupported object type.');\n    } //Compress using draco encoder\n\n\n    const encodedData = new dracoEncoder.DracoInt8Array(); //Sets the desired encoding and decoding speed for the given options from 0 (slowest speed, but the best compression) to 10 (fastest, but the worst compression).\n\n    const encodeSpeed = options.encodeSpeed !== undefined ? options.encodeSpeed : 5;\n    const decodeSpeed = options.decodeSpeed !== undefined ? options.decodeSpeed : 5;\n    encoder.SetSpeedOptions(encodeSpeed, decodeSpeed); // Sets the desired encoding method for a given geometry.\n\n    if (options.encoderMethod !== undefined) {\n      encoder.SetEncodingMethod(options.encoderMethod);\n    } // Sets the quantization (number of bits used to represent) compression options for a named attribute.\n    // The attribute values will be quantized in a box defined by the maximum extent of the attribute values.\n\n\n    if (options.quantization !== undefined) {\n      for (let i = 0; i < 5; i++) {\n        if (options.quantization[i] !== undefined) {\n          encoder.SetAttributeQuantization(i, options.quantization[i]);\n        }\n      }\n    }\n\n    let length;\n\n    if (object instanceof Mesh && object.isMesh) {\n      length = encoder.EncodeMeshToDracoBuffer(dracoObject, encodedData);\n    } else {\n      // @ts-expect-error\n      length = encoder.EncodePointCloudToDracoBuffer(dracoObject, true, encodedData);\n    }\n\n    dracoEncoder.destroy(dracoObject);\n\n    if (length === 0) {\n      throw new Error('THREE.DRACOExporter: Draco encoding failed.');\n    } //Copy encoded data to buffer.\n\n\n    const outputData = new Int8Array(new ArrayBuffer(length));\n\n    for (let i = 0; i < length; i++) {\n      outputData[i] = encodedData.GetValue(i);\n    }\n\n    dracoEncoder.destroy(encodedData);\n    dracoEncoder.destroy(encoder);\n    dracoEncoder.destroy(builder);\n    return outputData;\n  }\n\n}\n\n_defineProperty(DRACOExporter, \"MESH_EDGEBREAKER_ENCODING\", 1);\n\n_defineProperty(DRACOExporter, \"MESH_SEQUENTIAL_ENCODING\", 0);\n\n_defineProperty(DRACOExporter, \"POINT_CLOUD\", 0);\n\n_defineProperty(DRACOExporter, \"TRIANGULAR_MESH\", 1);\n\n_defineProperty(DRACOExporter, \"INVALID\", -1);\n\n_defineProperty(DRACOExporter, \"POSITION\", 0);\n\n_defineProperty(DRACOExporter, \"NORMAL\", 1);\n\n_defineProperty(DRACOExporter, \"COLOR\", 2);\n\n_defineProperty(DRACOExporter, \"TEX_COORD\", 3);\n\n_defineProperty(DRACOExporter, \"GENERIC\", 4);\n\nexport { DRACOExporter };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}