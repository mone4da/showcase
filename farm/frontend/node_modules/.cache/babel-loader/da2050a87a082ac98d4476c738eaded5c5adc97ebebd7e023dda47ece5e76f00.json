{"ast":null,"code":"import _slicedToArray from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, FileLoader, MeshStandardMaterial, Color, TextureLoader, Object3D, Matrix4, BufferGeometryLoader, DirectionalLight, PointLight, RectAreaLight, Vector3, SpotLight, CanvasTexture, LinearFilter, ClampToEdgeWrapping, SpriteMaterial, Sprite, LineBasicMaterial, Line, Mesh, PointsMaterial, Points } from 'three';\nvar _taskCache = new WeakMap();\nvar Rhino3dmLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(Rhino3dmLoader, _Loader);\n  var _super = _createSuper(Rhino3dmLoader);\n  function Rhino3dmLoader(manager) {\n    var _this;\n    _classCallCheck(this, Rhino3dmLoader);\n    _this = _super.call(this, manager);\n    _this.libraryPath = '';\n    _this.libraryPending = null;\n    _this.libraryBinary = null;\n    _this.libraryConfig = {};\n    _this.url = '';\n    _this.workerLimit = 4;\n    _this.workerPool = [];\n    _this.workerNextTaskID = 1;\n    _this.workerSourceURL = '';\n    _this.workerConfig = {};\n    _this.materials = [];\n    return _this;\n  }\n  _createClass(Rhino3dmLoader, [{\n    key: \"setLibraryPath\",\n    value: function setLibraryPath(path) {\n      this.libraryPath = path;\n      return this;\n    }\n  }, {\n    key: \"setWorkerLimit\",\n    value: function setWorkerLimit(workerLimit) {\n      this.workerLimit = workerLimit;\n      return this;\n    }\n  }, {\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var _this2 = this;\n      var loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setResponseType('arraybuffer');\n      loader.setRequestHeader(this.requestHeader);\n      this.url = url;\n      loader.load(url, function (buffer) {\n        // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n        // again from this thread.\n        if (_taskCache.has(buffer)) {\n          var cachedTask = _taskCache.get(buffer);\n          return cachedTask.promise.then(onLoad).catch(onError);\n        }\n        _this2.decodeObjects(buffer, url).then(onLoad).catch(onError);\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"debug\",\n    value: function debug() {\n      console.log('Task load: ', this.workerPool.map(function (worker) {\n        return worker._taskLoad;\n      }));\n    }\n  }, {\n    key: \"decodeObjects\",\n    value: function decodeObjects(buffer, url) {\n      var _this3 = this;\n      var worker;\n      var taskID;\n      var taskCost = buffer.byteLength;\n      var objectPending = this._getWorker(taskCost).then(function (_worker) {\n        worker = _worker;\n        taskID = _this3.workerNextTaskID++; //hmmm\n\n        return new Promise(function (resolve, reject) {\n          worker._callbacks[taskID] = {\n            resolve: resolve,\n            reject: reject\n          };\n          worker.postMessage({\n            type: 'decode',\n            id: taskID,\n            buffer: buffer\n          }, [buffer]); //this.debug();\n        });\n      }).then(function (message) {\n        return _this3._createGeometry(message.data);\n      }); // Remove task from the task list.\n      // Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\n      objectPending.catch(function () {\n        return true;\n      }).then(function () {\n        if (worker && taskID) {\n          _this3._releaseTask(worker, taskID); //this.debug();\n        }\n      }); // Cache the task result.\n\n      _taskCache.set(buffer, {\n        url: url,\n        promise: objectPending\n      });\n      return objectPending;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(data, onLoad, onError) {\n      this.decodeObjects(data, '').then(onLoad).catch(onError);\n    }\n  }, {\n    key: \"_compareMaterials\",\n    value: function _compareMaterials(material) {\n      var mat = {};\n      mat.name = material.name;\n      mat.color = {};\n      mat.color.r = material.color.r;\n      mat.color.g = material.color.g;\n      mat.color.b = material.color.b;\n      mat.type = material.type;\n      for (var i = 0; i < this.materials.length; i++) {\n        var m = this.materials[i];\n        var _mat = {};\n        _mat.name = m.name;\n        _mat.color = {};\n        _mat.color.r = m.color.r;\n        _mat.color.g = m.color.g;\n        _mat.color.b = m.color.b;\n        _mat.type = m.type;\n        if (JSON.stringify(mat) === JSON.stringify(_mat)) {\n          return m;\n        }\n      }\n      this.materials.push(material);\n      return material;\n    }\n  }, {\n    key: \"_createMaterial\",\n    value: function _createMaterial(material) {\n      if (material === undefined) {\n        return new MeshStandardMaterial({\n          color: new Color(1, 1, 1),\n          metalness: 0.8,\n          name: 'default',\n          side: 2\n        });\n      }\n      var _diffuseColor = material.diffuseColor;\n      var diffusecolor = new Color(_diffuseColor.r / 255.0, _diffuseColor.g / 255.0, _diffuseColor.b / 255.0);\n      if (_diffuseColor.r === 0 && _diffuseColor.g === 0 && _diffuseColor.b === 0) {\n        diffusecolor.r = 1;\n        diffusecolor.g = 1;\n        diffusecolor.b = 1;\n      } // console.log( material );\n\n      var mat = new MeshStandardMaterial({\n        color: diffusecolor,\n        name: material.name,\n        side: 2,\n        transparent: material.transparency > 0 ? true : false,\n        opacity: 1.0 - material.transparency\n      });\n      var textureLoader = new TextureLoader();\n      for (var i = 0; i < material.textures.length; i++) {\n        var texture = material.textures[i];\n        if (texture.image !== null) {\n          var map = textureLoader.load(texture.image);\n          switch (texture.type) {\n            case 'Diffuse':\n              mat.map = map;\n              break;\n            case 'Bump':\n              mat.bumpMap = map;\n              break;\n            case 'Transparency':\n              mat.alphaMap = map;\n              mat.transparent = true;\n              break;\n            case 'Emap':\n              mat.envMap = map;\n              break;\n          }\n        }\n      }\n      return mat;\n    }\n  }, {\n    key: \"_createGeometry\",\n    value: function _createGeometry(data) {\n      // console.log(data);\n      var object = new Object3D();\n      var instanceDefinitionObjects = [];\n      var instanceDefinitions = [];\n      var instanceReferences = [];\n      object.userData['layers'] = data.layers;\n      object.userData['groups'] = data.groups;\n      object.userData['settings'] = data.settings;\n      object.userData['objectType'] = 'File3dm';\n      object.userData['materials'] = null;\n      object.name = this.url;\n      var objects = data.objects;\n      var materials = data.materials;\n      for (var i = 0; i < objects.length; i++) {\n        var obj = objects[i];\n        var attributes = obj.attributes;\n        switch (obj.objectType) {\n          case 'InstanceDefinition':\n            instanceDefinitions.push(obj);\n            break;\n          case 'InstanceReference':\n            instanceReferences.push(obj);\n            break;\n          default:\n            var _object = void 0;\n            if (attributes.materialIndex >= 0) {\n              var rMaterial = materials[attributes.materialIndex];\n              var material = this._createMaterial(rMaterial);\n              material = this._compareMaterials(material);\n              _object = this._createObject(obj, material);\n            } else {\n              var _material2 = this._createMaterial();\n              _object = this._createObject(obj, _material2);\n            }\n            if (_object === undefined) {\n              continue;\n            }\n            var layer = data.layers[attributes.layerIndex];\n            _object.visible = layer ? data.layers[attributes.layerIndex].visible : true;\n            if (attributes.isInstanceDefinitionObject) {\n              instanceDefinitionObjects.push(_object);\n            } else {\n              object.add(_object);\n            }\n            break;\n        }\n      }\n      for (var _i = 0; _i < instanceDefinitions.length; _i++) {\n        var iDef = instanceDefinitions[_i];\n        objects = [];\n        for (var j = 0; j < iDef.attributes.objectIds.length; j++) {\n          var objId = iDef.attributes.objectIds[j];\n          for (var p = 0; p < instanceDefinitionObjects.length; p++) {\n            var idoId = instanceDefinitionObjects[p].userData.attributes.id;\n            if (objId === idoId) {\n              objects.push(instanceDefinitionObjects[p]);\n            }\n          }\n        } // Currently clones geometry and does not take advantage of instancing\n\n        for (var _j = 0; _j < instanceReferences.length; _j++) {\n          var iRef = instanceReferences[_j];\n          if (iRef.geometry.parentIdefId === iDef.attributes.id) {\n            var iRefObject = new Object3D();\n            var xf = iRef.geometry.xform.array;\n            var matrix = new Matrix4();\n            matrix.set(xf[0], xf[1], xf[2], xf[3], xf[4], xf[5], xf[6], xf[7], xf[8], xf[9], xf[10], xf[11], xf[12], xf[13], xf[14], xf[15]);\n            iRefObject.applyMatrix4(matrix);\n            for (var _p = 0; _p < objects.length; _p++) {\n              iRefObject.add(objects[_p].clone(true));\n            }\n            object.add(iRefObject);\n          }\n        }\n      }\n      object.userData['materials'] = this.materials;\n      return object;\n    }\n  }, {\n    key: \"_createObject\",\n    value: function _createObject(obj, mat) {\n      var loader = new BufferGeometryLoader();\n      var attributes = obj.attributes;\n      var geometry, material, _color, color;\n      switch (obj.objectType) {\n        case 'Point':\n        case 'PointSet':\n          geometry = loader.parse(obj.geometry);\n          if (geometry.attributes.hasOwnProperty('color')) {\n            material = new PointsMaterial({\n              vertexColors: true,\n              sizeAttenuation: false,\n              size: 2\n            });\n          } else {\n            _color = attributes.drawColor;\n            color = new Color(_color.r / 255.0, _color.g / 255.0, _color.b / 255.0);\n            material = new PointsMaterial({\n              color: color,\n              sizeAttenuation: false,\n              size: 2\n            });\n          }\n          material = this._compareMaterials(material);\n          var points = new Points(geometry, material);\n          points.userData['attributes'] = attributes;\n          points.userData['objectType'] = obj.objectType;\n          if (attributes.name) {\n            points.name = attributes.name;\n          }\n          return points;\n        case 'Mesh':\n        case 'Extrusion':\n        case 'SubD':\n        case 'Brep':\n          if (obj.geometry === null) return;\n          geometry = loader.parse(obj.geometry);\n          if (geometry.attributes.hasOwnProperty('color')) {\n            mat.vertexColors = true;\n          }\n          if (mat === null) {\n            mat = this._createMaterial();\n            mat = this._compareMaterials(mat);\n          }\n          var mesh = new Mesh(geometry, mat);\n          mesh.castShadow = attributes.castsShadows;\n          mesh.receiveShadow = attributes.receivesShadows;\n          mesh.userData['attributes'] = attributes;\n          mesh.userData['objectType'] = obj.objectType;\n          if (attributes.name) {\n            mesh.name = attributes.name;\n          }\n          return mesh;\n        case 'Curve':\n          geometry = loader.parse(obj.geometry);\n          _color = attributes.drawColor;\n          color = new Color(_color.r / 255.0, _color.g / 255.0, _color.b / 255.0);\n          material = new LineBasicMaterial({\n            color: color\n          });\n          material = this._compareMaterials(material);\n          var lines = new Line(geometry, material);\n          lines.userData['attributes'] = attributes;\n          lines.userData['objectType'] = obj.objectType;\n          if (attributes.name) {\n            lines.name = attributes.name;\n          }\n          return lines;\n        case 'TextDot':\n          geometry = obj.geometry;\n          var ctx = document.createElement('canvas').getContext('2d');\n          var font = \"\".concat(geometry.fontHeight, \"px \").concat(geometry.fontFace);\n          ctx.font = font;\n          var width = ctx.measureText(geometry.text).width + 10;\n          var height = geometry.fontHeight + 10;\n          var r = window.devicePixelRatio;\n          ctx.canvas.width = width * r;\n          ctx.canvas.height = height * r;\n          ctx.canvas.style.width = width + 'px';\n          ctx.canvas.style.height = height + 'px';\n          ctx.setTransform(r, 0, 0, r, 0, 0);\n          ctx.font = font;\n          ctx.textBaseline = 'middle';\n          ctx.textAlign = 'center';\n          color = attributes.drawColor;\n          ctx.fillStyle = \"rgba(\".concat(color.r, \",\").concat(color.g, \",\").concat(color.b, \",\").concat(color.a, \")\");\n          ctx.fillRect(0, 0, width, height);\n          ctx.fillStyle = 'white';\n          ctx.fillText(geometry.text, width / 2, height / 2);\n          var texture = new CanvasTexture(ctx.canvas);\n          texture.minFilter = LinearFilter;\n          texture.wrapS = ClampToEdgeWrapping;\n          texture.wrapT = ClampToEdgeWrapping;\n          material = new SpriteMaterial({\n            map: texture,\n            depthTest: false\n          });\n          var sprite = new Sprite(material);\n          sprite.position.set(geometry.point[0], geometry.point[1], geometry.point[2]);\n          sprite.scale.set(width / 10, height / 10, 1.0);\n          sprite.userData['attributes'] = attributes;\n          sprite.userData['objectType'] = obj.objectType;\n          if (attributes.name) {\n            sprite.name = attributes.name;\n          }\n          return sprite;\n        case 'Light':\n          geometry = obj.geometry;\n          var light;\n          if (geometry.isDirectionalLight) {\n            light = new DirectionalLight();\n            light.castShadow = attributes.castsShadows;\n            light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n            light.target.position.set(geometry.direction[0], geometry.direction[1], geometry.direction[2]);\n            light.shadow.normalBias = 0.1;\n          } else if (geometry.isPointLight) {\n            light = new PointLight();\n            light.castShadow = attributes.castsShadows;\n            light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n            light.shadow.normalBias = 0.1;\n          } else if (geometry.isRectangularLight) {\n            light = new RectAreaLight();\n            var _width = Math.abs(geometry.width[2]);\n            var _height = Math.abs(geometry.length[0]);\n            light.position.set(geometry.location[0] - _height / 2, geometry.location[1], geometry.location[2] - _width / 2);\n            light.height = _height;\n            light.width = _width;\n            light.lookAt(new Vector3(geometry.direction[0], geometry.direction[1], geometry.direction[2]));\n          } else if (geometry.isSpotLight) {\n            light = new SpotLight();\n            light.castShadow = attributes.castsShadows;\n            light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n            light.target.position.set(geometry.direction[0], geometry.direction[1], geometry.direction[2]);\n            light.angle = geometry.spotAngleRadians;\n            light.shadow.normalBias = 0.1;\n          } else if (geometry.isLinearLight) {\n            console.warn('THREE.3DMLoader:  No conversion exists for linear lights.');\n            return;\n          }\n          if (light) {\n            light.intensity = geometry.intensity;\n            _color = geometry.diffuse;\n            color = new Color(_color.r / 255.0, _color.g / 255.0, _color.b / 255.0);\n            light.color = color;\n            light.userData['attributes'] = attributes;\n            light.userData['objectType'] = obj.objectType;\n          }\n          return light;\n      }\n    }\n  }, {\n    key: \"_initLibrary\",\n    value: function _initLibrary() {\n      var _this4 = this;\n      if (!this.libraryPending) {\n        // Load rhino3dm wrapper.\n        var jsLoader = new FileLoader(this.manager);\n        jsLoader.setPath(this.libraryPath);\n        var jsContent = new Promise(function (resolve, reject) {\n          jsLoader.load('rhino3dm.js', resolve, undefined, reject);\n        }); // Load rhino3dm WASM binary.\n\n        var binaryLoader = new FileLoader(this.manager);\n        binaryLoader.setPath(this.libraryPath);\n        binaryLoader.setResponseType('arraybuffer');\n        var binaryContent = new Promise(function (resolve, reject) {\n          binaryLoader.load('rhino3dm.wasm', resolve, undefined, reject);\n        });\n        this.libraryPending = Promise.all([jsContent, binaryContent]).then(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n            jsContent = _ref2[0],\n            binaryContent = _ref2[1];\n          //this.libraryBinary = binaryContent;\n          _this4.libraryConfig.wasmBinary = binaryContent;\n          var fn = Rhino3dmWorker.toString();\n          var body = ['/* rhino3dm.js */', jsContent, '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\n');\n          _this4.workerSourceURL = URL.createObjectURL(new Blob([body]));\n        });\n      }\n      return this.libraryPending;\n    }\n  }, {\n    key: \"_getWorker\",\n    value: function _getWorker(taskCost) {\n      var _this5 = this;\n      return this._initLibrary().then(function () {\n        if (_this5.workerPool.length < _this5.workerLimit) {\n          var _worker2 = new Worker(_this5.workerSourceURL);\n          _worker2._callbacks = {};\n          _worker2._taskCosts = {};\n          _worker2._taskLoad = 0;\n          _worker2.postMessage({\n            type: 'init',\n            libraryConfig: _this5.libraryConfig\n          });\n          _worker2.onmessage = function (e) {\n            var message = e.data;\n            switch (message.type) {\n              case 'decode':\n                _worker2._callbacks[message.id].resolve(message);\n                break;\n              case 'error':\n                _worker2._callbacks[message.id].reject(message);\n                break;\n              default:\n                console.error('THREE.Rhino3dmLoader: Unexpected message, \"' + message.type + '\"');\n            }\n          };\n          _this5.workerPool.push(_worker2);\n        } else {\n          _this5.workerPool.sort(function (a, b) {\n            return a._taskLoad > b._taskLoad ? -1 : 1;\n          });\n        }\n        var worker = _this5.workerPool[_this5.workerPool.length - 1];\n        worker._taskLoad += taskCost;\n        return worker;\n      });\n    }\n  }, {\n    key: \"_releaseTask\",\n    value: function _releaseTask(worker, taskID) {\n      worker._taskLoad -= worker._taskCosts[taskID];\n      delete worker._callbacks[taskID];\n      delete worker._taskCosts[taskID];\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      for (var i = 0; i < this.workerPool.length; ++i) {\n        this.workerPool[i].terminate();\n      }\n      this.workerPool.length = 0;\n      return this;\n    }\n  }]);\n  return Rhino3dmLoader;\n}(Loader);\n/* WEB WORKER */\nfunction Rhino3dmWorker() {\n  var libraryPending;\n  var libraryConfig;\n  var rhino;\n  onmessage = function onmessage(e) {\n    var message = e.data;\n    switch (message.type) {\n      case 'init':\n        libraryConfig = message.libraryConfig;\n        var wasmBinary = libraryConfig.wasmBinary;\n        var RhinoModule;\n        libraryPending = new Promise(function (resolve) {\n          /* Like Basis Loader */\n          RhinoModule = {\n            wasmBinary: wasmBinary,\n            onRuntimeInitialized: resolve\n          };\n          rhino3dm(RhinoModule); // eslint-disable-line no-undef\n        }).then(function () {\n          rhino = RhinoModule;\n        });\n        break;\n      case 'decode':\n        var buffer = message.buffer;\n        libraryPending.then(function () {\n          var data = decodeObjects(rhino, buffer);\n          self.postMessage({\n            type: 'decode',\n            id: message.id,\n            data: data\n          });\n        });\n        break;\n    }\n  };\n  function decodeObjects(rhino, buffer) {\n    var arr = new Uint8Array(buffer);\n    var doc = rhino.File3dm.fromByteArray(arr);\n    var objects = [];\n    var materials = [];\n    var layers = [];\n    var views = [];\n    var namedViews = [];\n    var groups = []; //Handle objects\n\n    var objs = doc.objects();\n    var cnt = objs.count;\n    for (var i = 0; i < cnt; i++) {\n      var _object = objs.get(i);\n      var object = extractObjectData(_object, doc);\n      _object.delete();\n      if (object) {\n        objects.push(object);\n      }\n    } // Handle instance definitions\n    // console.log( `Instance Definitions Count: ${doc.instanceDefinitions().count()}` );\n\n    for (var _i2 = 0; _i2 < doc.instanceDefinitions().count(); _i2++) {\n      var idef = doc.instanceDefinitions().get(_i2);\n      var idefAttributes = extractProperties(idef);\n      idefAttributes.objectIds = idef.getObjectIds();\n      objects.push({\n        geometry: null,\n        attributes: idefAttributes,\n        objectType: 'InstanceDefinition'\n      });\n    } // Handle materials\n\n    var textureTypes = [\n    // rhino.TextureType.Bitmap,\n    rhino.TextureType.Diffuse, rhino.TextureType.Bump, rhino.TextureType.Transparency, rhino.TextureType.Opacity, rhino.TextureType.Emap];\n    var pbrTextureTypes = [rhino.TextureType.PBR_BaseColor, rhino.TextureType.PBR_Subsurface, rhino.TextureType.PBR_SubsurfaceScattering, rhino.TextureType.PBR_SubsurfaceScatteringRadius, rhino.TextureType.PBR_Metallic, rhino.TextureType.PBR_Specular, rhino.TextureType.PBR_SpecularTint, rhino.TextureType.PBR_Roughness, rhino.TextureType.PBR_Anisotropic, rhino.TextureType.PBR_Anisotropic_Rotation, rhino.TextureType.PBR_Sheen, rhino.TextureType.PBR_SheenTint, rhino.TextureType.PBR_Clearcoat, rhino.TextureType.PBR_ClearcoatBump, rhino.TextureType.PBR_ClearcoatRoughness, rhino.TextureType.PBR_OpacityIor, rhino.TextureType.PBR_OpacityRoughness, rhino.TextureType.PBR_Emission, rhino.TextureType.PBR_AmbientOcclusion, rhino.TextureType.PBR_Displacement];\n    for (var _i3 = 0; _i3 < doc.materials().count(); _i3++) {\n      var _material = doc.materials().get(_i3);\n      var _pbrMaterial = _material.physicallyBased();\n      var material = extractProperties(_material);\n      var textures = [];\n      for (var j = 0; j < textureTypes.length; j++) {\n        var _texture = _material.getTexture(textureTypes[j]);\n        if (_texture) {\n          var textureType = textureTypes[j].constructor.name;\n          textureType = textureType.substring(12, textureType.length);\n          var texture = {\n            type: textureType\n          };\n          var image = doc.getEmbeddedFileAsBase64(_texture.fileName);\n          if (image) {\n            texture.image = 'data:image/png;base64,' + image;\n          } else {\n            console.warn(\"THREE.3DMLoader: Image for \".concat(textureType, \" texture not embedded in file.\"));\n            texture.image = null;\n          }\n          textures.push(texture);\n          _texture.delete();\n        }\n      }\n      material.textures = textures;\n      if (_pbrMaterial.supported) {\n        console.log('pbr true');\n        for (var _j2 = 0; _j2 < pbrTextureTypes.length; _j2++) {\n          var _texture2 = _material.getTexture(textureTypes[_j2]);\n          if (_texture2) {\n            var _image = doc.getEmbeddedFileAsBase64(_texture2.fileName);\n            var _textureType = textureTypes[_j2].constructor.name;\n            _textureType = _textureType.substring(12, _textureType.length);\n            var _texture3 = {\n              type: _textureType,\n              image: 'data:image/png;base64,' + _image\n            };\n            textures.push(_texture3);\n            _texture2.delete();\n          }\n        }\n        var pbMaterialProperties = extractProperties(_material.physicallyBased());\n        material = Object.assign(pbMaterialProperties, material);\n      }\n      materials.push(material);\n      _material.delete();\n      _pbrMaterial.delete();\n    } // Handle layers\n\n    for (var _i4 = 0; _i4 < doc.layers().count(); _i4++) {\n      var _layer = doc.layers().get(_i4);\n      var layer = extractProperties(_layer);\n      layers.push(layer);\n      _layer.delete();\n    } // Handle views\n\n    for (var _i5 = 0; _i5 < doc.views().count(); _i5++) {\n      var _view = doc.views().get(_i5);\n      var view = extractProperties(_view);\n      views.push(view);\n      _view.delete();\n    } // Handle named views\n\n    for (var _i6 = 0; _i6 < doc.namedViews().count(); _i6++) {\n      var _namedView = doc.namedViews().get(_i6);\n      var namedView = extractProperties(_namedView);\n      namedViews.push(namedView);\n      _namedView.delete();\n    } // Handle groups\n\n    for (var _i7 = 0; _i7 < doc.groups().count(); _i7++) {\n      var _group = doc.groups().get(_i7);\n      var group = extractProperties(_group);\n      groups.push(group);\n      _group.delete();\n    } // Handle settings\n\n    var settings = extractProperties(doc.settings()); //TODO: Handle other document stuff like dimstyles, instance definitions, bitmaps etc.\n    // Handle dimstyles\n    // console.log( `Dimstyle Count: ${doc.dimstyles().count()}` );\n    // Handle bitmaps\n    // console.log( `Bitmap Count: ${doc.bitmaps().count()}` );\n    // Handle strings -- this seems to be broken at the moment in rhino3dm\n    // console.log( `Document Strings Count: ${doc.strings().count()}` );\n\n    /*\n    for( var i = 0; i < doc.strings().count(); i++ ){\n    var _string= doc.strings().get( i );\n    console.log(_string);\n    var string = extractProperties( _group );\n    strings.push( string );\n    _string.delete();\n    }\n    */\n\n    doc.delete();\n    return {\n      objects: objects,\n      materials: materials,\n      layers: layers,\n      views: views,\n      namedViews: namedViews,\n      groups: groups,\n      settings: settings\n    };\n  }\n  function extractObjectData(object, doc) {\n    var _geometry = object.geometry();\n    var _attributes = object.attributes();\n    var objectType = _geometry.objectType;\n    var geometry, attributes, position, data, mesh; // skip instance definition objects\n    //if( _attributes.isInstanceDefinitionObject ) { continue; }\n    // TODO: handle other geometry types\n\n    switch (objectType) {\n      case rhino.ObjectType.Curve:\n        var pts = curveToPoints(_geometry, 100);\n        position = {};\n        attributes = {};\n        data = {};\n        position.itemSize = 3;\n        position.type = 'Float32Array';\n        position.array = [];\n        for (var j = 0; j < pts.length; j++) {\n          position.array.push(pts[j][0]);\n          position.array.push(pts[j][1]);\n          position.array.push(pts[j][2]);\n        }\n        attributes.position = position;\n        data.attributes = attributes;\n        geometry = {\n          data: data\n        };\n        break;\n      case rhino.ObjectType.Point:\n        var pt = _geometry.location;\n        position = {};\n        var color = {};\n        attributes = {};\n        data = {};\n        position.itemSize = 3;\n        position.type = 'Float32Array';\n        position.array = [pt[0], pt[1], pt[2]];\n        var _color = _attributes.drawColor(doc);\n        color.itemSize = 3;\n        color.type = 'Float32Array';\n        color.array = [_color.r / 255.0, _color.g / 255.0, _color.b / 255.0];\n        attributes.position = position;\n        attributes.color = color;\n        data.attributes = attributes;\n        geometry = {\n          data: data\n        };\n        break;\n      case rhino.ObjectType.PointSet:\n      case rhino.ObjectType.Mesh:\n        geometry = _geometry.toThreejsJSON();\n        break;\n      case rhino.ObjectType.Brep:\n        var faces = _geometry.faces();\n        mesh = new rhino.Mesh();\n        for (var faceIndex = 0; faceIndex < faces.count; faceIndex++) {\n          var face = faces.get(faceIndex);\n          var _mesh = face.getMesh(rhino.MeshType.Any);\n          if (_mesh) {\n            mesh.append(_mesh);\n            _mesh.delete();\n          }\n          face.delete();\n        }\n        if (mesh.faces().count > 0) {\n          mesh.compact();\n          geometry = mesh.toThreejsJSON();\n          faces.delete();\n        }\n        mesh.delete();\n        break;\n      case rhino.ObjectType.Extrusion:\n        mesh = _geometry.getMesh(rhino.MeshType.Any);\n        if (mesh) {\n          geometry = mesh.toThreejsJSON();\n          mesh.delete();\n        }\n        break;\n      case rhino.ObjectType.TextDot:\n        geometry = extractProperties(_geometry);\n        break;\n      case rhino.ObjectType.Light:\n        geometry = extractProperties(_geometry);\n        break;\n      case rhino.ObjectType.InstanceReference:\n        geometry = extractProperties(_geometry);\n        geometry.xform = extractProperties(_geometry.xform);\n        geometry.xform.array = _geometry.xform.toFloatArray(true);\n        break;\n      case rhino.ObjectType.SubD:\n        // TODO: precalculate resulting vertices and faces and warn on excessive results\n        _geometry.subdivide(3);\n        mesh = rhino.Mesh.createFromSubDControlNet(_geometry);\n        if (mesh) {\n          geometry = mesh.toThreejsJSON();\n          mesh.delete();\n        }\n        break;\n\n      /*\n      case rhino.ObjectType.Annotation:\n      case rhino.ObjectType.Hatch:\n      case rhino.ObjectType.ClipPlane:\n      */\n\n      default:\n        console.warn(\"THREE.3DMLoader: TODO: Implement \".concat(objectType.constructor.name));\n        break;\n    }\n    if (geometry) {\n      attributes = extractProperties(_attributes);\n      attributes.geometry = extractProperties(_geometry);\n      if (_attributes.groupCount > 0) {\n        attributes.groupIds = _attributes.getGroupList();\n      }\n      if (_attributes.userStringCount > 0) {\n        attributes.userStrings = _attributes.getUserStrings();\n      }\n      if (_geometry.userStringCount > 0) {\n        attributes.geometry.userStrings = _geometry.getUserStrings();\n      }\n      attributes.drawColor = _attributes.drawColor(doc);\n      objectType = objectType.constructor.name;\n      objectType = objectType.substring(11, objectType.length);\n      return {\n        geometry: geometry,\n        attributes: attributes,\n        objectType: objectType\n      };\n    } else {\n      console.warn(\"THREE.3DMLoader: \".concat(objectType.constructor.name, \" has no associated mesh geometry.\"));\n    }\n  }\n  function extractProperties(object) {\n    var result = {};\n    for (var property in object) {\n      var value = object[property];\n      if (typeof value !== 'function') {\n        if (typeof value === 'object' && value !== null && value.hasOwnProperty('constructor')) {\n          result[property] = {\n            name: value.constructor.name,\n            value: value.value\n          };\n        } else {\n          result[property] = value;\n        }\n      }\n    }\n    return result;\n  }\n  function curveToPoints(curve, pointLimit) {\n    var pointCount = pointLimit;\n    var rc = [];\n    var ts = [];\n    if (curve instanceof rhino.LineCurve) {\n      return [curve.pointAtStart, curve.pointAtEnd];\n    }\n    if (curve instanceof rhino.PolylineCurve) {\n      pointCount = curve.pointCount;\n      for (var i = 0; i < pointCount; i++) {\n        rc.push(curve.point(i));\n      }\n      return rc;\n    }\n    if (curve instanceof rhino.PolyCurve) {\n      var segmentCount = curve.segmentCount;\n      for (var _i8 = 0; _i8 < segmentCount; _i8++) {\n        var segment = curve.segmentCurve(_i8);\n        var segmentArray = curveToPoints(segment, pointCount);\n        rc = rc.concat(segmentArray);\n        segment.delete();\n      }\n      return rc;\n    }\n    if (curve instanceof rhino.ArcCurve) {\n      pointCount = Math.floor(curve.angleDegrees / 5);\n      pointCount = pointCount < 2 ? 2 : pointCount; // alternative to this hardcoded version: https://stackoverflow.com/a/18499923/2179399\n    }\n\n    if (curve instanceof rhino.NurbsCurve && curve.degree === 1) {\n      var pLine = curve.tryGetPolyline();\n      for (var _i9 = 0; _i9 < pLine.count; _i9++) {\n        rc.push(pLine.get(_i9));\n      }\n      pLine.delete();\n      return rc;\n    }\n    var domain = curve.domain;\n    var divisions = pointCount - 1.0;\n    for (var j = 0; j < pointCount; j++) {\n      var t = domain[0] + j / divisions * (domain[1] - domain[0]);\n      if (t === domain[0] || t === domain[1]) {\n        ts.push(t);\n        continue;\n      }\n      var tan = curve.tangentAt(t);\n      var prevTan = curve.tangentAt(ts.slice(-1)[0]); // Duplicated from THREE.Vector3\n      // How to pass imports to worker?\n\n      var tS = tan[0] * tan[0] + tan[1] * tan[1] + tan[2] * tan[2];\n      var ptS = prevTan[0] * prevTan[0] + prevTan[1] * prevTan[1] + prevTan[2] * prevTan[2];\n      var denominator = Math.sqrt(tS * ptS);\n      var angle = void 0;\n      if (denominator === 0) {\n        angle = Math.PI / 2;\n      } else {\n        var theta = (tan.x * prevTan.x + tan.y * prevTan.y + tan.z * prevTan.z) / denominator;\n        angle = Math.acos(Math.max(-1, Math.min(1, theta)));\n      }\n      if (angle < 0.1) continue;\n      ts.push(t);\n    }\n    rc = ts.map(function (t) {\n      return curve.pointAt(t);\n    });\n    return rc;\n  }\n}\nexport { Rhino3dmLoader };","map":{"version":3,"names":["Loader","FileLoader","MeshStandardMaterial","Color","TextureLoader","Object3D","Matrix4","BufferGeometryLoader","DirectionalLight","PointLight","RectAreaLight","Vector3","SpotLight","CanvasTexture","LinearFilter","ClampToEdgeWrapping","SpriteMaterial","Sprite","LineBasicMaterial","Line","Mesh","PointsMaterial","Points","_taskCache","WeakMap","Rhino3dmLoader","_Loader","_inherits","_super","_createSuper","manager","_this","_classCallCheck","call","libraryPath","libraryPending","libraryBinary","libraryConfig","url","workerLimit","workerPool","workerNextTaskID","workerSourceURL","workerConfig","materials","_createClass","key","value","setLibraryPath","path","setWorkerLimit","load","onLoad","onProgress","onError","_this2","loader","setPath","setResponseType","setRequestHeader","requestHeader","buffer","has","cachedTask","get","promise","then","catch","decodeObjects","debug","console","log","map","worker","_taskLoad","_this3","taskID","taskCost","byteLength","objectPending","_getWorker","_worker","Promise","resolve","reject","_callbacks","postMessage","type","id","message","_createGeometry","data","_releaseTask","set","parse","_compareMaterials","material","mat","name","color","r","g","b","i","length","m","_mat","JSON","stringify","push","_createMaterial","undefined","metalness","side","_diffuseColor","diffuseColor","diffusecolor","transparent","transparency","opacity","textureLoader","textures","texture","image","bumpMap","alphaMap","envMap","object","instanceDefinitionObjects","instanceDefinitions","instanceReferences","userData","layers","groups","settings","objects","obj","attributes","objectType","_object","materialIndex","rMaterial","_createObject","layer","layerIndex","visible","isInstanceDefinitionObject","add","iDef","j","objectIds","objId","p","idoId","iRef","geometry","parentIdefId","iRefObject","xf","xform","array","matrix","applyMatrix4","clone","_color","hasOwnProperty","vertexColors","sizeAttenuation","size","drawColor","points","mesh","castShadow","castsShadows","receiveShadow","receivesShadows","lines","ctx","document","createElement","getContext","font","concat","fontHeight","fontFace","width","measureText","text","height","window","devicePixelRatio","canvas","style","setTransform","textBaseline","textAlign","fillStyle","a","fillRect","fillText","minFilter","wrapS","wrapT","depthTest","sprite","position","point","scale","light","isDirectionalLight","location","target","direction","shadow","normalBias","isPointLight","isRectangularLight","Math","abs","lookAt","isSpotLight","angle","spotAngleRadians","isLinearLight","warn","intensity","diffuse","_initLibrary","_this4","jsLoader","jsContent","binaryLoader","binaryContent","all","_ref","_ref2","_slicedToArray","wasmBinary","fn","Rhino3dmWorker","toString","body","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","_this5","Worker","_taskCosts","onmessage","e","error","sort","dispose","terminate","rhino","RhinoModule","onRuntimeInitialized","rhino3dm","self","arr","Uint8Array","doc","File3dm","fromByteArray","views","namedViews","objs","cnt","count","extractObjectData","delete","idef","idefAttributes","extractProperties","getObjectIds","textureTypes","TextureType","Diffuse","Bump","Transparency","Opacity","Emap","pbrTextureTypes","PBR_BaseColor","PBR_Subsurface","PBR_SubsurfaceScattering","PBR_SubsurfaceScatteringRadius","PBR_Metallic","PBR_Specular","PBR_SpecularTint","PBR_Roughness","PBR_Anisotropic","PBR_Anisotropic_Rotation","PBR_Sheen","PBR_SheenTint","PBR_Clearcoat","PBR_ClearcoatBump","PBR_ClearcoatRoughness","PBR_OpacityIor","PBR_OpacityRoughness","PBR_Emission","PBR_AmbientOcclusion","PBR_Displacement","_material","_pbrMaterial","physicallyBased","_texture","getTexture","textureType","constructor","getEmbeddedFileAsBase64","fileName","supported","pbMaterialProperties","Object","assign","_layer","_view","view","_namedView","namedView","_group","group","_geometry","_attributes","ObjectType","Curve","pts","curveToPoints","itemSize","Point","pt","PointSet","toThreejsJSON","Brep","faces","faceIndex","face","_mesh","getMesh","MeshType","Any","append","compact","Extrusion","TextDot","Light","InstanceReference","toFloatArray","SubD","subdivide","createFromSubDControlNet","groupCount","groupIds","getGroupList","userStringCount","userStrings","getUserStrings","result","property","curve","pointLimit","pointCount","rc","ts","LineCurve","pointAtStart","pointAtEnd","PolylineCurve","PolyCurve","segmentCount","segment","segmentCurve","segmentArray","ArcCurve","floor","angleDegrees","NurbsCurve","degree","pLine","tryGetPolyline","domain","divisions","t","tan","tangentAt","prevTan","slice","tS","ptS","denominator","sqrt","PI","theta","x","y","z","acos","max","min","pointAt"],"sources":["/home/samuel/experiment/3d/farm/frontend/node_modules/three-stdlib/loaders/3DMLoader.js"],"sourcesContent":["import { Loader, FileLoader, MeshStandardMaterial, Color, TextureLoader, Object3D, Matrix4, BufferGeometryLoader, DirectionalLight, PointLight, RectAreaLight, Vector3, SpotLight, CanvasTexture, LinearFilter, ClampToEdgeWrapping, SpriteMaterial, Sprite, LineBasicMaterial, Line, Mesh, PointsMaterial, Points } from 'three';\n\nconst _taskCache = new WeakMap();\n\nclass Rhino3dmLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.libraryPath = '';\n    this.libraryPending = null;\n    this.libraryBinary = null;\n    this.libraryConfig = {};\n    this.url = '';\n    this.workerLimit = 4;\n    this.workerPool = [];\n    this.workerNextTaskID = 1;\n    this.workerSourceURL = '';\n    this.workerConfig = {};\n    this.materials = [];\n  }\n\n  setLibraryPath(path) {\n    this.libraryPath = path;\n    return this;\n  }\n\n  setWorkerLimit(workerLimit) {\n    this.workerLimit = workerLimit;\n    return this;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(this.requestHeader);\n    this.url = url;\n    loader.load(url, buffer => {\n      // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n      // again from this thread.\n      if (_taskCache.has(buffer)) {\n        const cachedTask = _taskCache.get(buffer);\n\n        return cachedTask.promise.then(onLoad).catch(onError);\n      }\n\n      this.decodeObjects(buffer, url).then(onLoad).catch(onError);\n    }, onProgress, onError);\n  }\n\n  debug() {\n    console.log('Task load: ', this.workerPool.map(worker => worker._taskLoad));\n  }\n\n  decodeObjects(buffer, url) {\n    let worker;\n    let taskID;\n    const taskCost = buffer.byteLength;\n\n    const objectPending = this._getWorker(taskCost).then(_worker => {\n      worker = _worker;\n      taskID = this.workerNextTaskID++; //hmmm\n\n      return new Promise((resolve, reject) => {\n        worker._callbacks[taskID] = {\n          resolve,\n          reject\n        };\n        worker.postMessage({\n          type: 'decode',\n          id: taskID,\n          buffer\n        }, [buffer]); //this.debug();\n      });\n    }).then(message => this._createGeometry(message.data)); // Remove task from the task list.\n    // Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\n\n    objectPending.catch(() => true).then(() => {\n      if (worker && taskID) {\n        this._releaseTask(worker, taskID); //this.debug();\n\n      }\n    }); // Cache the task result.\n\n    _taskCache.set(buffer, {\n      url: url,\n      promise: objectPending\n    });\n\n    return objectPending;\n  }\n\n  parse(data, onLoad, onError) {\n    this.decodeObjects(data, '').then(onLoad).catch(onError);\n  }\n\n  _compareMaterials(material) {\n    const mat = {};\n    mat.name = material.name;\n    mat.color = {};\n    mat.color.r = material.color.r;\n    mat.color.g = material.color.g;\n    mat.color.b = material.color.b;\n    mat.type = material.type;\n\n    for (let i = 0; i < this.materials.length; i++) {\n      const m = this.materials[i];\n      const _mat = {};\n      _mat.name = m.name;\n      _mat.color = {};\n      _mat.color.r = m.color.r;\n      _mat.color.g = m.color.g;\n      _mat.color.b = m.color.b;\n      _mat.type = m.type;\n\n      if (JSON.stringify(mat) === JSON.stringify(_mat)) {\n        return m;\n      }\n    }\n\n    this.materials.push(material);\n    return material;\n  }\n\n  _createMaterial(material) {\n    if (material === undefined) {\n      return new MeshStandardMaterial({\n        color: new Color(1, 1, 1),\n        metalness: 0.8,\n        name: 'default',\n        side: 2\n      });\n    }\n\n    const _diffuseColor = material.diffuseColor;\n    const diffusecolor = new Color(_diffuseColor.r / 255.0, _diffuseColor.g / 255.0, _diffuseColor.b / 255.0);\n\n    if (_diffuseColor.r === 0 && _diffuseColor.g === 0 && _diffuseColor.b === 0) {\n      diffusecolor.r = 1;\n      diffusecolor.g = 1;\n      diffusecolor.b = 1;\n    } // console.log( material );\n\n\n    const mat = new MeshStandardMaterial({\n      color: diffusecolor,\n      name: material.name,\n      side: 2,\n      transparent: material.transparency > 0 ? true : false,\n      opacity: 1.0 - material.transparency\n    });\n    const textureLoader = new TextureLoader();\n\n    for (let i = 0; i < material.textures.length; i++) {\n      const texture = material.textures[i];\n\n      if (texture.image !== null) {\n        const map = textureLoader.load(texture.image);\n\n        switch (texture.type) {\n          case 'Diffuse':\n            mat.map = map;\n            break;\n\n          case 'Bump':\n            mat.bumpMap = map;\n            break;\n\n          case 'Transparency':\n            mat.alphaMap = map;\n            mat.transparent = true;\n            break;\n\n          case 'Emap':\n            mat.envMap = map;\n            break;\n        }\n      }\n    }\n\n    return mat;\n  }\n\n  _createGeometry(data) {\n    // console.log(data);\n    const object = new Object3D();\n    const instanceDefinitionObjects = [];\n    const instanceDefinitions = [];\n    const instanceReferences = [];\n    object.userData['layers'] = data.layers;\n    object.userData['groups'] = data.groups;\n    object.userData['settings'] = data.settings;\n    object.userData['objectType'] = 'File3dm';\n    object.userData['materials'] = null;\n    object.name = this.url;\n    let objects = data.objects;\n    const materials = data.materials;\n\n    for (let i = 0; i < objects.length; i++) {\n      const obj = objects[i];\n      const attributes = obj.attributes;\n\n      switch (obj.objectType) {\n        case 'InstanceDefinition':\n          instanceDefinitions.push(obj);\n          break;\n\n        case 'InstanceReference':\n          instanceReferences.push(obj);\n          break;\n\n        default:\n          let _object;\n\n          if (attributes.materialIndex >= 0) {\n            const rMaterial = materials[attributes.materialIndex];\n\n            let material = this._createMaterial(rMaterial);\n\n            material = this._compareMaterials(material);\n            _object = this._createObject(obj, material);\n          } else {\n            const material = this._createMaterial();\n\n            _object = this._createObject(obj, material);\n          }\n\n          if (_object === undefined) {\n            continue;\n          }\n\n          const layer = data.layers[attributes.layerIndex];\n          _object.visible = layer ? data.layers[attributes.layerIndex].visible : true;\n\n          if (attributes.isInstanceDefinitionObject) {\n            instanceDefinitionObjects.push(_object);\n          } else {\n            object.add(_object);\n          }\n\n          break;\n      }\n    }\n\n    for (let i = 0; i < instanceDefinitions.length; i++) {\n      const iDef = instanceDefinitions[i];\n      objects = [];\n\n      for (let j = 0; j < iDef.attributes.objectIds.length; j++) {\n        const objId = iDef.attributes.objectIds[j];\n\n        for (let p = 0; p < instanceDefinitionObjects.length; p++) {\n          const idoId = instanceDefinitionObjects[p].userData.attributes.id;\n\n          if (objId === idoId) {\n            objects.push(instanceDefinitionObjects[p]);\n          }\n        }\n      } // Currently clones geometry and does not take advantage of instancing\n\n\n      for (let j = 0; j < instanceReferences.length; j++) {\n        const iRef = instanceReferences[j];\n\n        if (iRef.geometry.parentIdefId === iDef.attributes.id) {\n          const iRefObject = new Object3D();\n          const xf = iRef.geometry.xform.array;\n          const matrix = new Matrix4();\n          matrix.set(xf[0], xf[1], xf[2], xf[3], xf[4], xf[5], xf[6], xf[7], xf[8], xf[9], xf[10], xf[11], xf[12], xf[13], xf[14], xf[15]);\n          iRefObject.applyMatrix4(matrix);\n\n          for (let p = 0; p < objects.length; p++) {\n            iRefObject.add(objects[p].clone(true));\n          }\n\n          object.add(iRefObject);\n        }\n      }\n    }\n\n    object.userData['materials'] = this.materials;\n    return object;\n  }\n\n  _createObject(obj, mat) {\n    const loader = new BufferGeometryLoader();\n    const attributes = obj.attributes;\n\n    let geometry, material, _color, color;\n\n    switch (obj.objectType) {\n      case 'Point':\n      case 'PointSet':\n        geometry = loader.parse(obj.geometry);\n\n        if (geometry.attributes.hasOwnProperty('color')) {\n          material = new PointsMaterial({\n            vertexColors: true,\n            sizeAttenuation: false,\n            size: 2\n          });\n        } else {\n          _color = attributes.drawColor;\n          color = new Color(_color.r / 255.0, _color.g / 255.0, _color.b / 255.0);\n          material = new PointsMaterial({\n            color: color,\n            sizeAttenuation: false,\n            size: 2\n          });\n        }\n\n        material = this._compareMaterials(material);\n        const points = new Points(geometry, material);\n        points.userData['attributes'] = attributes;\n        points.userData['objectType'] = obj.objectType;\n\n        if (attributes.name) {\n          points.name = attributes.name;\n        }\n\n        return points;\n\n      case 'Mesh':\n      case 'Extrusion':\n      case 'SubD':\n      case 'Brep':\n        if (obj.geometry === null) return;\n        geometry = loader.parse(obj.geometry);\n\n        if (geometry.attributes.hasOwnProperty('color')) {\n          mat.vertexColors = true;\n        }\n\n        if (mat === null) {\n          mat = this._createMaterial();\n          mat = this._compareMaterials(mat);\n        }\n\n        const mesh = new Mesh(geometry, mat);\n        mesh.castShadow = attributes.castsShadows;\n        mesh.receiveShadow = attributes.receivesShadows;\n        mesh.userData['attributes'] = attributes;\n        mesh.userData['objectType'] = obj.objectType;\n\n        if (attributes.name) {\n          mesh.name = attributes.name;\n        }\n\n        return mesh;\n\n      case 'Curve':\n        geometry = loader.parse(obj.geometry);\n        _color = attributes.drawColor;\n        color = new Color(_color.r / 255.0, _color.g / 255.0, _color.b / 255.0);\n        material = new LineBasicMaterial({\n          color: color\n        });\n        material = this._compareMaterials(material);\n        const lines = new Line(geometry, material);\n        lines.userData['attributes'] = attributes;\n        lines.userData['objectType'] = obj.objectType;\n\n        if (attributes.name) {\n          lines.name = attributes.name;\n        }\n\n        return lines;\n\n      case 'TextDot':\n        geometry = obj.geometry;\n        const ctx = document.createElement('canvas').getContext('2d');\n        const font = `${geometry.fontHeight}px ${geometry.fontFace}`;\n        ctx.font = font;\n        const width = ctx.measureText(geometry.text).width + 10;\n        const height = geometry.fontHeight + 10;\n        const r = window.devicePixelRatio;\n        ctx.canvas.width = width * r;\n        ctx.canvas.height = height * r;\n        ctx.canvas.style.width = width + 'px';\n        ctx.canvas.style.height = height + 'px';\n        ctx.setTransform(r, 0, 0, r, 0, 0);\n        ctx.font = font;\n        ctx.textBaseline = 'middle';\n        ctx.textAlign = 'center';\n        color = attributes.drawColor;\n        ctx.fillStyle = `rgba(${color.r},${color.g},${color.b},${color.a})`;\n        ctx.fillRect(0, 0, width, height);\n        ctx.fillStyle = 'white';\n        ctx.fillText(geometry.text, width / 2, height / 2);\n        const texture = new CanvasTexture(ctx.canvas);\n        texture.minFilter = LinearFilter;\n        texture.wrapS = ClampToEdgeWrapping;\n        texture.wrapT = ClampToEdgeWrapping;\n        material = new SpriteMaterial({\n          map: texture,\n          depthTest: false\n        });\n        const sprite = new Sprite(material);\n        sprite.position.set(geometry.point[0], geometry.point[1], geometry.point[2]);\n        sprite.scale.set(width / 10, height / 10, 1.0);\n        sprite.userData['attributes'] = attributes;\n        sprite.userData['objectType'] = obj.objectType;\n\n        if (attributes.name) {\n          sprite.name = attributes.name;\n        }\n\n        return sprite;\n\n      case 'Light':\n        geometry = obj.geometry;\n        let light;\n\n        if (geometry.isDirectionalLight) {\n          light = new DirectionalLight();\n          light.castShadow = attributes.castsShadows;\n          light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n          light.target.position.set(geometry.direction[0], geometry.direction[1], geometry.direction[2]);\n          light.shadow.normalBias = 0.1;\n        } else if (geometry.isPointLight) {\n          light = new PointLight();\n          light.castShadow = attributes.castsShadows;\n          light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n          light.shadow.normalBias = 0.1;\n        } else if (geometry.isRectangularLight) {\n          light = new RectAreaLight();\n          const width = Math.abs(geometry.width[2]);\n          const height = Math.abs(geometry.length[0]);\n          light.position.set(geometry.location[0] - height / 2, geometry.location[1], geometry.location[2] - width / 2);\n          light.height = height;\n          light.width = width;\n          light.lookAt(new Vector3(geometry.direction[0], geometry.direction[1], geometry.direction[2]));\n        } else if (geometry.isSpotLight) {\n          light = new SpotLight();\n          light.castShadow = attributes.castsShadows;\n          light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n          light.target.position.set(geometry.direction[0], geometry.direction[1], geometry.direction[2]);\n          light.angle = geometry.spotAngleRadians;\n          light.shadow.normalBias = 0.1;\n        } else if (geometry.isLinearLight) {\n          console.warn('THREE.3DMLoader:  No conversion exists for linear lights.');\n          return;\n        }\n\n        if (light) {\n          light.intensity = geometry.intensity;\n          _color = geometry.diffuse;\n          color = new Color(_color.r / 255.0, _color.g / 255.0, _color.b / 255.0);\n          light.color = color;\n          light.userData['attributes'] = attributes;\n          light.userData['objectType'] = obj.objectType;\n        }\n\n        return light;\n    }\n  }\n\n  _initLibrary() {\n    if (!this.libraryPending) {\n      // Load rhino3dm wrapper.\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.libraryPath);\n      const jsContent = new Promise((resolve, reject) => {\n        jsLoader.load('rhino3dm.js', resolve, undefined, reject);\n      }); // Load rhino3dm WASM binary.\n\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.libraryPath);\n      binaryLoader.setResponseType('arraybuffer');\n      const binaryContent = new Promise((resolve, reject) => {\n        binaryLoader.load('rhino3dm.wasm', resolve, undefined, reject);\n      });\n      this.libraryPending = Promise.all([jsContent, binaryContent]).then(([jsContent, binaryContent]) => {\n        //this.libraryBinary = binaryContent;\n        this.libraryConfig.wasmBinary = binaryContent;\n        const fn = Rhino3dmWorker.toString();\n        const body = ['/* rhino3dm.js */', jsContent, '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\n');\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n      });\n    }\n\n    return this.libraryPending;\n  }\n\n  _getWorker(taskCost) {\n    return this._initLibrary().then(() => {\n      if (this.workerPool.length < this.workerLimit) {\n        const worker = new Worker(this.workerSourceURL);\n        worker._callbacks = {};\n        worker._taskCosts = {};\n        worker._taskLoad = 0;\n        worker.postMessage({\n          type: 'init',\n          libraryConfig: this.libraryConfig\n        });\n\n        worker.onmessage = function (e) {\n          const message = e.data;\n\n          switch (message.type) {\n            case 'decode':\n              worker._callbacks[message.id].resolve(message);\n\n              break;\n\n            case 'error':\n              worker._callbacks[message.id].reject(message);\n\n              break;\n\n            default:\n              console.error('THREE.Rhino3dmLoader: Unexpected message, \"' + message.type + '\"');\n          }\n        };\n\n        this.workerPool.push(worker);\n      } else {\n        this.workerPool.sort(function (a, b) {\n          return a._taskLoad > b._taskLoad ? -1 : 1;\n        });\n      }\n\n      const worker = this.workerPool[this.workerPool.length - 1];\n      worker._taskLoad += taskCost;\n      return worker;\n    });\n  }\n\n  _releaseTask(worker, taskID) {\n    worker._taskLoad -= worker._taskCosts[taskID];\n    delete worker._callbacks[taskID];\n    delete worker._taskCosts[taskID];\n  }\n\n  dispose() {\n    for (let i = 0; i < this.workerPool.length; ++i) {\n      this.workerPool[i].terminate();\n    }\n\n    this.workerPool.length = 0;\n    return this;\n  }\n\n}\n/* WEB WORKER */\n\n\nfunction Rhino3dmWorker() {\n  let libraryPending;\n  let libraryConfig;\n  let rhino;\n\n  onmessage = function (e) {\n    const message = e.data;\n\n    switch (message.type) {\n      case 'init':\n        libraryConfig = message.libraryConfig;\n        const wasmBinary = libraryConfig.wasmBinary;\n        let RhinoModule;\n        libraryPending = new Promise(function (resolve) {\n          /* Like Basis Loader */\n          RhinoModule = {\n            wasmBinary,\n            onRuntimeInitialized: resolve\n          };\n          rhino3dm(RhinoModule); // eslint-disable-line no-undef\n        }).then(() => {\n          rhino = RhinoModule;\n        });\n        break;\n\n      case 'decode':\n        const buffer = message.buffer;\n        libraryPending.then(() => {\n          const data = decodeObjects(rhino, buffer);\n          self.postMessage({\n            type: 'decode',\n            id: message.id,\n            data\n          });\n        });\n        break;\n    }\n  };\n\n  function decodeObjects(rhino, buffer) {\n    const arr = new Uint8Array(buffer);\n    const doc = rhino.File3dm.fromByteArray(arr);\n    const objects = [];\n    const materials = [];\n    const layers = [];\n    const views = [];\n    const namedViews = [];\n    const groups = []; //Handle objects\n\n    const objs = doc.objects();\n    const cnt = objs.count;\n\n    for (let i = 0; i < cnt; i++) {\n      const _object = objs.get(i);\n\n      const object = extractObjectData(_object, doc);\n\n      _object.delete();\n\n      if (object) {\n        objects.push(object);\n      }\n    } // Handle instance definitions\n    // console.log( `Instance Definitions Count: ${doc.instanceDefinitions().count()}` );\n\n\n    for (let i = 0; i < doc.instanceDefinitions().count(); i++) {\n      const idef = doc.instanceDefinitions().get(i);\n      const idefAttributes = extractProperties(idef);\n      idefAttributes.objectIds = idef.getObjectIds();\n      objects.push({\n        geometry: null,\n        attributes: idefAttributes,\n        objectType: 'InstanceDefinition'\n      });\n    } // Handle materials\n\n\n    const textureTypes = [// rhino.TextureType.Bitmap,\n    rhino.TextureType.Diffuse, rhino.TextureType.Bump, rhino.TextureType.Transparency, rhino.TextureType.Opacity, rhino.TextureType.Emap];\n    const pbrTextureTypes = [rhino.TextureType.PBR_BaseColor, rhino.TextureType.PBR_Subsurface, rhino.TextureType.PBR_SubsurfaceScattering, rhino.TextureType.PBR_SubsurfaceScatteringRadius, rhino.TextureType.PBR_Metallic, rhino.TextureType.PBR_Specular, rhino.TextureType.PBR_SpecularTint, rhino.TextureType.PBR_Roughness, rhino.TextureType.PBR_Anisotropic, rhino.TextureType.PBR_Anisotropic_Rotation, rhino.TextureType.PBR_Sheen, rhino.TextureType.PBR_SheenTint, rhino.TextureType.PBR_Clearcoat, rhino.TextureType.PBR_ClearcoatBump, rhino.TextureType.PBR_ClearcoatRoughness, rhino.TextureType.PBR_OpacityIor, rhino.TextureType.PBR_OpacityRoughness, rhino.TextureType.PBR_Emission, rhino.TextureType.PBR_AmbientOcclusion, rhino.TextureType.PBR_Displacement];\n\n    for (let i = 0; i < doc.materials().count(); i++) {\n      const _material = doc.materials().get(i);\n\n      const _pbrMaterial = _material.physicallyBased();\n\n      let material = extractProperties(_material);\n      const textures = [];\n\n      for (let j = 0; j < textureTypes.length; j++) {\n        const _texture = _material.getTexture(textureTypes[j]);\n\n        if (_texture) {\n          let textureType = textureTypes[j].constructor.name;\n          textureType = textureType.substring(12, textureType.length);\n          const texture = {\n            type: textureType\n          };\n          const image = doc.getEmbeddedFileAsBase64(_texture.fileName);\n\n          if (image) {\n            texture.image = 'data:image/png;base64,' + image;\n          } else {\n            console.warn(`THREE.3DMLoader: Image for ${textureType} texture not embedded in file.`);\n            texture.image = null;\n          }\n\n          textures.push(texture);\n\n          _texture.delete();\n        }\n      }\n\n      material.textures = textures;\n\n      if (_pbrMaterial.supported) {\n        console.log('pbr true');\n\n        for (let j = 0; j < pbrTextureTypes.length; j++) {\n          const _texture = _material.getTexture(textureTypes[j]);\n\n          if (_texture) {\n            const image = doc.getEmbeddedFileAsBase64(_texture.fileName);\n            let textureType = textureTypes[j].constructor.name;\n            textureType = textureType.substring(12, textureType.length);\n            const texture = {\n              type: textureType,\n              image: 'data:image/png;base64,' + image\n            };\n            textures.push(texture);\n\n            _texture.delete();\n          }\n        }\n\n        const pbMaterialProperties = extractProperties(_material.physicallyBased());\n        material = Object.assign(pbMaterialProperties, material);\n      }\n\n      materials.push(material);\n\n      _material.delete();\n\n      _pbrMaterial.delete();\n    } // Handle layers\n\n\n    for (let i = 0; i < doc.layers().count(); i++) {\n      const _layer = doc.layers().get(i);\n\n      const layer = extractProperties(_layer);\n      layers.push(layer);\n\n      _layer.delete();\n    } // Handle views\n\n\n    for (let i = 0; i < doc.views().count(); i++) {\n      const _view = doc.views().get(i);\n\n      const view = extractProperties(_view);\n      views.push(view);\n\n      _view.delete();\n    } // Handle named views\n\n\n    for (let i = 0; i < doc.namedViews().count(); i++) {\n      const _namedView = doc.namedViews().get(i);\n\n      const namedView = extractProperties(_namedView);\n      namedViews.push(namedView);\n\n      _namedView.delete();\n    } // Handle groups\n\n\n    for (let i = 0; i < doc.groups().count(); i++) {\n      const _group = doc.groups().get(i);\n\n      const group = extractProperties(_group);\n      groups.push(group);\n\n      _group.delete();\n    } // Handle settings\n\n\n    const settings = extractProperties(doc.settings()); //TODO: Handle other document stuff like dimstyles, instance definitions, bitmaps etc.\n    // Handle dimstyles\n    // console.log( `Dimstyle Count: ${doc.dimstyles().count()}` );\n    // Handle bitmaps\n    // console.log( `Bitmap Count: ${doc.bitmaps().count()}` );\n    // Handle strings -- this seems to be broken at the moment in rhino3dm\n    // console.log( `Document Strings Count: ${doc.strings().count()}` );\n\n    /*\n    for( var i = 0; i < doc.strings().count(); i++ ){\n    var _string= doc.strings().get( i );\n    console.log(_string);\n    var string = extractProperties( _group );\n    strings.push( string );\n    _string.delete();\n    }\n    */\n\n    doc.delete();\n    return {\n      objects,\n      materials,\n      layers,\n      views,\n      namedViews,\n      groups,\n      settings\n    };\n  }\n\n  function extractObjectData(object, doc) {\n    const _geometry = object.geometry();\n\n    const _attributes = object.attributes();\n\n    let objectType = _geometry.objectType;\n    let geometry, attributes, position, data, mesh; // skip instance definition objects\n    //if( _attributes.isInstanceDefinitionObject ) { continue; }\n    // TODO: handle other geometry types\n\n    switch (objectType) {\n      case rhino.ObjectType.Curve:\n        const pts = curveToPoints(_geometry, 100);\n        position = {};\n        attributes = {};\n        data = {};\n        position.itemSize = 3;\n        position.type = 'Float32Array';\n        position.array = [];\n\n        for (let j = 0; j < pts.length; j++) {\n          position.array.push(pts[j][0]);\n          position.array.push(pts[j][1]);\n          position.array.push(pts[j][2]);\n        }\n\n        attributes.position = position;\n        data.attributes = attributes;\n        geometry = {\n          data\n        };\n        break;\n\n      case rhino.ObjectType.Point:\n        const pt = _geometry.location;\n        position = {};\n        const color = {};\n        attributes = {};\n        data = {};\n        position.itemSize = 3;\n        position.type = 'Float32Array';\n        position.array = [pt[0], pt[1], pt[2]];\n\n        const _color = _attributes.drawColor(doc);\n\n        color.itemSize = 3;\n        color.type = 'Float32Array';\n        color.array = [_color.r / 255.0, _color.g / 255.0, _color.b / 255.0];\n        attributes.position = position;\n        attributes.color = color;\n        data.attributes = attributes;\n        geometry = {\n          data\n        };\n        break;\n\n      case rhino.ObjectType.PointSet:\n      case rhino.ObjectType.Mesh:\n        geometry = _geometry.toThreejsJSON();\n        break;\n\n      case rhino.ObjectType.Brep:\n        const faces = _geometry.faces();\n\n        mesh = new rhino.Mesh();\n\n        for (let faceIndex = 0; faceIndex < faces.count; faceIndex++) {\n          const face = faces.get(faceIndex);\n\n          const _mesh = face.getMesh(rhino.MeshType.Any);\n\n          if (_mesh) {\n            mesh.append(_mesh);\n\n            _mesh.delete();\n          }\n\n          face.delete();\n        }\n\n        if (mesh.faces().count > 0) {\n          mesh.compact();\n          geometry = mesh.toThreejsJSON();\n          faces.delete();\n        }\n\n        mesh.delete();\n        break;\n\n      case rhino.ObjectType.Extrusion:\n        mesh = _geometry.getMesh(rhino.MeshType.Any);\n\n        if (mesh) {\n          geometry = mesh.toThreejsJSON();\n          mesh.delete();\n        }\n\n        break;\n\n      case rhino.ObjectType.TextDot:\n        geometry = extractProperties(_geometry);\n        break;\n\n      case rhino.ObjectType.Light:\n        geometry = extractProperties(_geometry);\n        break;\n\n      case rhino.ObjectType.InstanceReference:\n        geometry = extractProperties(_geometry);\n        geometry.xform = extractProperties(_geometry.xform);\n        geometry.xform.array = _geometry.xform.toFloatArray(true);\n        break;\n\n      case rhino.ObjectType.SubD:\n        // TODO: precalculate resulting vertices and faces and warn on excessive results\n        _geometry.subdivide(3);\n\n        mesh = rhino.Mesh.createFromSubDControlNet(_geometry);\n\n        if (mesh) {\n          geometry = mesh.toThreejsJSON();\n          mesh.delete();\n        }\n\n        break;\n\n      /*\n      case rhino.ObjectType.Annotation:\n      case rhino.ObjectType.Hatch:\n      case rhino.ObjectType.ClipPlane:\n      */\n\n      default:\n        console.warn(`THREE.3DMLoader: TODO: Implement ${objectType.constructor.name}`);\n        break;\n    }\n\n    if (geometry) {\n      attributes = extractProperties(_attributes);\n      attributes.geometry = extractProperties(_geometry);\n\n      if (_attributes.groupCount > 0) {\n        attributes.groupIds = _attributes.getGroupList();\n      }\n\n      if (_attributes.userStringCount > 0) {\n        attributes.userStrings = _attributes.getUserStrings();\n      }\n\n      if (_geometry.userStringCount > 0) {\n        attributes.geometry.userStrings = _geometry.getUserStrings();\n      }\n\n      attributes.drawColor = _attributes.drawColor(doc);\n      objectType = objectType.constructor.name;\n      objectType = objectType.substring(11, objectType.length);\n      return {\n        geometry,\n        attributes,\n        objectType\n      };\n    } else {\n      console.warn(`THREE.3DMLoader: ${objectType.constructor.name} has no associated mesh geometry.`);\n    }\n  }\n\n  function extractProperties(object) {\n    const result = {};\n\n    for (const property in object) {\n      const value = object[property];\n\n      if (typeof value !== 'function') {\n        if (typeof value === 'object' && value !== null && value.hasOwnProperty('constructor')) {\n          result[property] = {\n            name: value.constructor.name,\n            value: value.value\n          };\n        } else {\n          result[property] = value;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  function curveToPoints(curve, pointLimit) {\n    let pointCount = pointLimit;\n    let rc = [];\n    const ts = [];\n\n    if (curve instanceof rhino.LineCurve) {\n      return [curve.pointAtStart, curve.pointAtEnd];\n    }\n\n    if (curve instanceof rhino.PolylineCurve) {\n      pointCount = curve.pointCount;\n\n      for (let i = 0; i < pointCount; i++) {\n        rc.push(curve.point(i));\n      }\n\n      return rc;\n    }\n\n    if (curve instanceof rhino.PolyCurve) {\n      const segmentCount = curve.segmentCount;\n\n      for (let i = 0; i < segmentCount; i++) {\n        const segment = curve.segmentCurve(i);\n        const segmentArray = curveToPoints(segment, pointCount);\n        rc = rc.concat(segmentArray);\n        segment.delete();\n      }\n\n      return rc;\n    }\n\n    if (curve instanceof rhino.ArcCurve) {\n      pointCount = Math.floor(curve.angleDegrees / 5);\n      pointCount = pointCount < 2 ? 2 : pointCount; // alternative to this hardcoded version: https://stackoverflow.com/a/18499923/2179399\n    }\n\n    if (curve instanceof rhino.NurbsCurve && curve.degree === 1) {\n      const pLine = curve.tryGetPolyline();\n\n      for (let i = 0; i < pLine.count; i++) {\n        rc.push(pLine.get(i));\n      }\n\n      pLine.delete();\n      return rc;\n    }\n\n    const domain = curve.domain;\n    const divisions = pointCount - 1.0;\n\n    for (let j = 0; j < pointCount; j++) {\n      const t = domain[0] + j / divisions * (domain[1] - domain[0]);\n\n      if (t === domain[0] || t === domain[1]) {\n        ts.push(t);\n        continue;\n      }\n\n      const tan = curve.tangentAt(t);\n      const prevTan = curve.tangentAt(ts.slice(-1)[0]); // Duplicated from THREE.Vector3\n      // How to pass imports to worker?\n\n      const tS = tan[0] * tan[0] + tan[1] * tan[1] + tan[2] * tan[2];\n      const ptS = prevTan[0] * prevTan[0] + prevTan[1] * prevTan[1] + prevTan[2] * prevTan[2];\n      const denominator = Math.sqrt(tS * ptS);\n      let angle;\n\n      if (denominator === 0) {\n        angle = Math.PI / 2;\n      } else {\n        const theta = (tan.x * prevTan.x + tan.y * prevTan.y + tan.z * prevTan.z) / denominator;\n        angle = Math.acos(Math.max(-1, Math.min(1, theta)));\n      }\n\n      if (angle < 0.1) continue;\n      ts.push(t);\n    }\n\n    rc = ts.map(t => curve.pointAt(t));\n    return rc;\n  }\n}\n\nexport { Rhino3dmLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}