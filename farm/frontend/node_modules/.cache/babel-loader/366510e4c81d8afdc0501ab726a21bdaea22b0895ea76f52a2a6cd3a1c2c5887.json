{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar NodeKeywords = /*#__PURE__*/function () {\n  function NodeKeywords() {\n    _classCallCheck(this, NodeKeywords);\n    this.keywords = [];\n    this.nodes = [];\n    this.keywordsCallback = {};\n  }\n  _createClass(NodeKeywords, [{\n    key: \"getNode\",\n    value: function getNode(name) {\n      var node = this.nodes[name];\n      if (node === undefined && this.keywordsCallback[name] !== undefined) {\n        node = this.keywordsCallback[name](name);\n        this.nodes[name] = node;\n      }\n      return node;\n    }\n  }, {\n    key: \"addKeyword\",\n    value: function addKeyword(name, callback) {\n      this.keywords.push(name);\n      this.keywordsCallback[name] = callback;\n      return this;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(code) {\n      var keywordNames = this.keywords;\n      var regExp = new RegExp(\"\\\\b\".concat(keywordNames.join('\\\\b|\\\\b'), \"\\\\b\"), 'g');\n      var codeKeywords = code.match(regExp);\n      var keywordNodes = [];\n      if (codeKeywords !== null) {\n        var _iterator = _createForOfIteratorHelper(codeKeywords),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var keyword = _step.value;\n            var node = this.getNode(keyword);\n            if (node !== undefined && keywordNodes.indexOf(node) === -1) {\n              keywordNodes.push(node);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      return keywordNodes;\n    }\n  }, {\n    key: \"include\",\n    value: function include(builder, code) {\n      var keywordNodes = this.parse(code);\n      var _iterator2 = _createForOfIteratorHelper(keywordNodes),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var keywordNode = _step2.value;\n          keywordNode.build(builder);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }]);\n  return NodeKeywords;\n}();\nexport default NodeKeywords;","map":{"version":3,"names":["NodeKeywords","_classCallCheck","keywords","nodes","keywordsCallback","_createClass","key","value","getNode","name","node","undefined","addKeyword","callback","push","parse","code","keywordNames","regExp","RegExp","concat","join","codeKeywords","match","keywordNodes","_iterator","_createForOfIteratorHelper","_step","s","n","done","keyword","indexOf","err","e","f","include","builder","_iterator2","_step2","keywordNode","build"],"sources":["/home/samuel/experiment/3d/farm/frontend/node_modules/three-stdlib/nodes/core/NodeKeywords.js"],"sourcesContent":["class NodeKeywords {\n  constructor() {\n    this.keywords = [];\n    this.nodes = [];\n    this.keywordsCallback = {};\n  }\n\n  getNode(name) {\n    let node = this.nodes[name];\n\n    if (node === undefined && this.keywordsCallback[name] !== undefined) {\n      node = this.keywordsCallback[name](name);\n      this.nodes[name] = node;\n    }\n\n    return node;\n  }\n\n  addKeyword(name, callback) {\n    this.keywords.push(name);\n    this.keywordsCallback[name] = callback;\n    return this;\n  }\n\n  parse(code) {\n    const keywordNames = this.keywords;\n    const regExp = new RegExp(`\\\\b${keywordNames.join('\\\\b|\\\\b')}\\\\b`, 'g');\n    const codeKeywords = code.match(regExp);\n    const keywordNodes = [];\n\n    if (codeKeywords !== null) {\n      for (const keyword of codeKeywords) {\n        const node = this.getNode(keyword);\n\n        if (node !== undefined && keywordNodes.indexOf(node) === -1) {\n          keywordNodes.push(node);\n        }\n      }\n    }\n\n    return keywordNodes;\n  }\n\n  include(builder, code) {\n    const keywordNodes = this.parse(code);\n\n    for (const keywordNode of keywordNodes) {\n      keywordNode.build(builder);\n    }\n  }\n\n}\n\nexport default NodeKeywords;\n"],"mappings":";;;IAAMA,YAAY;EAChB,SAAAA,aAAA,EAAc;IAAAC,eAAA,OAAAD,YAAA;IACZ,IAAI,CAACE,QAAQ,GAAG,EAAE;IAClB,IAAI,CAACC,KAAK,GAAG,EAAE;IACf,IAAI,CAACC,gBAAgB,GAAG,CAAC,CAAC;EAC5B;EAACC,YAAA,CAAAL,YAAA;IAAAM,GAAA;IAAAC,KAAA,EAED,SAAAC,QAAQC,IAAI,EAAE;MACZ,IAAIC,IAAI,GAAG,IAAI,CAACP,KAAK,CAACM,IAAI,CAAC;MAE3B,IAAIC,IAAI,KAAKC,SAAS,IAAI,IAAI,CAACP,gBAAgB,CAACK,IAAI,CAAC,KAAKE,SAAS,EAAE;QACnED,IAAI,GAAG,IAAI,CAACN,gBAAgB,CAACK,IAAI,CAAC,CAACA,IAAI,CAAC;QACxC,IAAI,CAACN,KAAK,CAACM,IAAI,CAAC,GAAGC,IAAI;MACzB;MAEA,OAAOA,IAAI;IACb;EAAC;IAAAJ,GAAA;IAAAC,KAAA,EAED,SAAAK,WAAWH,IAAI,EAAEI,QAAQ,EAAE;MACzB,IAAI,CAACX,QAAQ,CAACY,IAAI,CAACL,IAAI,CAAC;MACxB,IAAI,CAACL,gBAAgB,CAACK,IAAI,CAAC,GAAGI,QAAQ;MACtC,OAAO,IAAI;IACb;EAAC;IAAAP,GAAA;IAAAC,KAAA,EAED,SAAAQ,MAAMC,IAAI,EAAE;MACV,IAAMC,YAAY,GAAG,IAAI,CAACf,QAAQ;MAClC,IAAMgB,MAAM,GAAG,IAAIC,MAAM,OAAAC,MAAA,CAAOH,YAAY,CAACI,IAAI,CAAC,SAAS,CAAC,UAAO,GAAG,CAAC;MACvE,IAAMC,YAAY,GAAGN,IAAI,CAACO,KAAK,CAACL,MAAM,CAAC;MACvC,IAAMM,YAAY,GAAG,EAAE;MAEvB,IAAIF,YAAY,KAAK,IAAI,EAAE;QAAA,IAAAG,SAAA,GAAAC,0BAAA,CACHJ,YAAY;UAAAK,KAAA;QAAA;UAAlC,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAAoC;YAAA,IAAzBC,OAAO,GAAAJ,KAAA,CAAApB,KAAA;YAChB,IAAMG,IAAI,GAAG,IAAI,CAACF,OAAO,CAACuB,OAAO,CAAC;YAElC,IAAIrB,IAAI,KAAKC,SAAS,IAAIa,YAAY,CAACQ,OAAO,CAACtB,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;cAC3Dc,YAAY,CAACV,IAAI,CAACJ,IAAI,CAAC;YACzB;UACF;QAAC,SAAAuB,GAAA;UAAAR,SAAA,CAAAS,CAAA,CAAAD,GAAA;QAAA;UAAAR,SAAA,CAAAU,CAAA;QAAA;MACH;MAEA,OAAOX,YAAY;IACrB;EAAC;IAAAlB,GAAA;IAAAC,KAAA,EAED,SAAA6B,QAAQC,OAAO,EAAErB,IAAI,EAAE;MACrB,IAAMQ,YAAY,GAAG,IAAI,CAACT,KAAK,CAACC,IAAI,CAAC;MAAC,IAAAsB,UAAA,GAAAZ,0BAAA,CAEZF,YAAY;QAAAe,MAAA;MAAA;QAAtC,KAAAD,UAAA,CAAAV,CAAA,MAAAW,MAAA,GAAAD,UAAA,CAAAT,CAAA,IAAAC,IAAA,GAAwC;UAAA,IAA7BU,WAAW,GAAAD,MAAA,CAAAhC,KAAA;UACpBiC,WAAW,CAACC,KAAK,CAACJ,OAAO,CAAC;QAC5B;MAAC,SAAAJ,GAAA;QAAAK,UAAA,CAAAJ,CAAA,CAAAD,GAAA;MAAA;QAAAK,UAAA,CAAAH,CAAA;MAAA;IACH;EAAC;EAAA,OAAAnC,YAAA;AAAA;AAIH,eAAeA,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}