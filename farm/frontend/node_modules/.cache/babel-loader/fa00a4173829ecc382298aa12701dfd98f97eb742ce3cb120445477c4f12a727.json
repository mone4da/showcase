{"ast":null,"code":"import _classCallCheck from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { BufferGeometry, Vector3, Uint32BufferAttribute, Float32BufferAttribute, DynamicDrawUsage, MathUtils } from 'three';\nimport { SimplexNoise } from '../math/SimplexNoise.js';\n\n/**\n * @fileoverview LightningStrike object for creating lightning strikes and voltaic arcs.\n *\n *\n * Usage\n *\n * var myRay = new LightningStrike( paramsObject );\n * var myRayMesh = new THREE.Mesh( myRay, myMaterial );\n * scene.add( myRayMesh );\n * ...\n * myRay.update( currentTime );\n *\n * The \"currentTime\" can vary its rate, go forwards, backwards or even jump, but it cannot be negative.\n *\n * You should normally leave the ray position to (0, 0, 0). You should control it by changing the sourceOffset and destOffset parameters.\n *\n *\n * LightningStrike parameters\n *\n * The paramsObject can contain any of the following parameters.\n *\n * Legend:\n * 'LightningStrike' (also called 'ray'): An independent voltaic arc with its ramifications and defined with a set of parameters.\n * 'Subray': A ramification of the ray. It is not a LightningStrike object.\n * 'Segment': A linear segment piece of a subray.\n * 'Leaf segment': A ray segment which cannot be smaller.\n *\n *\n * The following parameters can be changed any time and if they vary smoothly, the ray form will also change smoothly:\n *\n * @param {Vector3} sourceOffset The point where the ray starts.\n *\n * @param {Vector3} destOffset The point where the ray ends.\n *\n * @param {double} timeScale The rate at wich the ray form changes in time. Default: 1\n *\n * @param {double} roughness From 0 to 1. The higher the value, the more wrinkled is the ray. Default: 0.9\n *\n * @param {double} straightness From 0 to 1. The higher the value, the more straight will be a subray path. Default: 0.7\n *\n * @param {Vector3} up0 Ray 'up' direction at the ray starting point. Must be normalized. It should be perpendicular to the ray forward direction but it doesn't matter much.\n *\n * @param {Vector3} up1 Like the up0 parameter but at the end of the ray. Must be normalized.\n *\n * @param {double} radius0 Radius of the main ray trunk at the start point. Default: 1\n *\n * @param {double} radius1 Radius of the main ray trunk at the end point. Default: 1\n *\n * @param {double} radius0Factor The radius0 of a subray is this factor times the radius0 of its parent subray. Default: 0.5\n *\n * @param {double} radius1Factor The radius1 of a subray is this factor times the radius1 of its parent subray. Default: 0.2\n *\n * @param {minRadius} Minimum value a subray radius0 or radius1 can get. Default: 0.1\n *\n *\n * The following parameters should not be changed after lightning creation. They can be changed but the ray will change its form abruptly:\n *\n * @param {boolean} isEternal If true the ray never extinguishes. Otherwise its life is controlled by the 'birthTime' and 'deathTime' parameters. Default: true if any of those two parameters is undefined.\n *\n * @param {double} birthTime The time at which the ray starts its life and begins propagating. Only if isEternal is false. Default: None.\n *\n * @param {double} deathTime The time at which the ray ends vanishing and its life. Only if isEternal is false. Default: None.\n *\n * @param {double} propagationTimeFactor From 0 to 1. Lifetime factor at which the ray ends propagating and enters the steady phase. For example, 0.1 means it is propagating 1/10 of its lifetime. Default: 0.1\n *\n * @param {double} vanishingTimeFactor From 0 to 1. Lifetime factor at which the ray ends the steady phase and begins vanishing. For example, 0.9 means it is vanishing 1/10 of its lifetime. Default: 0.9\n *\n * @param {double} subrayPeriod Subrays cycle periodically. This is their time period. Default: 4\n *\n * @param {double} subrayDutyCycle From 0 to 1. This is the fraction of time a subray is active. Default: 0.6\n *\n *\n * These parameters cannot change after lightning creation:\n *\n * @param {integer} maxIterations: Greater than 0. The number of ray's leaf segments is 2**maxIterations. Default: 9\n *\n * @param {boolean} isStatic Set to true only for rays which won't change over time and are not attached to moving objects (Rare case). It is used to set the vertex buffers non-dynamic. You can omit calling update() for these rays.\n *\n * @param {integer} ramification Greater than 0. Maximum number of child subrays a subray can have. Default: 5\n *\n * @param {integer} maxSubrayRecursion Greater than 0. Maximum level of recursion (subray descendant generations). Default: 3\n *\n * @param {double} recursionProbability From 0 to 1. The lower the value, the less chance each new generation of subrays has to generate new subrays. Default: 0.6\n *\n * @param {boolean} generateUVs If true, the ray geometry will have uv coordinates generated. u runs along the ray, and v across its perimeter. Default: false.\n *\n * @param {Object} randomGenerator Set here your random number generator which will seed the SimplexNoise and other decisions during ray tree creation.\n * It can be used to generate repeatable rays. For that, set also the noiseSeed parameter, and each ray created with that generator and seed pair will be identical in time.\n * The randomGenerator parameter should be an object with a random() function similar to Math.random, but seedable.\n * It must have also a getSeed() method, which returns the current seed, and a setSeed( seed ) method, which accepts as seed a fractional number from 0 to 1, as well as any other number.\n * The default value is an internal generator for some uses and Math.random for others (It is non-repeatable even if noiseSeed is supplied)\n *\n * @param {double} noiseSeed Seed used to make repeatable rays (see the randomGenerator)\n *\n * @param {function} onDecideSubrayCreation Set this to change the callback which decides subray creation. You can look at the default callback in the code (createDefaultSubrayCreationCallbacks)for more info.\n *\n * @param {function} onSubrayCreation This is another callback, more simple than the previous one. It can be used to adapt the form of subrays or other parameters once a subray has been created and initialized. It is used in the examples to adapt subrays to a sphere or to a plane.\n *\n *\n */\nvar LightningStrike = /*#__PURE__*/function (_BufferGeometry) {\n  _inherits(LightningStrike, _BufferGeometry);\n  var _super = _createSuper(LightningStrike);\n  function LightningStrike(rayParameters) {\n    var _this;\n    _classCallCheck(this, LightningStrike);\n    _this = _super.call(this);\n    _this.type = 'LightningStrike'; // Set parameters, and set undefined parameters to default values\n\n    rayParameters = rayParameters || {};\n    _this.init(LightningStrike.copyParameters(rayParameters, rayParameters)); // Creates and populates the mesh\n\n    _this.createMesh();\n    return _this;\n  }\n  _createClass(LightningStrike, [{\n    key: \"update\",\n    value: function update(time) {\n      if (this.isStatic) return;\n      if (this.rayParameters.isEternal || this.rayParameters.birthTime <= time && time <= this.rayParameters.deathTime) {\n        this.updateMesh(time);\n        if (time < this.subrays[0].endPropagationTime) {\n          this.state = LightningStrike.RAY_PROPAGATING;\n        } else if (time > this.subrays[0].beginVanishingTime) {\n          this.state = LightningStrike.RAY_VANISHING;\n        } else {\n          this.state = LightningStrike.RAY_STEADY;\n        }\n        this.visible = true;\n      } else {\n        this.visible = false;\n        if (time < this.rayParameters.birthTime) {\n          this.state = LightningStrike.RAY_UNBORN;\n        } else {\n          this.state = LightningStrike.RAY_EXTINGUISHED;\n        }\n      }\n    }\n  }, {\n    key: \"init\",\n    value: function init(rayParameters) {\n      // Init all the state from the parameters\n      this.rayParameters = rayParameters; // These parameters cannot change after lightning creation:\n\n      this.maxIterations = rayParameters.maxIterations !== undefined ? Math.floor(rayParameters.maxIterations) : 9;\n      rayParameters.maxIterations = this.maxIterations;\n      this.isStatic = rayParameters.isStatic !== undefined ? rayParameters.isStatic : false;\n      rayParameters.isStatic = this.isStatic;\n      this.ramification = rayParameters.ramification !== undefined ? Math.floor(rayParameters.ramification) : 5;\n      rayParameters.ramification = this.ramification;\n      this.maxSubrayRecursion = rayParameters.maxSubrayRecursion !== undefined ? Math.floor(rayParameters.maxSubrayRecursion) : 3;\n      rayParameters.maxSubrayRecursion = this.maxSubrayRecursion;\n      this.recursionProbability = rayParameters.recursionProbability !== undefined ? rayParameters.recursionProbability : 0.6;\n      rayParameters.recursionProbability = this.recursionProbability;\n      this.generateUVs = rayParameters.generateUVs !== undefined ? rayParameters.generateUVs : false;\n      rayParameters.generateUVs = this.generateUVs; // Random generator\n\n      if (rayParameters.randomGenerator !== undefined) {\n        this.randomGenerator = rayParameters.randomGenerator;\n        this.seedGenerator = rayParameters.randomGenerator;\n        if (rayParameters.noiseSeed !== undefined) {\n          this.seedGenerator.setSeed(rayParameters.noiseSeed);\n        }\n      } else {\n        this.randomGenerator = LightningStrike.createRandomGenerator();\n        this.seedGenerator = Math;\n      } // Ray creation callbacks\n\n      if (rayParameters.onDecideSubrayCreation !== undefined) {\n        this.onDecideSubrayCreation = rayParameters.onDecideSubrayCreation;\n      } else {\n        this.createDefaultSubrayCreationCallbacks();\n        if (rayParameters.onSubrayCreation !== undefined) {\n          this.onSubrayCreation = rayParameters.onSubrayCreation;\n        }\n      } // Internal state\n\n      this.state = LightningStrike.RAY_INITIALIZED;\n      this.maxSubrays = Math.ceil(1 + Math.pow(this.ramification, Math.max(0, this.maxSubrayRecursion - 1)));\n      rayParameters.maxSubrays = this.maxSubrays;\n      this.maxRaySegments = 2 * (1 << this.maxIterations);\n      this.subrays = [];\n      for (var i = 0; i < this.maxSubrays; i++) {\n        this.subrays.push(this.createSubray());\n      }\n      this.raySegments = [];\n      for (var _i = 0; _i < this.maxRaySegments; _i++) {\n        this.raySegments.push(this.createSegment());\n      }\n      this.time = 0;\n      this.timeFraction = 0;\n      this.currentSegmentCallback = null;\n      this.currentCreateTriangleVertices = this.generateUVs ? this.createTriangleVerticesWithUVs : this.createTriangleVerticesWithoutUVs;\n      this.numSubrays = 0;\n      this.currentSubray = null;\n      this.currentSegmentIndex = 0;\n      this.isInitialSegment = false;\n      this.subrayProbability = 0;\n      this.currentVertex = 0;\n      this.currentIndex = 0;\n      this.currentCoordinate = 0;\n      this.currentUVCoordinate = 0;\n      this.vertices = null;\n      this.uvs = null;\n      this.indices = null;\n      this.positionAttribute = null;\n      this.uvsAttribute = null;\n      this.simplexX = new SimplexNoise(this.seedGenerator);\n      this.simplexY = new SimplexNoise(this.seedGenerator);\n      this.simplexZ = new SimplexNoise(this.seedGenerator); // Temp vectors\n\n      this.forwards = new Vector3();\n      this.forwardsFill = new Vector3();\n      this.side = new Vector3();\n      this.down = new Vector3();\n      this.middlePos = new Vector3();\n      this.middleLinPos = new Vector3();\n      this.newPos = new Vector3();\n      this.vPos = new Vector3();\n      this.cross1 = new Vector3();\n    }\n  }, {\n    key: \"createMesh\",\n    value: function createMesh() {\n      var maxDrawableSegmentsPerSubRay = 1 << this.maxIterations;\n      var maxVerts = 3 * (maxDrawableSegmentsPerSubRay + 1) * this.maxSubrays;\n      var maxIndices = 18 * maxDrawableSegmentsPerSubRay * this.maxSubrays;\n      this.vertices = new Float32Array(maxVerts * 3);\n      this.indices = new Uint32Array(maxIndices);\n      if (this.generateUVs) {\n        this.uvs = new Float32Array(maxVerts * 2);\n      } // Populate the mesh\n\n      this.fillMesh(0);\n      this.setIndex(new Uint32BufferAttribute(this.indices, 1));\n      this.positionAttribute = new Float32BufferAttribute(this.vertices, 3);\n      this.setAttribute('position', this.positionAttribute);\n      if (this.generateUVs) {\n        this.uvsAttribute = new Float32BufferAttribute(new Float32Array(this.uvs), 2);\n        this.setAttribute('uv', this.uvsAttribute);\n      }\n      if (!this.isStatic) {\n        this.index.usage = DynamicDrawUsage;\n        this.positionAttribute.usage = DynamicDrawUsage;\n        if (this.generateUVs) {\n          this.uvsAttribute.usage = DynamicDrawUsage;\n        }\n      } // Store buffers for later modification\n\n      this.vertices = this.positionAttribute.array;\n      this.indices = this.index.array;\n      if (this.generateUVs) {\n        this.uvs = this.uvsAttribute.array;\n      }\n    }\n  }, {\n    key: \"updateMesh\",\n    value: function updateMesh(time) {\n      this.fillMesh(time);\n      this.drawRange.count = this.currentIndex;\n      this.index.needsUpdate = true;\n      this.positionAttribute.needsUpdate = true;\n      if (this.generateUVs) {\n        this.uvsAttribute.needsUpdate = true;\n      }\n    }\n  }, {\n    key: \"fillMesh\",\n    value: function fillMesh(time) {\n      var scope = this;\n      this.currentVertex = 0;\n      this.currentIndex = 0;\n      this.currentCoordinate = 0;\n      this.currentUVCoordinate = 0;\n      this.fractalRay(time, function fillVertices(segment) {\n        var subray = scope.currentSubray;\n        if (time < subray.birthTime) {\n          //&& ( ! this.rayParameters.isEternal || scope.currentSubray.recursion > 0 ) ) {\n          return;\n        } else if (this.rayParameters.isEternal && scope.currentSubray.recursion == 0) {\n          // Eternal rays don't propagate nor vanish, but its subrays do\n          scope.createPrism(segment);\n          scope.onDecideSubrayCreation(segment, scope);\n        } else if (time < subray.endPropagationTime) {\n          if (scope.timeFraction >= segment.fraction0 * subray.propagationTimeFactor) {\n            // Ray propagation has arrived to this segment\n            scope.createPrism(segment);\n            scope.onDecideSubrayCreation(segment, scope);\n          }\n        } else if (time < subray.beginVanishingTime) {\n          // Ray is steady (nor propagating nor vanishing)\n          scope.createPrism(segment);\n          scope.onDecideSubrayCreation(segment, scope);\n        } else {\n          if (scope.timeFraction <= subray.vanishingTimeFactor + segment.fraction1 * (1 - subray.vanishingTimeFactor)) {\n            // Segment has not yet vanished\n            scope.createPrism(segment);\n          }\n          scope.onDecideSubrayCreation(segment, scope);\n        }\n      });\n    }\n  }, {\n    key: \"addNewSubray\",\n    value: function addNewSubray() /*rayParameters*/\n    {\n      return this.subrays[this.numSubrays++];\n    }\n  }, {\n    key: \"initSubray\",\n    value: function initSubray(subray, rayParameters) {\n      subray.pos0.copy(rayParameters.sourceOffset);\n      subray.pos1.copy(rayParameters.destOffset);\n      subray.up0.copy(rayParameters.up0);\n      subray.up1.copy(rayParameters.up1);\n      subray.radius0 = rayParameters.radius0;\n      subray.radius1 = rayParameters.radius1;\n      subray.birthTime = rayParameters.birthTime;\n      subray.deathTime = rayParameters.deathTime;\n      subray.timeScale = rayParameters.timeScale;\n      subray.roughness = rayParameters.roughness;\n      subray.straightness = rayParameters.straightness;\n      subray.propagationTimeFactor = rayParameters.propagationTimeFactor;\n      subray.vanishingTimeFactor = rayParameters.vanishingTimeFactor;\n      subray.maxIterations = this.maxIterations;\n      subray.seed = rayParameters.noiseSeed !== undefined ? rayParameters.noiseSeed : 0;\n      subray.recursion = 0;\n    }\n  }, {\n    key: \"fractalRay\",\n    value: function fractalRay(time, segmentCallback) {\n      this.time = time;\n      this.currentSegmentCallback = segmentCallback;\n      this.numSubrays = 0; // Add the top level subray\n\n      this.initSubray(this.addNewSubray(), this.rayParameters); // Process all subrays that are being generated until consuming all of them\n\n      for (var subrayIndex = 0; subrayIndex < this.numSubrays; subrayIndex++) {\n        var subray = this.subrays[subrayIndex];\n        this.currentSubray = subray;\n        this.randomGenerator.setSeed(subray.seed);\n        subray.endPropagationTime = MathUtils.lerp(subray.birthTime, subray.deathTime, subray.propagationTimeFactor);\n        subray.beginVanishingTime = MathUtils.lerp(subray.deathTime, subray.birthTime, 1 - subray.vanishingTimeFactor);\n        var random1 = this.randomGenerator.random;\n        subray.linPos0.set(random1(), random1(), random1()).multiplyScalar(1000);\n        subray.linPos1.set(random1(), random1(), random1()).multiplyScalar(1000);\n        this.timeFraction = (time - subray.birthTime) / (subray.deathTime - subray.birthTime);\n        this.currentSegmentIndex = 0;\n        this.isInitialSegment = true;\n        var segment = this.getNewSegment();\n        segment.iteration = 0;\n        segment.pos0.copy(subray.pos0);\n        segment.pos1.copy(subray.pos1);\n        segment.linPos0.copy(subray.linPos0);\n        segment.linPos1.copy(subray.linPos1);\n        segment.up0.copy(subray.up0);\n        segment.up1.copy(subray.up1);\n        segment.radius0 = subray.radius0;\n        segment.radius1 = subray.radius1;\n        segment.fraction0 = 0;\n        segment.fraction1 = 1;\n        segment.positionVariationFactor = 1 - subray.straightness;\n        this.subrayProbability = this.ramification * Math.pow(this.recursionProbability, subray.recursion) / (1 << subray.maxIterations);\n        this.fractalRayRecursive(segment);\n      }\n      this.currentSegmentCallback = null;\n      this.currentSubray = null;\n    }\n  }, {\n    key: \"fractalRayRecursive\",\n    value: function fractalRayRecursive(segment) {\n      // Leave recursion condition\n      if (segment.iteration >= this.currentSubray.maxIterations) {\n        this.currentSegmentCallback(segment);\n        return;\n      } // Interpolation\n\n      this.forwards.subVectors(segment.pos1, segment.pos0);\n      var lForwards = this.forwards.length();\n      if (lForwards < 0.000001) {\n        this.forwards.set(0, 0, 0.01);\n        lForwards = this.forwards.length();\n      }\n      var middleRadius = (segment.radius0 + segment.radius1) * 0.5;\n      var middleFraction = (segment.fraction0 + segment.fraction1) * 0.5;\n      var timeDimension = this.time * this.currentSubray.timeScale * Math.pow(2, segment.iteration);\n      this.middlePos.lerpVectors(segment.pos0, segment.pos1, 0.5);\n      this.middleLinPos.lerpVectors(segment.linPos0, segment.linPos1, 0.5);\n      var p = this.middleLinPos; // Noise\n\n      this.newPos.set(this.simplexX.noise4d(p.x, p.y, p.z, timeDimension), this.simplexY.noise4d(p.x, p.y, p.z, timeDimension), this.simplexZ.noise4d(p.x, p.y, p.z, timeDimension));\n      this.newPos.multiplyScalar(segment.positionVariationFactor * lForwards);\n      this.newPos.add(this.middlePos); // Recursion\n\n      var newSegment1 = this.getNewSegment();\n      newSegment1.pos0.copy(segment.pos0);\n      newSegment1.pos1.copy(this.newPos);\n      newSegment1.linPos0.copy(segment.linPos0);\n      newSegment1.linPos1.copy(this.middleLinPos);\n      newSegment1.up0.copy(segment.up0);\n      newSegment1.up1.copy(segment.up1);\n      newSegment1.radius0 = segment.radius0;\n      newSegment1.radius1 = middleRadius;\n      newSegment1.fraction0 = segment.fraction0;\n      newSegment1.fraction1 = middleFraction;\n      newSegment1.positionVariationFactor = segment.positionVariationFactor * this.currentSubray.roughness;\n      newSegment1.iteration = segment.iteration + 1;\n      var newSegment2 = this.getNewSegment();\n      newSegment2.pos0.copy(this.newPos);\n      newSegment2.pos1.copy(segment.pos1);\n      newSegment2.linPos0.copy(this.middleLinPos);\n      newSegment2.linPos1.copy(segment.linPos1);\n      this.cross1.crossVectors(segment.up0, this.forwards.normalize());\n      newSegment2.up0.crossVectors(this.forwards, this.cross1).normalize();\n      newSegment2.up1.copy(segment.up1);\n      newSegment2.radius0 = middleRadius;\n      newSegment2.radius1 = segment.radius1;\n      newSegment2.fraction0 = middleFraction;\n      newSegment2.fraction1 = segment.fraction1;\n      newSegment2.positionVariationFactor = segment.positionVariationFactor * this.currentSubray.roughness;\n      newSegment2.iteration = segment.iteration + 1;\n      this.fractalRayRecursive(newSegment1);\n      this.fractalRayRecursive(newSegment2);\n    }\n  }, {\n    key: \"createPrism\",\n    value: function createPrism(segment) {\n      // Creates one triangular prism and its vertices at the segment\n      this.forwardsFill.subVectors(segment.pos1, segment.pos0).normalize();\n      if (this.isInitialSegment) {\n        this.currentCreateTriangleVertices(segment.pos0, segment.up0, this.forwardsFill, segment.radius0, 0);\n        this.isInitialSegment = false;\n      }\n      this.currentCreateTriangleVertices(segment.pos1, segment.up0, this.forwardsFill, segment.radius1, segment.fraction1);\n      this.createPrismFaces();\n    }\n  }, {\n    key: \"createTriangleVerticesWithoutUVs\",\n    value: function createTriangleVerticesWithoutUVs(pos, up, forwards, radius) {\n      // Create an equilateral triangle (only vertices)\n      this.side.crossVectors(up, forwards).multiplyScalar(radius * LightningStrike.COS30DEG);\n      this.down.copy(up).multiplyScalar(-radius * LightningStrike.SIN30DEG);\n      var p = this.vPos;\n      var v = this.vertices;\n      p.copy(pos).sub(this.side).add(this.down);\n      v[this.currentCoordinate++] = p.x;\n      v[this.currentCoordinate++] = p.y;\n      v[this.currentCoordinate++] = p.z;\n      p.copy(pos).add(this.side).add(this.down);\n      v[this.currentCoordinate++] = p.x;\n      v[this.currentCoordinate++] = p.y;\n      v[this.currentCoordinate++] = p.z;\n      p.copy(up).multiplyScalar(radius).add(pos);\n      v[this.currentCoordinate++] = p.x;\n      v[this.currentCoordinate++] = p.y;\n      v[this.currentCoordinate++] = p.z;\n      this.currentVertex += 3;\n    }\n  }, {\n    key: \"createTriangleVerticesWithUVs\",\n    value: function createTriangleVerticesWithUVs(pos, up, forwards, radius, u) {\n      // Create an equilateral triangle (only vertices)\n      this.side.crossVectors(up, forwards).multiplyScalar(radius * LightningStrike.COS30DEG);\n      this.down.copy(up).multiplyScalar(-radius * LightningStrike.SIN30DEG);\n      var p = this.vPos;\n      var v = this.vertices;\n      var uv = this.uvs;\n      p.copy(pos).sub(this.side).add(this.down);\n      v[this.currentCoordinate++] = p.x;\n      v[this.currentCoordinate++] = p.y;\n      v[this.currentCoordinate++] = p.z;\n      uv[this.currentUVCoordinate++] = u;\n      uv[this.currentUVCoordinate++] = 0;\n      p.copy(pos).add(this.side).add(this.down);\n      v[this.currentCoordinate++] = p.x;\n      v[this.currentCoordinate++] = p.y;\n      v[this.currentCoordinate++] = p.z;\n      uv[this.currentUVCoordinate++] = u;\n      uv[this.currentUVCoordinate++] = 0.5;\n      p.copy(up).multiplyScalar(radius).add(pos);\n      v[this.currentCoordinate++] = p.x;\n      v[this.currentCoordinate++] = p.y;\n      v[this.currentCoordinate++] = p.z;\n      uv[this.currentUVCoordinate++] = u;\n      uv[this.currentUVCoordinate++] = 1;\n      this.currentVertex += 3;\n    }\n  }, {\n    key: \"createPrismFaces\",\n    value: function createPrismFaces(vertex\n    /*, index*/) {\n      var indices = this.indices;\n      var vertex = this.currentVertex - 6;\n      indices[this.currentIndex++] = vertex + 1;\n      indices[this.currentIndex++] = vertex + 2;\n      indices[this.currentIndex++] = vertex + 5;\n      indices[this.currentIndex++] = vertex + 1;\n      indices[this.currentIndex++] = vertex + 5;\n      indices[this.currentIndex++] = vertex + 4;\n      indices[this.currentIndex++] = vertex + 0;\n      indices[this.currentIndex++] = vertex + 1;\n      indices[this.currentIndex++] = vertex + 4;\n      indices[this.currentIndex++] = vertex + 0;\n      indices[this.currentIndex++] = vertex + 4;\n      indices[this.currentIndex++] = vertex + 3;\n      indices[this.currentIndex++] = vertex + 2;\n      indices[this.currentIndex++] = vertex + 0;\n      indices[this.currentIndex++] = vertex + 3;\n      indices[this.currentIndex++] = vertex + 2;\n      indices[this.currentIndex++] = vertex + 3;\n      indices[this.currentIndex++] = vertex + 5;\n    }\n  }, {\n    key: \"createDefaultSubrayCreationCallbacks\",\n    value: function createDefaultSubrayCreationCallbacks() {\n      var random1 = this.randomGenerator.random;\n      this.onDecideSubrayCreation = function (segment, lightningStrike) {\n        // Decide subrays creation at parent (sub)ray segment\n        var subray = lightningStrike.currentSubray;\n        var period = lightningStrike.rayParameters.subrayPeriod;\n        var dutyCycle = lightningStrike.rayParameters.subrayDutyCycle;\n        var phase0 = lightningStrike.rayParameters.isEternal && subray.recursion == 0 ? -random1() * period : MathUtils.lerp(subray.birthTime, subray.endPropagationTime, segment.fraction0) - random1() * period;\n        var phase = lightningStrike.time - phase0;\n        var currentCycle = Math.floor(phase / period);\n        var childSubraySeed = random1() * (currentCycle + 1);\n        var isActive = phase % period <= dutyCycle * period;\n        var probability = 0;\n        if (isActive) {\n          probability = lightningStrike.subrayProbability; // Distribution test: probability *= segment.fraction0 > 0.5 && segment.fraction0 < 0.9 ? 1 / 0.4 : 0;\n        }\n\n        if (subray.recursion < lightningStrike.maxSubrayRecursion && lightningStrike.numSubrays < lightningStrike.maxSubrays && random1() < probability) {\n          var childSubray = lightningStrike.addNewSubray();\n          var parentSeed = lightningStrike.randomGenerator.getSeed();\n          childSubray.seed = childSubraySeed;\n          lightningStrike.randomGenerator.setSeed(childSubraySeed);\n          childSubray.recursion = subray.recursion + 1;\n          childSubray.maxIterations = Math.max(1, subray.maxIterations - 1);\n          childSubray.linPos0.set(random1(), random1(), random1()).multiplyScalar(1000);\n          childSubray.linPos1.set(random1(), random1(), random1()).multiplyScalar(1000);\n          childSubray.up0.copy(subray.up0);\n          childSubray.up1.copy(subray.up1);\n          childSubray.radius0 = segment.radius0 * lightningStrike.rayParameters.radius0Factor;\n          childSubray.radius1 = Math.min(lightningStrike.rayParameters.minRadius, segment.radius1 * lightningStrike.rayParameters.radius1Factor);\n          childSubray.birthTime = phase0 + currentCycle * period;\n          childSubray.deathTime = childSubray.birthTime + period * dutyCycle;\n          if (!lightningStrike.rayParameters.isEternal && subray.recursion == 0) {\n            childSubray.birthTime = Math.max(childSubray.birthTime, subray.birthTime);\n            childSubray.deathTime = Math.min(childSubray.deathTime, subray.deathTime);\n          }\n          childSubray.timeScale = subray.timeScale * 2;\n          childSubray.roughness = subray.roughness;\n          childSubray.straightness = subray.straightness;\n          childSubray.propagationTimeFactor = subray.propagationTimeFactor;\n          childSubray.vanishingTimeFactor = subray.vanishingTimeFactor;\n          lightningStrike.onSubrayCreation(segment, subray, childSubray, lightningStrike);\n          lightningStrike.randomGenerator.setSeed(parentSeed);\n        }\n      };\n      var vec1Pos = new Vector3();\n      var vec2Forward = new Vector3();\n      var vec3Side = new Vector3();\n      var vec4Up = new Vector3();\n      this.onSubrayCreation = function (segment, parentSubray, childSubray, lightningStrike) {\n        // Decide childSubray origin and destination positions (pos0 and pos1) and possibly other properties of childSubray\n        // Just use the default cone position generator\n        lightningStrike.subrayCylinderPosition(segment, parentSubray, childSubray, 0.5, 0.6, 0.2);\n      };\n      this.subrayConePosition = function (segment, parentSubray, childSubray, heightFactor, sideWidthFactor, minSideWidthFactor) {\n        // Sets childSubray pos0 and pos1 in a cone\n        childSubray.pos0.copy(segment.pos0);\n        vec1Pos.subVectors(parentSubray.pos1, parentSubray.pos0);\n        vec2Forward.copy(vec1Pos).normalize();\n        vec1Pos.multiplyScalar(segment.fraction0 + (1 - segment.fraction0) * (random1() * heightFactor));\n        var length = vec1Pos.length();\n        vec3Side.crossVectors(parentSubray.up0, vec2Forward);\n        var angle = 2 * Math.PI * random1();\n        vec3Side.multiplyScalar(Math.cos(angle));\n        vec4Up.copy(parentSubray.up0).multiplyScalar(Math.sin(angle));\n        childSubray.pos1.copy(vec3Side).add(vec4Up).multiplyScalar(length * sideWidthFactor * (minSideWidthFactor + random1() * (1 - minSideWidthFactor))).add(vec1Pos).add(parentSubray.pos0);\n      };\n      this.subrayCylinderPosition = function (segment, parentSubray, childSubray, heightFactor, sideWidthFactor, minSideWidthFactor) {\n        // Sets childSubray pos0 and pos1 in a cylinder\n        childSubray.pos0.copy(segment.pos0);\n        vec1Pos.subVectors(parentSubray.pos1, parentSubray.pos0);\n        vec2Forward.copy(vec1Pos).normalize();\n        vec1Pos.multiplyScalar(segment.fraction0 + (1 - segment.fraction0) * ((2 * random1() - 1) * heightFactor));\n        var length = vec1Pos.length();\n        vec3Side.crossVectors(parentSubray.up0, vec2Forward);\n        var angle = 2 * Math.PI * random1();\n        vec3Side.multiplyScalar(Math.cos(angle));\n        vec4Up.copy(parentSubray.up0).multiplyScalar(Math.sin(angle));\n        childSubray.pos1.copy(vec3Side).add(vec4Up).multiplyScalar(length * sideWidthFactor * (minSideWidthFactor + random1() * (1 - minSideWidthFactor))).add(vec1Pos).add(parentSubray.pos0);\n      };\n    }\n  }, {\n    key: \"createSubray\",\n    value: function createSubray() {\n      return {\n        seed: 0,\n        maxIterations: 0,\n        recursion: 0,\n        pos0: new Vector3(),\n        pos1: new Vector3(),\n        linPos0: new Vector3(),\n        linPos1: new Vector3(),\n        up0: new Vector3(),\n        up1: new Vector3(),\n        radius0: 0,\n        radius1: 0,\n        birthTime: 0,\n        deathTime: 0,\n        timeScale: 0,\n        roughness: 0,\n        straightness: 0,\n        propagationTimeFactor: 0,\n        vanishingTimeFactor: 0,\n        endPropagationTime: 0,\n        beginVanishingTime: 0\n      };\n    }\n  }, {\n    key: \"createSegment\",\n    value: function createSegment() {\n      return {\n        iteration: 0,\n        pos0: new Vector3(),\n        pos1: new Vector3(),\n        linPos0: new Vector3(),\n        linPos1: new Vector3(),\n        up0: new Vector3(),\n        up1: new Vector3(),\n        radius0: 0,\n        radius1: 0,\n        fraction0: 0,\n        fraction1: 0,\n        positionVariationFactor: 0\n      };\n    }\n  }, {\n    key: \"getNewSegment\",\n    value: function getNewSegment() {\n      return this.raySegments[this.currentSegmentIndex++];\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(source) {\n      _get(_getPrototypeOf(LightningStrike.prototype), \"copy\", this).call(this, source);\n      this.init(LightningStrike.copyParameters({}, source.rayParameters));\n      return this;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new this.constructor(LightningStrike.copyParameters({}, this.rayParameters));\n    }\n  }]);\n  return LightningStrike;\n}(BufferGeometry);\nLightningStrike.prototype.isLightningStrike = true; // Ray states\n\nLightningStrike.RAY_INITIALIZED = 0;\nLightningStrike.RAY_UNBORN = 1;\nLightningStrike.RAY_PROPAGATING = 2;\nLightningStrike.RAY_STEADY = 3;\nLightningStrike.RAY_VANISHING = 4;\nLightningStrike.RAY_EXTINGUISHED = 5;\nLightningStrike.COS30DEG = Math.cos(30 * Math.PI / 180);\nLightningStrike.SIN30DEG = Math.sin(30 * Math.PI / 180);\nLightningStrike.createRandomGenerator = function () {\n  var numSeeds = 2053;\n  var seeds = [];\n  for (var i = 0; i < numSeeds; i++) {\n    seeds.push(Math.random());\n  }\n  var generator = {\n    currentSeed: 0,\n    random: function random() {\n      var value = seeds[generator.currentSeed];\n      generator.currentSeed = (generator.currentSeed + 1) % numSeeds;\n      return value;\n    },\n    getSeed: function getSeed() {\n      return generator.currentSeed / numSeeds;\n    },\n    setSeed: function setSeed(seed) {\n      generator.currentSeed = Math.floor(seed * numSeeds) % numSeeds;\n    }\n  };\n  return generator;\n};\nLightningStrike.copyParameters = function (dest, source) {\n  source = source || {};\n  dest = dest || {};\n  var vecCopy = function vecCopy(v) {\n    if (source === dest) {\n      return v;\n    } else {\n      return v.clone();\n    }\n  };\n  dest.sourceOffset = source.sourceOffset !== undefined ? vecCopy(source.sourceOffset) : new Vector3(0, 100, 0), dest.destOffset = source.destOffset !== undefined ? vecCopy(source.destOffset) : new Vector3(0, 0, 0), dest.timeScale = source.timeScale !== undefined ? source.timeScale : 1, dest.roughness = source.roughness !== undefined ? source.roughness : 0.9, dest.straightness = source.straightness !== undefined ? source.straightness : 0.7, dest.up0 = source.up0 !== undefined ? vecCopy(source.up0) : new Vector3(0, 0, 1);\n  dest.up1 = source.up1 !== undefined ? vecCopy(source.up1) : new Vector3(0, 0, 1), dest.radius0 = source.radius0 !== undefined ? source.radius0 : 1, dest.radius1 = source.radius1 !== undefined ? source.radius1 : 1, dest.radius0Factor = source.radius0Factor !== undefined ? source.radius0Factor : 0.5, dest.radius1Factor = source.radius1Factor !== undefined ? source.radius1Factor : 0.2, dest.minRadius = source.minRadius !== undefined ? source.minRadius : 0.2,\n  // These parameters should not be changed after lightning creation. They can be changed but the ray will change its form abruptly:\n  dest.isEternal = source.isEternal !== undefined ? source.isEternal : source.birthTime === undefined || source.deathTime === undefined, dest.birthTime = source.birthTime, dest.deathTime = source.deathTime, dest.propagationTimeFactor = source.propagationTimeFactor !== undefined ? source.propagationTimeFactor : 0.1, dest.vanishingTimeFactor = source.vanishingTimeFactor !== undefined ? source.vanishingTimeFactor : 0.9, dest.subrayPeriod = source.subrayPeriod !== undefined ? source.subrayPeriod : 4, dest.subrayDutyCycle = source.subrayDutyCycle !== undefined ? source.subrayDutyCycle : 0.6; // These parameters cannot change after lightning creation:\n\n  dest.maxIterations = source.maxIterations !== undefined ? source.maxIterations : 9;\n  dest.isStatic = source.isStatic !== undefined ? source.isStatic : false;\n  dest.ramification = source.ramification !== undefined ? source.ramification : 5;\n  dest.maxSubrayRecursion = source.maxSubrayRecursion !== undefined ? source.maxSubrayRecursion : 3;\n  dest.recursionProbability = source.recursionProbability !== undefined ? source.recursionProbability : 0.6;\n  dest.generateUVs = source.generateUVs !== undefined ? source.generateUVs : false;\n  dest.randomGenerator = source.randomGenerator, dest.noiseSeed = source.noiseSeed, dest.onDecideSubrayCreation = source.onDecideSubrayCreation, dest.onSubrayCreation = source.onSubrayCreation;\n  return dest;\n};\nexport { LightningStrike };","map":{"version":3,"names":["BufferGeometry","Vector3","Uint32BufferAttribute","Float32BufferAttribute","DynamicDrawUsage","MathUtils","SimplexNoise","LightningStrike","_BufferGeometry","_inherits","_super","_createSuper","rayParameters","_this","_classCallCheck","call","type","init","copyParameters","createMesh","_createClass","key","value","update","time","isStatic","isEternal","birthTime","deathTime","updateMesh","subrays","endPropagationTime","state","RAY_PROPAGATING","beginVanishingTime","RAY_VANISHING","RAY_STEADY","visible","RAY_UNBORN","RAY_EXTINGUISHED","maxIterations","undefined","Math","floor","ramification","maxSubrayRecursion","recursionProbability","generateUVs","randomGenerator","seedGenerator","noiseSeed","setSeed","createRandomGenerator","onDecideSubrayCreation","createDefaultSubrayCreationCallbacks","onSubrayCreation","RAY_INITIALIZED","maxSubrays","ceil","pow","max","maxRaySegments","i","push","createSubray","raySegments","createSegment","timeFraction","currentSegmentCallback","currentCreateTriangleVertices","createTriangleVerticesWithUVs","createTriangleVerticesWithoutUVs","numSubrays","currentSubray","currentSegmentIndex","isInitialSegment","subrayProbability","currentVertex","currentIndex","currentCoordinate","currentUVCoordinate","vertices","uvs","indices","positionAttribute","uvsAttribute","simplexX","simplexY","simplexZ","forwards","forwardsFill","side","down","middlePos","middleLinPos","newPos","vPos","cross1","maxDrawableSegmentsPerSubRay","maxVerts","maxIndices","Float32Array","Uint32Array","fillMesh","setIndex","setAttribute","index","usage","array","drawRange","count","needsUpdate","scope","fractalRay","fillVertices","segment","subray","recursion","createPrism","fraction0","propagationTimeFactor","vanishingTimeFactor","fraction1","addNewSubray","initSubray","pos0","copy","sourceOffset","pos1","destOffset","up0","up1","radius0","radius1","timeScale","roughness","straightness","seed","segmentCallback","subrayIndex","lerp","random1","random","linPos0","set","multiplyScalar","linPos1","getNewSegment","iteration","positionVariationFactor","fractalRayRecursive","subVectors","lForwards","length","middleRadius","middleFraction","timeDimension","lerpVectors","p","noise4d","x","y","z","add","newSegment1","newSegment2","crossVectors","normalize","createPrismFaces","pos","up","radius","COS30DEG","SIN30DEG","v","sub","u","uv","vertex","lightningStrike","period","subrayPeriod","dutyCycle","subrayDutyCycle","phase0","phase","currentCycle","childSubraySeed","isActive","probability","childSubray","parentSeed","getSeed","radius0Factor","min","minRadius","radius1Factor","vec1Pos","vec2Forward","vec3Side","vec4Up","parentSubray","subrayCylinderPosition","subrayConePosition","heightFactor","sideWidthFactor","minSideWidthFactor","angle","PI","cos","sin","source","_get","_getPrototypeOf","prototype","clone","constructor","isLightningStrike","numSeeds","seeds","generator","currentSeed","dest","vecCopy"],"sources":["/home/samuel/experiment/3d/farm/frontend/node_modules/three-stdlib/geometries/LightningStrike.js"],"sourcesContent":["import { BufferGeometry, Vector3, Uint32BufferAttribute, Float32BufferAttribute, DynamicDrawUsage, MathUtils } from 'three';\nimport { SimplexNoise } from '../math/SimplexNoise.js';\n\n/**\n * @fileoverview LightningStrike object for creating lightning strikes and voltaic arcs.\n *\n *\n * Usage\n *\n * var myRay = new LightningStrike( paramsObject );\n * var myRayMesh = new THREE.Mesh( myRay, myMaterial );\n * scene.add( myRayMesh );\n * ...\n * myRay.update( currentTime );\n *\n * The \"currentTime\" can vary its rate, go forwards, backwards or even jump, but it cannot be negative.\n *\n * You should normally leave the ray position to (0, 0, 0). You should control it by changing the sourceOffset and destOffset parameters.\n *\n *\n * LightningStrike parameters\n *\n * The paramsObject can contain any of the following parameters.\n *\n * Legend:\n * 'LightningStrike' (also called 'ray'): An independent voltaic arc with its ramifications and defined with a set of parameters.\n * 'Subray': A ramification of the ray. It is not a LightningStrike object.\n * 'Segment': A linear segment piece of a subray.\n * 'Leaf segment': A ray segment which cannot be smaller.\n *\n *\n * The following parameters can be changed any time and if they vary smoothly, the ray form will also change smoothly:\n *\n * @param {Vector3} sourceOffset The point where the ray starts.\n *\n * @param {Vector3} destOffset The point where the ray ends.\n *\n * @param {double} timeScale The rate at wich the ray form changes in time. Default: 1\n *\n * @param {double} roughness From 0 to 1. The higher the value, the more wrinkled is the ray. Default: 0.9\n *\n * @param {double} straightness From 0 to 1. The higher the value, the more straight will be a subray path. Default: 0.7\n *\n * @param {Vector3} up0 Ray 'up' direction at the ray starting point. Must be normalized. It should be perpendicular to the ray forward direction but it doesn't matter much.\n *\n * @param {Vector3} up1 Like the up0 parameter but at the end of the ray. Must be normalized.\n *\n * @param {double} radius0 Radius of the main ray trunk at the start point. Default: 1\n *\n * @param {double} radius1 Radius of the main ray trunk at the end point. Default: 1\n *\n * @param {double} radius0Factor The radius0 of a subray is this factor times the radius0 of its parent subray. Default: 0.5\n *\n * @param {double} radius1Factor The radius1 of a subray is this factor times the radius1 of its parent subray. Default: 0.2\n *\n * @param {minRadius} Minimum value a subray radius0 or radius1 can get. Default: 0.1\n *\n *\n * The following parameters should not be changed after lightning creation. They can be changed but the ray will change its form abruptly:\n *\n * @param {boolean} isEternal If true the ray never extinguishes. Otherwise its life is controlled by the 'birthTime' and 'deathTime' parameters. Default: true if any of those two parameters is undefined.\n *\n * @param {double} birthTime The time at which the ray starts its life and begins propagating. Only if isEternal is false. Default: None.\n *\n * @param {double} deathTime The time at which the ray ends vanishing and its life. Only if isEternal is false. Default: None.\n *\n * @param {double} propagationTimeFactor From 0 to 1. Lifetime factor at which the ray ends propagating and enters the steady phase. For example, 0.1 means it is propagating 1/10 of its lifetime. Default: 0.1\n *\n * @param {double} vanishingTimeFactor From 0 to 1. Lifetime factor at which the ray ends the steady phase and begins vanishing. For example, 0.9 means it is vanishing 1/10 of its lifetime. Default: 0.9\n *\n * @param {double} subrayPeriod Subrays cycle periodically. This is their time period. Default: 4\n *\n * @param {double} subrayDutyCycle From 0 to 1. This is the fraction of time a subray is active. Default: 0.6\n *\n *\n * These parameters cannot change after lightning creation:\n *\n * @param {integer} maxIterations: Greater than 0. The number of ray's leaf segments is 2**maxIterations. Default: 9\n *\n * @param {boolean} isStatic Set to true only for rays which won't change over time and are not attached to moving objects (Rare case). It is used to set the vertex buffers non-dynamic. You can omit calling update() for these rays.\n *\n * @param {integer} ramification Greater than 0. Maximum number of child subrays a subray can have. Default: 5\n *\n * @param {integer} maxSubrayRecursion Greater than 0. Maximum level of recursion (subray descendant generations). Default: 3\n *\n * @param {double} recursionProbability From 0 to 1. The lower the value, the less chance each new generation of subrays has to generate new subrays. Default: 0.6\n *\n * @param {boolean} generateUVs If true, the ray geometry will have uv coordinates generated. u runs along the ray, and v across its perimeter. Default: false.\n *\n * @param {Object} randomGenerator Set here your random number generator which will seed the SimplexNoise and other decisions during ray tree creation.\n * It can be used to generate repeatable rays. For that, set also the noiseSeed parameter, and each ray created with that generator and seed pair will be identical in time.\n * The randomGenerator parameter should be an object with a random() function similar to Math.random, but seedable.\n * It must have also a getSeed() method, which returns the current seed, and a setSeed( seed ) method, which accepts as seed a fractional number from 0 to 1, as well as any other number.\n * The default value is an internal generator for some uses and Math.random for others (It is non-repeatable even if noiseSeed is supplied)\n *\n * @param {double} noiseSeed Seed used to make repeatable rays (see the randomGenerator)\n *\n * @param {function} onDecideSubrayCreation Set this to change the callback which decides subray creation. You can look at the default callback in the code (createDefaultSubrayCreationCallbacks)for more info.\n *\n * @param {function} onSubrayCreation This is another callback, more simple than the previous one. It can be used to adapt the form of subrays or other parameters once a subray has been created and initialized. It is used in the examples to adapt subrays to a sphere or to a plane.\n *\n *\n */\n\nclass LightningStrike extends BufferGeometry {\n  constructor(rayParameters) {\n    super();\n    this.type = 'LightningStrike'; // Set parameters, and set undefined parameters to default values\n\n    rayParameters = rayParameters || {};\n    this.init(LightningStrike.copyParameters(rayParameters, rayParameters)); // Creates and populates the mesh\n\n    this.createMesh();\n  }\n\n  update(time) {\n    if (this.isStatic) return;\n\n    if (this.rayParameters.isEternal || this.rayParameters.birthTime <= time && time <= this.rayParameters.deathTime) {\n      this.updateMesh(time);\n\n      if (time < this.subrays[0].endPropagationTime) {\n        this.state = LightningStrike.RAY_PROPAGATING;\n      } else if (time > this.subrays[0].beginVanishingTime) {\n        this.state = LightningStrike.RAY_VANISHING;\n      } else {\n        this.state = LightningStrike.RAY_STEADY;\n      }\n\n      this.visible = true;\n    } else {\n      this.visible = false;\n\n      if (time < this.rayParameters.birthTime) {\n        this.state = LightningStrike.RAY_UNBORN;\n      } else {\n        this.state = LightningStrike.RAY_EXTINGUISHED;\n      }\n    }\n  }\n\n  init(rayParameters) {\n    // Init all the state from the parameters\n    this.rayParameters = rayParameters; // These parameters cannot change after lightning creation:\n\n    this.maxIterations = rayParameters.maxIterations !== undefined ? Math.floor(rayParameters.maxIterations) : 9;\n    rayParameters.maxIterations = this.maxIterations;\n    this.isStatic = rayParameters.isStatic !== undefined ? rayParameters.isStatic : false;\n    rayParameters.isStatic = this.isStatic;\n    this.ramification = rayParameters.ramification !== undefined ? Math.floor(rayParameters.ramification) : 5;\n    rayParameters.ramification = this.ramification;\n    this.maxSubrayRecursion = rayParameters.maxSubrayRecursion !== undefined ? Math.floor(rayParameters.maxSubrayRecursion) : 3;\n    rayParameters.maxSubrayRecursion = this.maxSubrayRecursion;\n    this.recursionProbability = rayParameters.recursionProbability !== undefined ? rayParameters.recursionProbability : 0.6;\n    rayParameters.recursionProbability = this.recursionProbability;\n    this.generateUVs = rayParameters.generateUVs !== undefined ? rayParameters.generateUVs : false;\n    rayParameters.generateUVs = this.generateUVs; // Random generator\n\n    if (rayParameters.randomGenerator !== undefined) {\n      this.randomGenerator = rayParameters.randomGenerator;\n      this.seedGenerator = rayParameters.randomGenerator;\n\n      if (rayParameters.noiseSeed !== undefined) {\n        this.seedGenerator.setSeed(rayParameters.noiseSeed);\n      }\n    } else {\n      this.randomGenerator = LightningStrike.createRandomGenerator();\n      this.seedGenerator = Math;\n    } // Ray creation callbacks\n\n\n    if (rayParameters.onDecideSubrayCreation !== undefined) {\n      this.onDecideSubrayCreation = rayParameters.onDecideSubrayCreation;\n    } else {\n      this.createDefaultSubrayCreationCallbacks();\n\n      if (rayParameters.onSubrayCreation !== undefined) {\n        this.onSubrayCreation = rayParameters.onSubrayCreation;\n      }\n    } // Internal state\n\n\n    this.state = LightningStrike.RAY_INITIALIZED;\n    this.maxSubrays = Math.ceil(1 + Math.pow(this.ramification, Math.max(0, this.maxSubrayRecursion - 1)));\n    rayParameters.maxSubrays = this.maxSubrays;\n    this.maxRaySegments = 2 * (1 << this.maxIterations);\n    this.subrays = [];\n\n    for (let i = 0; i < this.maxSubrays; i++) {\n      this.subrays.push(this.createSubray());\n    }\n\n    this.raySegments = [];\n\n    for (let i = 0; i < this.maxRaySegments; i++) {\n      this.raySegments.push(this.createSegment());\n    }\n\n    this.time = 0;\n    this.timeFraction = 0;\n    this.currentSegmentCallback = null;\n    this.currentCreateTriangleVertices = this.generateUVs ? this.createTriangleVerticesWithUVs : this.createTriangleVerticesWithoutUVs;\n    this.numSubrays = 0;\n    this.currentSubray = null;\n    this.currentSegmentIndex = 0;\n    this.isInitialSegment = false;\n    this.subrayProbability = 0;\n    this.currentVertex = 0;\n    this.currentIndex = 0;\n    this.currentCoordinate = 0;\n    this.currentUVCoordinate = 0;\n    this.vertices = null;\n    this.uvs = null;\n    this.indices = null;\n    this.positionAttribute = null;\n    this.uvsAttribute = null;\n    this.simplexX = new SimplexNoise(this.seedGenerator);\n    this.simplexY = new SimplexNoise(this.seedGenerator);\n    this.simplexZ = new SimplexNoise(this.seedGenerator); // Temp vectors\n\n    this.forwards = new Vector3();\n    this.forwardsFill = new Vector3();\n    this.side = new Vector3();\n    this.down = new Vector3();\n    this.middlePos = new Vector3();\n    this.middleLinPos = new Vector3();\n    this.newPos = new Vector3();\n    this.vPos = new Vector3();\n    this.cross1 = new Vector3();\n  }\n\n  createMesh() {\n    const maxDrawableSegmentsPerSubRay = 1 << this.maxIterations;\n    const maxVerts = 3 * (maxDrawableSegmentsPerSubRay + 1) * this.maxSubrays;\n    const maxIndices = 18 * maxDrawableSegmentsPerSubRay * this.maxSubrays;\n    this.vertices = new Float32Array(maxVerts * 3);\n    this.indices = new Uint32Array(maxIndices);\n\n    if (this.generateUVs) {\n      this.uvs = new Float32Array(maxVerts * 2);\n    } // Populate the mesh\n\n\n    this.fillMesh(0);\n    this.setIndex(new Uint32BufferAttribute(this.indices, 1));\n    this.positionAttribute = new Float32BufferAttribute(this.vertices, 3);\n    this.setAttribute('position', this.positionAttribute);\n\n    if (this.generateUVs) {\n      this.uvsAttribute = new Float32BufferAttribute(new Float32Array(this.uvs), 2);\n      this.setAttribute('uv', this.uvsAttribute);\n    }\n\n    if (!this.isStatic) {\n      this.index.usage = DynamicDrawUsage;\n      this.positionAttribute.usage = DynamicDrawUsage;\n\n      if (this.generateUVs) {\n        this.uvsAttribute.usage = DynamicDrawUsage;\n      }\n    } // Store buffers for later modification\n\n\n    this.vertices = this.positionAttribute.array;\n    this.indices = this.index.array;\n\n    if (this.generateUVs) {\n      this.uvs = this.uvsAttribute.array;\n    }\n  }\n\n  updateMesh(time) {\n    this.fillMesh(time);\n    this.drawRange.count = this.currentIndex;\n    this.index.needsUpdate = true;\n    this.positionAttribute.needsUpdate = true;\n\n    if (this.generateUVs) {\n      this.uvsAttribute.needsUpdate = true;\n    }\n  }\n\n  fillMesh(time) {\n    const scope = this;\n    this.currentVertex = 0;\n    this.currentIndex = 0;\n    this.currentCoordinate = 0;\n    this.currentUVCoordinate = 0;\n    this.fractalRay(time, function fillVertices(segment) {\n      const subray = scope.currentSubray;\n\n      if (time < subray.birthTime) {\n        //&& ( ! this.rayParameters.isEternal || scope.currentSubray.recursion > 0 ) ) {\n        return;\n      } else if (this.rayParameters.isEternal && scope.currentSubray.recursion == 0) {\n        // Eternal rays don't propagate nor vanish, but its subrays do\n        scope.createPrism(segment);\n        scope.onDecideSubrayCreation(segment, scope);\n      } else if (time < subray.endPropagationTime) {\n        if (scope.timeFraction >= segment.fraction0 * subray.propagationTimeFactor) {\n          // Ray propagation has arrived to this segment\n          scope.createPrism(segment);\n          scope.onDecideSubrayCreation(segment, scope);\n        }\n      } else if (time < subray.beginVanishingTime) {\n        // Ray is steady (nor propagating nor vanishing)\n        scope.createPrism(segment);\n        scope.onDecideSubrayCreation(segment, scope);\n      } else {\n        if (scope.timeFraction <= subray.vanishingTimeFactor + segment.fraction1 * (1 - subray.vanishingTimeFactor)) {\n          // Segment has not yet vanished\n          scope.createPrism(segment);\n        }\n\n        scope.onDecideSubrayCreation(segment, scope);\n      }\n    });\n  }\n\n  addNewSubray()\n  /*rayParameters*/\n  {\n    return this.subrays[this.numSubrays++];\n  }\n\n  initSubray(subray, rayParameters) {\n    subray.pos0.copy(rayParameters.sourceOffset);\n    subray.pos1.copy(rayParameters.destOffset);\n    subray.up0.copy(rayParameters.up0);\n    subray.up1.copy(rayParameters.up1);\n    subray.radius0 = rayParameters.radius0;\n    subray.radius1 = rayParameters.radius1;\n    subray.birthTime = rayParameters.birthTime;\n    subray.deathTime = rayParameters.deathTime;\n    subray.timeScale = rayParameters.timeScale;\n    subray.roughness = rayParameters.roughness;\n    subray.straightness = rayParameters.straightness;\n    subray.propagationTimeFactor = rayParameters.propagationTimeFactor;\n    subray.vanishingTimeFactor = rayParameters.vanishingTimeFactor;\n    subray.maxIterations = this.maxIterations;\n    subray.seed = rayParameters.noiseSeed !== undefined ? rayParameters.noiseSeed : 0;\n    subray.recursion = 0;\n  }\n\n  fractalRay(time, segmentCallback) {\n    this.time = time;\n    this.currentSegmentCallback = segmentCallback;\n    this.numSubrays = 0; // Add the top level subray\n\n    this.initSubray(this.addNewSubray(), this.rayParameters); // Process all subrays that are being generated until consuming all of them\n\n    for (let subrayIndex = 0; subrayIndex < this.numSubrays; subrayIndex++) {\n      const subray = this.subrays[subrayIndex];\n      this.currentSubray = subray;\n      this.randomGenerator.setSeed(subray.seed);\n      subray.endPropagationTime = MathUtils.lerp(subray.birthTime, subray.deathTime, subray.propagationTimeFactor);\n      subray.beginVanishingTime = MathUtils.lerp(subray.deathTime, subray.birthTime, 1 - subray.vanishingTimeFactor);\n      const random1 = this.randomGenerator.random;\n      subray.linPos0.set(random1(), random1(), random1()).multiplyScalar(1000);\n      subray.linPos1.set(random1(), random1(), random1()).multiplyScalar(1000);\n      this.timeFraction = (time - subray.birthTime) / (subray.deathTime - subray.birthTime);\n      this.currentSegmentIndex = 0;\n      this.isInitialSegment = true;\n      const segment = this.getNewSegment();\n      segment.iteration = 0;\n      segment.pos0.copy(subray.pos0);\n      segment.pos1.copy(subray.pos1);\n      segment.linPos0.copy(subray.linPos0);\n      segment.linPos1.copy(subray.linPos1);\n      segment.up0.copy(subray.up0);\n      segment.up1.copy(subray.up1);\n      segment.radius0 = subray.radius0;\n      segment.radius1 = subray.radius1;\n      segment.fraction0 = 0;\n      segment.fraction1 = 1;\n      segment.positionVariationFactor = 1 - subray.straightness;\n      this.subrayProbability = this.ramification * Math.pow(this.recursionProbability, subray.recursion) / (1 << subray.maxIterations);\n      this.fractalRayRecursive(segment);\n    }\n\n    this.currentSegmentCallback = null;\n    this.currentSubray = null;\n  }\n\n  fractalRayRecursive(segment) {\n    // Leave recursion condition\n    if (segment.iteration >= this.currentSubray.maxIterations) {\n      this.currentSegmentCallback(segment);\n      return;\n    } // Interpolation\n\n\n    this.forwards.subVectors(segment.pos1, segment.pos0);\n    let lForwards = this.forwards.length();\n\n    if (lForwards < 0.000001) {\n      this.forwards.set(0, 0, 0.01);\n      lForwards = this.forwards.length();\n    }\n\n    const middleRadius = (segment.radius0 + segment.radius1) * 0.5;\n    const middleFraction = (segment.fraction0 + segment.fraction1) * 0.5;\n    const timeDimension = this.time * this.currentSubray.timeScale * Math.pow(2, segment.iteration);\n    this.middlePos.lerpVectors(segment.pos0, segment.pos1, 0.5);\n    this.middleLinPos.lerpVectors(segment.linPos0, segment.linPos1, 0.5);\n    const p = this.middleLinPos; // Noise\n\n    this.newPos.set(this.simplexX.noise4d(p.x, p.y, p.z, timeDimension), this.simplexY.noise4d(p.x, p.y, p.z, timeDimension), this.simplexZ.noise4d(p.x, p.y, p.z, timeDimension));\n    this.newPos.multiplyScalar(segment.positionVariationFactor * lForwards);\n    this.newPos.add(this.middlePos); // Recursion\n\n    const newSegment1 = this.getNewSegment();\n    newSegment1.pos0.copy(segment.pos0);\n    newSegment1.pos1.copy(this.newPos);\n    newSegment1.linPos0.copy(segment.linPos0);\n    newSegment1.linPos1.copy(this.middleLinPos);\n    newSegment1.up0.copy(segment.up0);\n    newSegment1.up1.copy(segment.up1);\n    newSegment1.radius0 = segment.radius0;\n    newSegment1.radius1 = middleRadius;\n    newSegment1.fraction0 = segment.fraction0;\n    newSegment1.fraction1 = middleFraction;\n    newSegment1.positionVariationFactor = segment.positionVariationFactor * this.currentSubray.roughness;\n    newSegment1.iteration = segment.iteration + 1;\n    const newSegment2 = this.getNewSegment();\n    newSegment2.pos0.copy(this.newPos);\n    newSegment2.pos1.copy(segment.pos1);\n    newSegment2.linPos0.copy(this.middleLinPos);\n    newSegment2.linPos1.copy(segment.linPos1);\n    this.cross1.crossVectors(segment.up0, this.forwards.normalize());\n    newSegment2.up0.crossVectors(this.forwards, this.cross1).normalize();\n    newSegment2.up1.copy(segment.up1);\n    newSegment2.radius0 = middleRadius;\n    newSegment2.radius1 = segment.radius1;\n    newSegment2.fraction0 = middleFraction;\n    newSegment2.fraction1 = segment.fraction1;\n    newSegment2.positionVariationFactor = segment.positionVariationFactor * this.currentSubray.roughness;\n    newSegment2.iteration = segment.iteration + 1;\n    this.fractalRayRecursive(newSegment1);\n    this.fractalRayRecursive(newSegment2);\n  }\n\n  createPrism(segment) {\n    // Creates one triangular prism and its vertices at the segment\n    this.forwardsFill.subVectors(segment.pos1, segment.pos0).normalize();\n\n    if (this.isInitialSegment) {\n      this.currentCreateTriangleVertices(segment.pos0, segment.up0, this.forwardsFill, segment.radius0, 0);\n      this.isInitialSegment = false;\n    }\n\n    this.currentCreateTriangleVertices(segment.pos1, segment.up0, this.forwardsFill, segment.radius1, segment.fraction1);\n    this.createPrismFaces();\n  }\n\n  createTriangleVerticesWithoutUVs(pos, up, forwards, radius) {\n    // Create an equilateral triangle (only vertices)\n    this.side.crossVectors(up, forwards).multiplyScalar(radius * LightningStrike.COS30DEG);\n    this.down.copy(up).multiplyScalar(-radius * LightningStrike.SIN30DEG);\n    const p = this.vPos;\n    const v = this.vertices;\n    p.copy(pos).sub(this.side).add(this.down);\n    v[this.currentCoordinate++] = p.x;\n    v[this.currentCoordinate++] = p.y;\n    v[this.currentCoordinate++] = p.z;\n    p.copy(pos).add(this.side).add(this.down);\n    v[this.currentCoordinate++] = p.x;\n    v[this.currentCoordinate++] = p.y;\n    v[this.currentCoordinate++] = p.z;\n    p.copy(up).multiplyScalar(radius).add(pos);\n    v[this.currentCoordinate++] = p.x;\n    v[this.currentCoordinate++] = p.y;\n    v[this.currentCoordinate++] = p.z;\n    this.currentVertex += 3;\n  }\n\n  createTriangleVerticesWithUVs(pos, up, forwards, radius, u) {\n    // Create an equilateral triangle (only vertices)\n    this.side.crossVectors(up, forwards).multiplyScalar(radius * LightningStrike.COS30DEG);\n    this.down.copy(up).multiplyScalar(-radius * LightningStrike.SIN30DEG);\n    const p = this.vPos;\n    const v = this.vertices;\n    const uv = this.uvs;\n    p.copy(pos).sub(this.side).add(this.down);\n    v[this.currentCoordinate++] = p.x;\n    v[this.currentCoordinate++] = p.y;\n    v[this.currentCoordinate++] = p.z;\n    uv[this.currentUVCoordinate++] = u;\n    uv[this.currentUVCoordinate++] = 0;\n    p.copy(pos).add(this.side).add(this.down);\n    v[this.currentCoordinate++] = p.x;\n    v[this.currentCoordinate++] = p.y;\n    v[this.currentCoordinate++] = p.z;\n    uv[this.currentUVCoordinate++] = u;\n    uv[this.currentUVCoordinate++] = 0.5;\n    p.copy(up).multiplyScalar(radius).add(pos);\n    v[this.currentCoordinate++] = p.x;\n    v[this.currentCoordinate++] = p.y;\n    v[this.currentCoordinate++] = p.z;\n    uv[this.currentUVCoordinate++] = u;\n    uv[this.currentUVCoordinate++] = 1;\n    this.currentVertex += 3;\n  }\n\n  createPrismFaces(vertex\n  /*, index*/\n  ) {\n    const indices = this.indices;\n    var vertex = this.currentVertex - 6;\n    indices[this.currentIndex++] = vertex + 1;\n    indices[this.currentIndex++] = vertex + 2;\n    indices[this.currentIndex++] = vertex + 5;\n    indices[this.currentIndex++] = vertex + 1;\n    indices[this.currentIndex++] = vertex + 5;\n    indices[this.currentIndex++] = vertex + 4;\n    indices[this.currentIndex++] = vertex + 0;\n    indices[this.currentIndex++] = vertex + 1;\n    indices[this.currentIndex++] = vertex + 4;\n    indices[this.currentIndex++] = vertex + 0;\n    indices[this.currentIndex++] = vertex + 4;\n    indices[this.currentIndex++] = vertex + 3;\n    indices[this.currentIndex++] = vertex + 2;\n    indices[this.currentIndex++] = vertex + 0;\n    indices[this.currentIndex++] = vertex + 3;\n    indices[this.currentIndex++] = vertex + 2;\n    indices[this.currentIndex++] = vertex + 3;\n    indices[this.currentIndex++] = vertex + 5;\n  }\n\n  createDefaultSubrayCreationCallbacks() {\n    const random1 = this.randomGenerator.random;\n\n    this.onDecideSubrayCreation = (segment, lightningStrike) => {\n      // Decide subrays creation at parent (sub)ray segment\n      const subray = lightningStrike.currentSubray;\n      const period = lightningStrike.rayParameters.subrayPeriod;\n      const dutyCycle = lightningStrike.rayParameters.subrayDutyCycle;\n      const phase0 = lightningStrike.rayParameters.isEternal && subray.recursion == 0 ? -random1() * period : MathUtils.lerp(subray.birthTime, subray.endPropagationTime, segment.fraction0) - random1() * period;\n      const phase = lightningStrike.time - phase0;\n      const currentCycle = Math.floor(phase / period);\n      const childSubraySeed = random1() * (currentCycle + 1);\n      const isActive = phase % period <= dutyCycle * period;\n      let probability = 0;\n\n      if (isActive) {\n        probability = lightningStrike.subrayProbability; // Distribution test: probability *= segment.fraction0 > 0.5 && segment.fraction0 < 0.9 ? 1 / 0.4 : 0;\n      }\n\n      if (subray.recursion < lightningStrike.maxSubrayRecursion && lightningStrike.numSubrays < lightningStrike.maxSubrays && random1() < probability) {\n        const childSubray = lightningStrike.addNewSubray();\n        const parentSeed = lightningStrike.randomGenerator.getSeed();\n        childSubray.seed = childSubraySeed;\n        lightningStrike.randomGenerator.setSeed(childSubraySeed);\n        childSubray.recursion = subray.recursion + 1;\n        childSubray.maxIterations = Math.max(1, subray.maxIterations - 1);\n        childSubray.linPos0.set(random1(), random1(), random1()).multiplyScalar(1000);\n        childSubray.linPos1.set(random1(), random1(), random1()).multiplyScalar(1000);\n        childSubray.up0.copy(subray.up0);\n        childSubray.up1.copy(subray.up1);\n        childSubray.radius0 = segment.radius0 * lightningStrike.rayParameters.radius0Factor;\n        childSubray.radius1 = Math.min(lightningStrike.rayParameters.minRadius, segment.radius1 * lightningStrike.rayParameters.radius1Factor);\n        childSubray.birthTime = phase0 + currentCycle * period;\n        childSubray.deathTime = childSubray.birthTime + period * dutyCycle;\n\n        if (!lightningStrike.rayParameters.isEternal && subray.recursion == 0) {\n          childSubray.birthTime = Math.max(childSubray.birthTime, subray.birthTime);\n          childSubray.deathTime = Math.min(childSubray.deathTime, subray.deathTime);\n        }\n\n        childSubray.timeScale = subray.timeScale * 2;\n        childSubray.roughness = subray.roughness;\n        childSubray.straightness = subray.straightness;\n        childSubray.propagationTimeFactor = subray.propagationTimeFactor;\n        childSubray.vanishingTimeFactor = subray.vanishingTimeFactor;\n        lightningStrike.onSubrayCreation(segment, subray, childSubray, lightningStrike);\n        lightningStrike.randomGenerator.setSeed(parentSeed);\n      }\n    };\n\n    const vec1Pos = new Vector3();\n    const vec2Forward = new Vector3();\n    const vec3Side = new Vector3();\n    const vec4Up = new Vector3();\n\n    this.onSubrayCreation = (segment, parentSubray, childSubray, lightningStrike) => {\n      // Decide childSubray origin and destination positions (pos0 and pos1) and possibly other properties of childSubray\n      // Just use the default cone position generator\n      lightningStrike.subrayCylinderPosition(segment, parentSubray, childSubray, 0.5, 0.6, 0.2);\n    };\n\n    this.subrayConePosition = (segment, parentSubray, childSubray, heightFactor, sideWidthFactor, minSideWidthFactor) => {\n      // Sets childSubray pos0 and pos1 in a cone\n      childSubray.pos0.copy(segment.pos0);\n      vec1Pos.subVectors(parentSubray.pos1, parentSubray.pos0);\n      vec2Forward.copy(vec1Pos).normalize();\n      vec1Pos.multiplyScalar(segment.fraction0 + (1 - segment.fraction0) * (random1() * heightFactor));\n      const length = vec1Pos.length();\n      vec3Side.crossVectors(parentSubray.up0, vec2Forward);\n      const angle = 2 * Math.PI * random1();\n      vec3Side.multiplyScalar(Math.cos(angle));\n      vec4Up.copy(parentSubray.up0).multiplyScalar(Math.sin(angle));\n      childSubray.pos1.copy(vec3Side).add(vec4Up).multiplyScalar(length * sideWidthFactor * (minSideWidthFactor + random1() * (1 - minSideWidthFactor))).add(vec1Pos).add(parentSubray.pos0);\n    };\n\n    this.subrayCylinderPosition = (segment, parentSubray, childSubray, heightFactor, sideWidthFactor, minSideWidthFactor) => {\n      // Sets childSubray pos0 and pos1 in a cylinder\n      childSubray.pos0.copy(segment.pos0);\n      vec1Pos.subVectors(parentSubray.pos1, parentSubray.pos0);\n      vec2Forward.copy(vec1Pos).normalize();\n      vec1Pos.multiplyScalar(segment.fraction0 + (1 - segment.fraction0) * ((2 * random1() - 1) * heightFactor));\n      const length = vec1Pos.length();\n      vec3Side.crossVectors(parentSubray.up0, vec2Forward);\n      const angle = 2 * Math.PI * random1();\n      vec3Side.multiplyScalar(Math.cos(angle));\n      vec4Up.copy(parentSubray.up0).multiplyScalar(Math.sin(angle));\n      childSubray.pos1.copy(vec3Side).add(vec4Up).multiplyScalar(length * sideWidthFactor * (minSideWidthFactor + random1() * (1 - minSideWidthFactor))).add(vec1Pos).add(parentSubray.pos0);\n    };\n  }\n\n  createSubray() {\n    return {\n      seed: 0,\n      maxIterations: 0,\n      recursion: 0,\n      pos0: new Vector3(),\n      pos1: new Vector3(),\n      linPos0: new Vector3(),\n      linPos1: new Vector3(),\n      up0: new Vector3(),\n      up1: new Vector3(),\n      radius0: 0,\n      radius1: 0,\n      birthTime: 0,\n      deathTime: 0,\n      timeScale: 0,\n      roughness: 0,\n      straightness: 0,\n      propagationTimeFactor: 0,\n      vanishingTimeFactor: 0,\n      endPropagationTime: 0,\n      beginVanishingTime: 0\n    };\n  }\n\n  createSegment() {\n    return {\n      iteration: 0,\n      pos0: new Vector3(),\n      pos1: new Vector3(),\n      linPos0: new Vector3(),\n      linPos1: new Vector3(),\n      up0: new Vector3(),\n      up1: new Vector3(),\n      radius0: 0,\n      radius1: 0,\n      fraction0: 0,\n      fraction1: 0,\n      positionVariationFactor: 0\n    };\n  }\n\n  getNewSegment() {\n    return this.raySegments[this.currentSegmentIndex++];\n  }\n\n  copy(source) {\n    super.copy(source);\n    this.init(LightningStrike.copyParameters({}, source.rayParameters));\n    return this;\n  }\n\n  clone() {\n    return new this.constructor(LightningStrike.copyParameters({}, this.rayParameters));\n  }\n\n}\n\nLightningStrike.prototype.isLightningStrike = true; // Ray states\n\nLightningStrike.RAY_INITIALIZED = 0;\nLightningStrike.RAY_UNBORN = 1;\nLightningStrike.RAY_PROPAGATING = 2;\nLightningStrike.RAY_STEADY = 3;\nLightningStrike.RAY_VANISHING = 4;\nLightningStrike.RAY_EXTINGUISHED = 5;\nLightningStrike.COS30DEG = Math.cos(30 * Math.PI / 180);\nLightningStrike.SIN30DEG = Math.sin(30 * Math.PI / 180);\n\nLightningStrike.createRandomGenerator = () => {\n  const numSeeds = 2053;\n  const seeds = [];\n\n  for (let i = 0; i < numSeeds; i++) {\n    seeds.push(Math.random());\n  }\n\n  const generator = {\n    currentSeed: 0,\n    random: function () {\n      const value = seeds[generator.currentSeed];\n      generator.currentSeed = (generator.currentSeed + 1) % numSeeds;\n      return value;\n    },\n    getSeed: function () {\n      return generator.currentSeed / numSeeds;\n    },\n    setSeed: function (seed) {\n      generator.currentSeed = Math.floor(seed * numSeeds) % numSeeds;\n    }\n  };\n  return generator;\n};\n\nLightningStrike.copyParameters = (dest, source) => {\n  source = source || {};\n  dest = dest || {};\n\n  const vecCopy = v => {\n    if (source === dest) {\n      return v;\n    } else {\n      return v.clone();\n    }\n  };\n\n  dest.sourceOffset = source.sourceOffset !== undefined ? vecCopy(source.sourceOffset) : new Vector3(0, 100, 0), dest.destOffset = source.destOffset !== undefined ? vecCopy(source.destOffset) : new Vector3(0, 0, 0), dest.timeScale = source.timeScale !== undefined ? source.timeScale : 1, dest.roughness = source.roughness !== undefined ? source.roughness : 0.9, dest.straightness = source.straightness !== undefined ? source.straightness : 0.7, dest.up0 = source.up0 !== undefined ? vecCopy(source.up0) : new Vector3(0, 0, 1);\n  dest.up1 = source.up1 !== undefined ? vecCopy(source.up1) : new Vector3(0, 0, 1), dest.radius0 = source.radius0 !== undefined ? source.radius0 : 1, dest.radius1 = source.radius1 !== undefined ? source.radius1 : 1, dest.radius0Factor = source.radius0Factor !== undefined ? source.radius0Factor : 0.5, dest.radius1Factor = source.radius1Factor !== undefined ? source.radius1Factor : 0.2, dest.minRadius = source.minRadius !== undefined ? source.minRadius : 0.2, // These parameters should not be changed after lightning creation. They can be changed but the ray will change its form abruptly:\n  dest.isEternal = source.isEternal !== undefined ? source.isEternal : source.birthTime === undefined || source.deathTime === undefined, dest.birthTime = source.birthTime, dest.deathTime = source.deathTime, dest.propagationTimeFactor = source.propagationTimeFactor !== undefined ? source.propagationTimeFactor : 0.1, dest.vanishingTimeFactor = source.vanishingTimeFactor !== undefined ? source.vanishingTimeFactor : 0.9, dest.subrayPeriod = source.subrayPeriod !== undefined ? source.subrayPeriod : 4, dest.subrayDutyCycle = source.subrayDutyCycle !== undefined ? source.subrayDutyCycle : 0.6; // These parameters cannot change after lightning creation:\n\n  dest.maxIterations = source.maxIterations !== undefined ? source.maxIterations : 9;\n  dest.isStatic = source.isStatic !== undefined ? source.isStatic : false;\n  dest.ramification = source.ramification !== undefined ? source.ramification : 5;\n  dest.maxSubrayRecursion = source.maxSubrayRecursion !== undefined ? source.maxSubrayRecursion : 3;\n  dest.recursionProbability = source.recursionProbability !== undefined ? source.recursionProbability : 0.6;\n  dest.generateUVs = source.generateUVs !== undefined ? source.generateUVs : false;\n  dest.randomGenerator = source.randomGenerator, dest.noiseSeed = source.noiseSeed, dest.onDecideSubrayCreation = source.onDecideSubrayCreation, dest.onSubrayCreation = source.onSubrayCreation;\n  return dest;\n};\n\nexport { LightningStrike };\n"],"mappings":";;;;;;AAAA,SAASA,cAAc,EAAEC,OAAO,EAAEC,qBAAqB,EAAEC,sBAAsB,EAAEC,gBAAgB,EAAEC,SAAS,QAAQ,OAAO;AAC3H,SAASC,YAAY,QAAQ,yBAAyB;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnGA,IAqGMC,eAAe,0BAAAC,eAAA;EAAAC,SAAA,CAAAF,eAAA,EAAAC,eAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,eAAA;EACnB,SAAAA,gBAAYK,aAAa,EAAE;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAP,eAAA;IACzBM,KAAA,GAAAH,MAAA,CAAAK,IAAA;IACAF,KAAA,CAAKG,IAAI,GAAG,iBAAiB,CAAC,CAAC;;IAE/BJ,aAAa,GAAGA,aAAa,IAAI,CAAC,CAAC;IACnCC,KAAA,CAAKI,IAAI,CAACV,eAAe,CAACW,cAAc,CAACN,aAAa,EAAEA,aAAa,CAAC,CAAC,CAAC,CAAC;;IAEzEC,KAAA,CAAKM,UAAU,EAAE;IAAC,OAAAN,KAAA;EACpB;EAACO,YAAA,CAAAb,eAAA;IAAAc,GAAA;IAAAC,KAAA,EAED,SAAAC,OAAOC,IAAI,EAAE;MACX,IAAI,IAAI,CAACC,QAAQ,EAAE;MAEnB,IAAI,IAAI,CAACb,aAAa,CAACc,SAAS,IAAI,IAAI,CAA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}