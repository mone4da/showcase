{"ast":null,"code":"import { Color, DepthTexture, UnsignedShortType, NearestFilter, WebGLRenderTarget, LinearFilter, RGBAFormat, HalfFloatType, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, MeshBasicMaterial, SrcAlphaFactor, OneMinusSrcAlphaFactor, AddEquation, NormalBlending } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { SSRShader, SSRBlurShader, SSRDepthShader } from '../shaders/SSRShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nvar SSRPass = function SSRPass(_ref) {\n  var renderer = _ref.renderer,\n    scene = _ref.scene,\n    camera = _ref.camera,\n    width = _ref.width,\n    height = _ref.height,\n    selects = _ref.selects,\n    encoding = _ref.encoding,\n    _ref$isPerspectiveCam = _ref.isPerspectiveCamera,\n    isPerspectiveCamera = _ref$isPerspectiveCam === void 0 ? true : _ref$isPerspectiveCam,\n    _ref$isBouncing = _ref.isBouncing,\n    isBouncing = _ref$isBouncing === void 0 ? false : _ref$isBouncing,\n    _ref$morphTargets = _ref.morphTargets,\n    morphTargets = _ref$morphTargets === void 0 ? false : _ref$morphTargets,\n    groundReflector = _ref.groundReflector;\n  this.width = width !== undefined ? width : 512;\n  this.height = height !== undefined ? height : 512;\n  this.clear = true;\n  this.renderer = renderer;\n  this.scene = scene;\n  this.camera = camera;\n  this.groundReflector = groundReflector;\n  this.opacity = SSRShader.uniforms.opacity.value;\n  this.output = 0;\n  this.maxDistance = SSRShader.uniforms.maxDistance.value;\n  this.surfDist = SSRShader.uniforms.surfDist.value;\n  this.encoding = encoding;\n  this.tempColor = new Color();\n  this._selects = selects;\n  this.isSelective = Array.isArray(this._selects);\n  Object.defineProperty(this, 'selects', {\n    get: function get() {\n      return this._selects;\n    },\n    set: function set(val) {\n      if (this._selects === val) return;\n      this._selects = val;\n      if (Array.isArray(val)) {\n        this.isSelective = true;\n        this.ssrMaterial.defines.isSelective = true;\n        this.ssrMaterial.needsUpdate = true;\n      } else {\n        this.isSelective = false;\n        this.ssrMaterial.defines.isSelective = false;\n        this.ssrMaterial.needsUpdate = true;\n      }\n    }\n  });\n  this._isBouncing = isBouncing; ///todo: don't need defineProperty\n\n  Object.defineProperty(this, 'isBouncing', {\n    get: function get() {\n      return this._isBouncing;\n    },\n    set: function set(val) {\n      if (this._isBouncing === val) return;\n      this._isBouncing = val;\n      if (val) {\n        this.ssrMaterial.uniforms['tDiffuse'].value = this.prevRenderTarget.texture;\n      } else {\n        this.ssrMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n      }\n    }\n  });\n  this.isBlur = true;\n  this._isDistanceAttenuation = SSRShader.defines.isDistanceAttenuation;\n  Object.defineProperty(this, 'isDistanceAttenuation', {\n    get: function get() {\n      return this._isDistanceAttenuation;\n    },\n    set: function set(val) {\n      if (this._isDistanceAttenuation === val) return;\n      this._isDistanceAttenuation = val;\n      this.ssrMaterial.defines.isDistanceAttenuation = val;\n      this.ssrMaterial.needsUpdate = true;\n    }\n  });\n  this._isFresnel = SSRShader.defines.isFresnel;\n  Object.defineProperty(this, 'isFresnel', {\n    get: function get() {\n      return this._isFresnel;\n    },\n    set: function set(val) {\n      if (this._isFresnel === val) return;\n      this._isFresnel = val;\n      this.ssrMaterial.defines.isFresnel = val;\n      this.ssrMaterial.needsUpdate = true;\n    }\n  });\n  this._isInfiniteThick = SSRShader.defines.isInfiniteThick;\n  Object.defineProperty(this, 'isInfiniteThick', {\n    get: function get() {\n      return this._isInfiniteThick;\n    },\n    set: function set(val) {\n      if (this._isInfiniteThick === val) return;\n      this._isInfiniteThick = val;\n      this.ssrMaterial.defines.isInfiniteThick = val;\n      this.ssrMaterial.needsUpdate = true;\n    }\n  });\n  this.thickTolerance = SSRShader.uniforms.thickTolerance.value; // beauty render target with depth buffer\n\n  var depthTexture = new DepthTexture();\n  depthTexture.type = UnsignedShortType;\n  depthTexture.minFilter = NearestFilter;\n  depthTexture.maxFilter = NearestFilter;\n  this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBAFormat,\n    depthTexture: depthTexture,\n    depthBuffer: true\n  }); //for bouncing\n\n  this.prevRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBAFormat\n  }); // normal render target\n\n  this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: NearestFilter,\n    magFilter: NearestFilter,\n    format: RGBAFormat,\n    type: HalfFloatType\n  }); // metalness render target\n  // if (this.isSelective) {\n\n  this.metalnessRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: NearestFilter,\n    magFilter: NearestFilter,\n    format: RGBAFormat\n  }); // }\n  // ssr render target\n\n  this.ssrRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBAFormat\n  });\n  this.blurRenderTarget = this.ssrRenderTarget.clone();\n  this.blurRenderTarget2 = this.ssrRenderTarget.clone(); // this.blurRenderTarget3 = this.ssrRenderTarget.clone();\n  // ssr material\n\n  if (SSRShader === undefined) {\n    console.error('THREE.SSRPass: The pass relies on SSRShader.');\n  }\n  this.ssrMaterial = new ShaderMaterial({\n    defines: Object.assign({\n      MAX_STEP: Math.sqrt(window.innerWidth * window.innerWidth + window.innerHeight * window.innerHeight)\n    }, SSRShader.defines),\n    uniforms: UniformsUtils.clone(SSRShader.uniforms),\n    vertexShader: SSRShader.vertexShader,\n    fragmentShader: SSRShader.fragmentShader,\n    blending: NoBlending\n  });\n  if (!isPerspectiveCamera) {\n    this.ssrMaterial.defines.isPerspectiveCamera = isPerspectiveCamera;\n    this.ssrMaterial.needsUpdate = true;\n  }\n  this.ssrMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n  this.ssrMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture; // if (this.isSelective) {\n\n  this.ssrMaterial.defines.isSelective = this.isSelective;\n  this.ssrMaterial.needsUpdate = true;\n  this.ssrMaterial.uniforms['tMetalness'].value = this.metalnessRenderTarget.texture; // }\n\n  this.ssrMaterial.uniforms['tDepth'].value = this.beautyRenderTarget.depthTexture;\n  this.ssrMaterial.uniforms['cameraNear'].value = this.camera.near;\n  this.ssrMaterial.uniforms['cameraFar'].value = this.camera.far;\n  this.ssrMaterial.uniforms['surfDist'].value = this.surfDist;\n  this.ssrMaterial.uniforms['resolution'].value.set(this.width, this.height);\n  this.ssrMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n  this.ssrMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse); // normal material\n\n  this.normalMaterial = new MeshNormalMaterial({\n    morphTargets: morphTargets\n  });\n  this.normalMaterial.blending = NoBlending; // if (this.isSelective) {\n  // metalnessOn material\n\n  this.metalnessOnMaterial = new MeshBasicMaterial({\n    color: 'white'\n  }); // metalnessOff material\n\n  this.metalnessOffMaterial = new MeshBasicMaterial({\n    color: 'black'\n  }); // }\n  // blur material\n\n  this.blurMaterial = new ShaderMaterial({\n    defines: Object.assign({}, SSRBlurShader.defines),\n    uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n    vertexShader: SSRBlurShader.vertexShader,\n    fragmentShader: SSRBlurShader.fragmentShader\n  });\n  this.blurMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture;\n  this.blurMaterial.uniforms['resolution'].value.set(this.width, this.height); // blur material 2\n\n  this.blurMaterial2 = new ShaderMaterial({\n    defines: Object.assign({}, SSRBlurShader.defines),\n    uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n    vertexShader: SSRBlurShader.vertexShader,\n    fragmentShader: SSRBlurShader.fragmentShader\n  });\n  this.blurMaterial2.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n  this.blurMaterial2.uniforms['resolution'].value.set(this.width, this.height); // // blur material 3\n  // this.blurMaterial3 = new ShaderMaterial({\n  //   defines: Object.assign({}, SSRBlurShader.defines),\n  //   uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n  //   vertexShader: SSRBlurShader.vertexShader,\n  //   fragmentShader: SSRBlurShader.fragmentShader\n  // });\n  // this.blurMaterial3.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture;\n  // this.blurMaterial3.uniforms['resolution'].value.set(this.width, this.height);\n  // material for rendering the depth\n\n  this.depthRenderMaterial = new ShaderMaterial({\n    defines: Object.assign({}, SSRDepthShader.defines),\n    uniforms: UniformsUtils.clone(SSRDepthShader.uniforms),\n    vertexShader: SSRDepthShader.vertexShader,\n    fragmentShader: SSRDepthShader.fragmentShader,\n    blending: NoBlending\n  });\n  this.depthRenderMaterial.uniforms['tDepth'].value = this.beautyRenderTarget.depthTexture;\n  this.depthRenderMaterial.uniforms['cameraNear'].value = this.camera.near;\n  this.depthRenderMaterial.uniforms['cameraFar'].value = this.camera.far; // material for rendering the content of a render target\n\n  this.copyMaterial = new ShaderMaterial({\n    uniforms: UniformsUtils.clone(CopyShader.uniforms),\n    vertexShader: CopyShader.vertexShader,\n    fragmentShader: CopyShader.fragmentShader,\n    transparent: true,\n    depthTest: false,\n    depthWrite: false,\n    blendSrc: SrcAlphaFactor,\n    blendDst: OneMinusSrcAlphaFactor,\n    blendEquation: AddEquation,\n    blendSrcAlpha: SrcAlphaFactor,\n    blendDstAlpha: OneMinusSrcAlphaFactor,\n    blendEquationAlpha: AddEquation // premultipliedAlpha:true,\n  });\n\n  this.fsQuad = new FullScreenQuad(null);\n  this.originalClearColor = new Color();\n};\nSSRPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: SSRPass,\n  dispose: function dispose() {\n    // dispose render targets\n    this.beautyRenderTarget.dispose();\n    this.prevRenderTarget.dispose();\n    this.normalRenderTarget.dispose(); // if (this.isSelective)\n\n    this.metalnessRenderTarget.dispose();\n    this.ssrRenderTarget.dispose();\n    this.blurRenderTarget.dispose();\n    this.blurRenderTarget2.dispose(); // this.blurRenderTarget3.dispose();\n    // dispose materials\n\n    this.normalMaterial.dispose(); // if (this.isSelective) {\n\n    this.metalnessOnMaterial.dispose();\n    this.metalnessOffMaterial.dispose(); // }\n\n    this.blurMaterial.dispose();\n    this.blurMaterial2.dispose();\n    this.copyMaterial.dispose();\n    this.depthRenderMaterial.dispose(); // dipsose full screen quad\n\n    this.fsQuad.dispose();\n  },\n  render: function render(renderer, writeBuffer\n  /*, readBuffer, deltaTime, maskActive */) {\n    // render beauty and depth\n    if (this.encoding) this.beautyRenderTarget.texture.encoding = this.encoding;\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    if (this.groundReflector) {\n      this.groundReflector.doRender(this.renderer, this.scene, this.camera);\n      this.groundReflector.visible = true;\n    }\n    renderer.render(this.scene, this.camera);\n    if (this.groundReflector) this.groundReflector.visible = false; // render normals\n\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0, 0); // render metalnesses\n\n    if (this.isSelective) {\n      this.renderMetalness(renderer, this.metalnessOnMaterial, this.metalnessRenderTarget, 0, 0);\n    } // render SSR\n\n    this.ssrMaterial.uniforms['opacity'].value = this.opacity;\n    this.ssrMaterial.uniforms['maxDistance'].value = this.maxDistance;\n    this.ssrMaterial.uniforms['surfDist'].value = this.surfDist;\n    this.ssrMaterial.uniforms['thickTolerance'].value = this.thickTolerance;\n    this.renderPass(renderer, this.ssrMaterial, this.ssrRenderTarget); // render blur\n\n    if (this.isBlur) {\n      this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget);\n      this.renderPass(renderer, this.blurMaterial2, this.blurRenderTarget2); // this.renderPass(renderer, this.blurMaterial3, this.blurRenderTarget3);\n    } // output result to screen\n\n    switch (this.output) {\n      case SSRPass.OUTPUT.Default:\n        if (this.isBouncing) {\n          this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          if (this.isBlur) this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          this.copyMaterial.uniforms['tDiffuse'].value = this.prevRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        } else {\n          this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          if (this.isBlur) this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        }\n        break;\n      case SSRPass.OUTPUT.SSR:\n        if (this.isBlur) this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        if (this.isBouncing) {\n          if (this.isBlur) this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          this.copyMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n        }\n        break;\n      case SSRPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case SSRPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case SSRPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case SSRPass.OUTPUT.Metalness:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.metalnessRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      default:\n        console.warn('THREE.SSRPass: Unknown output type.');\n    }\n  },\n  renderPass: function renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    var originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget); // setup pass state\n\n    renderer.autoClear = false;\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer); // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  renderOverride: function renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    var originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null; // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  renderMetalness: function renderMetalness(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    var _this = this;\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    var originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n    this.scene.traverseVisible(function (child) {\n      child._SSRPassMaterialBack = child.material;\n      if (_this._selects.includes(child)) {\n        child.material = _this.metalnessOnMaterial;\n      } else {\n        child.material = _this.metalnessOffMaterial;\n      }\n    });\n    renderer.render(this.scene, this.camera);\n    this.scene.traverseVisible(function (child) {\n      child.material = child._SSRPassMaterialBack;\n    }); // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  setSize: function setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.ssrMaterial.defines.MAX_STEP = Math.sqrt(width * width + height * height);\n    this.ssrMaterial.needsUpdate = true;\n    this.beautyRenderTarget.setSize(width, height);\n    this.prevRenderTarget.setSize(width, height);\n    this.ssrRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height); // if (this.isSelective)\n\n    this.metalnessRenderTarget.setSize(width, height);\n    this.blurRenderTarget.setSize(width, height);\n    this.blurRenderTarget2.setSize(width, height); // this.blurRenderTarget3.setSize(width, height);\n\n    this.ssrMaterial.uniforms['resolution'].value.set(width, height);\n    this.ssrMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n    this.ssrMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n    this.blurMaterial.uniforms['resolution'].value.set(width, height);\n    this.blurMaterial2.uniforms['resolution'].value.set(width, height);\n  }\n});\nSSRPass.OUTPUT = {\n  Default: 0,\n  SSR: 1,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5,\n  Metalness: 7\n};\nexport { SSRPass };","map":{"version":3,"names":["Color","DepthTexture","UnsignedShortType","NearestFilter","WebGLRenderTarget","LinearFilter","RGBAFormat","HalfFloatType","ShaderMaterial","UniformsUtils","NoBlending","MeshNormalMaterial","MeshBasicMaterial","SrcAlphaFactor","OneMinusSrcAlphaFactor","AddEquation","NormalBlending","FullScreenQuad","Pass","SSRShader","SSRBlurShader","SSRDepthShader","CopyShader","SSRPass","_ref","renderer","scene","camera","width","height","selects","encoding","_ref$isPerspectiveCam","isPerspectiveCamera","_ref$isBouncing","isBouncing","_ref$morphTargets","morphTargets","groundReflector","undefined","clear","opacity","uniforms","value","output","maxDistance","surfDist","tempColor","_selects","isSelective","Array","isArray","Object","defineProperty","get","set","val","ssrMaterial","defines","needsUpdate","_isBouncing","prevRenderTarget","texture","beautyRenderTarget","isBlur","_isDistanceAttenuation","isDistanceAttenuation","_isFresnel","isFresnel","_isInfiniteThick","isInfiniteThick","thickTolerance","depthTexture","type","minFilter","maxFilter","magFilter","format","depthBuffer","normalRenderTarget","metalnessRenderTarget","ssrRenderTarget","blurRenderTarget","clone","blurRenderTarget2","console","error","assign","MAX_STEP","Math","sqrt","window","innerWidth","innerHeight","vertexShader","fragmentShader","blending","near","far","copy","projectionMatrix","projectionMatrixInverse","normalMaterial","metalnessOnMaterial","color","metalnessOffMaterial","blurMaterial","blurMaterial2","depthRenderMaterial","copyMaterial","transparent","depthTest","depthWrite","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","fsQuad","originalClearColor","prototype","create","constructor","dispose","render","writeBuffer","setRenderTarget","doRender","visible","renderOverride","renderMetalness","renderPass","OUTPUT","Default","renderToScreen","SSR","Beauty","Depth","Normal","Metalness","warn","passMaterial","renderTarget","clearColor","clearAlpha","getClearColor","originalClearAlpha","getClearAlpha","originalAutoClear","autoClear","setClearColor","setClearAlpha","material","overrideMaterial","_this","traverseVisible","child","_SSRPassMaterialBack","includes","setSize"],"sources":["/home/samuel/experiment/3d/farm/frontend/node_modules/three-stdlib/postprocessing/SSRPass.js"],"sourcesContent":["import { Color, DepthTexture, UnsignedShortType, NearestFilter, WebGLRenderTarget, LinearFilter, RGBAFormat, HalfFloatType, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, MeshBasicMaterial, SrcAlphaFactor, OneMinusSrcAlphaFactor, AddEquation, NormalBlending } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { SSRShader, SSRBlurShader, SSRDepthShader } from '../shaders/SSRShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\nvar SSRPass = function ({\n  renderer,\n  scene,\n  camera,\n  width,\n  height,\n  selects,\n  encoding,\n  isPerspectiveCamera = true,\n  isBouncing = false,\n  morphTargets = false,\n  groundReflector\n}) {\n  this.width = width !== undefined ? width : 512;\n  this.height = height !== undefined ? height : 512;\n  this.clear = true;\n  this.renderer = renderer;\n  this.scene = scene;\n  this.camera = camera;\n  this.groundReflector = groundReflector;\n  this.opacity = SSRShader.uniforms.opacity.value;\n  this.output = 0;\n  this.maxDistance = SSRShader.uniforms.maxDistance.value;\n  this.surfDist = SSRShader.uniforms.surfDist.value;\n  this.encoding = encoding;\n  this.tempColor = new Color();\n  this._selects = selects;\n  this.isSelective = Array.isArray(this._selects);\n  Object.defineProperty(this, 'selects', {\n    get() {\n      return this._selects;\n    },\n\n    set(val) {\n      if (this._selects === val) return;\n      this._selects = val;\n\n      if (Array.isArray(val)) {\n        this.isSelective = true;\n        this.ssrMaterial.defines.isSelective = true;\n        this.ssrMaterial.needsUpdate = true;\n      } else {\n        this.isSelective = false;\n        this.ssrMaterial.defines.isSelective = false;\n        this.ssrMaterial.needsUpdate = true;\n      }\n    }\n\n  });\n  this._isBouncing = isBouncing; ///todo: don't need defineProperty\n\n  Object.defineProperty(this, 'isBouncing', {\n    get() {\n      return this._isBouncing;\n    },\n\n    set(val) {\n      if (this._isBouncing === val) return;\n      this._isBouncing = val;\n\n      if (val) {\n        this.ssrMaterial.uniforms['tDiffuse'].value = this.prevRenderTarget.texture;\n      } else {\n        this.ssrMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n      }\n    }\n\n  });\n  this.isBlur = true;\n  this._isDistanceAttenuation = SSRShader.defines.isDistanceAttenuation;\n  Object.defineProperty(this, 'isDistanceAttenuation', {\n    get() {\n      return this._isDistanceAttenuation;\n    },\n\n    set(val) {\n      if (this._isDistanceAttenuation === val) return;\n      this._isDistanceAttenuation = val;\n      this.ssrMaterial.defines.isDistanceAttenuation = val;\n      this.ssrMaterial.needsUpdate = true;\n    }\n\n  });\n  this._isFresnel = SSRShader.defines.isFresnel;\n  Object.defineProperty(this, 'isFresnel', {\n    get() {\n      return this._isFresnel;\n    },\n\n    set(val) {\n      if (this._isFresnel === val) return;\n      this._isFresnel = val;\n      this.ssrMaterial.defines.isFresnel = val;\n      this.ssrMaterial.needsUpdate = true;\n    }\n\n  });\n  this._isInfiniteThick = SSRShader.defines.isInfiniteThick;\n  Object.defineProperty(this, 'isInfiniteThick', {\n    get() {\n      return this._isInfiniteThick;\n    },\n\n    set(val) {\n      if (this._isInfiniteThick === val) return;\n      this._isInfiniteThick = val;\n      this.ssrMaterial.defines.isInfiniteThick = val;\n      this.ssrMaterial.needsUpdate = true;\n    }\n\n  });\n  this.thickTolerance = SSRShader.uniforms.thickTolerance.value; // beauty render target with depth buffer\n\n  var depthTexture = new DepthTexture();\n  depthTexture.type = UnsignedShortType;\n  depthTexture.minFilter = NearestFilter;\n  depthTexture.maxFilter = NearestFilter;\n  this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBAFormat,\n    depthTexture: depthTexture,\n    depthBuffer: true\n  }); //for bouncing\n\n  this.prevRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBAFormat\n  }); // normal render target\n\n  this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: NearestFilter,\n    magFilter: NearestFilter,\n    format: RGBAFormat,\n    type: HalfFloatType\n  }); // metalness render target\n  // if (this.isSelective) {\n\n  this.metalnessRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: NearestFilter,\n    magFilter: NearestFilter,\n    format: RGBAFormat\n  }); // }\n  // ssr render target\n\n  this.ssrRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBAFormat\n  });\n  this.blurRenderTarget = this.ssrRenderTarget.clone();\n  this.blurRenderTarget2 = this.ssrRenderTarget.clone(); // this.blurRenderTarget3 = this.ssrRenderTarget.clone();\n  // ssr material\n\n  if (SSRShader === undefined) {\n    console.error('THREE.SSRPass: The pass relies on SSRShader.');\n  }\n\n  this.ssrMaterial = new ShaderMaterial({\n    defines: Object.assign({\n      MAX_STEP: Math.sqrt(window.innerWidth * window.innerWidth + window.innerHeight * window.innerHeight)\n    }, SSRShader.defines),\n    uniforms: UniformsUtils.clone(SSRShader.uniforms),\n    vertexShader: SSRShader.vertexShader,\n    fragmentShader: SSRShader.fragmentShader,\n    blending: NoBlending\n  });\n\n  if (!isPerspectiveCamera) {\n    this.ssrMaterial.defines.isPerspectiveCamera = isPerspectiveCamera;\n    this.ssrMaterial.needsUpdate = true;\n  }\n\n  this.ssrMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n  this.ssrMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture; // if (this.isSelective) {\n\n  this.ssrMaterial.defines.isSelective = this.isSelective;\n  this.ssrMaterial.needsUpdate = true;\n  this.ssrMaterial.uniforms['tMetalness'].value = this.metalnessRenderTarget.texture; // }\n\n  this.ssrMaterial.uniforms['tDepth'].value = this.beautyRenderTarget.depthTexture;\n  this.ssrMaterial.uniforms['cameraNear'].value = this.camera.near;\n  this.ssrMaterial.uniforms['cameraFar'].value = this.camera.far;\n  this.ssrMaterial.uniforms['surfDist'].value = this.surfDist;\n  this.ssrMaterial.uniforms['resolution'].value.set(this.width, this.height);\n  this.ssrMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n  this.ssrMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse); // normal material\n\n  this.normalMaterial = new MeshNormalMaterial({\n    morphTargets\n  });\n  this.normalMaterial.blending = NoBlending; // if (this.isSelective) {\n  // metalnessOn material\n\n  this.metalnessOnMaterial = new MeshBasicMaterial({\n    color: 'white'\n  }); // metalnessOff material\n\n  this.metalnessOffMaterial = new MeshBasicMaterial({\n    color: 'black'\n  }); // }\n  // blur material\n\n  this.blurMaterial = new ShaderMaterial({\n    defines: Object.assign({}, SSRBlurShader.defines),\n    uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n    vertexShader: SSRBlurShader.vertexShader,\n    fragmentShader: SSRBlurShader.fragmentShader\n  });\n  this.blurMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture;\n  this.blurMaterial.uniforms['resolution'].value.set(this.width, this.height); // blur material 2\n\n  this.blurMaterial2 = new ShaderMaterial({\n    defines: Object.assign({}, SSRBlurShader.defines),\n    uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n    vertexShader: SSRBlurShader.vertexShader,\n    fragmentShader: SSRBlurShader.fragmentShader\n  });\n  this.blurMaterial2.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n  this.blurMaterial2.uniforms['resolution'].value.set(this.width, this.height); // // blur material 3\n  // this.blurMaterial3 = new ShaderMaterial({\n  //   defines: Object.assign({}, SSRBlurShader.defines),\n  //   uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n  //   vertexShader: SSRBlurShader.vertexShader,\n  //   fragmentShader: SSRBlurShader.fragmentShader\n  // });\n  // this.blurMaterial3.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture;\n  // this.blurMaterial3.uniforms['resolution'].value.set(this.width, this.height);\n  // material for rendering the depth\n\n  this.depthRenderMaterial = new ShaderMaterial({\n    defines: Object.assign({}, SSRDepthShader.defines),\n    uniforms: UniformsUtils.clone(SSRDepthShader.uniforms),\n    vertexShader: SSRDepthShader.vertexShader,\n    fragmentShader: SSRDepthShader.fragmentShader,\n    blending: NoBlending\n  });\n  this.depthRenderMaterial.uniforms['tDepth'].value = this.beautyRenderTarget.depthTexture;\n  this.depthRenderMaterial.uniforms['cameraNear'].value = this.camera.near;\n  this.depthRenderMaterial.uniforms['cameraFar'].value = this.camera.far; // material for rendering the content of a render target\n\n  this.copyMaterial = new ShaderMaterial({\n    uniforms: UniformsUtils.clone(CopyShader.uniforms),\n    vertexShader: CopyShader.vertexShader,\n    fragmentShader: CopyShader.fragmentShader,\n    transparent: true,\n    depthTest: false,\n    depthWrite: false,\n    blendSrc: SrcAlphaFactor,\n    blendDst: OneMinusSrcAlphaFactor,\n    blendEquation: AddEquation,\n    blendSrcAlpha: SrcAlphaFactor,\n    blendDstAlpha: OneMinusSrcAlphaFactor,\n    blendEquationAlpha: AddEquation // premultipliedAlpha:true,\n\n  });\n  this.fsQuad = new FullScreenQuad(null);\n  this.originalClearColor = new Color();\n};\n\nSSRPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: SSRPass,\n  dispose: function () {\n    // dispose render targets\n    this.beautyRenderTarget.dispose();\n    this.prevRenderTarget.dispose();\n    this.normalRenderTarget.dispose(); // if (this.isSelective)\n\n    this.metalnessRenderTarget.dispose();\n    this.ssrRenderTarget.dispose();\n    this.blurRenderTarget.dispose();\n    this.blurRenderTarget2.dispose(); // this.blurRenderTarget3.dispose();\n    // dispose materials\n\n    this.normalMaterial.dispose(); // if (this.isSelective) {\n\n    this.metalnessOnMaterial.dispose();\n    this.metalnessOffMaterial.dispose(); // }\n\n    this.blurMaterial.dispose();\n    this.blurMaterial2.dispose();\n    this.copyMaterial.dispose();\n    this.depthRenderMaterial.dispose(); // dipsose full screen quad\n\n    this.fsQuad.dispose();\n  },\n  render: function (renderer, writeBuffer\n  /*, readBuffer, deltaTime, maskActive */\n  ) {\n    // render beauty and depth\n    if (this.encoding) this.beautyRenderTarget.texture.encoding = this.encoding;\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n\n    if (this.groundReflector) {\n      this.groundReflector.doRender(this.renderer, this.scene, this.camera);\n      this.groundReflector.visible = true;\n    }\n\n    renderer.render(this.scene, this.camera);\n    if (this.groundReflector) this.groundReflector.visible = false; // render normals\n\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0, 0); // render metalnesses\n\n    if (this.isSelective) {\n      this.renderMetalness(renderer, this.metalnessOnMaterial, this.metalnessRenderTarget, 0, 0);\n    } // render SSR\n\n\n    this.ssrMaterial.uniforms['opacity'].value = this.opacity;\n    this.ssrMaterial.uniforms['maxDistance'].value = this.maxDistance;\n    this.ssrMaterial.uniforms['surfDist'].value = this.surfDist;\n    this.ssrMaterial.uniforms['thickTolerance'].value = this.thickTolerance;\n    this.renderPass(renderer, this.ssrMaterial, this.ssrRenderTarget); // render blur\n\n    if (this.isBlur) {\n      this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget);\n      this.renderPass(renderer, this.blurMaterial2, this.blurRenderTarget2); // this.renderPass(renderer, this.blurMaterial3, this.blurRenderTarget3);\n    } // output result to screen\n\n\n    switch (this.output) {\n      case SSRPass.OUTPUT.Default:\n        if (this.isBouncing) {\n          this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          if (this.isBlur) this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          this.copyMaterial.uniforms['tDiffuse'].value = this.prevRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        } else {\n          this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          if (this.isBlur) this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        }\n\n        break;\n\n      case SSRPass.OUTPUT.SSR:\n        if (this.isBlur) this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n\n        if (this.isBouncing) {\n          if (this.isBlur) this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          this.copyMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n        }\n\n        break;\n\n      case SSRPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSRPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSRPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSRPass.OUTPUT.Metalness:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.metalnessRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      default:\n        console.warn('THREE.SSRPass: Unknown output type.');\n    }\n  },\n  renderPass: function (renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    var originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget); // setup pass state\n\n    renderer.autoClear = false;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer); // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  renderOverride: function (renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    var originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null; // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  renderMetalness: function (renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    var originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.scene.traverseVisible(child => {\n      child._SSRPassMaterialBack = child.material;\n\n      if (this._selects.includes(child)) {\n        child.material = this.metalnessOnMaterial;\n      } else {\n        child.material = this.metalnessOffMaterial;\n      }\n    });\n    renderer.render(this.scene, this.camera);\n    this.scene.traverseVisible(child => {\n      child.material = child._SSRPassMaterialBack;\n    }); // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  setSize: function (width, height) {\n    this.width = width;\n    this.height = height;\n    this.ssrMaterial.defines.MAX_STEP = Math.sqrt(width * width + height * height);\n    this.ssrMaterial.needsUpdate = true;\n    this.beautyRenderTarget.setSize(width, height);\n    this.prevRenderTarget.setSize(width, height);\n    this.ssrRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height); // if (this.isSelective)\n\n    this.metalnessRenderTarget.setSize(width, height);\n    this.blurRenderTarget.setSize(width, height);\n    this.blurRenderTarget2.setSize(width, height); // this.blurRenderTarget3.setSize(width, height);\n\n    this.ssrMaterial.uniforms['resolution'].value.set(width, height);\n    this.ssrMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n    this.ssrMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n    this.blurMaterial.uniforms['resolution'].value.set(width, height);\n    this.blurMaterial2.uniforms['resolution'].value.set(width, height);\n  }\n});\nSSRPass.OUTPUT = {\n  Default: 0,\n  SSR: 1,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5,\n  Metalness: 7\n};\n\nexport { SSRPass };\n"],"mappings":"AAAA,SAASA,KAAK,EAAEC,YAAY,EAAEC,iBAAiB,EAAEC,aAAa,EAAEC,iBAAiB,EAAEC,YAAY,EAAEC,UAAU,EAAEC,aAAa,EAAEC,cAAc,EAAEC,aAAa,EAAEC,UAAU,EAAEC,kBAAkB,EAAEC,iBAAiB,EAAEC,cAAc,EAAEC,sBAAsB,EAAEC,WAAW,EAAEC,cAAc,QAAQ,OAAO;AAChS,SAASC,cAAc,EAAEC,IAAI,QAAQ,WAAW;AAChD,SAASC,SAAS,EAAEC,aAAa,EAAEC,cAAc,QAAQ,yBAAyB;AAClF,SAASC,UAAU,QAAQ,0BAA0B;AAErD,IAAIC,OAAO,GAAG,SAAVA,OAAOA,CAAAC,IAAA,EAYR;EAAA,IAXDC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;IACRC,KAAK,GAAAF,IAAA,CAALE,KAAK;IACLC,MAAM,GAAAH,IAAA,CAANG,MAAM;IACNC,KAAK,GAAAJ,IAAA,CAALI,KAAK;IACLC,MAAM,GAAAL,IAAA,CAANK,MAAM;IACNC,OAAO,GAAAN,IAAA,CAAPM,OAAO;IACPC,QAAQ,GAAAP,IAAA,CAARO,QAAQ;IAAAC,qBAAA,GAAAR,IAAA,CACRS,mBAAmB;IAAnBA,mBAAmB,GAAAD,qBAAA,cAAG,IAAI,GAAAA,qBAAA;IAAAE,eAAA,GAAAV,IAAA,CAC1BW,UAAU;IAAVA,UAAU,GAAAD,eAAA,cAAG,KAAK,GAAAA,eAAA;IAAAE,iBAAA,GAAAZ,IAAA,CAClBa,YAAY;IAAZA,YAAY,GAAAD,iBAAA,cAAG,KAAK,GAAAA,iBAAA;IACpBE,eAAe,GAAAd,IAAA,CAAfc,eAAe;EAEf,IAAI,CAACV,KAAK,GAAGA,KAAK,KAAKW,SAAS,GAAGX,KAAK,GAAG,GAAG;EAC9C,IAAI,CAACC,MAAM,GAAGA,MAAM,KAAKU,SAAS,GAAGV,MAAM,GAAG,GAAG;EACjD,IAAI,CAACW,KAAK,GAAG,IAAI;EACjB,IAAI,CAACf,QAAQ,GAAGA,QAAQ;EACxB,IAAI,CAACC,KAAK,GAAGA,KAAK;EAClB,IAAI,CAACC,MAAM,GAAGA,MAAM;EACpB,IAAI,CAACW,eAAe,GAAGA,eAAe;EACtC,IAAI,CAACG,OAAO,GAAGtB,SAAS,CAACuB,QAAQ,CAACD,OAAO,CAACE,KAAK;EAC/C,IAAI,CAACC,MAAM,GAAG,CAAC;EACf,IAAI,CAACC,WAAW,GAAG1B,SAAS,CAACuB,QAAQ,CAACG,WAAW,CAACF,KAAK;EACvD,IAAI,CAACG,QAAQ,GAAG3B,SAAS,CAACuB,QAAQ,CAACI,QAAQ,CAACH,KAAK;EACjD,IAAI,CAACZ,QAAQ,GAAGA,QAAQ;EACxB,IAAI,CAACgB,SAAS,GAAG,IAAI/C,KAAK,EAAE;EAC5B,IAAI,CAACgD,QAAQ,GAAGlB,OAAO;EACvB,IAAI,CAACmB,WAAW,GAAGC,KAAK,CAACC,OAAO,CAAC,IAAI,CAACH,QAAQ,CAAC;EAC/CI,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,SAAS,EAAE;IACrCC,GAAG,WAAAA,IAAA,EAAG;MACJ,OAAO,IAAI,CAACN,QAAQ;IACtB,CAAC;IAEDO,GAAG,WAAAA,IAACC,GAAG,EAAE;MACP,IAAI,IAAI,CAACR,QAAQ,KAAKQ,GAAG,EAAE;MAC3B,IAAI,CAACR,QAAQ,GAAGQ,GAAG;MAEnB,IAAIN,KAAK,CAACC,OAAO,CAACK,GAAG,CAAC,EAAE;QACtB,IAAI,CAACP,WAAW,GAAG,IAAI;QACvB,IAAI,CAACQ,WAAW,CAACC,OAAO,CAACT,WAAW,GAAG,IAAI;QAC3C,IAAI,CAACQ,WAAW,CAACE,WAAW,GAAG,IAAI;MACrC,CAAC,MAAM;QACL,IAAI,CAACV,WAAW,GAAG,KAAK;QACxB,IAAI,CAACQ,WAAW,CAACC,OAAO,CAACT,WAAW,GAAG,KAAK;QAC5C,IAAI,CAACQ,WAAW,CAACE,WAAW,GAAG,IAAI;MACrC;IACF;EAEF,CAAC,CAAC;EACF,IAAI,CAACC,WAAW,GAAGzB,UAAU,CAAC,CAAC;;EAE/BiB,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,YAAY,EAAE;IACxCC,GAAG,WAAAA,IAAA,EAAG;MACJ,OAAO,IAAI,CAACM,WAAW;IACzB,CAAC;IAEDL,GAAG,WAAAA,IAACC,GAAG,EAAE;MACP,IAAI,IAAI,CAACI,WAAW,KAAKJ,GAAG,EAAE;MAC9B,IAAI,CAACI,WAAW,GAAGJ,GAAG;MAEtB,IAAIA,GAAG,EAAE;QACP,IAAI,CAACC,WAAW,CAACf,QAAQ,CAAC,UAAU,CAAC,CAACC,KAAK,GAAG,IAAI,CAACkB,gBAAgB,CAACC,OAAO;MAC7E,CAAC,MAAM;QACL,IAAI,CAACL,WAAW,CAACf,QAAQ,CAAC,UAAU,CAAC,CAACC,KAAK,GAAG,IAAI,CAACoB,kBAAkB,CAACD,OAAO;MAC/E;IACF;EAEF,CAAC,CAAC;EACF,IAAI,CAACE,MAAM,GAAG,IAAI;EAClB,IAAI,CAACC,sBAAsB,GAAG9C,SAAS,CAACuC,OAAO,CAACQ,qBAAqB;EACrEd,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,uBAAuB,EAAE;IACnDC,GAAG,WAAAA,IAAA,EAAG;MACJ,OAAO,IAAI,CAACW,sBAAsB;IACpC,CAAC;IAEDV,GAAG,WAAAA,IAACC,GAAG,EAAE;MACP,IAAI,IAAI,CAACS,sBAAsB,KAAKT,GAAG,EAAE;MACzC,IAAI,CAACS,sBAAsB,GAAGT,GAAG;MACjC,IAAI,CAACC,WAAW,CAACC,OAAO,CAACQ,qBAAqB,GAAGV,GAAG;MACpD,IAAI,CAACC,WAAW,CAACE,WAAW,GAAG,IAAI;IACrC;EAEF,CAAC,CAAC;EACF,IAAI,CAACQ,UAAU,GAAGhD,SAAS,CAACuC,OAAO,CAACU,SAAS;EAC7ChB,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,WAAW,EAAE;IACvCC,GAAG,WAAAA,IAAA,EAAG;MACJ,OAAO,IAAI,CAACa,UAAU;IACxB,CAAC;IAEDZ,GAAG,WAAAA,IAACC,GAAG,EAAE;MACP,IAAI,IAAI,CAACW,UAAU,KAAKX,GAAG,EAAE;MAC7B,IAAI,CAACW,UAAU,GAAGX,GAAG;MACrB,IAAI,CAACC,WAAW,CAACC,OAAO,CAACU,SAAS,GAAGZ,GAAG;MACxC,IAAI,CAACC,WAAW,CAACE,WAAW,GAAG,IAAI;IACrC;EAEF,CAAC,CAAC;EACF,IAAI,CAACU,gBAAgB,GAAGlD,SAAS,CAACuC,OAAO,CAACY,eAAe;EACzDlB,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,iBAAiB,EAAE;IAC7CC,GAAG,WAAAA,IAAA,EAAG;MACJ,OAAO,IAAI,CAACe,gBAAgB;IAC9B,CAAC;IAEDd,GAAG,WAAAA,IAACC,GAAG,EAAE;MACP,IAAI,IAAI,CAACa,gBAAgB,KAAKb,GAAG,EAAE;MACnC,IAAI,CAACa,gBAAgB,GAAGb,GAAG;MAC3B,IAAI,CAACC,WAAW,CAACC,OAAO,CAACY,eAAe,GAAGd,GAAG;MAC9C,IAAI,CAACC,WAAW,CAACE,WAAW,GAAG,IAAI;IACrC;EAEF,CAAC,CAAC;EACF,IAAI,CAACY,cAAc,GAAGpD,SAAS,CAACuB,QAAQ,CAAC6B,cAAc,CAAC5B,KAAK,CAAC,CAAC;;EAE/D,IAAI6B,YAAY,GAAG,IAAIvE,YAAY,EAAE;EACrCuE,YAAY,CAACC,IAAI,GAAGvE,iBAAiB;EACrCsE,YAAY,CAACE,SAAS,GAAGvE,aAAa;EACtCqE,YAAY,CAACG,SAAS,GAAGxE,aAAa;EACtC,IAAI,CAAC4D,kBAAkB,GAAG,IAAI3D,iBAAiB,CAAC,IAAI,CAACwB,KAAK,EAAE,IAAI,CAACC,MAAM,EAAE;IACvE6C,SAAS,EAAErE,YAAY;IACvBuE,SAAS,EAAEvE,YAAY;IACvBwE,MAAM,EAAEvE,UAAU;IAClBkE,YAAY,EAAEA,YAAY;IAC1BM,WAAW,EAAE;EACf,CAAC,CAAC,CAAC,CAAC;;EAEJ,IAAI,CAACjB,gBAAgB,GAAG,IAAIzD,iBAAiB,CAAC,IAAI,CAACwB,KAAK,EAAE,IAAI,CAACC,MAAM,EAAE;IACrE6C,SAAS,EAAErE,YAAY;IACvBuE,SAAS,EAAEvE,YAAY;IACvBwE,MAAM,EAAEvE;EACV,CAAC,CAAC,CAAC,CAAC;;EAEJ,IAAI,CAACyE,kBAAkB,GAAG,IAAI3E,iBAAiB,CAAC,IAAI,CAACwB,KAAK,EAAE,IAAI,CAACC,MAAM,EAAE;IACvE6C,SAAS,EAAEvE,aAAa;IACxByE,SAAS,EAAEzE,aAAa;IACxB0E,MAAM,EAAEvE,UAAU;IAClBmE,IAAI,EAAElE;EACR,CAAC,CAAC,CAAC,CAAC;EACJ;;EAEA,IAAI,CAACyE,qBAAqB,GAAG,IAAI5E,iBAAiB,CAAC,IAAI,CAACwB,KAAK,EAAE,IAAI,CAACC,MAAM,EAAE;IAC1E6C,SAAS,EAAEvE,aAAa;IACxByE,SAAS,EAAEzE,aAAa;IACxB0E,MAAM,EAAEvE;EACV,CAAC,CAAC,CAAC,CAAC;EACJ;;EAEA,IAAI,CAAC2E,eAAe,GAAG,IAAI7E,iBAAiB,CAAC,IAAI,CAACwB,KAAK,EAAE,IAAI,CAACC,MAAM,EAAE;IACpE6C,SAAS,EAAErE,YAAY;IACvBuE,SAAS,EAAEvE,YAAY;IACvBwE,MAAM,EAAEvE;EACV,CAAC,CAAC;EACF,IAAI,CAAC4E,gBAAgB,GAAG,IAAI,CAACD,eAAe,CAACE,KAAK,EAAE;EACpD,IAAI,CAACC,iBAAiB,GAAG,IAAI,CAACH,eAAe,CAACE,KAAK,EAAE,CAAC,CAAC;EACvD;;EAEA,IAAIhE,SAAS,KAAKoB,SAAS,EAAE;IAC3B8C,OAAO,CAACC,KAAK,CAAC,8CAA8C,CAAC;EAC/D;EAEA,IAAI,CAAC7B,WAAW,GAAG,IAAIjD,cAAc,CAAC;IACpCkD,OAAO,EAAEN,MAAM,CAACmC,MAAM,CAAC;MACrBC,QAAQ,EAAEC,IAAI,CAACC,IAAI,CAACC,MAAM,CAACC,UAAU,GAAGD,MAAM,CAACC,UAAU,GAAGD,MAAM,CAACE,WAAW,GAAGF,MAAM,CAACE,WAAW;IACrG,CAAC,EAAE1E,SAAS,CAACuC,OAAO,CAAC;IACrBhB,QAAQ,EAAEjC,aAAa,CAAC0E,KAAK,CAAChE,SAAS,CAACuB,QAAQ,CAAC;IACjDoD,YAAY,EAAE3E,SAAS,CAAC2E,YAAY;IACpCC,cAAc,EAAE5E,SAAS,CAAC4E,cAAc;IACxCC,QAAQ,EAAEtF;EACZ,CAAC,CAAC;EAEF,IAAI,CAACuB,mBAAmB,EAAE;IACxB,IAAI,CAACwB,WAAW,CAACC,OAAO,CAACzB,mBAAmB,GAAGA,mBAAmB;IAClE,IAAI,CAACwB,WAAW,CAACE,WAAW,GAAG,IAAI;EACrC;EAEA,IAAI,CAACF,WAAW,CAACf,QAAQ,CAAC,UAAU,CAAC,CAACC,KAAK,GAAG,IAAI,CAACoB,kBAAkB,CAACD,OAAO;EAC7E,IAAI,CAACL,WAAW,CAACf,QAAQ,CAAC,SAAS,CAAC,CAACC,KAAK,GAAG,IAAI,CAACoC,kBAAkB,CAACjB,OAAO,CAAC,CAAC;;EAE9E,IAAI,CAACL,WAAW,CAACC,OAAO,CAACT,WAAW,GAAG,IAAI,CAACA,WAAW;EACvD,IAAI,CAACQ,WAAW,CAACE,WAAW,GAAG,IAAI;EACnC,IAAI,CAACF,WAAW,CAACf,QAAQ,CAAC,YAAY,CAAC,CAACC,KAAK,GAAG,IAAI,CAACqC,qBAAqB,CAAClB,OAAO,CAAC,CAAC;;EAEpF,IAAI,CAACL,WAAW,CAACf,QAAQ,CAAC,QAAQ,CAAC,CAACC,KAAK,GAAG,IAAI,CAACoB,kBAAkB,CAACS,YAAY;EAChF,IAAI,CAACf,WAAW,CAACf,QAAQ,CAAC,YAAY,CAAC,CAACC,KAAK,GAAG,IAAI,CAAChB,MAAM,CAACsE,IAAI;EAChE,IAAI,CAACxC,WAAW,CAACf,QAAQ,CAAC,WAAW,CAAC,CAACC,KAAK,GAAG,IAAI,CAAChB,MAAM,CAACuE,GAAG;EAC9D,IAAI,CAACzC,WAAW,CAACf,QAAQ,CAAC,UAAU,CAAC,CAACC,KAAK,GAAG,IAAI,CAACG,QAAQ;EAC3D,IAAI,CAACW,WAAW,CAACf,QAAQ,CAAC,YAAY,CAAC,CAACC,KAAK,CAACY,GAAG,CAAC,IAAI,CAAC3B,KAAK,EAAE,IAAI,CAACC,MAAM,CAAC;EAC1E,IAAI,CAAC4B,WAAW,CAACf,QAAQ,CAAC,wBAAwB,CAAC,CAACC,KAAK,CAACwD,IAAI,CAAC,IAAI,CAACxE,MAAM,CAACyE,gBAAgB,CAAC;EAC5F,IAAI,CAAC3C,WAAW,CAACf,QAAQ,CAAC,+BAA+B,CAAC,CAACC,KAAK,CAACwD,IAAI,CAAC,IAAI,CAACxE,MAAM,CAAC0E,uBAAuB,CAAC,CAAC,CAAC;;EAE5G,IAAI,CAACC,cAAc,GAAG,IAAI3F,kBAAkB,CAAC;IAC3C0B,YAAY,EAAZA;EACF,CAAC,CAAC;EACF,IAAI,CAACiE,cAAc,CAACN,QAAQ,GAAGtF,UAAU,CAAC,CAAC;EAC3C;;EAEA,IAAI,CAAC6F,mBAAmB,GAAG,IAAI3F,iBAAiB,CAAC;IAC/C4F,KAAK,EAAE;EACT,CAAC,CAAC,CAAC,CAAC;;EAEJ,IAAI,CAACC,oBAAoB,GAAG,IAAI7F,iBAAiB,CAAC;IAChD4F,KAAK,EAAE;EACT,CAAC,CAAC,CAAC,CAAC;EACJ;;EAEA,IAAI,CAACE,YAAY,GAAG,IAAIlG,cAAc,CAAC;IACrCkD,OAAO,EAAEN,MAAM,CAACmC,MAAM,CAAC,CAAC,CAAC,EAAEnE,aAAa,CAACsC,OAAO,CAAC;IACjDhB,QAAQ,EAAEjC,aAAa,CAAC0E,KAAK,CAAC/D,aAAa,CAACsB,QAAQ,CAAC;IACrDoD,YAAY,EAAE1E,aAAa,CAAC0E,YAAY;IACxCC,cAAc,EAAE3E,aAAa,CAAC2E;EAChC,CAAC,CAAC;EACF,IAAI,CAACW,YAAY,CAAChE,QAAQ,CAAC,UAAU,CAAC,CAACC,KAAK,GAAG,IAAI,CAACsC,eAAe,CAACnB,OAAO;EAC3E,IAAI,CAAC4C,YAAY,CAAChE,QAAQ,CAAC,YAAY,CAAC,CAACC,KAAK,CAACY,GAAG,CAAC,IAAI,CAAC3B,KAAK,EAAE,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;;EAE7E,IAAI,CAAC8E,aAAa,GAAG,IAAInG,cAAc,CAAC;IACtCkD,OAAO,EAAEN,MAAM,CAACmC,MAAM,CAAC,CAAC,CAAC,EAAEnE,aAAa,CAACsC,OAAO,CAAC;IACjDhB,QAAQ,EAAEjC,aAAa,CAAC0E,KAAK,CAAC/D,aAAa,CAACsB,QAAQ,CAAC;IACrDoD,YAAY,EAAE1E,aAAa,CAAC0E,YAAY;IACxCC,cAAc,EAAE3E,aAAa,CAAC2E;EAChC,CAAC,CAAC;EACF,IAAI,CAACY,aAAa,CAACjE,QAAQ,CAAC,UAAU,CAAC,CAACC,KAAK,GAAG,IAAI,CAACuC,gBAAgB,CAACpB,OAAO;EAC7E,IAAI,CAAC6C,aAAa,CAACjE,QAAQ,CAAC,YAAY,CAAC,CAACC,KAAK,CAACY,GAAG,CAAC,IAAI,CAAC3B,KAAK,EAAE,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;EAC9E;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,IAAI,CAAC+E,mBAAmB,GAAG,IAAIpG,cAAc,CAAC;IAC5CkD,OAAO,EAAEN,MAAM,CAACmC,MAAM,CAAC,CAAC,CAAC,EAAElE,cAAc,CAACqC,OAAO,CAAC;IAClDhB,QAAQ,EAAEjC,aAAa,CAAC0E,KAAK,CAAC9D,cAAc,CAACqB,QAAQ,CAAC;IACtDoD,YAAY,EAAEzE,cAAc,CAACyE,YAAY;IACzCC,cAAc,EAAE1E,cAAc,CAAC0E,cAAc;IAC7CC,QAAQ,EAAEtF;EACZ,CAAC,CAAC;EACF,IAAI,CAACkG,mBAAmB,CAAClE,QAAQ,CAAC,QAAQ,CAAC,CAACC,KAAK,GAAG,IAAI,CAACoB,kBAAkB,CAACS,YAAY;EACxF,IAAI,CAACoC,mBAAmB,CAAClE,QAAQ,CAAC,YAAY,CAAC,CAACC,KAAK,GAAG,IAAI,CAAChB,MAAM,CAACsE,IAAI;EACxE,IAAI,CAACW,mBAAmB,CAAClE,QAAQ,CAAC,WAAW,CAAC,CAACC,KAAK,GAAG,IAAI,CAAChB,MAAM,CAACuE,GAAG,CAAC,CAAC;;EAExE,IAAI,CAACW,YAAY,GAAG,IAAIrG,cAAc,CAAC;IACrCkC,QAAQ,EAAEjC,aAAa,CAAC0E,KAAK,CAAC7D,UAAU,CAACoB,QAAQ,CAAC;IAClDoD,YAAY,EAAExE,UAAU,CAACwE,YAAY;IACrCC,cAAc,EAAEzE,UAAU,CAACyE,cAAc;IACzCe,WAAW,EAAE,IAAI;IACjBC,SAAS,EAAE,KAAK;IAChBC,UAAU,EAAE,KAAK;IACjBC,QAAQ,EAAEpG,cAAc;IACxBqG,QAAQ,EAAEpG,sBAAsB;IAChCqG,aAAa,EAAEpG,WAAW;IAC1BqG,aAAa,EAAEvG,cAAc;IAC7BwG,aAAa,EAAEvG,sBAAsB;IACrCwG,kBAAkB,EAAEvG,WAAW,CAAC;EAElC,CAAC,CAAC;;EACF,IAAI,CAACwG,MAAM,GAAG,IAAItG,cAAc,CAAC,IAAI,CAAC;EACtC,IAAI,CAACuG,kBAAkB,GAAG,IAAIxH,KAAK,EAAE;AACvC,CAAC;AAEDuB,OAAO,CAACkG,SAAS,GAAGrE,MAAM,CAACmC,MAAM,CAACnC,MAAM,CAACsE,MAAM,CAACxG,IAAI,CAACuG,SAAS,CAAC,EAAE;EAC/DE,WAAW,EAAEpG,OAAO;EACpBqG,OAAO,EAAE,SAAAA,QAAA,EAAY;IACnB;IACA,IAAI,CAAC7D,kBAAkB,CAAC6D,OAAO,EAAE;IACjC,IAAI,CAAC/D,gBAAgB,CAAC+D,OAAO,EAAE;IAC/B,IAAI,CAAC7C,kBAAkB,CAAC6C,OAAO,EAAE,CAAC,CAAC;;IAEnC,IAAI,CAAC5C,qBAAqB,CAAC4C,OAAO,EAAE;IACpC,IAAI,CAAC3C,eAAe,CAAC2C,OAAO,EAAE;IAC9B,IAAI,CAAC1C,gBAAgB,CAAC0C,OAAO,EAAE;IAC/B,IAAI,CAACxC,iBAAiB,CAACwC,OAAO,EAAE,CAAC,CAAC;IAClC;;IAEA,IAAI,CAACtB,cAAc,CAACsB,OAAO,EAAE,CAAC,CAAC;;IAE/B,IAAI,CAACrB,mBAAmB,CAACqB,OAAO,EAAE;IAClC,IAAI,CAACnB,oBAAoB,CAACmB,OAAO,EAAE,CAAC,CAAC;;IAErC,IAAI,CAAClB,YAAY,CAACkB,OAAO,EAAE;IAC3B,IAAI,CAACjB,aAAa,CAACiB,OAAO,EAAE;IAC5B,IAAI,CAACf,YAAY,CAACe,OAAO,EAAE;IAC3B,IAAI,CAAChB,mBAAmB,CAACgB,OAAO,EAAE,CAAC,CAAC;;IAEpC,IAAI,CAACL,MAAM,CAACK,OAAO,EAAE;EACvB,CAAC;EACDC,MAAM,EAAE,SAAAA,OAAUpG,QAAQ,EAAEqG;EAC5B,0CACE;IACA;IACA,IAAI,IAAI,CAAC/F,QAAQ,EAAE,IAAI,CAACgC,kBAAkB,CAACD,OAAO,CAAC/B,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAC3EN,QAAQ,CAACsG,eAAe,CAAC,IAAI,CAAChE,kBAAkB,CAAC;IACjDtC,QAAQ,CAACe,KAAK,EAAE;IAEhB,IAAI,IAAI,CAACF,eAAe,EAAE;MACxB,IAAI,CAACA,eAAe,CAAC0F,QAAQ,CAAC,IAAI,CAACvG,QAAQ,EAAE,IAAI,CAACC,KAAK,EAAE,IAAI,CAACC,MAAM,CAAC;MACrE,IAAI,CAACW,eAAe,CAAC2F,OAAO,GAAG,IAAI;IACrC;IAEAxG,QAAQ,CAACoG,MAAM,CAAC,IAAI,CAACnG,KAAK,EAAE,IAAI,CAACC,MAAM,CAAC;IACxC,IAAI,IAAI,CAACW,eAAe,EAAE,IAAI,CAACA,eAAe,CAAC2F,OAAO,GAAG,KAAK,CAAC,CAAC;;IAEhE,IAAI,CAACC,cAAc,CAACzG,QAAQ,EAAE,IAAI,CAAC6E,cAAc,EAAE,IAAI,CAACvB,kBAAkB,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;;IAEnF,IAAI,IAAI,CAAC9B,WAAW,EAAE;MACpB,IAAI,CAACkF,eAAe,CAAC1G,QAAQ,EAAE,IAAI,CAAC8E,mBAAmB,EAAE,IAAI,CAACvB,qBAAqB,EAAE,CAAC,EAAE,CAAC,CAAC;IAC5F,CAAC,CAAC;;IAGF,IAAI,CAACvB,WAAW,CAACf,QAAQ,CAAC,SAAS,CAAC,CAACC,KAAK,GAAG,IAAI,CAACF,OAAO;IACzD,IAAI,CAACgB,WAAW,CAACf,QAAQ,CAAC,aAAa,CAAC,CAACC,KAAK,GAAG,IAAI,CAACE,WAAW;IACjE,IAAI,CAACY,WAAW,CAACf,QAAQ,CAAC,UAAU,CAAC,CAACC,KAAK,GAAG,IAAI,CAACG,QAAQ;IAC3D,IAAI,CAACW,WAAW,CAACf,QAAQ,CAAC,gBAAgB,CAAC,CAACC,KAAK,GAAG,IAAI,CAAC4B,cAAc;IACvE,IAAI,CAAC6D,UAAU,CAAC3G,QAAQ,EAAE,IAAI,CAACgC,WAAW,EAAE,IAAI,CAACwB,eAAe,CAAC,CAAC,CAAC;;IAEnE,IAAI,IAAI,CAACjB,MAAM,EAAE;MACf,IAAI,CAACoE,UAAU,CAAC3G,QAAQ,EAAE,IAAI,CAACiF,YAAY,EAAE,IAAI,CAACxB,gBAAgB,CAAC;MACnE,IAAI,CAACkD,UAAU,CAAC3G,QAAQ,EAAE,IAAI,CAACkF,aAAa,EAAE,IAAI,CAACvB,iBAAiB,CAAC,CAAC,CAAC;IACzE,CAAC,CAAC;;IAGF,QAAQ,IAAI,CAACxC,MAAM;MACjB,KAAKrB,OAAO,CAAC8G,MAAM,CAACC,OAAO;QACzB,IAAI,IAAI,CAACnG,UAAU,EAAE;UACnB,IAAI,CAAC0E,YAAY,CAACnE,QAAQ,CAAC,UAAU,CAAC,CAACC,KAAK,GAAG,IAAI,CAACoB,kBAAkB,CAACD,OAAO;UAC9E,IAAI,CAAC+C,YAAY,CAACb,QAAQ,GAAGtF,UAAU;UACvC,IAAI,CAAC0H,UAAU,CAAC3G,QAAQ,EAAE,IAAI,CAACoF,YAAY,EAAE,IAAI,CAAChD,gBAAgB,CAAC;UACnE,IAAI,IAAI,CAACG,MAAM,EAAE,IAAI,CAAC6C,YAAY,CAACnE,QAAQ,CAAC,UAAU,CAAC,CAACC,KAAK,GAAG,IAAI,CAACyC,iBAAiB,CAACtB,OAAO,CAAC,KAAK,IAAI,CAAC+C,YAAY,CAACnE,QAAQ,CAAC,UAAU,CAAC,CAACC,KAAK,GAAG,IAAI,CAACsC,eAAe,CAACnB,OAAO;UAC/K,IAAI,CAAC+C,YAAY,CAACb,QAAQ,GAAGhF,cAAc;UAC3C,IAAI,CAACoH,UAAU,CAAC3G,QAAQ,EAAE,IAAI,CAACoF,YAAY,EAAE,IAAI,CAAChD,gBAAgB,CAAC;UACnE,IAAI,CAACgD,YAAY,CAACnE,QAAQ,CAAC,UAAU,CAAC,CAACC,KAAK,GAAG,IAAI,CAACkB,gBAAgB,CAACC,OAAO;UAC5E,IAAI,CAAC+C,YAAY,CAACb,QAAQ,GAAGtF,UAAU;UACvC,IAAI,CAAC0H,UAAU,CAAC3G,QAAQ,EAAE,IAAI,CAACoF,YAAY,EAAE,IAAI,CAAC0B,cAAc,GAAG,IAAI,GAAGT,WAAW,CAAC;QACxF,CAAC,MAAM;UACL,IAAI,CAACjB,YAAY,CAACnE,QAAQ,CAAC,UAAU,CAAC,CAACC,KAAK,GAAG,IAAI,CAACoB,kBAAkB,CAACD,OAAO;UAC9E,IAAI,CAAC+C,YAAY,CAACb,QAAQ,GAAGtF,UAAU;UACvC,IAAI,CAAC0H,UAAU,CAAC3G,QAAQ,EAAE,IAAI,CAACoF,YAAY,EAAE,IAAI,CAAC0B,cAAc,GAAG,IAAI,GAAGT,WAAW,CAAC;UACtF,IAAI,IAAI,CAAC9D,MAAM,EAAE,IAAI,CAAC6C,YAAY,CAACnE,QAAQ,CAAC,UAAU,CAAC,CAACC,KAAK,GAAG,IAAI,CAACyC,iBAAiB,CAACtB,OAAO,CAAC,KAAK,IAAI,CAAC+C,YAAY,CAACnE,QAAQ,CAAC,UAAU,CAAC,CAACC,KAAK,GAAG,IAAI,CAACsC,eAAe,CAACnB,OAAO;UAC/K,IAAI,CAAC+C,YAAY,CAACb,QAAQ,GAAGhF,cAAc;UAC3C,IAAI,CAACoH,UAAU,CAAC3G,QAAQ,EAAE,IAAI,CAACoF,YAAY,EAAE,IAAI,CAAC0B,cAAc,GAAG,IAAI,GAAGT,WAAW,CAAC;QACxF;QAEA;MAEF,KAAKvG,OAAO,CAAC8G,MAAM,CAACG,GAAG;QACrB,IAAI,IAAI,CAACxE,MAAM,EAAE,IAAI,CAAC6C,YAAY,CAACnE,QAAQ,CAAC,UAAU,CAAC,CAACC,KAAK,GAAG,IAAI,CAACyC,iBAAiB,CAACtB,OAAO,CAAC,KAAK,IAAI,CAAC+C,YAAY,CAACnE,QAAQ,CAAC,UAAU,CAAC,CAACC,KAAK,GAAG,IAAI,CAACsC,eAAe,CAACnB,OAAO;QAC/K,IAAI,CAAC+C,YAAY,CAACb,QAAQ,GAAGtF,UAAU;QACvC,IAAI,CAAC0H,UAAU,CAAC3G,QAAQ,EAAE,IAAI,CAACoF,YAAY,EAAE,IAAI,CAAC0B,cAAc,GAAG,IAAI,GAAGT,WAAW,CAAC;QAEtF,IAAI,IAAI,CAAC3F,UAAU,EAAE;UACnB,IAAI,IAAI,CAAC6B,MAAM,EAAE,IAAI,CAAC6C,YAAY,CAACnE,QAAQ,CAAC,UAAU,CAAC,CAACC,KAAK,GAAG,IAAI,CAACyC,iBAAiB,CAACtB,OAAO,CAAC,KAAK,IAAI,CAAC+C,YAAY,CAACnE,QAAQ,CAAC,UAAU,CAAC,CAACC,KAAK,GAAG,IAAI,CAACoB,kBAAkB,CAACD,OAAO;UAClL,IAAI,CAAC+C,YAAY,CAACb,QAAQ,GAAGtF,UAAU;UACvC,IAAI,CAAC0H,UAAU,CAAC3G,QAAQ,EAAE,IAAI,CAACoF,YAAY,EAAE,IAAI,CAAChD,gBAAgB,CAAC;UACnE,IAAI,CAACgD,YAAY,CAACnE,QAAQ,CAAC,UAAU,CAAC,CAACC,KAAK,GAAG,IAAI,CAACsC,eAAe,CAACnB,OAAO;UAC3E,IAAI,CAAC+C,YAAY,CAACb,QAAQ,GAAGhF,cAAc;UAC3C,IAAI,CAACoH,UAAU,CAAC3G,QAAQ,EAAE,IAAI,CAACoF,YAAY,EAAE,IAAI,CAAChD,gBAAgB,CAAC;QACrE;QAEA;MAEF,KAAKtC,OAAO,CAAC8G,MAAM,CAACI,MAAM;QACxB,IAAI,CAAC5B,YAAY,CAACnE,QAAQ,CAAC,UAAU,CAAC,CAACC,KAAK,GAAG,IAAI,CAACoB,kBAAkB,CAACD,OAAO;QAC9E,IAAI,CAAC+C,YAAY,CAACb,QAAQ,GAAGtF,UAAU;QACvC,IAAI,CAAC0H,UAAU,CAAC3G,QAAQ,EAAE,IAAI,CAACoF,YAAY,EAAE,IAAI,CAAC0B,cAAc,GAAG,IAAI,GAAGT,WAAW,CAAC;QACtF;MAEF,KAAKvG,OAAO,CAAC8G,MAAM,CAACK,KAAK;QACvB,IAAI,CAACN,UAAU,CAAC3G,QAAQ,EAAE,IAAI,CAACmF,mBAAmB,EAAE,IAAI,CAAC2B,cAAc,GAAG,IAAI,GAAGT,WAAW,CAAC;QAC7F;MAEF,KAAKvG,OAAO,CAAC8G,MAAM,CAACM,MAAM;QACxB,IAAI,CAAC9B,YAAY,CAACnE,QAAQ,CAAC,UAAU,CAAC,CAACC,KAAK,GAAG,IAAI,CAACoC,kBAAkB,CAACjB,OAAO;QAC9E,IAAI,CAAC+C,YAAY,CAACb,QAAQ,GAAGtF,UAAU;QACvC,IAAI,CAAC0H,UAAU,CAAC3G,QAAQ,EAAE,IAAI,CAACoF,YAAY,EAAE,IAAI,CAAC0B,cAAc,GAAG,IAAI,GAAGT,WAAW,CAAC;QACtF;MAEF,KAAKvG,OAAO,CAAC8G,MAAM,CAACO,SAAS;QAC3B,IAAI,CAAC/B,YAAY,CAACnE,QAAQ,CAAC,UAAU,CAAC,CAACC,KAAK,GAAG,IAAI,CAACqC,qBAAqB,CAAClB,OAAO;QACjF,IAAI,CAAC+C,YAAY,CAACb,QAAQ,GAAGtF,UAAU;QACvC,IAAI,CAAC0H,UAAU,CAAC3G,QAAQ,EAAE,IAAI,CAACoF,YAAY,EAAE,IAAI,CAAC0B,cAAc,GAAG,IAAI,GAAGT,WAAW,CAAC;QACtF;MAEF;QACEzC,OAAO,CAACwD,IAAI,CAAC,qCAAqC,CAAC;IAAC;EAE1D,CAAC;EACDT,UAAU,EAAE,SAAAA,WAAU3G,QAAQ,EAAEqH,YAAY,EAAEC,YAAY,EAAEC,UAAU,EAAEC,UAAU,EAAE;IAClF;IACA,IAAI,CAACzB,kBAAkB,CAACrB,IAAI,CAAC1E,QAAQ,CAACyH,aAAa,CAAC,IAAI,CAACnG,SAAS,CAAC,CAAC;IACpE,IAAIoG,kBAAkB,GAAG1H,QAAQ,CAAC2H,aAAa,CAAC,IAAI,CAACrG,SAAS,CAAC;IAC/D,IAAIsG,iBAAiB,GAAG5H,QAAQ,CAAC6H,SAAS;IAC1C7H,QAAQ,CAACsG,eAAe,CAACgB,YAAY,CAAC,CAAC,CAAC;;IAExCtH,QAAQ,CAAC6H,SAAS,GAAG,KAAK;IAE1B,IAAIN,UAAU,KAAKzG,SAAS,IAAIyG,UAAU,KAAK,IAAI,EAAE;MACnDvH,QAAQ,CAAC8H,aAAa,CAACP,UAAU,CAAC;MAClCvH,QAAQ,CAAC+H,aAAa,CAACP,UAAU,IAAI,GAAG,CAAC;MACzCxH,QAAQ,CAACe,KAAK,EAAE;IAClB;IAEA,IAAI,CAAC+E,MAAM,CAACkC,QAAQ,GAAGX,YAAY;IACnC,IAAI,CAACvB,MAAM,CAACM,MAAM,CAACpG,QAAQ,CAAC,CAAC,CAAC;;IAE9BA,QAAQ,CAAC6H,SAAS,GAAGD,iBAAiB;IACtC5H,QAAQ,CAAC8H,aAAa,CAAC,IAAI,CAAC/B,kBAAkB,CAAC;IAC/C/F,QAAQ,CAAC+H,aAAa,CAACL,kBAAkB,CAAC;EAC5C,CAAC;EACDjB,cAAc,EAAE,SAAAA,eAAUzG,QAAQ,EAAEiI,gBAAgB,EAAEX,YAAY,EAAEC,UAAU,EAAEC,UAAU,EAAE;IAC1F,IAAI,CAACzB,kBAAkB,CAACrB,IAAI,CAAC1E,QAAQ,CAACyH,aAAa,CAAC,IAAI,CAACnG,SAAS,CAAC,CAAC;IACpE,IAAIoG,kBAAkB,GAAG1H,QAAQ,CAAC2H,aAAa,CAAC,IAAI,CAACrG,SAAS,CAAC;IAC/D,IAAIsG,iBAAiB,GAAG5H,QAAQ,CAAC6H,SAAS;IAC1C7H,QAAQ,CAACsG,eAAe,CAACgB,YAAY,CAAC;IACtCtH,QAAQ,CAAC6H,SAAS,GAAG,KAAK;IAC1BN,UAAU,GAAGU,gBAAgB,CAACV,UAAU,IAAIA,UAAU;IACtDC,UAAU,GAAGS,gBAAgB,CAACT,UAAU,IAAIA,UAAU;IAEtD,IAAID,UAAU,KAAKzG,SAAS,IAAIyG,UAAU,KAAK,IAAI,EAAE;MACnDvH,QAAQ,CAAC8H,aAAa,CAACP,UAAU,CAAC;MAClCvH,QAAQ,CAAC+H,aAAa,CAACP,UAAU,IAAI,GAAG,CAAC;MACzCxH,QAAQ,CAACe,KAAK,EAAE;IAClB;IAEA,IAAI,CAACd,KAAK,CAACgI,gBAAgB,GAAGA,gBAAgB;IAC9CjI,QAAQ,CAACoG,MAAM,CAAC,IAAI,CAACnG,KAAK,EAAE,IAAI,CAACC,MAAM,CAAC;IACxC,IAAI,CAACD,KAAK,CAACgI,gBAAgB,GAAG,IAAI,CAAC,CAAC;;IAEpCjI,QAAQ,CAAC6H,SAAS,GAAGD,iBAAiB;IACtC5H,QAAQ,CAAC8H,aAAa,CAAC,IAAI,CAAC/B,kBAAkB,CAAC;IAC/C/F,QAAQ,CAAC+H,aAAa,CAACL,kBAAkB,CAAC;EAC5C,CAAC;EACDhB,eAAe,EAAE,SAAAA,gBAAU1G,QAAQ,EAAEiI,gBAAgB,EAAEX,YAAY,EAAEC,UAAU,EAAEC,UAAU,EAAE;IAAA,IAAAU,KAAA;IAC3F,IAAI,CAACnC,kBAAkB,CAACrB,IAAI,CAAC1E,QAAQ,CAACyH,aAAa,CAAC,IAAI,CAACnG,SAAS,CAAC,CAAC;IACpE,IAAIoG,kBAAkB,GAAG1H,QAAQ,CAAC2H,aAAa,CAAC,IAAI,CAACrG,SAAS,CAAC;IAC/D,IAAIsG,iBAAiB,GAAG5H,QAAQ,CAAC6H,SAAS;IAC1C7H,QAAQ,CAACsG,eAAe,CAACgB,YAAY,CAAC;IACtCtH,QAAQ,CAAC6H,SAAS,GAAG,KAAK;IAC1BN,UAAU,GAAGU,gBAAgB,CAACV,UAAU,IAAIA,UAAU;IACtDC,UAAU,GAAGS,gBAAgB,CAACT,UAAU,IAAIA,UAAU;IAEtD,IAAID,UAAU,KAAKzG,SAAS,IAAIyG,UAAU,KAAK,IAAI,EAAE;MACnDvH,QAAQ,CAAC8H,aAAa,CAACP,UAAU,CAAC;MAClCvH,QAAQ,CAAC+H,aAAa,CAACP,UAAU,IAAI,GAAG,CAAC;MACzCxH,QAAQ,CAACe,KAAK,EAAE;IAClB;IAEA,IAAI,CAACd,KAAK,CAACkI,eAAe,CAAC,UAAAC,KAAK,EAAI;MAClCA,KAAK,CAACC,oBAAoB,GAAGD,KAAK,CAACJ,QAAQ;MAE3C,IAAIE,KAAI,CAAC3G,QAAQ,CAAC+G,QAAQ,CAACF,KAAK,CAAC,EAAE;QACjCA,KAAK,CAACJ,QAAQ,GAAGE,KAAI,CAACpD,mBAAmB;MAC3C,CAAC,MAAM;QACLsD,KAAK,CAACJ,QAAQ,GAAGE,KAAI,CAAClD,oBAAoB;MAC5C;IACF,CAAC,CAAC;IACFhF,QAAQ,CAACoG,MAAM,CAAC,IAAI,CAACnG,KAAK,EAAE,IAAI,CAACC,MAAM,CAAC;IACxC,IAAI,CAACD,KAAK,CAACkI,eAAe,CAAC,UAAAC,KAAK,EAAI;MAClCA,KAAK,CAACJ,QAAQ,GAAGI,KAAK,CAACC,oBAAoB;IAC7C,CAAC,CAAC,CAAC,CAAC;;IAEJrI,QAAQ,CAAC6H,SAAS,GAAGD,iBAAiB;IACtC5H,QAAQ,CAAC8H,aAAa,CAAC,IAAI,CAAC/B,kBAAkB,CAAC;IAC/C/F,QAAQ,CAAC+H,aAAa,CAACL,kBAAkB,CAAC;EAC5C,CAAC;EACDa,OAAO,EAAE,SAAAA,QAAUpI,KAAK,EAAEC,MAAM,EAAE;IAChC,IAAI,CAACD,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAAC4B,WAAW,CAACC,OAAO,CAAC8B,QAAQ,GAAGC,IAAI,CAACC,IAAI,CAAC9D,KAAK,GAAGA,KAAK,GAAGC,MAAM,GAAGA,MAAM,CAAC;IAC9E,IAAI,CAAC4B,WAAW,CAACE,WAAW,GAAG,IAAI;IACnC,IAAI,CAACI,kBAAkB,CAACiG,OAAO,CAACpI,KAAK,EAAEC,MAAM,CAAC;IAC9C,IAAI,CAACgC,gBAAgB,CAACmG,OAAO,CAACpI,KAAK,EAAEC,MAAM,CAAC;IAC5C,IAAI,CAACoD,eAAe,CAAC+E,OAAO,CAACpI,KAAK,EAAEC,MAAM,CAAC;IAC3C,IAAI,CAACkD,kBAAkB,CAACiF,OAAO,CAACpI,KAAK,EAAEC,MAAM,CAAC,CAAC,CAAC;;IAEhD,IAAI,CAACmD,qBAAqB,CAACgF,OAAO,CAACpI,KAAK,EAAEC,MAAM,CAAC;IACjD,IAAI,CAACqD,gBAAgB,CAAC8E,OAAO,CAACpI,KAAK,EAAEC,MAAM,CAAC;IAC5C,IAAI,CAACuD,iBAAiB,CAAC4E,OAAO,CAACpI,KAAK,EAAEC,MAAM,CAAC,CAAC,CAAC;;IAE/C,IAAI,CAAC4B,WAAW,CAACf,QAAQ,CAAC,YAAY,CAAC,CAACC,KAAK,CAACY,GAAG,CAAC3B,KAAK,EAAEC,MAAM,CAAC;IAChE,IAAI,CAAC4B,WAAW,CAACf,QAAQ,CAAC,wBAAwB,CAAC,CAACC,KAAK,CAACwD,IAAI,CAAC,IAAI,CAACxE,MAAM,CAACyE,gBAAgB,CAAC;IAC5F,IAAI,CAAC3C,WAAW,CAACf,QAAQ,CAAC,+BAA+B,CAAC,CAACC,KAAK,CAACwD,IAAI,CAAC,IAAI,CAACxE,MAAM,CAAC0E,uBAAuB,CAAC;IAC1G,IAAI,CAACK,YAAY,CAAChE,QAAQ,CAAC,YAAY,CAAC,CAACC,KAAK,CAACY,GAAG,CAAC3B,KAAK,EAAEC,MAAM,CAAC;IACjE,IAAI,CAAC8E,aAAa,CAACjE,QAAQ,CAAC,YAAY,CAAC,CAACC,KAAK,CAACY,GAAG,CAAC3B,KAAK,EAAEC,MAAM,CAAC;EACpE;AACF,CAAC,CAAC;AACFN,OAAO,CAAC8G,MAAM,GAAG;EACfC,OAAO,EAAE,CAAC;EACVE,GAAG,EAAE,CAAC;EACNC,MAAM,EAAE,CAAC;EACTC,KAAK,EAAE,CAAC;EACRC,MAAM,EAAE,CAAC;EACTC,SAAS,EAAE;AACb,CAAC;AAED,SAASrH,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}