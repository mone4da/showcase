{"ast":null,"code":"import _get from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*!\n * camera-controls\n * https://github.com/yomotsu/camera-controls\n * (c) 2017 @yomotsu\n * Released under the MIT License.\n */\n// see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons#value\nvar MOUSE_BUTTON = {\n  LEFT: 1,\n  RIGHT: 2,\n  MIDDLE: 4\n};\nvar ACTION = Object.freeze({\n  NONE: 0,\n  ROTATE: 1,\n  TRUCK: 2,\n  OFFSET: 4,\n  DOLLY: 8,\n  ZOOM: 16,\n  TOUCH_ROTATE: 32,\n  TOUCH_TRUCK: 64,\n  TOUCH_OFFSET: 128,\n  TOUCH_DOLLY: 256,\n  TOUCH_ZOOM: 512,\n  TOUCH_DOLLY_TRUCK: 1024,\n  TOUCH_DOLLY_OFFSET: 2048,\n  TOUCH_DOLLY_ROTATE: 4096,\n  TOUCH_ZOOM_TRUCK: 8192,\n  TOUCH_ZOOM_OFFSET: 16384,\n  TOUCH_ZOOM_ROTATE: 32768\n});\nfunction isPerspectiveCamera(camera) {\n  return camera.isPerspectiveCamera;\n}\nfunction isOrthographicCamera(camera) {\n  return camera.isOrthographicCamera;\n}\nvar PI_2 = Math.PI * 2;\nvar PI_HALF = Math.PI / 2;\nvar EPSILON = 1e-5;\nvar DEG2RAD = Math.PI / 180;\nfunction clamp(value, min, max) {\n  return Math.max(min, Math.min(max, value));\n}\nfunction approxZero(number) {\n  var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EPSILON;\n  return Math.abs(number) < error;\n}\nfunction approxEquals(a, b) {\n  var error = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : EPSILON;\n  return approxZero(a - b, error);\n}\nfunction roundToStep(value, step) {\n  return Math.round(value / step) * step;\n}\nfunction infinityToMaxNumber(value) {\n  if (isFinite(value)) return value;\n  if (value < 0) return -Number.MAX_VALUE;\n  return Number.MAX_VALUE;\n}\nfunction maxNumberToInfinity(value) {\n  if (Math.abs(value) < Number.MAX_VALUE) return value;\n  return value * Infinity;\n}\n// https://docs.unity3d.com/ScriptReference/Mathf.SmoothDamp.html\n// https://github.com/Unity-Technologies/UnityCsReference/blob/a2bdfe9b3c4cd4476f44bf52f848063bfaf7b6b9/Runtime/Export/Math/Mathf.cs#L308\nfunction smoothDamp(current, target, currentVelocityRef, smoothTime) {\n  var maxSpeed = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Infinity;\n  var deltaTime = arguments.length > 5 ? arguments[5] : undefined;\n  // Based on Game Programming Gems 4 Chapter 1.10\n  smoothTime = Math.max(0.0001, smoothTime);\n  var omega = 2 / smoothTime;\n  var x = omega * deltaTime;\n  var exp = 1 / (1 + x + 0.48 * x * x + 0.235 * x * x * x);\n  var change = current - target;\n  var originalTo = target;\n  // Clamp maximum speed\n  var maxChange = maxSpeed * smoothTime;\n  change = clamp(change, -maxChange, maxChange);\n  target = current - change;\n  var temp = (currentVelocityRef.value + omega * change) * deltaTime;\n  currentVelocityRef.value = (currentVelocityRef.value - omega * temp) * exp;\n  var output = target + (change + temp) * exp;\n  // Prevent overshooting\n  if (originalTo - current > 0.0 === output > originalTo) {\n    output = originalTo;\n    currentVelocityRef.value = (output - originalTo) / deltaTime;\n  }\n  return output;\n}\n// https://docs.unity3d.com/ScriptReference/Vector3.SmoothDamp.html\n// https://github.com/Unity-Technologies/UnityCsReference/blob/a2bdfe9b3c4cd4476f44bf52f848063bfaf7b6b9/Runtime/Export/Math/Vector3.cs#L97\nfunction smoothDampVec3(current, target, currentVelocityRef, smoothTime) {\n  var maxSpeed = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Infinity;\n  var deltaTime = arguments.length > 5 ? arguments[5] : undefined;\n  var out = arguments.length > 6 ? arguments[6] : undefined;\n  // Based on Game Programming Gems 4 Chapter 1.10\n  smoothTime = Math.max(0.0001, smoothTime);\n  var omega = 2 / smoothTime;\n  var x = omega * deltaTime;\n  var exp = 1 / (1 + x + 0.48 * x * x + 0.235 * x * x * x);\n  var targetX = target.x;\n  var targetY = target.y;\n  var targetZ = target.z;\n  var changeX = current.x - targetX;\n  var changeY = current.y - targetY;\n  var changeZ = current.z - targetZ;\n  var originalToX = targetX;\n  var originalToY = targetY;\n  var originalToZ = targetZ;\n  // Clamp maximum speed\n  var maxChange = maxSpeed * smoothTime;\n  var maxChangeSq = maxChange * maxChange;\n  var magnitudeSq = changeX * changeX + changeY * changeY + changeZ * changeZ;\n  if (magnitudeSq > maxChangeSq) {\n    var magnitude = Math.sqrt(magnitudeSq);\n    changeX = changeX / magnitude * maxChange;\n    changeY = changeY / magnitude * maxChange;\n    changeZ = changeZ / magnitude * maxChange;\n  }\n  targetX = current.x - changeX;\n  targetY = current.y - changeY;\n  targetZ = current.z - changeZ;\n  var tempX = (currentVelocityRef.x + omega * changeX) * deltaTime;\n  var tempY = (currentVelocityRef.y + omega * changeY) * deltaTime;\n  var tempZ = (currentVelocityRef.z + omega * changeZ) * deltaTime;\n  currentVelocityRef.x = (currentVelocityRef.x - omega * tempX) * exp;\n  currentVelocityRef.y = (currentVelocityRef.y - omega * tempY) * exp;\n  currentVelocityRef.z = (currentVelocityRef.z - omega * tempZ) * exp;\n  out.x = targetX + (changeX + tempX) * exp;\n  out.y = targetY + (changeY + tempY) * exp;\n  out.z = targetZ + (changeZ + tempZ) * exp;\n  // Prevent overshooting\n  var origMinusCurrentX = originalToX - current.x;\n  var origMinusCurrentY = originalToY - current.y;\n  var origMinusCurrentZ = originalToZ - current.z;\n  var outMinusOrigX = out.x - originalToX;\n  var outMinusOrigY = out.y - originalToY;\n  var outMinusOrigZ = out.z - originalToZ;\n  if (origMinusCurrentX * outMinusOrigX + origMinusCurrentY * outMinusOrigY + origMinusCurrentZ * outMinusOrigZ > 0) {\n    out.x = originalToX;\n    out.y = originalToY;\n    out.z = originalToZ;\n    currentVelocityRef.x = (out.x - originalToX) / deltaTime;\n    currentVelocityRef.y = (out.y - originalToY) / deltaTime;\n    currentVelocityRef.z = (out.z - originalToZ) / deltaTime;\n  }\n  return out;\n}\nfunction extractClientCoordFromEvent(pointers, out) {\n  out.set(0, 0);\n  pointers.forEach(function (pointer) {\n    out.x += pointer.clientX;\n    out.y += pointer.clientY;\n  });\n  out.x /= pointers.length;\n  out.y /= pointers.length;\n}\nfunction notSupportedInOrthographicCamera(camera, message) {\n  if (isOrthographicCamera(camera)) {\n    console.warn(\"\".concat(message, \" is not supported in OrthographicCamera\"));\n    return true;\n  }\n  return false;\n}\nvar EventDispatcher = /*#__PURE__*/function () {\n  function EventDispatcher() {\n    _classCallCheck(this, EventDispatcher);\n    this._listeners = {};\n  }\n  /**\n   * Adds the specified event listener.\n   * @param type event name\n   * @param listener handler function\n   * @category Methods\n   */\n  _createClass(EventDispatcher, [{\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener) {\n      var listeners = this._listeners;\n      if (listeners[type] === undefined) listeners[type] = [];\n      if (listeners[type].indexOf(listener) === -1) listeners[type].push(listener);\n    }\n    /**\n     * Presence of the specified event listener.\n     * @param type event name\n     * @param listener handler function\n     * @category Methods\n     */\n  }, {\n    key: \"hasEventListener\",\n    value: function hasEventListener(type, listener) {\n      var listeners = this._listeners;\n      return listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;\n    }\n    /**\n     * Removes the specified event listener\n     * @param type event name\n     * @param listener handler function\n     * @category Methods\n     */\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(type, listener) {\n      var listeners = this._listeners;\n      var listenerArray = listeners[type];\n      if (listenerArray !== undefined) {\n        var index = listenerArray.indexOf(listener);\n        if (index !== -1) listenerArray.splice(index, 1);\n      }\n    }\n    /**\n     * Removes all event listeners\n     * @param type event name\n     * @category Methods\n     */\n  }, {\n    key: \"removeAllEventListeners\",\n    value: function removeAllEventListeners(type) {\n      if (!type) {\n        this._listeners = {};\n        return;\n      }\n      if (Array.isArray(this._listeners[type])) this._listeners[type].length = 0;\n    }\n    /**\n     * Fire an event type.\n     * @param event DispatcherEvent\n     * @category Methods\n     */\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(event) {\n      var listeners = this._listeners;\n      var listenerArray = listeners[event.type];\n      if (listenerArray !== undefined) {\n        event.target = this;\n        var array = listenerArray.slice(0);\n        for (var i = 0, l = array.length; i < l; i++) {\n          array[i].call(this, event);\n        }\n      }\n    }\n  }]);\n  return EventDispatcher;\n}();\nvar VERSION = '2.3.5'; // will be replaced with `version` in package.json during the build process.\nvar TOUCH_DOLLY_FACTOR = 1 / 8;\nvar isBrowser = typeof window !== 'undefined';\nvar isMac = isBrowser && /Mac/.test(navigator.platform);\nvar isPointerEventsNotSupported = !(isBrowser && 'PointerEvent' in window); // macOS Safari 12 does not support PointerEvents API\nvar THREE;\nvar _ORIGIN;\nvar _AXIS_Y;\nvar _AXIS_Z;\nvar _v2;\nvar _v3A;\nvar _v3B;\nvar _v3C;\nvar _xColumn;\nvar _yColumn;\nvar _zColumn;\nvar _deltaTarget;\nvar _deltaOffset;\nvar _sphericalA;\nvar _sphericalB;\nvar _box3A;\nvar _box3B;\nvar _sphere;\nvar _quaternionA;\nvar _quaternionB;\nvar _rotationMatrix;\nvar _raycaster;\nvar CameraControls = /*#__PURE__*/function (_EventDispatcher) {\n  _inherits(CameraControls, _EventDispatcher);\n  var _super = _createSuper(CameraControls);\n  /**\n   * Creates a `CameraControls` instance.\n   *\n   * Note:\n   * You **must install** three.js before using camera-controls. see [#install](#install)\n   * Not doing so will lead to runtime errors (`undefined` references to THREE).\n   *\n   * e.g.\n   * ```\n   * CameraControls.install( { THREE } );\n   * const cameraControls = new CameraControls( camera, domElement );\n   * ```\n   *\n   * @param camera A `THREE.PerspectiveCamera` or `THREE.OrthographicCamera` to be controlled.\n   * @param domElement A `HTMLElement` for the draggable area, usually `renderer.domElement`.\n   * @category Constructor\n   */\n  function CameraControls(camera, domElement) {\n    var _this;\n    _classCallCheck(this, CameraControls);\n    _this = _super.call(this);\n    /**\n     * Minimum vertical angle in radians.\n     * The angle has to be between `0` and `.maxPolarAngle` inclusive.\n     * The default value is `0`.\n     *\n     * e.g.\n     * ```\n     * cameraControls.maxPolarAngle = 0;\n     * ```\n     * @category Properties\n     */\n    _this.minPolarAngle = 0; // radians\n    /**\n     * Maximum vertical angle in radians.\n     * The angle has to be between `.maxPolarAngle` and `Math.PI` inclusive.\n     * The default value is `Math.PI`.\n     *\n     * e.g.\n     * ```\n     * cameraControls.maxPolarAngle = Math.PI;\n     * ```\n     * @category Properties\n     */\n    _this.maxPolarAngle = Math.PI; // radians\n    /**\n     * Minimum horizontal angle in radians.\n     * The angle has to be less than `.maxAzimuthAngle`.\n     * The default value is `- Infinity`.\n     *\n     * e.g.\n     * ```\n     * cameraControls.minAzimuthAngle = - Infinity;\n     * ```\n     * @category Properties\n     */\n    _this.minAzimuthAngle = -Infinity; // radians\n    /**\n     * Maximum horizontal angle in radians.\n     * The angle has to be greater than `.minAzimuthAngle`.\n     * The default value is `Infinity`.\n     *\n     * e.g.\n     * ```\n     * cameraControls.maxAzimuthAngle = Infinity;\n     * ```\n     * @category Properties\n     */\n    _this.maxAzimuthAngle = Infinity; // radians\n    // How far you can dolly in and out ( PerspectiveCamera only )\n    /**\n     * Minimum distance for dolly. The value must be higher than `0`.\n     * PerspectiveCamera only.\n     * @category Properties\n     */\n    _this.minDistance = 0;\n    /**\n     * Maximum distance for dolly. The value must be higher than `minDistance`.\n     * PerspectiveCamera only.\n     * @category Properties\n     */\n    _this.maxDistance = Infinity;\n    /**\n     * `true` to enable Infinity Dolly.\n     * When the Dolly distance is less than the `minDistance`, radius of the sphere will be set `minDistance` automatically.\n     * @category Properties\n     */\n    _this.infinityDolly = false;\n    /**\n     * Minimum camera zoom.\n     * @category Properties\n     */\n    _this.minZoom = 0.01;\n    /**\n     * Maximum camera zoom.\n     * @category Properties\n     */\n    _this.maxZoom = Infinity;\n    /**\n     * Approximate time in seconds to reach the target. A smaller value will reach the target faster.\n     * @category Properties\n     */\n    _this.smoothTime = 0.25;\n    /**\n     * the smoothTime while dragging\n     * @category Properties\n     */\n    _this.draggingSmoothTime = 0.125;\n    /**\n     * Max transition speed in unit-per-seconds\n     * @category Properties\n     */\n    _this.maxSpeed = Infinity;\n    /**\n     * Speed of azimuth (horizontal) rotation.\n     * @category Properties\n     */\n    _this.azimuthRotateSpeed = 1.0;\n    /**\n     * Speed of polar (vertical) rotation.\n     * @category Properties\n     */\n    _this.polarRotateSpeed = 1.0;\n    /**\n     * Speed of mouse-wheel dollying.\n     * @category Properties\n     */\n    _this.dollySpeed = 1.0;\n    /**\n     * `true` to invert direction when dollying or zooming via drag\n     * @category Properties\n     */\n    _this.dollyDragInverted = false;\n    /**\n     * Speed of drag for truck and pedestal.\n     * @category Properties\n     */\n    _this.truckSpeed = 2.0;\n    /**\n     * `true` to enable Dolly-in to the mouse cursor coords.\n     * @category Properties\n     */\n    _this.dollyToCursor = false;\n    /**\n     * @category Properties\n     */\n    _this.dragToOffset = false;\n    /**\n     * The same as `.screenSpacePanning` in three.js's OrbitControls.\n     * @category Properties\n     */\n    _this.verticalDragToForward = false;\n    /**\n     * Friction ratio of the boundary.\n     * @category Properties\n     */\n    _this.boundaryFriction = 0.0;\n    /**\n     * Controls how soon the `rest` event fires as the camera slows.\n     * @category Properties\n     */\n    _this.restThreshold = 0.01;\n    /**\n     * An array of Meshes to collide with camera.\n     * Be aware colliderMeshes may decrease performance. The collision test uses 4 raycasters from the camera since the near plane has 4 corners.\n     * @category Properties\n     */\n    _this.colliderMeshes = [];\n    /**\n     * Force cancel user dragging.\n     * @category Methods\n     */\n    // cancel will be overwritten in the constructor.\n    _this.cancel = function () {};\n    _this._enabled = true;\n    _this._state = ACTION.NONE;\n    _this._viewport = null;\n    _this._dollyControlAmount = 0;\n    _this._hasRested = true;\n    _this._boundaryEnclosesCamera = false;\n    _this._needsUpdate = true;\n    _this._updatedLastTime = false;\n    _this._elementRect = new DOMRect();\n    _this._isDragging = false;\n    _this._activePointers = [];\n    _this._lockedPointer = null;\n    // Use draggingSmoothTime over smoothTime while true.\n    // set automatically true on user-dragging start.\n    // set automatically false on programmable methods call.\n    _this._isUserControllingRotate = false;\n    _this._isUserControllingDolly = false;\n    _this._isUserControllingTruck = false;\n    _this._isUserControllingOffset = false;\n    _this._isUserControllingZoom = false;\n    // velocities for smoothDamp\n    _this._thetaVelocity = {\n      value: 0\n    };\n    _this._phiVelocity = {\n      value: 0\n    };\n    _this._radiusVelocity = {\n      value: 0\n    };\n    _this._targetVelocity = new THREE.Vector3();\n    _this._focalOffsetVelocity = new THREE.Vector3();\n    _this._zoomVelocity = {\n      value: 0\n    };\n    _this._truckInternal = function (deltaX, deltaY, dragToOffset) {\n      var truckX;\n      var pedestalY;\n      if (isPerspectiveCamera(_this._camera)) {\n        var offset = _v3A.copy(_this._camera.position).sub(_this._target);\n        // half of the fov is center to top of screen\n        var fov = _this._camera.getEffectiveFOV() * DEG2RAD;\n        var targetDistance = offset.length() * Math.tan(fov * 0.5);\n        truckX = _this.truckSpeed * deltaX * targetDistance / _this._elementRect.height;\n        pedestalY = _this.truckSpeed * deltaY * targetDistance / _this._elementRect.height;\n      } else if (isOrthographicCamera(_this._camera)) {\n        var _camera = _this._camera;\n        truckX = deltaX * (_camera.right - _camera.left) / _camera.zoom / _this._elementRect.width;\n        pedestalY = deltaY * (_camera.top - _camera.bottom) / _camera.zoom / _this._elementRect.height;\n      } else {\n        return;\n      }\n      if (_this.verticalDragToForward) {\n        dragToOffset ? _this.setFocalOffset(_this._focalOffsetEnd.x + truckX, _this._focalOffsetEnd.y, _this._focalOffsetEnd.z, true) : _this.truck(truckX, 0, true);\n        _this.forward(-pedestalY, true);\n      } else {\n        dragToOffset ? _this.setFocalOffset(_this._focalOffsetEnd.x + truckX, _this._focalOffsetEnd.y + pedestalY, _this._focalOffsetEnd.z, true) : _this.truck(truckX, pedestalY, true);\n      }\n    };\n    _this._rotateInternal = function (deltaX, deltaY) {\n      var theta = PI_2 * _this.azimuthRotateSpeed * deltaX / _this._elementRect.height; // divide by *height* to refer the resolution\n      var phi = PI_2 * _this.polarRotateSpeed * deltaY / _this._elementRect.height;\n      _this.rotate(theta, phi, true);\n    };\n    _this._dollyInternal = function (delta, x, y) {\n      var dollyScale = Math.pow(0.95, -delta * _this.dollySpeed);\n      var distance = _this._sphericalEnd.radius * dollyScale;\n      var prevRadius = _this._sphericalEnd.radius;\n      var signedPrevRadius = prevRadius * (delta >= 0 ? -1 : 1);\n      _this.dollyTo(distance);\n      if (_this.infinityDolly && (distance < _this.minDistance || _this.maxDistance === _this.minDistance)) {\n        _this._camera.getWorldDirection(_v3A);\n        _this._targetEnd.add(_v3A.normalize().multiplyScalar(signedPrevRadius));\n        _this._target.add(_v3A.normalize().multiplyScalar(signedPrevRadius));\n      }\n      if (_this.dollyToCursor) {\n        _this._dollyControlAmount += _this._sphericalEnd.radius - prevRadius;\n        if (_this.infinityDolly && (distance < _this.minDistance || _this.maxDistance === _this.minDistance)) {\n          _this._dollyControlAmount -= signedPrevRadius;\n        }\n        _this._dollyControlCoord.set(x, y);\n      }\n    };\n    _this._zoomInternal = function (delta, x, y) {\n      var zoomScale = Math.pow(0.95, delta * _this.dollySpeed);\n      var prevZoom = _this._zoomEnd;\n      // for both PerspectiveCamera and OrthographicCamera\n      _this.zoomTo(_this._zoom * zoomScale);\n      if (_this.dollyToCursor) {\n        _this._dollyControlAmount += _this._zoomEnd - prevZoom;\n        _this._dollyControlCoord.set(x, y);\n      }\n    };\n    // Check if the user has installed THREE\n    if (typeof THREE === 'undefined') {\n      console.error('camera-controls: `THREE` is undefined. You must first run `CameraControls.install( { THREE: THREE } )`. Check the docs for further information.');\n    }\n    _this._camera = camera;\n    _this._yAxisUpSpace = new THREE.Quaternion().setFromUnitVectors(_this._camera.up, _AXIS_Y);\n    _this._yAxisUpSpaceInverse = _this._yAxisUpSpace.clone().invert();\n    _this._state = ACTION.NONE;\n    // the location\n    _this._target = new THREE.Vector3();\n    _this._targetEnd = _this._target.clone();\n    _this._focalOffset = new THREE.Vector3();\n    _this._focalOffsetEnd = _this._focalOffset.clone();\n    // rotation\n    _this._spherical = new THREE.Spherical().setFromVector3(_v3A.copy(_this._camera.position).applyQuaternion(_this._yAxisUpSpace));\n    _this._sphericalEnd = _this._spherical.clone();\n    _this._zoom = _this._camera.zoom;\n    _this._zoomEnd = _this._zoom;\n    // collisionTest uses nearPlane.s\n    _this._nearPlaneCorners = [new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3()];\n    _this._updateNearPlaneCorners();\n    // Target cannot move outside of this box\n    _this._boundary = new THREE.Box3(new THREE.Vector3(-Infinity, -Infinity, -Infinity), new THREE.Vector3(Infinity, Infinity, Infinity));\n    // reset\n    _this._cameraUp0 = _this._camera.up.clone();\n    _this._target0 = _this._target.clone();\n    _this._position0 = _this._camera.position.clone();\n    _this._zoom0 = _this._zoom;\n    _this._focalOffset0 = _this._focalOffset.clone();\n    _this._dollyControlAmount = 0;\n    _this._dollyControlCoord = new THREE.Vector2();\n    // configs\n    _this.mouseButtons = {\n      left: ACTION.ROTATE,\n      middle: ACTION.DOLLY,\n      right: ACTION.TRUCK,\n      wheel: isPerspectiveCamera(_this._camera) ? ACTION.DOLLY : isOrthographicCamera(_this._camera) ? ACTION.ZOOM : ACTION.NONE\n    };\n    _this.touches = {\n      one: ACTION.TOUCH_ROTATE,\n      two: isPerspectiveCamera(_this._camera) ? ACTION.TOUCH_DOLLY_TRUCK : isOrthographicCamera(_this._camera) ? ACTION.TOUCH_ZOOM_TRUCK : ACTION.NONE,\n      three: ACTION.TOUCH_TRUCK\n    };\n    var dragStartPosition = new THREE.Vector2();\n    var lastDragPosition = new THREE.Vector2();\n    var dollyStart = new THREE.Vector2();\n    var onPointerDown = function onPointerDown(event) {\n      if (!_this._enabled || !_this._domElement) return;\n      // Don't call `event.preventDefault()` on the pointerdown event\n      // to keep receiving pointermove evens outside dragging iframe\n      // https://taye.me/blog/tips/2015/11/16/mouse-drag-outside-iframe/\n      var mouseButton = event.pointerType !== 'mouse' ? null : (event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT ? MOUSE_BUTTON.LEFT : (event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.MIDDLE ? MOUSE_BUTTON.MIDDLE : (event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.RIGHT ? MOUSE_BUTTON.RIGHT : null;\n      if (mouseButton !== null) {\n        var zombiePointer = _this._findPointerByMouseButton(mouseButton);\n        zombiePointer && _this._disposePointer(zombiePointer);\n      }\n      if ((event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT && _this._lockedPointer) return;\n      var pointer = {\n        pointerId: event.pointerId,\n        clientX: event.clientX,\n        clientY: event.clientY,\n        deltaX: 0,\n        deltaY: 0,\n        mouseButton: mouseButton\n      };\n      _this._activePointers.push(pointer);\n      // eslint-disable-next-line no-undef\n      _this._domElement.ownerDocument.removeEventListener('pointermove', onPointerMove, {\n        passive: false\n      });\n      _this._domElement.ownerDocument.removeEventListener('pointerup', onPointerUp);\n      _this._domElement.ownerDocument.addEventListener('pointermove', onPointerMove, {\n        passive: false\n      });\n      _this._domElement.ownerDocument.addEventListener('pointerup', onPointerUp);\n      _this._isDragging = true;\n      startDragging(event);\n    };\n    var onMouseDown = function onMouseDown(event) {\n      if (!_this._enabled || !_this._domElement || _this._lockedPointer) return;\n      var mouseButton = (event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT ? MOUSE_BUTTON.LEFT : (event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.MIDDLE ? MOUSE_BUTTON.MIDDLE : (event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.RIGHT ? MOUSE_BUTTON.RIGHT : null;\n      if (mouseButton !== null) {\n        var zombiePointer = _this._findPointerByMouseButton(mouseButton);\n        zombiePointer && _this._disposePointer(zombiePointer);\n      }\n      var pointer = {\n        pointerId: 1,\n        clientX: event.clientX,\n        clientY: event.clientY,\n        deltaX: 0,\n        deltaY: 0,\n        mouseButton: (event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT ? MOUSE_BUTTON.LEFT : (event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.LEFT ? MOUSE_BUTTON.MIDDLE : (event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.LEFT ? MOUSE_BUTTON.RIGHT : null\n      };\n      _this._activePointers.push(pointer);\n      // see https://github.com/microsoft/TypeScript/issues/32912#issuecomment-522142969\n      // eslint-disable-next-line no-undef\n      _this._domElement.ownerDocument.removeEventListener('mousemove', onMouseMove);\n      _this._domElement.ownerDocument.removeEventListener('mouseup', onMouseUp);\n      _this._domElement.ownerDocument.addEventListener('mousemove', onMouseMove);\n      _this._domElement.ownerDocument.addEventListener('mouseup', onMouseUp);\n      _this._isDragging = true;\n      startDragging(event);\n    };\n    var onPointerMove = function onPointerMove(event) {\n      if (event.cancelable) event.preventDefault();\n      var pointerId = event.pointerId;\n      var pointer = _this._lockedPointer || _this._findPointerById(pointerId);\n      if (!pointer) return;\n      pointer.clientX = event.clientX;\n      pointer.clientY = event.clientY;\n      pointer.deltaX = event.movementX;\n      pointer.deltaY = event.movementY;\n      _this._state = 0;\n      if (event.pointerType === 'touch') {\n        switch (_this._activePointers.length) {\n          case 1:\n            _this._state = _this.touches.one;\n            break;\n          case 2:\n            _this._state = _this.touches.two;\n            break;\n          case 3:\n            _this._state = _this.touches.three;\n            break;\n        }\n      } else {\n        if (!_this._isDragging && _this._lockedPointer || _this._isDragging && (event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT) {\n          _this._state = _this._state | _this.mouseButtons.left;\n        }\n        if (_this._isDragging && (event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.MIDDLE) {\n          _this._state = _this._state | _this.mouseButtons.middle;\n        }\n        if (_this._isDragging && (event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.RIGHT) {\n          _this._state = _this._state | _this.mouseButtons.right;\n        }\n      }\n      dragging();\n    };\n    var onMouseMove = function onMouseMove(event) {\n      var pointer = _this._lockedPointer || _this._findPointerById(1);\n      if (!pointer) return;\n      pointer.clientX = event.clientX;\n      pointer.clientY = event.clientY;\n      pointer.deltaX = event.movementX;\n      pointer.deltaY = event.movementY;\n      _this._state = 0;\n      if (_this._lockedPointer || (event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT) {\n        _this._state = _this._state | _this.mouseButtons.left;\n      }\n      if ((event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.MIDDLE) {\n        _this._state = _this._state | _this.mouseButtons.middle;\n      }\n      if ((event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.RIGHT) {\n        _this._state = _this._state | _this.mouseButtons.right;\n      }\n      dragging();\n    };\n    var onPointerUp = function onPointerUp(event) {\n      var pointer = _this._findPointerById(event.pointerId);\n      if (pointer && pointer === _this._lockedPointer) return;\n      pointer && _this._disposePointer(pointer);\n      if (event.pointerType === 'touch') {\n        switch (_this._activePointers.length) {\n          case 0:\n            _this._state = ACTION.NONE;\n            break;\n          case 1:\n            _this._state = _this.touches.one;\n            break;\n          case 2:\n            _this._state = _this.touches.two;\n            break;\n          case 3:\n            _this._state = _this.touches.three;\n            break;\n        }\n      } else {\n        _this._state = ACTION.NONE;\n      }\n      endDragging();\n    };\n    var onMouseUp = function onMouseUp() {\n      var pointer = _this._findPointerById(1);\n      if (pointer && pointer === _this._lockedPointer) return;\n      pointer && _this._disposePointer(pointer);\n      _this._state = ACTION.NONE;\n      endDragging();\n    };\n    var lastScrollTimeStamp = -1;\n    var onMouseWheel = function onMouseWheel(event) {\n      if (!_this._enabled || _this.mouseButtons.wheel === ACTION.NONE) return;\n      event.preventDefault();\n      if (_this.dollyToCursor || _this.mouseButtons.wheel === ACTION.ROTATE || _this.mouseButtons.wheel === ACTION.TRUCK) {\n        var now = performance.now();\n        // only need to fire this at scroll start.\n        if (lastScrollTimeStamp - now < 1000) _this._getClientRect(_this._elementRect);\n        lastScrollTimeStamp = now;\n      }\n      // Ref: https://github.com/cedricpinson/osgjs/blob/00e5a7e9d9206c06fdde0436e1d62ab7cb5ce853/sources/osgViewer/input/source/InputSourceMouse.js#L89-L103\n      var deltaYFactor = isMac ? -1 : -3;\n      var delta = event.deltaMode === 1 ? event.deltaY / deltaYFactor : event.deltaY / (deltaYFactor * 10);\n      var x = _this.dollyToCursor ? (event.clientX - _this._elementRect.x) / _this._elementRect.width * 2 - 1 : 0;\n      var y = _this.dollyToCursor ? (event.clientY - _this._elementRect.y) / _this._elementRect.height * -2 + 1 : 0;\n      switch (_this.mouseButtons.wheel) {\n        case ACTION.ROTATE:\n          {\n            _this._rotateInternal(event.deltaX, event.deltaY);\n            _this._isUserControllingRotate = true;\n            break;\n          }\n        case ACTION.TRUCK:\n          {\n            _this._truckInternal(event.deltaX, event.deltaY, false);\n            _this._isUserControllingTruck = true;\n            break;\n          }\n        case ACTION.OFFSET:\n          {\n            _this._truckInternal(event.deltaX, event.deltaY, true);\n            _this._isUserControllingOffset = true;\n            break;\n          }\n        case ACTION.DOLLY:\n          {\n            _this._dollyInternal(-delta, x, y);\n            _this._isUserControllingDolly = true;\n            break;\n          }\n        case ACTION.ZOOM:\n          {\n            _this._zoomInternal(-delta, x, y);\n            _this._isUserControllingZoom = true;\n            break;\n          }\n      }\n      _this.dispatchEvent({\n        type: 'control'\n      });\n    };\n    var onContextMenu = function onContextMenu(event) {\n      if (!_this._domElement || !_this._enabled) return;\n      // contextmenu event is fired right after pointerdown/mousedown.\n      // remove attached handlers and active pointer, if interrupted by contextmenu.\n      if (_this.mouseButtons.right === CameraControls.ACTION.NONE) {\n        var pointerId = event instanceof PointerEvent ? event.pointerId : event instanceof MouseEvent ? 0 : 0;\n        var pointer = _this._findPointerById(pointerId);\n        pointer && _this._disposePointer(pointer);\n        // eslint-disable-next-line no-undef\n        _this._domElement.ownerDocument.removeEventListener('pointermove', onPointerMove, {\n          passive: false\n        });\n        _this._domElement.ownerDocument.removeEventListener('pointerup', onPointerUp);\n        _this._domElement.ownerDocument.removeEventListener('mousemove', onMouseMove);\n        _this._domElement.ownerDocument.removeEventListener('mouseup', onMouseUp);\n        return;\n      }\n      event.preventDefault();\n    };\n    var startDragging = function startDragging(event) {\n      if (!_this._enabled) return;\n      extractClientCoordFromEvent(_this._activePointers, _v2);\n      _this._getClientRect(_this._elementRect);\n      dragStartPosition.copy(_v2);\n      lastDragPosition.copy(_v2);\n      var isMultiTouch = _this._activePointers.length >= 2;\n      if (isMultiTouch) {\n        // 2 finger pinch\n        var dx = _v2.x - _this._activePointers[1].clientX;\n        var dy = _v2.y - _this._activePointers[1].clientY;\n        var distance = Math.sqrt(dx * dx + dy * dy);\n        dollyStart.set(0, distance);\n        // center coords of 2 finger truck\n        var x = (_this._activePointers[0].clientX + _this._activePointers[1].clientX) * 0.5;\n        var y = (_this._activePointers[0].clientY + _this._activePointers[1].clientY) * 0.5;\n        lastDragPosition.set(x, y);\n      }\n      _this._state = 0;\n      if (!event) {\n        if (_this._lockedPointer) _this._state = _this._state | _this.mouseButtons.left;\n      } else if ('pointerType' in event && event.pointerType === 'touch') {\n        switch (_this._activePointers.length) {\n          case 1:\n            _this._state = _this.touches.one;\n            break;\n          case 2:\n            _this._state = _this.touches.two;\n            break;\n          case 3:\n            _this._state = _this.touches.three;\n            break;\n        }\n      } else {\n        if (!_this._lockedPointer && (event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT) {\n          _this._state = _this._state | _this.mouseButtons.left;\n        }\n        if ((event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.MIDDLE) {\n          _this._state = _this._state | _this.mouseButtons.middle;\n        }\n        if ((event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.RIGHT) {\n          _this._state = _this._state | _this.mouseButtons.right;\n        }\n      }\n      // stop current movement on drag start\n      if ((_this._state & ACTION.ROTATE) === ACTION.ROTATE || (_this._state & ACTION.TOUCH_ROTATE) === ACTION.TOUCH_ROTATE || (_this._state & ACTION.TOUCH_DOLLY_ROTATE) === ACTION.TOUCH_DOLLY_ROTATE || (_this._state & ACTION.TOUCH_ZOOM_ROTATE) === ACTION.TOUCH_ZOOM_ROTATE) {\n        _this._sphericalEnd.theta = _this._spherical.theta;\n        _this._sphericalEnd.phi = _this._spherical.phi;\n        _this._thetaVelocity.value = 0;\n        _this._phiVelocity.value = 0;\n      }\n      if ((_this._state & ACTION.TRUCK) === ACTION.TRUCK || (_this._state & ACTION.TOUCH_TRUCK) === ACTION.TOUCH_TRUCK || (_this._state & ACTION.TOUCH_DOLLY_TRUCK) === ACTION.TOUCH_DOLLY_TRUCK || (_this._state & ACTION.TOUCH_ZOOM_TRUCK) === ACTION.TOUCH_ZOOM_TRUCK) {\n        _this._targetEnd.copy(_this._target);\n        _this._targetVelocity.set(0, 0, 0);\n      }\n      if ((_this._state & ACTION.DOLLY) === ACTION.DOLLY || (_this._state & ACTION.TOUCH_DOLLY) === ACTION.TOUCH_DOLLY || (_this._state & ACTION.TOUCH_DOLLY_TRUCK) === ACTION.TOUCH_DOLLY_TRUCK || (_this._state & ACTION.TOUCH_DOLLY_OFFSET) === ACTION.TOUCH_DOLLY_OFFSET || (_this._state & ACTION.TOUCH_DOLLY_ROTATE) === ACTION.TOUCH_DOLLY_ROTATE) {\n        _this._sphericalEnd.radius = _this._spherical.radius;\n        _this._radiusVelocity.value = 0;\n      }\n      if ((_this._state & ACTION.ZOOM) === ACTION.ZOOM || (_this._state & ACTION.TOUCH_ZOOM) === ACTION.TOUCH_ZOOM || (_this._state & ACTION.TOUCH_ZOOM_TRUCK) === ACTION.TOUCH_ZOOM_TRUCK || (_this._state & ACTION.TOUCH_ZOOM_OFFSET) === ACTION.TOUCH_ZOOM_OFFSET || (_this._state & ACTION.TOUCH_ZOOM_ROTATE) === ACTION.TOUCH_ZOOM_ROTATE) {\n        _this._zoomEnd = _this._zoom;\n        _this._zoomVelocity.value = 0;\n      }\n      if ((_this._state & ACTION.OFFSET) === ACTION.OFFSET || (_this._state & ACTION.TOUCH_OFFSET) === ACTION.TOUCH_OFFSET || (_this._state & ACTION.TOUCH_DOLLY_OFFSET) === ACTION.TOUCH_DOLLY_OFFSET || (_this._state & ACTION.TOUCH_ZOOM_OFFSET) === ACTION.TOUCH_ZOOM_OFFSET) {\n        _this._focalOffsetEnd.copy(_this._focalOffset);\n        _this._focalOffsetVelocity.set(0, 0, 0);\n      }\n      _this.dispatchEvent({\n        type: 'controlstart'\n      });\n    };\n    var dragging = function dragging() {\n      if (!_this._enabled) return;\n      extractClientCoordFromEvent(_this._activePointers, _v2);\n      // When pointer lock is enabled clientX, clientY, screenX, and screenY remain 0.\n      // If pointer lock is enabled, use the Delta directory, and assume active-pointer is not multiple.\n      var isPointerLockActive = _this._domElement && document.pointerLockElement === _this._domElement;\n      var lockedPointer = isPointerLockActive ? _this._lockedPointer || _this._activePointers[0] : null;\n      var deltaX = lockedPointer ? -lockedPointer.deltaX : lastDragPosition.x - _v2.x;\n      var deltaY = lockedPointer ? -lockedPointer.deltaY : lastDragPosition.y - _v2.y;\n      lastDragPosition.copy(_v2);\n      if ((_this._state & ACTION.ROTATE) === ACTION.ROTATE || (_this._state & ACTION.TOUCH_ROTATE) === ACTION.TOUCH_ROTATE || (_this._state & ACTION.TOUCH_DOLLY_ROTATE) === ACTION.TOUCH_DOLLY_ROTATE || (_this._state & ACTION.TOUCH_ZOOM_ROTATE) === ACTION.TOUCH_ZOOM_ROTATE) {\n        _this._rotateInternal(deltaX, deltaY);\n        _this._isUserControllingRotate = true;\n      }\n      if ((_this._state & ACTION.DOLLY) === ACTION.DOLLY || (_this._state & ACTION.ZOOM) === ACTION.ZOOM) {\n        var dollyX = _this.dollyToCursor ? (dragStartPosition.x - _this._elementRect.x) / _this._elementRect.width * 2 - 1 : 0;\n        var dollyY = _this.dollyToCursor ? (dragStartPosition.y - _this._elementRect.y) / _this._elementRect.height * -2 + 1 : 0;\n        var dollyDirection = _this.dollyDragInverted ? -1 : 1;\n        if ((_this._state & ACTION.DOLLY) === ACTION.DOLLY) {\n          _this._dollyInternal(dollyDirection * deltaY * TOUCH_DOLLY_FACTOR, dollyX, dollyY);\n          _this._isUserControllingDolly = true;\n        } else {\n          _this._zoomInternal(dollyDirection * deltaY * TOUCH_DOLLY_FACTOR, dollyX, dollyY);\n          _this._isUserControllingZoom = true;\n        }\n      }\n      if ((_this._state & ACTION.TOUCH_DOLLY) === ACTION.TOUCH_DOLLY || (_this._state & ACTION.TOUCH_ZOOM) === ACTION.TOUCH_ZOOM || (_this._state & ACTION.TOUCH_DOLLY_TRUCK) === ACTION.TOUCH_DOLLY_TRUCK || (_this._state & ACTION.TOUCH_ZOOM_TRUCK) === ACTION.TOUCH_ZOOM_TRUCK || (_this._state & ACTION.TOUCH_DOLLY_OFFSET) === ACTION.TOUCH_DOLLY_OFFSET || (_this._state & ACTION.TOUCH_ZOOM_OFFSET) === ACTION.TOUCH_ZOOM_OFFSET || (_this._state & ACTION.TOUCH_DOLLY_ROTATE) === ACTION.TOUCH_DOLLY_ROTATE || (_this._state & ACTION.TOUCH_ZOOM_ROTATE) === ACTION.TOUCH_ZOOM_ROTATE) {\n        var dx = _v2.x - _this._activePointers[1].clientX;\n        var dy = _v2.y - _this._activePointers[1].clientY;\n        var distance = Math.sqrt(dx * dx + dy * dy);\n        var dollyDelta = dollyStart.y - distance;\n        dollyStart.set(0, distance);\n        var _dollyX = _this.dollyToCursor ? (lastDragPosition.x - _this._elementRect.x) / _this._elementRect.width * 2 - 1 : 0;\n        var _dollyY = _this.dollyToCursor ? (lastDragPosition.y - _this._elementRect.y) / _this._elementRect.height * -2 + 1 : 0;\n        if ((_this._state & ACTION.TOUCH_DOLLY) === ACTION.TOUCH_DOLLY || (_this._state & ACTION.TOUCH_DOLLY_ROTATE) === ACTION.TOUCH_DOLLY_ROTATE || (_this._state & ACTION.TOUCH_DOLLY_TRUCK) === ACTION.TOUCH_DOLLY_TRUCK || (_this._state & ACTION.TOUCH_DOLLY_OFFSET) === ACTION.TOUCH_DOLLY_OFFSET) {\n          _this._dollyInternal(dollyDelta * TOUCH_DOLLY_FACTOR, _dollyX, _dollyY);\n          _this._isUserControllingDolly = true;\n        } else {\n          _this._zoomInternal(dollyDelta * TOUCH_DOLLY_FACTOR, _dollyX, _dollyY);\n          _this._isUserControllingZoom = true;\n        }\n      }\n      if ((_this._state & ACTION.TRUCK) === ACTION.TRUCK || (_this._state & ACTION.TOUCH_TRUCK) === ACTION.TOUCH_TRUCK || (_this._state & ACTION.TOUCH_DOLLY_TRUCK) === ACTION.TOUCH_DOLLY_TRUCK || (_this._state & ACTION.TOUCH_ZOOM_TRUCK) === ACTION.TOUCH_ZOOM_TRUCK) {\n        _this._truckInternal(deltaX, deltaY, false);\n        _this._isUserControllingTruck = true;\n      }\n      if ((_this._state & ACTION.OFFSET) === ACTION.OFFSET || (_this._state & ACTION.TOUCH_OFFSET) === ACTION.TOUCH_OFFSET || (_this._state & ACTION.TOUCH_DOLLY_OFFSET) === ACTION.TOUCH_DOLLY_OFFSET || (_this._state & ACTION.TOUCH_ZOOM_OFFSET) === ACTION.TOUCH_ZOOM_OFFSET) {\n        _this._truckInternal(deltaX, deltaY, true);\n        _this._isUserControllingOffset = true;\n      }\n      _this.dispatchEvent({\n        type: 'control'\n      });\n    };\n    var endDragging = function endDragging() {\n      extractClientCoordFromEvent(_this._activePointers, _v2);\n      lastDragPosition.copy(_v2);\n      if (_this._activePointers.length === 0 || _this._activePointers.length === 1 && _this._activePointers[0] === _this._lockedPointer) {\n        _this._isDragging = false;\n      }\n      if (_this._activePointers.length === 0 && _this._domElement) {\n        // eslint-disable-next-line no-undef\n        _this._domElement.ownerDocument.removeEventListener('pointermove', onPointerMove, {\n          passive: false\n        });\n        _this._domElement.ownerDocument.removeEventListener('mousemove', onMouseMove);\n        _this._domElement.ownerDocument.removeEventListener('pointerup', onPointerUp);\n        _this._domElement.ownerDocument.removeEventListener('mouseup', onMouseUp);\n        _this.dispatchEvent({\n          type: 'controlend'\n        });\n      }\n    };\n    _this.lockPointer = function () {\n      if (!_this._enabled || !_this._domElement) return;\n      _this.cancel();\n      // Element.requestPointerLock is allowed to happen without any pointer active - create a faux one for compatibility with controls\n      _this._lockedPointer = {\n        pointerId: -1,\n        clientX: 0,\n        clientY: 0,\n        deltaX: 0,\n        deltaY: 0,\n        mouseButton: null\n      };\n      _this._activePointers.push(_this._lockedPointer);\n      // eslint-disable-next-line no-undef\n      _this._domElement.ownerDocument.removeEventListener('pointermove', onPointerMove, {\n        passive: false\n      });\n      _this._domElement.ownerDocument.removeEventListener('pointerup', onPointerUp);\n      _this._domElement.requestPointerLock();\n      _this._domElement.ownerDocument.addEventListener('pointerlockchange', onPointerLockChange);\n      _this._domElement.ownerDocument.addEventListener('pointerlockerror', onPointerLockError);\n      _this._domElement.ownerDocument.addEventListener('pointermove', onPointerMove, {\n        passive: false\n      });\n      _this._domElement.ownerDocument.addEventListener('pointerup', onPointerUp);\n      startDragging();\n    };\n    _this.unlockPointer = function () {\n      if (_this._lockedPointer !== null) {\n        _this._disposePointer(_this._lockedPointer);\n        _this._lockedPointer = null;\n      }\n      document.exitPointerLock();\n      _this.cancel();\n      if (!_this._domElement) return;\n      _this._domElement.ownerDocument.removeEventListener('pointerlockchange', onPointerLockChange);\n      _this._domElement.ownerDocument.removeEventListener('pointerlockerror', onPointerLockError);\n    };\n    var onPointerLockChange = function onPointerLockChange() {\n      var isPointerLockActive = _this._domElement && _this._domElement.ownerDocument.pointerLockElement === _this._domElement;\n      if (!isPointerLockActive) _this.unlockPointer();\n    };\n    var onPointerLockError = function onPointerLockError() {\n      _this.unlockPointer();\n    };\n    _this._addAllEventListeners = function (domElement) {\n      _this._domElement = domElement;\n      _this._domElement.style.touchAction = 'none';\n      _this._domElement.style.userSelect = 'none';\n      _this._domElement.style.webkitUserSelect = 'none';\n      _this._domElement.addEventListener('pointerdown', onPointerDown);\n      isPointerEventsNotSupported && _this._domElement.addEventListener('mousedown', onMouseDown);\n      _this._domElement.addEventListener('pointercancel', onPointerUp);\n      _this._domElement.addEventListener('wheel', onMouseWheel, {\n        passive: false\n      });\n      _this._domElement.addEventListener('contextmenu', onContextMenu);\n    };\n    _this._removeAllEventListeners = function () {\n      if (!_this._domElement) return;\n      _this._domElement.style.touchAction = '';\n      _this._domElement.style.userSelect = '';\n      _this._domElement.style.webkitUserSelect = '';\n      _this._domElement.removeEventListener('pointerdown', onPointerDown);\n      _this._domElement.removeEventListener('mousedown', onMouseDown);\n      _this._domElement.removeEventListener('pointercancel', onPointerUp);\n      // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener#matching_event_listeners_for_removal\n      // > it's probably wise to use the same values used for the call to `addEventListener()` when calling `removeEventListener()`\n      // see https://github.com/microsoft/TypeScript/issues/32912#issuecomment-522142969\n      // eslint-disable-next-line no-undef\n      _this._domElement.removeEventListener('wheel', onMouseWheel, {\n        passive: false\n      });\n      _this._domElement.removeEventListener('contextmenu', onContextMenu);\n      // eslint-disable-next-line no-undef\n      _this._domElement.ownerDocument.removeEventListener('pointermove', onPointerMove, {\n        passive: false\n      });\n      _this._domElement.ownerDocument.removeEventListener('mousemove', onMouseMove);\n      _this._domElement.ownerDocument.removeEventListener('pointerup', onPointerUp);\n      _this._domElement.ownerDocument.removeEventListener('mouseup', onMouseUp);\n      _this._domElement.ownerDocument.removeEventListener('pointerlockchange', onPointerLockChange);\n      _this._domElement.ownerDocument.removeEventListener('pointerlockerror', onPointerLockError);\n    };\n    _this.cancel = function () {\n      if (_this._state === ACTION.NONE) return;\n      _this._state = ACTION.NONE;\n      _this._activePointers.length = 0;\n      endDragging();\n    };\n    if (domElement) _this.connect(domElement);\n    _this.update(0);\n    return _this;\n  }\n  /**\n   * The camera to be controlled\n   * @category Properties\n   */\n  _createClass(CameraControls, [{\n    key: \"camera\",\n    get: function get() {\n      return this._camera;\n    },\n    set: function set(camera) {\n      this._camera = camera;\n      this.updateCameraUp();\n      this._camera.updateProjectionMatrix();\n      this._updateNearPlaneCorners();\n      this._needsUpdate = true;\n    }\n    /**\n     * Whether or not the controls are enabled.\n     * `false` to disable user dragging/touch-move, but all methods works.\n     * @category Properties\n     */\n  }, {\n    key: \"enabled\",\n    get: function get() {\n      return this._enabled;\n    },\n    set: function set(enabled) {\n      this._enabled = enabled;\n      if (!this._domElement) return;\n      if (enabled) {\n        this._domElement.style.touchAction = 'none';\n        this._domElement.style.userSelect = 'none';\n        this._domElement.style.webkitUserSelect = 'none';\n      } else {\n        this.cancel();\n        this._domElement.style.touchAction = '';\n        this._domElement.style.userSelect = '';\n        this._domElement.style.webkitUserSelect = '';\n      }\n    }\n    /**\n     * Returns `true` if the controls are active updating.\n     * readonly value.\n     * @category Properties\n     */\n  }, {\n    key: \"active\",\n    get: function get() {\n      return !this._hasRested;\n    }\n    /**\n     * Getter for the current `ACTION`.\n     * readonly value.\n     * @category Properties\n     */\n  }, {\n    key: \"currentAction\",\n    get: function get() {\n      return this._state;\n    }\n    /**\n     * get/set Current distance.\n     * @category Properties\n     */\n  }, {\n    key: \"distance\",\n    get: function get() {\n      return this._spherical.radius;\n    },\n    set: function set(distance) {\n      if (this._spherical.radius === distance && this._sphericalEnd.radius === distance) return;\n      this._spherical.radius = distance;\n      this._sphericalEnd.radius = distance;\n      this._needsUpdate = true;\n    }\n    // horizontal angle\n    /**\n     * get/set the azimuth angle (horizontal) in radians.\n     * Every 360 degrees turn is added to `.azimuthAngle` value, which is accumulative.\n     * @category Properties\n     */\n  }, {\n    key: \"azimuthAngle\",\n    get: function get() {\n      return this._spherical.theta;\n    },\n    set: function set(azimuthAngle) {\n      if (this._spherical.theta === azimuthAngle && this._sphericalEnd.theta === azimuthAngle) return;\n      this._spherical.theta = azimuthAngle;\n      this._sphericalEnd.theta = azimuthAngle;\n      this._needsUpdate = true;\n    }\n    // vertical angle\n    /**\n     * get/set the polar angle (vertical) in radians.\n     * @category Properties\n     */\n  }, {\n    key: \"polarAngle\",\n    get: function get() {\n      return this._spherical.phi;\n    },\n    set: function set(polarAngle) {\n      if (this._spherical.phi === polarAngle && this._sphericalEnd.phi === polarAngle) return;\n      this._spherical.phi = polarAngle;\n      this._sphericalEnd.phi = polarAngle;\n      this._needsUpdate = true;\n    }\n    /**\n     * Whether camera position should be enclosed in the boundary or not.\n     * @category Properties\n     */\n  }, {\n    key: \"boundaryEnclosesCamera\",\n    get: function get() {\n      return this._boundaryEnclosesCamera;\n    },\n    set: function set(boundaryEnclosesCamera) {\n      this._boundaryEnclosesCamera = boundaryEnclosesCamera;\n      this._needsUpdate = true;\n    }\n    /**\n     * Adds the specified event listener.\n     * Applicable event types (which is `K`) are:\n     * | Event name          | Timing |\n     * | ------------------- | ------ |\n     * | `'controlstart'`    | When the user starts to control the camera via mouse / touches. ¹ |\n     * | `'control'`         | When the user controls the camera (dragging). |\n     * | `'controlend'`      | When the user ends to control the camera. ¹ |\n     * | `'transitionstart'` | When any kind of transition starts, either user control or using a method with `enableTransition = true` |\n     * | `'update'`          | When the camera position is updated. |\n     * | `'wake'`            | When the camera starts moving. |\n     * | `'rest'`            | When the camera movement is below `.restThreshold` ². |\n     * | `'sleep'`           | When the camera end moving. |\n     *\n     * 1. `mouseButtons.wheel` (Mouse wheel control) does not emit `'controlstart'` and `'controlend'`. `mouseButtons.wheel` uses scroll-event internally, and scroll-event happens intermittently. That means \"start\" and \"end\" cannot be detected.\n     * 2. Due to damping, `sleep` will usually fire a few seconds after the camera _appears_ to have stopped moving. If you want to do something (e.g. enable UI, perform another transition) at the point when the camera has stopped, you probably want the `rest` event. This can be fine tuned using the `.restThreshold` parameter. See the [Rest and Sleep Example](https://yomotsu.github.io/camera-controls/examples/rest-and-sleep.html).\n     *\n     * e.g.\n     * ```\n     * cameraControl.addEventListener( 'controlstart', myCallbackFunction );\n     * ```\n     * @param type event name\n     * @param listener handler function\n     * @category Methods\n     */\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener) {\n      _get(_getPrototypeOf(CameraControls.prototype), \"addEventListener\", this).call(this, type, listener);\n    }\n    /**\n     * Removes the specified event listener\n     * e.g.\n     * ```\n     * cameraControl.addEventListener( 'controlstart', myCallbackFunction );\n     * ```\n     * @param type event name\n     * @param listener handler function\n     * @category Methods\n     */\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(type, listener) {\n      _get(_getPrototypeOf(CameraControls.prototype), \"removeEventListener\", this).call(this, type, listener);\n    }\n    /**\n     * Rotate azimuthal angle(horizontal) and polar angle(vertical).\n     * Every value is added to the current value.\n     * @param azimuthAngle Azimuth rotate angle. In radian.\n     * @param polarAngle Polar rotate angle. In radian.\n     * @param enableTransition Whether to move smoothly or immediately\n     * @category Methods\n     */\n  }, {\n    key: \"rotate\",\n    value: function rotate(azimuthAngle, polarAngle) {\n      var enableTransition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      return this.rotateTo(this._sphericalEnd.theta + azimuthAngle, this._sphericalEnd.phi + polarAngle, enableTransition);\n    }\n    /**\n     * Rotate azimuthal angle(horizontal) to the given angle and keep the same polar angle(vertical) target.\n     *\n     * e.g.\n     * ```\n     * cameraControls.rotateAzimuthTo( 30 * THREE.MathUtils.DEG2RAD, true );\n     * ```\n     * @param azimuthAngle Azimuth rotate angle. In radian.\n     * @param enableTransition Whether to move smoothly or immediately\n     * @category Methods\n     */\n  }, {\n    key: \"rotateAzimuthTo\",\n    value: function rotateAzimuthTo(azimuthAngle) {\n      var enableTransition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return this.rotateTo(azimuthAngle, this._sphericalEnd.phi, enableTransition);\n    }\n    /**\n     * Rotate polar angle(vertical) to the given angle and keep the same azimuthal angle(horizontal) target.\n     *\n     * e.g.\n     * ```\n     * cameraControls.rotatePolarTo( 30 * THREE.MathUtils.DEG2RAD, true );\n     * ```\n     * @param polarAngle Polar rotate angle. In radian.\n     * @param enableTransition Whether to move smoothly or immediately\n     * @category Methods\n     */\n  }, {\n    key: \"rotatePolarTo\",\n    value: function rotatePolarTo(polarAngle) {\n      var enableTransition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return this.rotateTo(this._sphericalEnd.theta, polarAngle, enableTransition);\n    }\n    /**\n     * Rotate azimuthal angle(horizontal) and polar angle(vertical) to the given angle.\n     * Camera view will rotate over the orbit pivot absolutely:\n     *\n     * azimuthAngle\n     * ```\n     *       0º\n     *         \\\n     * 90º -----+----- -90º\n     *           \\\n     *           180º\n     * ```\n     * | direction | angle                  |\n     * | --------- | ---------------------- |\n     * | front     | 0º                     |\n     * | left      | 90º (`Math.PI / 2`)    |\n     * | right     | -90º (`- Math.PI / 2`) |\n     * | back      | 180º (`Math.PI`)       |\n     *\n     * polarAngle\n     * ```\n     *     180º\n     *      |\n     *      90º\n     *      |\n     *      0º\n     * ```\n     * | direction            | angle                  |\n     * | -------------------- | ---------------------- |\n     * | top/sky              | 180º (`Math.PI`)       |\n     * | horizontal from view | 90º (`Math.PI / 2`)    |\n     * | bottom/floor         | 0º                     |\n     *\n     * @param azimuthAngle Azimuth rotate angle to. In radian.\n     * @param polarAngle Polar rotate angle to. In radian.\n     * @param enableTransition  Whether to move smoothly or immediately\n     * @category Methods\n     */\n  }, {\n    key: \"rotateTo\",\n    value: function rotateTo(azimuthAngle, polarAngle) {\n      var enableTransition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      this._isUserControllingRotate = false;\n      var theta = clamp(azimuthAngle, this.minAzimuthAngle, this.maxAzimuthAngle);\n      var phi = clamp(polarAngle, this.minPolarAngle, this.maxPolarAngle);\n      this._sphericalEnd.theta = theta;\n      this._sphericalEnd.phi = phi;\n      this._sphericalEnd.makeSafe();\n      this._needsUpdate = true;\n      if (!enableTransition) {\n        this._spherical.theta = this._sphericalEnd.theta;\n        this._spherical.phi = this._sphericalEnd.phi;\n      }\n      var resolveImmediately = !enableTransition || approxEquals(this._spherical.theta, this._sphericalEnd.theta, this.restThreshold) && approxEquals(this._spherical.phi, this._sphericalEnd.phi, this.restThreshold);\n      return this._createOnRestPromise(resolveImmediately);\n    }\n    /**\n     * Dolly in/out camera position.\n     * @param distance Distance of dollyIn. Negative number for dollyOut.\n     * @param enableTransition Whether to move smoothly or immediately.\n     * @category Methods\n     */\n  }, {\n    key: \"dolly\",\n    value: function dolly(distance) {\n      var enableTransition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return this.dollyTo(this._sphericalEnd.radius - distance, enableTransition);\n    }\n    /**\n     * Dolly in/out camera position to given distance.\n     * @param distance Distance of dolly.\n     * @param enableTransition Whether to move smoothly or immediately.\n     * @category Methods\n     */\n  }, {\n    key: \"dollyTo\",\n    value: function dollyTo(distance) {\n      var enableTransition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      this._isUserControllingDolly = false;\n      var lastRadius = this._sphericalEnd.radius;\n      var newRadius = clamp(distance, this.minDistance, this.maxDistance);\n      var hasCollider = this.colliderMeshes.length >= 1;\n      if (hasCollider) {\n        var maxDistanceByCollisionTest = this._collisionTest();\n        var isCollided = approxEquals(maxDistanceByCollisionTest, this._spherical.radius);\n        var isDollyIn = lastRadius > newRadius;\n        if (!isDollyIn && isCollided) return Promise.resolve();\n        this._sphericalEnd.radius = Math.min(newRadius, maxDistanceByCollisionTest);\n      } else {\n        this._sphericalEnd.radius = newRadius;\n      }\n      this._needsUpdate = true;\n      if (!enableTransition) {\n        this._spherical.radius = this._sphericalEnd.radius;\n      }\n      var resolveImmediately = !enableTransition || approxEquals(this._spherical.radius, this._sphericalEnd.radius, this.restThreshold);\n      return this._createOnRestPromise(resolveImmediately);\n    }\n    /**\n     * Zoom in/out camera. The value is added to camera zoom.\n     * Limits set with `.minZoom` and `.maxZoom`\n     * @param zoomStep zoom scale\n     * @param enableTransition Whether to move smoothly or immediately\n     * @category Methods\n     */\n  }, {\n    key: \"zoom\",\n    value: function zoom(zoomStep) {\n      var enableTransition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return this.zoomTo(this._zoomEnd + zoomStep, enableTransition);\n    }\n    /**\n     * Zoom in/out camera to given scale. The value overwrites camera zoom.\n     * Limits set with .minZoom and .maxZoom\n     * @param zoom\n     * @param enableTransition\n     * @category Methods\n     */\n  }, {\n    key: \"zoomTo\",\n    value: function zoomTo(zoom) {\n      var enableTransition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      this._isUserControllingZoom = false;\n      this._zoomEnd = clamp(zoom, this.minZoom, this.maxZoom);\n      this._needsUpdate = true;\n      if (!enableTransition) {\n        this._zoom = this._zoomEnd;\n      }\n      var resolveImmediately = !enableTransition || approxEquals(this._zoom, this._zoomEnd, this.restThreshold);\n      return this._createOnRestPromise(resolveImmediately);\n    }\n    /**\n     * @deprecated `pan()` has been renamed to `truck()`\n     * @category Methods\n     */\n  }, {\n    key: \"pan\",\n    value: function pan(x, y) {\n      var enableTransition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      console.warn('`pan` has been renamed to `truck`');\n      return this.truck(x, y, enableTransition);\n    }\n    /**\n     * Truck and pedestal camera using current azimuthal angle\n     * @param x Horizontal translate amount\n     * @param y Vertical translate amount\n     * @param enableTransition Whether to move smoothly or immediately\n     * @category Methods\n     */\n  }, {\n    key: \"truck\",\n    value: function truck(x, y) {\n      var enableTransition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      this._camera.updateMatrix();\n      _xColumn.setFromMatrixColumn(this._camera.matrix, 0);\n      _yColumn.setFromMatrixColumn(this._camera.matrix, 1);\n      _xColumn.multiplyScalar(x);\n      _yColumn.multiplyScalar(-y);\n      var offset = _v3A.copy(_xColumn).add(_yColumn);\n      var to = _v3B.copy(this._targetEnd).add(offset);\n      return this.moveTo(to.x, to.y, to.z, enableTransition);\n    }\n    /**\n     * Move forward / backward.\n     * @param distance Amount to move forward / backward. Negative value to move backward\n     * @param enableTransition Whether to move smoothly or immediately\n     * @category Methods\n     */\n  }, {\n    key: \"forward\",\n    value: function forward(distance) {\n      var enableTransition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      _v3A.setFromMatrixColumn(this._camera.matrix, 0);\n      _v3A.crossVectors(this._camera.up, _v3A);\n      _v3A.multiplyScalar(distance);\n      var to = _v3B.copy(this._targetEnd).add(_v3A);\n      return this.moveTo(to.x, to.y, to.z, enableTransition);\n    }\n    /**\n     * Move up / down.\n     * @param height Amount to move up / down. Negative value to move down\n     * @param enableTransition Whether to move smoothly or immediately\n     * @category Methods\n     */\n  }, {\n    key: \"elevate\",\n    value: function elevate(height) {\n      var enableTransition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      _v3A.copy(this._camera.up).multiplyScalar(height);\n      return this.moveTo(this._targetEnd.x + _v3A.x, this._targetEnd.y + _v3A.y, this._targetEnd.z + _v3A.z, enableTransition);\n    }\n    /**\n     * Move target position to given point.\n     * @param x x coord to move center position\n     * @param y y coord to move center position\n     * @param z z coord to move center position\n     * @param enableTransition Whether to move smoothly or immediately\n     * @category Methods\n     */\n  }, {\n    key: \"moveTo\",\n    value: function moveTo(x, y, z) {\n      var enableTransition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      this._isUserControllingTruck = false;\n      var offset = _v3A.set(x, y, z).sub(this._targetEnd);\n      this._encloseToBoundary(this._targetEnd, offset, this.boundaryFriction);\n      this._needsUpdate = true;\n      if (!enableTransition) {\n        this._target.copy(this._targetEnd);\n      }\n      var resolveImmediately = !enableTransition || approxEquals(this._target.x, this._targetEnd.x, this.restThreshold) && approxEquals(this._target.y, this._targetEnd.y, this.restThreshold) && approxEquals(this._target.z, this._targetEnd.z, this.restThreshold);\n      return this._createOnRestPromise(resolveImmediately);\n    }\n    /**\n     * Look in the given point direction.\n     * @param x point x.\n     * @param y point y.\n     * @param z point z.\n     * @param enableTransition Whether to move smoothly or immediately.\n     * @returns Transition end promise\n     * @category Methods\n     */\n  }, {\n    key: \"lookInDirectionOf\",\n    value: function lookInDirectionOf(x, y, z) {\n      var enableTransition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var point = _v3A.set(x, y, z);\n      var direction = point.sub(this._targetEnd).normalize();\n      var position = direction.multiplyScalar(-this._sphericalEnd.radius);\n      return this.setPosition(position.x, position.y, position.z, enableTransition);\n    }\n    /**\n     * Fit the viewport to the box or the bounding box of the object, using the nearest axis. paddings are in unit.\n     * set `cover: true` to fill enter screen.\n     * e.g.\n     * ```\n     * cameraControls.fitToBox( myMesh );\n     * ```\n     * @param box3OrObject Axis aligned bounding box to fit the view.\n     * @param enableTransition Whether to move smoothly or immediately.\n     * @param options | `<object>` { cover: boolean, paddingTop: number, paddingLeft: number, paddingBottom: number, paddingRight: number }\n     * @returns Transition end promise\n     * @category Methods\n     */\n  }, {\n    key: \"fitToBox\",\n    value: function fitToBox(box3OrObject, enableTransition) {\n      var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n        _ref$cover = _ref.cover,\n        cover = _ref$cover === void 0 ? false : _ref$cover,\n        _ref$paddingLeft = _ref.paddingLeft,\n        paddingLeft = _ref$paddingLeft === void 0 ? 0 : _ref$paddingLeft,\n        _ref$paddingRight = _ref.paddingRight,\n        paddingRight = _ref$paddingRight === void 0 ? 0 : _ref$paddingRight,\n        _ref$paddingBottom = _ref.paddingBottom,\n        paddingBottom = _ref$paddingBottom === void 0 ? 0 : _ref$paddingBottom,\n        _ref$paddingTop = _ref.paddingTop,\n        paddingTop = _ref$paddingTop === void 0 ? 0 : _ref$paddingTop;\n      var promises = [];\n      var aabb = box3OrObject.isBox3 ? _box3A.copy(box3OrObject) : _box3A.setFromObject(box3OrObject);\n      if (aabb.isEmpty()) {\n        console.warn('camera-controls: fitTo() cannot be used with an empty box. Aborting');\n        Promise.resolve();\n      }\n      // round to closest axis ( forward | backward | right | left | top | bottom )\n      var theta = roundToStep(this._sphericalEnd.theta, PI_HALF);\n      var phi = roundToStep(this._sphericalEnd.phi, PI_HALF);\n      promises.push(this.rotateTo(theta, phi, enableTransition));\n      var normal = _v3A.setFromSpherical(this._sphericalEnd).normalize();\n      var rotation = _quaternionA.setFromUnitVectors(normal, _AXIS_Z);\n      var viewFromPolar = approxEquals(Math.abs(normal.y), 1);\n      if (viewFromPolar) {\n        rotation.multiply(_quaternionB.setFromAxisAngle(_AXIS_Y, theta));\n      }\n      rotation.multiply(this._yAxisUpSpaceInverse);\n      // make oriented bounding box\n      var bb = _box3B.makeEmpty();\n      // left bottom back corner\n      _v3B.copy(aabb.min).applyQuaternion(rotation);\n      bb.expandByPoint(_v3B);\n      // right bottom back corner\n      _v3B.copy(aabb.min).setX(aabb.max.x).applyQuaternion(rotation);\n      bb.expandByPoint(_v3B);\n      // left top back corner\n      _v3B.copy(aabb.min).setY(aabb.max.y).applyQuaternion(rotation);\n      bb.expandByPoint(_v3B);\n      // right top back corner\n      _v3B.copy(aabb.max).setZ(aabb.min.z).applyQuaternion(rotation);\n      bb.expandByPoint(_v3B);\n      // left bottom front corner\n      _v3B.copy(aabb.min).setZ(aabb.max.z).applyQuaternion(rotation);\n      bb.expandByPoint(_v3B);\n      // right bottom front corner\n      _v3B.copy(aabb.max).setY(aabb.min.y).applyQuaternion(rotation);\n      bb.expandByPoint(_v3B);\n      // left top front corner\n      _v3B.copy(aabb.max).setX(aabb.min.x).applyQuaternion(rotation);\n      bb.expandByPoint(_v3B);\n      // right top front corner\n      _v3B.copy(aabb.max).applyQuaternion(rotation);\n      bb.expandByPoint(_v3B);\n      // add padding\n      bb.min.x -= paddingLeft;\n      bb.min.y -= paddingBottom;\n      bb.max.x += paddingRight;\n      bb.max.y += paddingTop;\n      rotation.setFromUnitVectors(_AXIS_Z, normal);\n      if (viewFromPolar) {\n        rotation.premultiply(_quaternionB.invert());\n      }\n      rotation.premultiply(this._yAxisUpSpace);\n      var bbSize = bb.getSize(_v3A);\n      var center = bb.getCenter(_v3B).applyQuaternion(rotation);\n      if (isPerspectiveCamera(this._camera)) {\n        var distance = this.getDistanceToFitBox(bbSize.x, bbSize.y, bbSize.z, cover);\n        promises.push(this.moveTo(center.x, center.y, center.z, enableTransition));\n        promises.push(this.dollyTo(distance, enableTransition));\n        promises.push(this.setFocalOffset(0, 0, 0, enableTransition));\n      } else if (isOrthographicCamera(this._camera)) {\n        var camera = this._camera;\n        var width = camera.right - camera.left;\n        var height = camera.top - camera.bottom;\n        var zoom = cover ? Math.max(width / bbSize.x, height / bbSize.y) : Math.min(width / bbSize.x, height / bbSize.y);\n        promises.push(this.moveTo(center.x, center.y, center.z, enableTransition));\n        promises.push(this.zoomTo(zoom, enableTransition));\n        promises.push(this.setFocalOffset(0, 0, 0, enableTransition));\n      }\n      return Promise.all(promises);\n    }\n    /**\n     * Fit the viewport to the sphere or the bounding sphere of the object.\n     * @param sphereOrMesh\n     * @param enableTransition\n     * @category Methods\n     */\n  }, {\n    key: \"fitToSphere\",\n    value: function fitToSphere(sphereOrMesh, enableTransition) {\n      var promises = [];\n      var isSphere = sphereOrMesh instanceof THREE.Sphere;\n      var boundingSphere = isSphere ? _sphere.copy(sphereOrMesh) : CameraControls.createBoundingSphere(sphereOrMesh, _sphere);\n      promises.push(this.moveTo(boundingSphere.center.x, boundingSphere.center.y, boundingSphere.center.z, enableTransition));\n      if (isPerspectiveCamera(this._camera)) {\n        var distanceToFit = this.getDistanceToFitSphere(boundingSphere.radius);\n        promises.push(this.dollyTo(distanceToFit, enableTransition));\n      } else if (isOrthographicCamera(this._camera)) {\n        var width = this._camera.right - this._camera.left;\n        var height = this._camera.top - this._camera.bottom;\n        var diameter = 2 * boundingSphere.radius;\n        var zoom = Math.min(width / diameter, height / diameter);\n        promises.push(this.zoomTo(zoom, enableTransition));\n      }\n      promises.push(this.setFocalOffset(0, 0, 0, enableTransition));\n      return Promise.all(promises);\n    }\n    /**\n     * Look at the `target` from the `position`.\n     * @param positionX\n     * @param positionY\n     * @param positionZ\n     * @param targetX\n     * @param targetY\n     * @param targetZ\n     * @param enableTransition\n     * @category Methods\n     */\n  }, {\n    key: \"setLookAt\",\n    value: function setLookAt(positionX, positionY, positionZ, targetX, targetY, targetZ) {\n      var enableTransition = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n      this._isUserControllingRotate = false;\n      this._isUserControllingDolly = false;\n      this._isUserControllingTruck = false;\n      var target = _v3B.set(targetX, targetY, targetZ);\n      var position = _v3A.set(positionX, positionY, positionZ);\n      this._targetEnd.copy(target);\n      this._sphericalEnd.setFromVector3(position.sub(target).applyQuaternion(this._yAxisUpSpace));\n      this.normalizeRotations();\n      this._needsUpdate = true;\n      if (!enableTransition) {\n        this._target.copy(this._targetEnd);\n        this._spherical.copy(this._sphericalEnd);\n      }\n      var resolveImmediately = !enableTransition || approxEquals(this._target.x, this._targetEnd.x, this.restThreshold) && approxEquals(this._target.y, this._targetEnd.y, this.restThreshold) && approxEquals(this._target.z, this._targetEnd.z, this.restThreshold) && approxEquals(this._spherical.theta, this._sphericalEnd.theta, this.restThreshold) && approxEquals(this._spherical.phi, this._sphericalEnd.phi, this.restThreshold) && approxEquals(this._spherical.radius, this._sphericalEnd.radius, this.restThreshold);\n      return this._createOnRestPromise(resolveImmediately);\n    }\n    /**\n     * Similar to setLookAt, but it interpolates between two states.\n     * @param positionAX\n     * @param positionAY\n     * @param positionAZ\n     * @param targetAX\n     * @param targetAY\n     * @param targetAZ\n     * @param positionBX\n     * @param positionBY\n     * @param positionBZ\n     * @param targetBX\n     * @param targetBY\n     * @param targetBZ\n     * @param t\n     * @param enableTransition\n     * @category Methods\n     */\n  }, {\n    key: \"lerpLookAt\",\n    value: function lerpLookAt(positionAX, positionAY, positionAZ, targetAX, targetAY, targetAZ, positionBX, positionBY, positionBZ, targetBX, targetBY, targetBZ, t) {\n      var enableTransition = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : false;\n      this._isUserControllingRotate = false;\n      this._isUserControllingDolly = false;\n      this._isUserControllingTruck = false;\n      var targetA = _v3A.set(targetAX, targetAY, targetAZ);\n      var positionA = _v3B.set(positionAX, positionAY, positionAZ);\n      _sphericalA.setFromVector3(positionA.sub(targetA).applyQuaternion(this._yAxisUpSpace));\n      var targetB = _v3C.set(targetBX, targetBY, targetBZ);\n      var positionB = _v3B.set(positionBX, positionBY, positionBZ);\n      _sphericalB.setFromVector3(positionB.sub(targetB).applyQuaternion(this._yAxisUpSpace));\n      this._targetEnd.copy(targetA.lerp(targetB, t)); // tricky\n      var deltaTheta = _sphericalB.theta - _sphericalA.theta;\n      var deltaPhi = _sphericalB.phi - _sphericalA.phi;\n      var deltaRadius = _sphericalB.radius - _sphericalA.radius;\n      this._sphericalEnd.set(_sphericalA.radius + deltaRadius * t, _sphericalA.phi + deltaPhi * t, _sphericalA.theta + deltaTheta * t);\n      this.normalizeRotations();\n      this._needsUpdate = true;\n      if (!enableTransition) {\n        this._target.copy(this._targetEnd);\n        this._spherical.copy(this._sphericalEnd);\n      }\n      var resolveImmediately = !enableTransition || approxEquals(this._target.x, this._targetEnd.x, this.restThreshold) && approxEquals(this._target.y, this._targetEnd.y, this.restThreshold) && approxEquals(this._target.z, this._targetEnd.z, this.restThreshold) && approxEquals(this._spherical.theta, this._sphericalEnd.theta, this.restThreshold) && approxEquals(this._spherical.phi, this._sphericalEnd.phi, this.restThreshold) && approxEquals(this._spherical.radius, this._sphericalEnd.radius, this.restThreshold);\n      return this._createOnRestPromise(resolveImmediately);\n    }\n    /**\n     * Set angle and distance by given position.\n     * An alias of `setLookAt()`, without target change. Thus keep gazing at the current target\n     * @param positionX\n     * @param positionY\n     * @param positionZ\n     * @param enableTransition\n     * @category Methods\n     */\n  }, {\n    key: \"setPosition\",\n    value: function setPosition(positionX, positionY, positionZ) {\n      var enableTransition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      return this.setLookAt(positionX, positionY, positionZ, this._targetEnd.x, this._targetEnd.y, this._targetEnd.z, enableTransition);\n    }\n    /**\n     * Set the target position where gaze at.\n     * An alias of `setLookAt()`, without position change. Thus keep the same position.\n     * @param targetX\n     * @param targetY\n     * @param targetZ\n     * @param enableTransition\n     * @category Methods\n     */\n  }, {\n    key: \"setTarget\",\n    value: function setTarget(targetX, targetY, targetZ) {\n      var enableTransition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var pos = this.getPosition(_v3A);\n      var promise = this.setLookAt(pos.x, pos.y, pos.z, targetX, targetY, targetZ, enableTransition);\n      // see https://github.com/yomotsu/camera-controls/issues/335\n      this._sphericalEnd.phi = clamp(this.polarAngle, this.minPolarAngle, this.maxPolarAngle);\n      return promise;\n    }\n    /**\n     * Set focal offset using the screen parallel coordinates. z doesn't affect in Orthographic as with Dolly.\n     * @param x\n     * @param y\n     * @param z\n     * @param enableTransition\n     * @category Methods\n     */\n  }, {\n    key: \"setFocalOffset\",\n    value: function setFocalOffset(x, y, z) {\n      var enableTransition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      this._isUserControllingOffset = false;\n      this._focalOffsetEnd.set(x, y, z);\n      this._needsUpdate = true;\n      if (!enableTransition) this._focalOffset.copy(this._focalOffsetEnd);\n      var resolveImmediately = !enableTransition || approxEquals(this._focalOffset.x, this._focalOffsetEnd.x, this.restThreshold) && approxEquals(this._focalOffset.y, this._focalOffsetEnd.y, this.restThreshold) && approxEquals(this._focalOffset.z, this._focalOffsetEnd.z, this.restThreshold);\n      return this._createOnRestPromise(resolveImmediately);\n    }\n    /**\n     * Set orbit point without moving the camera.\n     * SHOULD NOT RUN DURING ANIMATIONS. `setOrbitPoint()` will immediately fix the positions.\n     * @param targetX\n     * @param targetY\n     * @param targetZ\n     * @category Methods\n     */\n  }, {\n    key: \"setOrbitPoint\",\n    value: function setOrbitPoint(targetX, targetY, targetZ) {\n      this._camera.updateMatrixWorld();\n      _xColumn.setFromMatrixColumn(this._camera.matrixWorldInverse, 0);\n      _yColumn.setFromMatrixColumn(this._camera.matrixWorldInverse, 1);\n      _zColumn.setFromMatrixColumn(this._camera.matrixWorldInverse, 2);\n      var position = _v3A.set(targetX, targetY, targetZ);\n      var distance = position.distanceTo(this._camera.position);\n      var cameraToPoint = position.sub(this._camera.position);\n      _xColumn.multiplyScalar(cameraToPoint.x);\n      _yColumn.multiplyScalar(cameraToPoint.y);\n      _zColumn.multiplyScalar(cameraToPoint.z);\n      _v3A.copy(_xColumn).add(_yColumn).add(_zColumn);\n      _v3A.z = _v3A.z + distance;\n      this.dollyTo(distance, false);\n      this.setFocalOffset(-_v3A.x, _v3A.y, -_v3A.z, false);\n      this.moveTo(targetX, targetY, targetZ, false);\n    }\n    /**\n     * Set the boundary box that encloses the target of the camera. box3 is in THREE.Box3\n     * @param box3\n     * @category Methods\n     */\n  }, {\n    key: \"setBoundary\",\n    value: function setBoundary(box3) {\n      if (!box3) {\n        this._boundary.min.set(-Infinity, -Infinity, -Infinity);\n        this._boundary.max.set(Infinity, Infinity, Infinity);\n        this._needsUpdate = true;\n        return;\n      }\n      this._boundary.copy(box3);\n      this._boundary.clampPoint(this._targetEnd, this._targetEnd);\n      this._needsUpdate = true;\n    }\n    /**\n     * Set (or unset) the current viewport.\n     * Set this when you want to use renderer viewport and .dollyToCursor feature at the same time.\n     * @param viewportOrX\n     * @param y\n     * @param width\n     * @param height\n     * @category Methods\n     */\n  }, {\n    key: \"setViewport\",\n    value: function setViewport(viewportOrX, y, width, height) {\n      if (viewportOrX === null) {\n        // null\n        this._viewport = null;\n        return;\n      }\n      this._viewport = this._viewport || new THREE.Vector4();\n      if (typeof viewportOrX === 'number') {\n        // number\n        this._viewport.set(viewportOrX, y, width, height);\n      } else {\n        // Vector4\n        this._viewport.copy(viewportOrX);\n      }\n    }\n    /**\n     * Calculate the distance to fit the box.\n     * @param width box width\n     * @param height box height\n     * @param depth box depth\n     * @returns distance\n     * @category Methods\n     */\n  }, {\n    key: \"getDistanceToFitBox\",\n    value: function getDistanceToFitBox(width, height, depth) {\n      var cover = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      if (notSupportedInOrthographicCamera(this._camera, 'getDistanceToFitBox')) return this._spherical.radius;\n      var boundingRectAspect = width / height;\n      var fov = this._camera.getEffectiveFOV() * DEG2RAD;\n      var aspect = this._camera.aspect;\n      var heightToFit = (cover ? boundingRectAspect > aspect : boundingRectAspect < aspect) ? height : width / aspect;\n      return heightToFit * 0.5 / Math.tan(fov * 0.5) + depth * 0.5;\n    }\n    /**\n     * Calculate the distance to fit the sphere.\n     * @param radius sphere radius\n     * @returns distance\n     * @category Methods\n     */\n  }, {\n    key: \"getDistanceToFitSphere\",\n    value: function getDistanceToFitSphere(radius) {\n      if (notSupportedInOrthographicCamera(this._camera, 'getDistanceToFitSphere')) return this._spherical.radius;\n      // https://stackoverflow.com/a/44849975\n      var vFOV = this._camera.getEffectiveFOV() * DEG2RAD;\n      var hFOV = Math.atan(Math.tan(vFOV * 0.5) * this._camera.aspect) * 2;\n      var fov = 1 < this._camera.aspect ? vFOV : hFOV;\n      return radius / Math.sin(fov * 0.5);\n    }\n    /**\n     * Returns its current gazing target, which is the center position of the orbit.\n     * @param out current gazing target\n     * @category Methods\n     */\n  }, {\n    key: \"getTarget\",\n    value: function getTarget(out) {\n      var _out = !!out && out.isVector3 ? out : new THREE.Vector3();\n      return _out.copy(this._targetEnd);\n    }\n    /**\n     * Returns its current position.\n     * @param out current position\n     * @category Methods\n     */\n  }, {\n    key: \"getPosition\",\n    value: function getPosition(out) {\n      var _out = !!out && out.isVector3 ? out : new THREE.Vector3();\n      return _out.setFromSpherical(this._sphericalEnd).applyQuaternion(this._yAxisUpSpaceInverse).add(this._targetEnd);\n    }\n    /**\n     * Returns its current focal offset, which is how much the camera appears to be translated in screen parallel coordinates.\n     * @param out current focal offset\n     * @category Methods\n     */\n  }, {\n    key: \"getFocalOffset\",\n    value: function getFocalOffset(out) {\n      var _out = !!out && out.isVector3 ? out : new THREE.Vector3();\n      return _out.copy(this._focalOffsetEnd);\n    }\n    /**\n     * Normalize camera azimuth angle rotation between 0 and 360 degrees.\n     * @category Methods\n     */\n  }, {\n    key: \"normalizeRotations\",\n    value: function normalizeRotations() {\n      this._sphericalEnd.theta = this._sphericalEnd.theta % PI_2;\n      if (this._sphericalEnd.theta < 0) this._sphericalEnd.theta += PI_2;\n      this._spherical.theta += PI_2 * Math.round((this._sphericalEnd.theta - this._spherical.theta) / PI_2);\n    }\n    /**\n     * Reset all rotation and position to defaults.\n     * @param enableTransition\n     * @category Methods\n     */\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var enableTransition = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (!approxEquals(this._camera.up.x, this._cameraUp0.x) || !approxEquals(this._camera.up.y, this._cameraUp0.y) || !approxEquals(this._camera.up.z, this._cameraUp0.z)) {\n        this._camera.up.copy(this._cameraUp0);\n        var position = this.getPosition(_v3A);\n        this.updateCameraUp();\n        this.setPosition(position.x, position.y, position.z);\n      }\n      var promises = [this.setLookAt(this._position0.x, this._position0.y, this._position0.z, this._target0.x, this._target0.y, this._target0.z, enableTransition), this.setFocalOffset(this._focalOffset0.x, this._focalOffset0.y, this._focalOffset0.z, enableTransition), this.zoomTo(this._zoom0, enableTransition)];\n      return Promise.all(promises);\n    }\n    /**\n     * Set current camera position as the default position.\n     * @category Methods\n     */\n  }, {\n    key: \"saveState\",\n    value: function saveState() {\n      this._cameraUp0.copy(this._camera.up);\n      this.getTarget(this._target0);\n      this.getPosition(this._position0);\n      this._zoom0 = this._zoom;\n      this._focalOffset0.copy(this._focalOffset);\n    }\n    /**\n     * Sync camera-up direction.\n     * When camera-up vector is changed, `.updateCameraUp()` must be called.\n     * @category Methods\n     */\n  }, {\n    key: \"updateCameraUp\",\n    value: function updateCameraUp() {\n      this._yAxisUpSpace.setFromUnitVectors(this._camera.up, _AXIS_Y);\n      this._yAxisUpSpaceInverse.copy(this._yAxisUpSpace).invert();\n    }\n    /**\n     * Apply current camera-up direction to the camera.\n     * The orbit system will be re-initialized with the current position.\n     * @category Methods\n     */\n  }, {\n    key: \"applyCameraUp\",\n    value: function applyCameraUp() {\n      var cameraDirection = _v3A.subVectors(this._target, this._camera.position).normalize();\n      // So first find the vector off to the side, orthogonal to both this.object.up and\n      // the \"view\" vector.\n      var side = _v3B.crossVectors(cameraDirection, this._camera.up).normalize();\n      // Then find the vector orthogonal to both this \"side\" vector and the \"view\" vector.\n      // This vector will be the new \"up\" vector.\n      this._camera.up.crossVectors(side, cameraDirection).normalize();\n      this._camera.updateMatrixWorld();\n      var position = this.getPosition(_v3A);\n      this.updateCameraUp();\n      this.setPosition(position.x, position.y, position.z);\n    }\n    /**\n     * Update camera position and directions.\n     * This should be called in your tick loop every time, and returns true if re-rendering is needed.\n     * @param delta\n     * @returns updated\n     * @category Methods\n     */\n  }, {\n    key: \"update\",\n    value: function update(delta) {\n      var deltaTheta = this._sphericalEnd.theta - this._spherical.theta;\n      var deltaPhi = this._sphericalEnd.phi - this._spherical.phi;\n      var deltaRadius = this._sphericalEnd.radius - this._spherical.radius;\n      var deltaTarget = _deltaTarget.subVectors(this._targetEnd, this._target);\n      var deltaOffset = _deltaOffset.subVectors(this._focalOffsetEnd, this._focalOffset);\n      var deltaZoom = this._zoomEnd - this._zoom;\n      // update theta\n      if (approxZero(deltaTheta)) {\n        this._thetaVelocity.value = 0;\n        this._spherical.theta = this._sphericalEnd.theta;\n      } else {\n        var smoothTime = this._isUserControllingRotate ? this.draggingSmoothTime : this.smoothTime;\n        this._spherical.theta = smoothDamp(this._spherical.theta, this._sphericalEnd.theta, this._thetaVelocity, smoothTime, Infinity, delta);\n        this._needsUpdate = true;\n      }\n      // update phi\n      if (approxZero(deltaPhi)) {\n        this._phiVelocity.value = 0;\n        this._spherical.phi = this._sphericalEnd.phi;\n      } else {\n        var _smoothTime = this._isUserControllingRotate ? this.draggingSmoothTime : this.smoothTime;\n        this._spherical.phi = smoothDamp(this._spherical.phi, this._sphericalEnd.phi, this._phiVelocity, _smoothTime, Infinity, delta);\n        this._needsUpdate = true;\n      }\n      // update distance\n      if (approxZero(deltaRadius)) {\n        this._radiusVelocity.value = 0;\n        this._spherical.radius = this._sphericalEnd.radius;\n      } else {\n        var _smoothTime2 = this._isUserControllingDolly ? this.draggingSmoothTime : this.smoothTime;\n        this._spherical.radius = smoothDamp(this._spherical.radius, this._sphericalEnd.radius, this._radiusVelocity, _smoothTime2, this.maxSpeed, delta);\n        this._needsUpdate = true;\n      }\n      // update target position\n      if (approxZero(deltaTarget.x) && approxZero(deltaTarget.y) && approxZero(deltaTarget.z)) {\n        this._targetVelocity.set(0, 0, 0);\n        this._target.copy(this._targetEnd);\n      } else {\n        var _smoothTime3 = this._isUserControllingTruck ? this.draggingSmoothTime : this.smoothTime;\n        smoothDampVec3(this._target, this._targetEnd, this._targetVelocity, _smoothTime3, this.maxSpeed, delta, this._target);\n        this._needsUpdate = true;\n      }\n      // update focalOffset\n      if (approxZero(deltaOffset.x) && approxZero(deltaOffset.y) && approxZero(deltaOffset.z)) {\n        this._focalOffsetVelocity.set(0, 0, 0);\n        this._focalOffset.copy(this._focalOffsetEnd);\n      } else {\n        var _smoothTime4 = this._isUserControllingOffset ? this.draggingSmoothTime : this.smoothTime;\n        smoothDampVec3(this._focalOffset, this._focalOffsetEnd, this._focalOffsetVelocity, _smoothTime4, this.maxSpeed, delta, this._focalOffset);\n        this._needsUpdate = true;\n      }\n      if (this._dollyControlAmount !== 0) {\n        if (isPerspectiveCamera(this._camera)) {\n          var camera = this._camera;\n          var cameraDirection = _v3A.setFromSpherical(this._spherical).applyQuaternion(this._yAxisUpSpaceInverse).normalize().negate();\n          var planeX = _v3B.copy(cameraDirection).cross(camera.up).normalize();\n          if (planeX.lengthSq() === 0) planeX.x = 1.0;\n          var planeY = _v3C.crossVectors(planeX, cameraDirection);\n          var worldToScreen = this._sphericalEnd.radius * Math.tan(camera.getEffectiveFOV() * DEG2RAD * 0.5);\n          var prevRadius = this._sphericalEnd.radius - this._dollyControlAmount;\n          var lerpRatio = (prevRadius - this._sphericalEnd.radius) / this._sphericalEnd.radius;\n          var cursor = _v3A.copy(this._targetEnd).add(planeX.multiplyScalar(this._dollyControlCoord.x * worldToScreen * camera.aspect)).add(planeY.multiplyScalar(this._dollyControlCoord.y * worldToScreen));\n          this._targetEnd.lerp(cursor, lerpRatio);\n        } else if (isOrthographicCamera(this._camera)) {\n          var _camera2 = this._camera;\n          var worldCursorPosition = _v3A.set(this._dollyControlCoord.x, this._dollyControlCoord.y, (_camera2.near + _camera2.far) / (_camera2.near - _camera2.far)).unproject(_camera2); //.sub( _v3B.set( this._focalOffset.x, this._focalOffset.y, 0 ) );\n          var quaternion = _v3B.set(0, 0, -1).applyQuaternion(_camera2.quaternion);\n          var _cursor = _v3C.copy(worldCursorPosition).add(quaternion.multiplyScalar(-worldCursorPosition.dot(_camera2.up)));\n          var prevZoom = this._zoom - this._dollyControlAmount;\n          var _lerpRatio = -(prevZoom - this._zoomEnd) / this._zoom;\n          // find the \"distance\" (aka plane constant in three.js) of Plane\n          // from a given position (this._targetEnd) and normal vector (cameraDirection)\n          // https://www.maplesoft.com/support/help/maple/view.aspx?path=MathApps%2FEquationOfAPlaneNormal#bkmrk0\n          var _cameraDirection = _v3A.setFromSpherical(this._spherical).applyQuaternion(this._yAxisUpSpaceInverse).normalize().negate();\n          var prevPlaneConstant = this._targetEnd.dot(_cameraDirection);\n          this._targetEnd.lerp(_cursor, _lerpRatio);\n          var newPlaneConstant = this._targetEnd.dot(_cameraDirection);\n          // Pull back the camera depth that has moved, to be the camera stationary as zoom\n          var pullBack = _cameraDirection.multiplyScalar(newPlaneConstant - prevPlaneConstant);\n          this._targetEnd.sub(pullBack);\n        }\n        this._target.copy(this._targetEnd);\n        // target position may be moved beyond boundary.\n        this._boundary.clampPoint(this._targetEnd, this._targetEnd);\n        this._dollyControlAmount = 0;\n      }\n      // update zoom\n      if (approxZero(deltaZoom)) {\n        this._zoomVelocity.value = 0;\n        this._zoom = this._zoomEnd;\n      } else {\n        var _smoothTime5 = this._isUserControllingZoom ? this.draggingSmoothTime : this.smoothTime;\n        this._zoom = smoothDamp(this._zoom, this._zoomEnd, this._zoomVelocity, _smoothTime5, Infinity, delta);\n      }\n      if (this._camera.zoom !== this._zoom) {\n        this._camera.zoom = this._zoom;\n        this._camera.updateProjectionMatrix();\n        this._updateNearPlaneCorners();\n        this._needsUpdate = true;\n      }\n      // collision detection\n      var maxDistance = this._collisionTest();\n      this._spherical.radius = Math.min(this._spherical.radius, maxDistance);\n      // decompose spherical to the camera position\n      this._spherical.makeSafe();\n      this._camera.position.setFromSpherical(this._spherical).applyQuaternion(this._yAxisUpSpaceInverse).add(this._target);\n      this._camera.lookAt(this._target);\n      // set offset after the orbit movement\n      var affectOffset = !approxZero(this._focalOffset.x) || !approxZero(this._focalOffset.y) || !approxZero(this._focalOffset.z);\n      if (affectOffset) {\n        this._camera.updateMatrixWorld();\n        _xColumn.setFromMatrixColumn(this._camera.matrix, 0);\n        _yColumn.setFromMatrixColumn(this._camera.matrix, 1);\n        _zColumn.setFromMatrixColumn(this._camera.matrix, 2);\n        _xColumn.multiplyScalar(this._focalOffset.x);\n        _yColumn.multiplyScalar(-this._focalOffset.y);\n        _zColumn.multiplyScalar(this._focalOffset.z); // notice: z-offset will not affect in Orthographic.\n        _v3A.copy(_xColumn).add(_yColumn).add(_zColumn);\n        this._camera.position.add(_v3A);\n      }\n      if (this._boundaryEnclosesCamera) {\n        this._encloseToBoundary(this._camera.position.copy(this._target), _v3A.setFromSpherical(this._spherical).applyQuaternion(this._yAxisUpSpaceInverse), 1.0);\n      }\n      var updated = this._needsUpdate;\n      if (updated && !this._updatedLastTime) {\n        this._hasRested = false;\n        this.dispatchEvent({\n          type: 'wake'\n        });\n        this.dispatchEvent({\n          type: 'update'\n        });\n      } else if (updated) {\n        this.dispatchEvent({\n          type: 'update'\n        });\n        if (approxZero(deltaTheta, this.restThreshold) && approxZero(deltaPhi, this.restThreshold) && approxZero(deltaRadius, this.restThreshold) && approxZero(deltaTarget.x, this.restThreshold) && approxZero(deltaTarget.y, this.restThreshold) && approxZero(deltaTarget.z, this.restThreshold) && approxZero(deltaOffset.x, this.restThreshold) && approxZero(deltaOffset.y, this.restThreshold) && approxZero(deltaOffset.z, this.restThreshold) && approxZero(deltaZoom, this.restThreshold) && !this._hasRested) {\n          this._hasRested = true;\n          this.dispatchEvent({\n            type: 'rest'\n          });\n        }\n      } else if (!updated && this._updatedLastTime) {\n        this.dispatchEvent({\n          type: 'sleep'\n        });\n      }\n      this._updatedLastTime = updated;\n      this._needsUpdate = false;\n      return updated;\n    }\n    /**\n     * Get all state in JSON string\n     * @category Methods\n     */\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return JSON.stringify({\n        enabled: this._enabled,\n        minDistance: this.minDistance,\n        maxDistance: infinityToMaxNumber(this.maxDistance),\n        minZoom: this.minZoom,\n        maxZoom: infinityToMaxNumber(this.maxZoom),\n        minPolarAngle: this.minPolarAngle,\n        maxPolarAngle: infinityToMaxNumber(this.maxPolarAngle),\n        minAzimuthAngle: infinityToMaxNumber(this.minAzimuthAngle),\n        maxAzimuthAngle: infinityToMaxNumber(this.maxAzimuthAngle),\n        smoothTime: this.smoothTime,\n        draggingSmoothTime: this.draggingSmoothTime,\n        dollySpeed: this.dollySpeed,\n        truckSpeed: this.truckSpeed,\n        dollyToCursor: this.dollyToCursor,\n        verticalDragToForward: this.verticalDragToForward,\n        target: this._targetEnd.toArray(),\n        position: _v3A.setFromSpherical(this._sphericalEnd).add(this._targetEnd).toArray(),\n        zoom: this._zoomEnd,\n        focalOffset: this._focalOffsetEnd.toArray(),\n        target0: this._target0.toArray(),\n        position0: this._position0.toArray(),\n        zoom0: this._zoom0,\n        focalOffset0: this._focalOffset0.toArray()\n      });\n    }\n    /**\n     * Reproduce the control state with JSON. enableTransition is where anim or not in a boolean.\n     * @param json\n     * @param enableTransition\n     * @category Methods\n     */\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(json) {\n      var enableTransition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var obj = JSON.parse(json);\n      this.enabled = obj.enabled;\n      this.minDistance = obj.minDistance;\n      this.maxDistance = maxNumberToInfinity(obj.maxDistance);\n      this.minZoom = obj.minZoom;\n      this.maxZoom = maxNumberToInfinity(obj.maxZoom);\n      this.minPolarAngle = obj.minPolarAngle;\n      this.maxPolarAngle = maxNumberToInfinity(obj.maxPolarAngle);\n      this.minAzimuthAngle = maxNumberToInfinity(obj.minAzimuthAngle);\n      this.maxAzimuthAngle = maxNumberToInfinity(obj.maxAzimuthAngle);\n      this.smoothTime = obj.smoothTime;\n      this.draggingSmoothTime = obj.draggingSmoothTime;\n      this.dollySpeed = obj.dollySpeed;\n      this.truckSpeed = obj.truckSpeed;\n      this.dollyToCursor = obj.dollyToCursor;\n      this.verticalDragToForward = obj.verticalDragToForward;\n      this._target0.fromArray(obj.target0);\n      this._position0.fromArray(obj.position0);\n      this._zoom0 = obj.zoom0;\n      this._focalOffset0.fromArray(obj.focalOffset0);\n      this.moveTo(obj.target[0], obj.target[1], obj.target[2], enableTransition);\n      _sphericalA.setFromVector3(_v3A.fromArray(obj.position).sub(this._targetEnd).applyQuaternion(this._yAxisUpSpace));\n      this.rotateTo(_sphericalA.theta, _sphericalA.phi, enableTransition);\n      this.dollyTo(_sphericalA.radius, enableTransition);\n      this.zoomTo(obj.zoom, enableTransition);\n      this.setFocalOffset(obj.focalOffset[0], obj.focalOffset[1], obj.focalOffset[2], enableTransition);\n      this._needsUpdate = true;\n    }\n    /**\n     * Attach all internal event handlers to enable drag control.\n     * @category Methods\n     */\n  }, {\n    key: \"connect\",\n    value: function connect(domElement) {\n      if (this._domElement) {\n        console.warn('camera-controls is already connected.');\n        return;\n      }\n      domElement.setAttribute('data-camera-controls-version', VERSION);\n      this._addAllEventListeners(domElement);\n    }\n    /**\n     * Detach all internal event handlers to disable drag control.\n     */\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      this.cancel();\n      this._removeAllEventListeners();\n      if (this._domElement) {\n        this._domElement.removeAttribute('data-camera-controls-version');\n        this._domElement = undefined;\n      }\n    }\n    /**\n     * Dispose the cameraControls instance itself, remove all eventListeners.\n     * @category Methods\n     */\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      // remove all user event listeners\n      this.removeAllEventListeners();\n      // remove all internal event listeners\n      this.disconnect();\n    }\n  }, {\n    key: \"_findPointerById\",\n    value: function _findPointerById(pointerId) {\n      return this._activePointers.find(function (activePointer) {\n        return activePointer.pointerId === pointerId;\n      });\n    }\n  }, {\n    key: \"_findPointerByMouseButton\",\n    value: function _findPointerByMouseButton(mouseButton) {\n      return this._activePointers.find(function (activePointer) {\n        return activePointer.mouseButton === mouseButton;\n      });\n    }\n  }, {\n    key: \"_disposePointer\",\n    value: function _disposePointer(pointer) {\n      this._activePointers.splice(this._activePointers.indexOf(pointer), 1);\n    }\n  }, {\n    key: \"_encloseToBoundary\",\n    value: function _encloseToBoundary(position, offset, friction) {\n      var offsetLength2 = offset.lengthSq();\n      if (offsetLength2 === 0.0) {\n        // sanity check\n        return position;\n      }\n      // See: https://twitter.com/FMS_Cat/status/1106508958640988161\n      var newTarget = _v3B.copy(offset).add(position); // target\n      var clampedTarget = this._boundary.clampPoint(newTarget, _v3C); // clamped target\n      var deltaClampedTarget = clampedTarget.sub(newTarget); // newTarget -> clampedTarget\n      var deltaClampedTargetLength2 = deltaClampedTarget.lengthSq(); // squared length of deltaClampedTarget\n      if (deltaClampedTargetLength2 === 0.0) {\n        // when the position doesn't have to be clamped\n        return position.add(offset);\n      } else if (deltaClampedTargetLength2 === offsetLength2) {\n        // when the position is completely stuck\n        return position;\n      } else if (friction === 0.0) {\n        return position.add(offset).add(deltaClampedTarget);\n      } else {\n        var offsetFactor = 1.0 + friction * deltaClampedTargetLength2 / offset.dot(deltaClampedTarget);\n        return position.add(_v3B.copy(offset).multiplyScalar(offsetFactor)).add(deltaClampedTarget.multiplyScalar(1.0 - friction));\n      }\n    }\n  }, {\n    key: \"_updateNearPlaneCorners\",\n    value: function _updateNearPlaneCorners() {\n      if (isPerspectiveCamera(this._camera)) {\n        var camera = this._camera;\n        var near = camera.near;\n        var fov = camera.getEffectiveFOV() * DEG2RAD;\n        var heightHalf = Math.tan(fov * 0.5) * near; // near plain half height\n        var widthHalf = heightHalf * camera.aspect; // near plain half width\n        this._nearPlaneCorners[0].set(-widthHalf, -heightHalf, 0);\n        this._nearPlaneCorners[1].set(widthHalf, -heightHalf, 0);\n        this._nearPlaneCorners[2].set(widthHalf, heightHalf, 0);\n        this._nearPlaneCorners[3].set(-widthHalf, heightHalf, 0);\n      } else if (isOrthographicCamera(this._camera)) {\n        var _camera3 = this._camera;\n        var zoomInv = 1 / _camera3.zoom;\n        var left = _camera3.left * zoomInv;\n        var right = _camera3.right * zoomInv;\n        var top = _camera3.top * zoomInv;\n        var bottom = _camera3.bottom * zoomInv;\n        this._nearPlaneCorners[0].set(left, top, 0);\n        this._nearPlaneCorners[1].set(right, top, 0);\n        this._nearPlaneCorners[2].set(right, bottom, 0);\n        this._nearPlaneCorners[3].set(left, bottom, 0);\n      }\n    }\n    // lateUpdate\n  }, {\n    key: \"_collisionTest\",\n    value: function _collisionTest() {\n      var distance = Infinity;\n      var hasCollider = this.colliderMeshes.length >= 1;\n      if (!hasCollider) return distance;\n      if (notSupportedInOrthographicCamera(this._camera, '_collisionTest')) return distance;\n      // divide by distance to normalize, lighter than `Vector3.prototype.normalize()`\n      var direction = _v3A.setFromSpherical(this._spherical).divideScalar(this._spherical.radius);\n      _rotationMatrix.lookAt(_ORIGIN, direction, this._camera.up);\n      for (var i = 0; i < 4; i++) {\n        var nearPlaneCorner = _v3B.copy(this._nearPlaneCorners[i]);\n        nearPlaneCorner.applyMatrix4(_rotationMatrix);\n        var origin = _v3C.addVectors(this._target, nearPlaneCorner);\n        _raycaster.set(origin, direction);\n        _raycaster.far = this._spherical.radius + 1;\n        var intersects = _raycaster.intersectObjects(this.colliderMeshes);\n        if (intersects.length !== 0 && intersects[0].distance < distance) {\n          distance = intersects[0].distance;\n        }\n      }\n      return distance;\n    }\n    /**\n     * Get its client rect and package into given `DOMRect` .\n     */\n  }, {\n    key: \"_getClientRect\",\n    value: function _getClientRect(target) {\n      if (!this._domElement) return;\n      var rect = this._domElement.getBoundingClientRect();\n      target.x = rect.left;\n      target.y = rect.top;\n      if (this._viewport) {\n        target.x += this._viewport.x;\n        target.y += rect.height - this._viewport.w - this._viewport.y;\n        target.width = this._viewport.z;\n        target.height = this._viewport.w;\n      } else {\n        target.width = rect.width;\n        target.height = rect.height;\n      }\n      return target;\n    }\n  }, {\n    key: \"_createOnRestPromise\",\n    value: function _createOnRestPromise(resolveImmediately) {\n      var _this2 = this;\n      if (resolveImmediately) return Promise.resolve();\n      this._hasRested = false;\n      this.dispatchEvent({\n        type: 'transitionstart'\n      });\n      return new Promise(function (resolve) {\n        var onResolve = function onResolve() {\n          _this2.removeEventListener('rest', onResolve);\n          resolve();\n        };\n        _this2.addEventListener('rest', onResolve);\n      });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  }, {\n    key: \"_addAllEventListeners\",\n    value: function _addAllEventListeners(_domElement) {}\n  }, {\n    key: \"_removeAllEventListeners\",\n    value: function _removeAllEventListeners() {}\n    /**\n     * backward compatible\n     * @deprecated use smoothTime (in seconds) instead\n     * @category Properties\n     */\n  }, {\n    key: \"dampingFactor\",\n    get: function get() {\n      console.warn('.dampingFactor has been deprecated. use smoothTime (in seconds) instead.');\n      return 0;\n    }\n    /**\n     * backward compatible\n     * @deprecated use smoothTime (in seconds) instead\n     * @category Properties\n     */,\n    set: function set(_) {\n      console.warn('.dampingFactor has been deprecated. use smoothTime (in seconds) instead.');\n    }\n    /**\n     * backward compatible\n     * @deprecated use draggingSmoothTime (in seconds) instead\n     * @category Properties\n     */\n  }, {\n    key: \"draggingDampingFactor\",\n    get: function get() {\n      console.warn('.draggingDampingFactor has been deprecated. use draggingSmoothTime (in seconds) instead.');\n      return 0;\n    }\n    /**\n     * backward compatible\n     * @deprecated use draggingSmoothTime (in seconds) instead\n     * @category Properties\n     */,\n    set: function set(_) {\n      console.warn('.draggingDampingFactor has been deprecated. use draggingSmoothTime (in seconds) instead.');\n    }\n  }], [{\n    key: \"install\",\n    value:\n    /**\n     * Injects THREE as the dependency. You can then proceed to use CameraControls.\n     *\n     * e.g\n     * ```javascript\n     * CameraControls.install( { THREE: THREE } );\n     * ```\n     *\n     * Note: If you do not wish to use enter three.js to reduce file size(tree-shaking for example), make a subset to install.\n     *\n     * ```js\n     * import {\n     * \tVector2,\n     * \tVector3,\n     * \tVector4,\n     * \tQuaternion,\n     * \tMatrix4,\n     * \tSpherical,\n     * \tBox3,\n     * \tSphere,\n     * \tRaycaster,\n     * \tMathUtils,\n     * } from 'three';\n     *\n     * const subsetOfTHREE = {\n     * \tVector2   : Vector2,\n     * \tVector3   : Vector3,\n     * \tVector4   : Vector4,\n     * \tQuaternion: Quaternion,\n     * \tMatrix4   : Matrix4,\n     * \tSpherical : Spherical,\n     * \tBox3      : Box3,\n     * \tSphere    : Sphere,\n     * \tRaycaster : Raycaster,\n     * };\n      * CameraControls.install( { THREE: subsetOfTHREE } );\n     * ```\n     * @category Statics\n     */\n    function install(libs) {\n      THREE = libs.THREE;\n      _ORIGIN = Object.freeze(new THREE.Vector3(0, 0, 0));\n      _AXIS_Y = Object.freeze(new THREE.Vector3(0, 1, 0));\n      _AXIS_Z = Object.freeze(new THREE.Vector3(0, 0, 1));\n      _v2 = new THREE.Vector2();\n      _v3A = new THREE.Vector3();\n      _v3B = new THREE.Vector3();\n      _v3C = new THREE.Vector3();\n      _xColumn = new THREE.Vector3();\n      _yColumn = new THREE.Vector3();\n      _zColumn = new THREE.Vector3();\n      _deltaTarget = new THREE.Vector3();\n      _deltaOffset = new THREE.Vector3();\n      _sphericalA = new THREE.Spherical();\n      _sphericalB = new THREE.Spherical();\n      _box3A = new THREE.Box3();\n      _box3B = new THREE.Box3();\n      _sphere = new THREE.Sphere();\n      _quaternionA = new THREE.Quaternion();\n      _quaternionB = new THREE.Quaternion();\n      _rotationMatrix = new THREE.Matrix4();\n      _raycaster = new THREE.Raycaster();\n    }\n    /**\n     * list all ACTIONs\n     * @category Statics\n     */\n  }, {\n    key: \"ACTION\",\n    get: function get() {\n      return ACTION;\n    }\n  }, {\n    key: \"createBoundingSphere\",\n    value: function createBoundingSphere(object3d) {\n      var out = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new THREE.Sphere();\n      var boundingSphere = out;\n      var center = boundingSphere.center;\n      _box3A.makeEmpty();\n      // find the center\n      object3d.traverseVisible(function (object) {\n        if (!object.isMesh) return;\n        _box3A.expandByObject(object);\n      });\n      _box3A.getCenter(center);\n      // find the radius\n      var maxRadiusSq = 0;\n      object3d.traverseVisible(function (object) {\n        if (!object.isMesh) return;\n        var mesh = object;\n        var geometry = mesh.geometry.clone();\n        geometry.applyMatrix4(mesh.matrixWorld);\n        var bufferGeometry = geometry;\n        var position = bufferGeometry.attributes.position;\n        for (var i = 0, l = position.count; i < l; i++) {\n          _v3A.fromBufferAttribute(position, i);\n          maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_v3A));\n        }\n      });\n      boundingSphere.radius = Math.sqrt(maxRadiusSq);\n      return boundingSphere;\n    }\n  }]);\n  return CameraControls;\n}(EventDispatcher);\nexport { CameraControls as default };","map":{"version":3,"names":["MOUSE_BUTTON","LEFT","RIGHT","MIDDLE","ACTION","Object","freeze","NONE","ROTATE","TRUCK","OFFSET","DOLLY","ZOOM","TOUCH_ROTATE","TOUCH_TRUCK","TOUCH_OFFSET","TOUCH_DOLLY","TOUCH_ZOOM","TOUCH_DOLLY_TRUCK","TOUCH_DOLLY_OFFSET","TOUCH_DOLLY_ROTATE","TOUCH_ZOOM_TRUCK","TOUCH_ZOOM_OFFSET","TOUCH_ZOOM_ROTATE","isPerspectiveCamera","camera","isOrthographicCamera","PI_2","Math","PI","PI_HALF","EPSILON","DEG2RAD","clamp","value","min","max","approxZero","number","error","arguments","length","undefined","abs","approxEquals","a","b","roundToStep","step","round","infinityToMaxNumber","isFinite","Number","MAX_VALUE","maxNumberToInfinity","Infinity","smoothDamp","current","target","currentVelocityRef","smoothTime","maxSpeed","deltaTime","omega","x","exp","change","originalTo","maxChange","temp","output","smoothDampVec3","out","targetX","targetY","y","targetZ","z","changeX","changeY","changeZ","originalToX","originalToY","originalToZ","maxChangeSq","magnitudeSq","magnitude","sqrt","tempX","tempY","tempZ","origMinusCurrentX","origMinusCurrentY","origMinusCurrentZ","outMinusOrigX","outMinusOrigY","outMinusOrigZ","extractClientCoordFromEvent","pointers","set","forEach","pointer","clientX","clientY","notSupportedInOrthographicCamera","message","console","warn","concat","EventDispatcher","_classCallCheck","_listeners","_createClass","key","addEventListener","type","listener","listeners","indexOf","push","hasEventListener","removeEventListener","listenerArray","index","splice","removeAllEventListeners","Array","isArray","dispatchEvent","event","array","slice","i","l","call","VERSION","TOUCH_DOLLY_FACTOR","isBrowser","window","isMac","test","navigator","platform","isPointerEventsNotSupported","THREE","_ORIGIN","_AXIS_Y","_AXIS_Z","_v2","_v3A","_v3B","_v3C","_xColumn","_yColumn","_zColumn","_deltaTarget","_deltaOffset","_sphericalA","_sphericalB","_box3A","_box3B","_sphere","_quaternionA","_quaternionB","_rotationMatrix","_raycaster","CameraControls","_EventDispatcher","_inherits","_super","_createSuper","domElement","_this","minPolarAngle","maxPolarAngle","minAzimuthAngle","maxAzimuthAngle","minDistance","maxDistance","infinityDolly","minZoom","maxZoom","draggingSmoothTime","azimuthRotateSpeed","polarRotateSpeed","dollySpeed","dollyDragInverted","truckSpeed","dollyToCursor","dragToOffset","verticalDragToForward","boundaryFriction","restThreshold","colliderMeshes","cancel","_enabled","_state","_viewport","_dollyControlAmount","_hasRested","_boundaryEnclosesCamera","_needsUpdate","_updatedLastTime","_elementRect","DOMRect","_isDragging","_activePointers","_lockedPointer","_isUserControllingRotate","_isUserControllingDolly","_isUserControllingTruck","_isUserControllingOffset","_isUserControllingZoom","_thetaVelocity","_phiVelocity","_radiusVelocity","_targetVelocity","Vector3","_focalOffsetVelocity","_zoomVelocity","_truckInternal","deltaX","deltaY","truckX","pedestalY","_camera","offset","copy","position","sub","_target","fov","getEffectiveFOV","targetDistance","tan","height","right","left","zoom","width","top","bottom","setFocalOffset","_focalOffsetEnd","truck","forward","_rotateInternal","theta","phi","rotate","_dollyInternal","delta","dollyScale","pow","distance","_sphericalEnd","radius","prevRadius","signedPrevRadius","dollyTo","getWorldDirection","_targetEnd","add","normalize","multiplyScalar","_dollyControlCoord","_zoomInternal","zoomScale","prevZoom","_zoomEnd","zoomTo","_zoom","_yAxisUpSpace","Quaternion","setFromUnitVectors","up","_yAxisUpSpaceInverse","clone","invert","_focalOffset","_spherical","Spherical","setFromVector3","applyQuaternion","_nearPlaneCorners","_updateNearPlaneCorners","_boundary","Box3","_cameraUp0","_target0","_position0","_zoom0","_focalOffset0","Vector2","mouseButtons","middle","wheel","touches","one","two","three","dragStartPosition","lastDragPosition","dollyStart","onPointerDown","_domElement","mouseButton","pointerType","buttons","zombiePointer","_findPointerByMouseButton","_disposePointer","pointerId","ownerDocument","onPointerMove","passive","onPointerUp","startDragging","onMouseDown","onMouseMove","onMouseUp","cancelable","preventDefault","_findPointerById","movementX","movementY","dragging","endDragging","lastScrollTimeStamp","onMouseWheel","now","performance","_getClientRect","deltaYFactor","deltaMode","onContextMenu","PointerEvent","MouseEvent","isMultiTouch","dx","dy","isPointerLockActive","document","pointerLockElement","lockedPointer","dollyX","dollyY","dollyDirection","dollyDelta","lockPointer","requestPointerLock","onPointerLockChange","onPointerLockError","unlockPointer","exitPointerLock","_addAllEventListeners","style","touchAction","userSelect","webkitUserSelect","_removeAllEventListeners","connect","update","get","updateCameraUp","updateProjectionMatrix","enabled","azimuthAngle","polarAngle","boundaryEnclosesCamera","_get","_getPrototypeOf","prototype","enableTransition","rotateTo","rotateAzimuthTo","rotatePolarTo","makeSafe","resolveImmediately","_createOnRestPromise","dolly","lastRadius","newRadius","hasCollider","maxDistanceByCollisionTest","_collisionTest","isCollided","isDollyIn","Promise","resolve","zoomStep","pan","updateMatrix","setFromMatrixColumn","matrix","to","moveTo","crossVectors","elevate","_encloseToBoundary","lookInDirectionOf","point","direction","setPosition","fitToBox","box3OrObject","_ref","_ref$cover","cover","_ref$paddingLeft","paddingLeft","_ref$paddingRight","paddingRight","_ref$paddingBottom","paddingBottom","_ref$paddingTop","paddingTop","promises","aabb","isBox3","setFromObject","isEmpty","normal","setFromSpherical","rotation","viewFromPolar","multiply","setFromAxisAngle","bb","makeEmpty","expandByPoint","setX","setY","setZ","premultiply","bbSize","getSize","center","getCenter","getDistanceToFitBox","all","fitToSphere","sphereOrMesh","isSphere","Sphere","boundingSphere","createBoundingSphere","distanceToFit","getDistanceToFitSphere","diameter","setLookAt","positionX","positionY","positionZ","normalizeRotations","lerpLookAt","positionAX","positionAY","positionAZ","targetAX","targetAY","targetAZ","positionBX","positionBY","positionBZ","targetBX","targetBY","targetBZ","t","targetA","positionA","targetB","positionB","lerp","deltaTheta","deltaPhi","deltaRadius","setTarget","pos","getPosition","promise","setOrbitPoint","updateMatrixWorld","matrixWorldInverse","distanceTo","cameraToPoint","setBoundary","box3","clampPoint","setViewport","viewportOrX","Vector4","depth","boundingRectAspect","aspect","heightToFit","vFOV","hFOV","atan","sin","getTarget","_out","isVector3","getFocalOffset","reset","saveState","applyCameraUp","cameraDirection","subVectors","side","deltaTarget","deltaOffset","deltaZoom","negate","planeX","cross","lengthSq","planeY","worldToScreen","lerpRatio","cursor","worldCursorPosition","near","far","unproject","quaternion","dot","prevPlaneConstant","newPlaneConstant","pullBack","lookAt","affectOffset","updated","toJSON","JSON","stringify","toArray","focalOffset","target0","position0","zoom0","focalOffset0","fromJSON","json","obj","parse","fromArray","setAttribute","disconnect","removeAttribute","dispose","find","activePointer","friction","offsetLength2","newTarget","clampedTarget","deltaClampedTarget","deltaClampedTargetLength2","offsetFactor","heightHalf","widthHalf","zoomInv","divideScalar","nearPlaneCorner","applyMatrix4","origin","addVectors","intersects","intersectObjects","rect","getBoundingClientRect","w","_this2","onResolve","_","install","libs","Matrix4","Raycaster","object3d","traverseVisible","object","isMesh","expandByObject","maxRadiusSq","mesh","geometry","matrixWorld","bufferGeometry","attributes","count","fromBufferAttribute","distanceToSquared","default"],"sources":["/home/samuel/experiment/3d/farm/frontend/node_modules/camera-controls/dist/camera-controls.module.js"],"sourcesContent":["/*!\n * camera-controls\n * https://github.com/yomotsu/camera-controls\n * (c) 2017 @yomotsu\n * Released under the MIT License.\n */\n// see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons#value\nconst MOUSE_BUTTON = {\n    LEFT: 1,\n    RIGHT: 2,\n    MIDDLE: 4,\n};\nconst ACTION = Object.freeze({\n    NONE: 0,\n    ROTATE: 1,\n    TRUCK: 2,\n    OFFSET: 4,\n    DOLLY: 8,\n    ZOOM: 16,\n    TOUCH_ROTATE: 32,\n    TOUCH_TRUCK: 64,\n    TOUCH_OFFSET: 128,\n    TOUCH_DOLLY: 256,\n    TOUCH_ZOOM: 512,\n    TOUCH_DOLLY_TRUCK: 1024,\n    TOUCH_DOLLY_OFFSET: 2048,\n    TOUCH_DOLLY_ROTATE: 4096,\n    TOUCH_ZOOM_TRUCK: 8192,\n    TOUCH_ZOOM_OFFSET: 16384,\n    TOUCH_ZOOM_ROTATE: 32768,\n});\nfunction isPerspectiveCamera(camera) {\n    return camera.isPerspectiveCamera;\n}\nfunction isOrthographicCamera(camera) {\n    return camera.isOrthographicCamera;\n}\n\nconst PI_2 = Math.PI * 2;\nconst PI_HALF = Math.PI / 2;\n\nconst EPSILON = 1e-5;\nconst DEG2RAD = Math.PI / 180;\nfunction clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\nfunction approxZero(number, error = EPSILON) {\n    return Math.abs(number) < error;\n}\nfunction approxEquals(a, b, error = EPSILON) {\n    return approxZero(a - b, error);\n}\nfunction roundToStep(value, step) {\n    return Math.round(value / step) * step;\n}\nfunction infinityToMaxNumber(value) {\n    if (isFinite(value))\n        return value;\n    if (value < 0)\n        return -Number.MAX_VALUE;\n    return Number.MAX_VALUE;\n}\nfunction maxNumberToInfinity(value) {\n    if (Math.abs(value) < Number.MAX_VALUE)\n        return value;\n    return value * Infinity;\n}\n// https://docs.unity3d.com/ScriptReference/Mathf.SmoothDamp.html\n// https://github.com/Unity-Technologies/UnityCsReference/blob/a2bdfe9b3c4cd4476f44bf52f848063bfaf7b6b9/Runtime/Export/Math/Mathf.cs#L308\nfunction smoothDamp(current, target, currentVelocityRef, smoothTime, maxSpeed = Infinity, deltaTime) {\n    // Based on Game Programming Gems 4 Chapter 1.10\n    smoothTime = Math.max(0.0001, smoothTime);\n    const omega = 2 / smoothTime;\n    const x = omega * deltaTime;\n    const exp = 1 / (1 + x + 0.48 * x * x + 0.235 * x * x * x);\n    let change = current - target;\n    const originalTo = target;\n    // Clamp maximum speed\n    const maxChange = maxSpeed * smoothTime;\n    change = clamp(change, -maxChange, maxChange);\n    target = current - change;\n    const temp = (currentVelocityRef.value + omega * change) * deltaTime;\n    currentVelocityRef.value = (currentVelocityRef.value - omega * temp) * exp;\n    let output = target + (change + temp) * exp;\n    // Prevent overshooting\n    if (originalTo - current > 0.0 === output > originalTo) {\n        output = originalTo;\n        currentVelocityRef.value = (output - originalTo) / deltaTime;\n    }\n    return output;\n}\n// https://docs.unity3d.com/ScriptReference/Vector3.SmoothDamp.html\n// https://github.com/Unity-Technologies/UnityCsReference/blob/a2bdfe9b3c4cd4476f44bf52f848063bfaf7b6b9/Runtime/Export/Math/Vector3.cs#L97\nfunction smoothDampVec3(current, target, currentVelocityRef, smoothTime, maxSpeed = Infinity, deltaTime, out) {\n    // Based on Game Programming Gems 4 Chapter 1.10\n    smoothTime = Math.max(0.0001, smoothTime);\n    const omega = 2 / smoothTime;\n    const x = omega * deltaTime;\n    const exp = 1 / (1 + x + 0.48 * x * x + 0.235 * x * x * x);\n    let targetX = target.x;\n    let targetY = target.y;\n    let targetZ = target.z;\n    let changeX = current.x - targetX;\n    let changeY = current.y - targetY;\n    let changeZ = current.z - targetZ;\n    const originalToX = targetX;\n    const originalToY = targetY;\n    const originalToZ = targetZ;\n    // Clamp maximum speed\n    const maxChange = maxSpeed * smoothTime;\n    const maxChangeSq = maxChange * maxChange;\n    const magnitudeSq = changeX * changeX + changeY * changeY + changeZ * changeZ;\n    if (magnitudeSq > maxChangeSq) {\n        const magnitude = Math.sqrt(magnitudeSq);\n        changeX = changeX / magnitude * maxChange;\n        changeY = changeY / magnitude * maxChange;\n        changeZ = changeZ / magnitude * maxChange;\n    }\n    targetX = current.x - changeX;\n    targetY = current.y - changeY;\n    targetZ = current.z - changeZ;\n    const tempX = (currentVelocityRef.x + omega * changeX) * deltaTime;\n    const tempY = (currentVelocityRef.y + omega * changeY) * deltaTime;\n    const tempZ = (currentVelocityRef.z + omega * changeZ) * deltaTime;\n    currentVelocityRef.x = (currentVelocityRef.x - omega * tempX) * exp;\n    currentVelocityRef.y = (currentVelocityRef.y - omega * tempY) * exp;\n    currentVelocityRef.z = (currentVelocityRef.z - omega * tempZ) * exp;\n    out.x = targetX + (changeX + tempX) * exp;\n    out.y = targetY + (changeY + tempY) * exp;\n    out.z = targetZ + (changeZ + tempZ) * exp;\n    // Prevent overshooting\n    const origMinusCurrentX = originalToX - current.x;\n    const origMinusCurrentY = originalToY - current.y;\n    const origMinusCurrentZ = originalToZ - current.z;\n    const outMinusOrigX = out.x - originalToX;\n    const outMinusOrigY = out.y - originalToY;\n    const outMinusOrigZ = out.z - originalToZ;\n    if (origMinusCurrentX * outMinusOrigX + origMinusCurrentY * outMinusOrigY + origMinusCurrentZ * outMinusOrigZ > 0) {\n        out.x = originalToX;\n        out.y = originalToY;\n        out.z = originalToZ;\n        currentVelocityRef.x = (out.x - originalToX) / deltaTime;\n        currentVelocityRef.y = (out.y - originalToY) / deltaTime;\n        currentVelocityRef.z = (out.z - originalToZ) / deltaTime;\n    }\n    return out;\n}\n\nfunction extractClientCoordFromEvent(pointers, out) {\n    out.set(0, 0);\n    pointers.forEach((pointer) => {\n        out.x += pointer.clientX;\n        out.y += pointer.clientY;\n    });\n    out.x /= pointers.length;\n    out.y /= pointers.length;\n}\n\nfunction notSupportedInOrthographicCamera(camera, message) {\n    if (isOrthographicCamera(camera)) {\n        console.warn(`${message} is not supported in OrthographicCamera`);\n        return true;\n    }\n    return false;\n}\n\nclass EventDispatcher {\n    constructor() {\n        this._listeners = {};\n    }\n    /**\n     * Adds the specified event listener.\n     * @param type event name\n     * @param listener handler function\n     * @category Methods\n     */\n    addEventListener(type, listener) {\n        const listeners = this._listeners;\n        if (listeners[type] === undefined)\n            listeners[type] = [];\n        if (listeners[type].indexOf(listener) === -1)\n            listeners[type].push(listener);\n    }\n    /**\n     * Presence of the specified event listener.\n     * @param type event name\n     * @param listener handler function\n     * @category Methods\n     */\n    hasEventListener(type, listener) {\n        const listeners = this._listeners;\n        return listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;\n    }\n    /**\n     * Removes the specified event listener\n     * @param type event name\n     * @param listener handler function\n     * @category Methods\n     */\n    removeEventListener(type, listener) {\n        const listeners = this._listeners;\n        const listenerArray = listeners[type];\n        if (listenerArray !== undefined) {\n            const index = listenerArray.indexOf(listener);\n            if (index !== -1)\n                listenerArray.splice(index, 1);\n        }\n    }\n    /**\n     * Removes all event listeners\n     * @param type event name\n     * @category Methods\n     */\n    removeAllEventListeners(type) {\n        if (!type) {\n            this._listeners = {};\n            return;\n        }\n        if (Array.isArray(this._listeners[type]))\n            this._listeners[type].length = 0;\n    }\n    /**\n     * Fire an event type.\n     * @param event DispatcherEvent\n     * @category Methods\n     */\n    dispatchEvent(event) {\n        const listeners = this._listeners;\n        const listenerArray = listeners[event.type];\n        if (listenerArray !== undefined) {\n            event.target = this;\n            const array = listenerArray.slice(0);\n            for (let i = 0, l = array.length; i < l; i++) {\n                array[i].call(this, event);\n            }\n        }\n    }\n}\n\nconst VERSION = '2.3.5'; // will be replaced with `version` in package.json during the build process.\nconst TOUCH_DOLLY_FACTOR = 1 / 8;\nconst isBrowser = typeof window !== 'undefined';\nconst isMac = isBrowser && /Mac/.test(navigator.platform);\nconst isPointerEventsNotSupported = !(isBrowser && 'PointerEvent' in window); // macOS Safari 12 does not support PointerEvents API\nlet THREE;\nlet _ORIGIN;\nlet _AXIS_Y;\nlet _AXIS_Z;\nlet _v2;\nlet _v3A;\nlet _v3B;\nlet _v3C;\nlet _xColumn;\nlet _yColumn;\nlet _zColumn;\nlet _deltaTarget;\nlet _deltaOffset;\nlet _sphericalA;\nlet _sphericalB;\nlet _box3A;\nlet _box3B;\nlet _sphere;\nlet _quaternionA;\nlet _quaternionB;\nlet _rotationMatrix;\nlet _raycaster;\nclass CameraControls extends EventDispatcher {\n    /**\n     * Injects THREE as the dependency. You can then proceed to use CameraControls.\n     *\n     * e.g\n     * ```javascript\n     * CameraControls.install( { THREE: THREE } );\n     * ```\n     *\n     * Note: If you do not wish to use enter three.js to reduce file size(tree-shaking for example), make a subset to install.\n     *\n     * ```js\n     * import {\n     * \tVector2,\n     * \tVector3,\n     * \tVector4,\n     * \tQuaternion,\n     * \tMatrix4,\n     * \tSpherical,\n     * \tBox3,\n     * \tSphere,\n     * \tRaycaster,\n     * \tMathUtils,\n     * } from 'three';\n     *\n     * const subsetOfTHREE = {\n     * \tVector2   : Vector2,\n     * \tVector3   : Vector3,\n     * \tVector4   : Vector4,\n     * \tQuaternion: Quaternion,\n     * \tMatrix4   : Matrix4,\n     * \tSpherical : Spherical,\n     * \tBox3      : Box3,\n     * \tSphere    : Sphere,\n     * \tRaycaster : Raycaster,\n     * };\n\n     * CameraControls.install( { THREE: subsetOfTHREE } );\n     * ```\n     * @category Statics\n     */\n    static install(libs) {\n        THREE = libs.THREE;\n        _ORIGIN = Object.freeze(new THREE.Vector3(0, 0, 0));\n        _AXIS_Y = Object.freeze(new THREE.Vector3(0, 1, 0));\n        _AXIS_Z = Object.freeze(new THREE.Vector3(0, 0, 1));\n        _v2 = new THREE.Vector2();\n        _v3A = new THREE.Vector3();\n        _v3B = new THREE.Vector3();\n        _v3C = new THREE.Vector3();\n        _xColumn = new THREE.Vector3();\n        _yColumn = new THREE.Vector3();\n        _zColumn = new THREE.Vector3();\n        _deltaTarget = new THREE.Vector3();\n        _deltaOffset = new THREE.Vector3();\n        _sphericalA = new THREE.Spherical();\n        _sphericalB = new THREE.Spherical();\n        _box3A = new THREE.Box3();\n        _box3B = new THREE.Box3();\n        _sphere = new THREE.Sphere();\n        _quaternionA = new THREE.Quaternion();\n        _quaternionB = new THREE.Quaternion();\n        _rotationMatrix = new THREE.Matrix4();\n        _raycaster = new THREE.Raycaster();\n    }\n    /**\n     * list all ACTIONs\n     * @category Statics\n     */\n    static get ACTION() {\n        return ACTION;\n    }\n    /**\n     * Creates a `CameraControls` instance.\n     *\n     * Note:\n     * You **must install** three.js before using camera-controls. see [#install](#install)\n     * Not doing so will lead to runtime errors (`undefined` references to THREE).\n     *\n     * e.g.\n     * ```\n     * CameraControls.install( { THREE } );\n     * const cameraControls = new CameraControls( camera, domElement );\n     * ```\n     *\n     * @param camera A `THREE.PerspectiveCamera` or `THREE.OrthographicCamera` to be controlled.\n     * @param domElement A `HTMLElement` for the draggable area, usually `renderer.domElement`.\n     * @category Constructor\n     */\n    constructor(camera, domElement) {\n        super();\n        /**\n         * Minimum vertical angle in radians.\n         * The angle has to be between `0` and `.maxPolarAngle` inclusive.\n         * The default value is `0`.\n         *\n         * e.g.\n         * ```\n         * cameraControls.maxPolarAngle = 0;\n         * ```\n         * @category Properties\n         */\n        this.minPolarAngle = 0; // radians\n        /**\n         * Maximum vertical angle in radians.\n         * The angle has to be between `.maxPolarAngle` and `Math.PI` inclusive.\n         * The default value is `Math.PI`.\n         *\n         * e.g.\n         * ```\n         * cameraControls.maxPolarAngle = Math.PI;\n         * ```\n         * @category Properties\n         */\n        this.maxPolarAngle = Math.PI; // radians\n        /**\n         * Minimum horizontal angle in radians.\n         * The angle has to be less than `.maxAzimuthAngle`.\n         * The default value is `- Infinity`.\n         *\n         * e.g.\n         * ```\n         * cameraControls.minAzimuthAngle = - Infinity;\n         * ```\n         * @category Properties\n         */\n        this.minAzimuthAngle = -Infinity; // radians\n        /**\n         * Maximum horizontal angle in radians.\n         * The angle has to be greater than `.minAzimuthAngle`.\n         * The default value is `Infinity`.\n         *\n         * e.g.\n         * ```\n         * cameraControls.maxAzimuthAngle = Infinity;\n         * ```\n         * @category Properties\n         */\n        this.maxAzimuthAngle = Infinity; // radians\n        // How far you can dolly in and out ( PerspectiveCamera only )\n        /**\n         * Minimum distance for dolly. The value must be higher than `0`.\n         * PerspectiveCamera only.\n         * @category Properties\n         */\n        this.minDistance = 0;\n        /**\n         * Maximum distance for dolly. The value must be higher than `minDistance`.\n         * PerspectiveCamera only.\n         * @category Properties\n         */\n        this.maxDistance = Infinity;\n        /**\n         * `true` to enable Infinity Dolly.\n         * When the Dolly distance is less than the `minDistance`, radius of the sphere will be set `minDistance` automatically.\n         * @category Properties\n         */\n        this.infinityDolly = false;\n        /**\n         * Minimum camera zoom.\n         * @category Properties\n         */\n        this.minZoom = 0.01;\n        /**\n         * Maximum camera zoom.\n         * @category Properties\n         */\n        this.maxZoom = Infinity;\n        /**\n         * Approximate time in seconds to reach the target. A smaller value will reach the target faster.\n         * @category Properties\n         */\n        this.smoothTime = 0.25;\n        /**\n         * the smoothTime while dragging\n         * @category Properties\n         */\n        this.draggingSmoothTime = 0.125;\n        /**\n         * Max transition speed in unit-per-seconds\n         * @category Properties\n         */\n        this.maxSpeed = Infinity;\n        /**\n         * Speed of azimuth (horizontal) rotation.\n         * @category Properties\n         */\n        this.azimuthRotateSpeed = 1.0;\n        /**\n         * Speed of polar (vertical) rotation.\n         * @category Properties\n         */\n        this.polarRotateSpeed = 1.0;\n        /**\n         * Speed of mouse-wheel dollying.\n         * @category Properties\n         */\n        this.dollySpeed = 1.0;\n        /**\n         * `true` to invert direction when dollying or zooming via drag\n         * @category Properties\n         */\n        this.dollyDragInverted = false;\n        /**\n         * Speed of drag for truck and pedestal.\n         * @category Properties\n         */\n        this.truckSpeed = 2.0;\n        /**\n         * `true` to enable Dolly-in to the mouse cursor coords.\n         * @category Properties\n         */\n        this.dollyToCursor = false;\n        /**\n         * @category Properties\n         */\n        this.dragToOffset = false;\n        /**\n         * The same as `.screenSpacePanning` in three.js's OrbitControls.\n         * @category Properties\n         */\n        this.verticalDragToForward = false;\n        /**\n         * Friction ratio of the boundary.\n         * @category Properties\n         */\n        this.boundaryFriction = 0.0;\n        /**\n         * Controls how soon the `rest` event fires as the camera slows.\n         * @category Properties\n         */\n        this.restThreshold = 0.01;\n        /**\n         * An array of Meshes to collide with camera.\n         * Be aware colliderMeshes may decrease performance. The collision test uses 4 raycasters from the camera since the near plane has 4 corners.\n         * @category Properties\n         */\n        this.colliderMeshes = [];\n        /**\n         * Force cancel user dragging.\n         * @category Methods\n         */\n        // cancel will be overwritten in the constructor.\n        this.cancel = () => { };\n        this._enabled = true;\n        this._state = ACTION.NONE;\n        this._viewport = null;\n        this._dollyControlAmount = 0;\n        this._hasRested = true;\n        this._boundaryEnclosesCamera = false;\n        this._needsUpdate = true;\n        this._updatedLastTime = false;\n        this._elementRect = new DOMRect();\n        this._isDragging = false;\n        this._activePointers = [];\n        this._lockedPointer = null;\n        // Use draggingSmoothTime over smoothTime while true.\n        // set automatically true on user-dragging start.\n        // set automatically false on programmable methods call.\n        this._isUserControllingRotate = false;\n        this._isUserControllingDolly = false;\n        this._isUserControllingTruck = false;\n        this._isUserControllingOffset = false;\n        this._isUserControllingZoom = false;\n        // velocities for smoothDamp\n        this._thetaVelocity = { value: 0 };\n        this._phiVelocity = { value: 0 };\n        this._radiusVelocity = { value: 0 };\n        this._targetVelocity = new THREE.Vector3();\n        this._focalOffsetVelocity = new THREE.Vector3();\n        this._zoomVelocity = { value: 0 };\n        this._truckInternal = (deltaX, deltaY, dragToOffset) => {\n            let truckX;\n            let pedestalY;\n            if (isPerspectiveCamera(this._camera)) {\n                const offset = _v3A.copy(this._camera.position).sub(this._target);\n                // half of the fov is center to top of screen\n                const fov = this._camera.getEffectiveFOV() * DEG2RAD;\n                const targetDistance = offset.length() * Math.tan(fov * 0.5);\n                truckX = (this.truckSpeed * deltaX * targetDistance / this._elementRect.height);\n                pedestalY = (this.truckSpeed * deltaY * targetDistance / this._elementRect.height);\n            }\n            else if (isOrthographicCamera(this._camera)) {\n                const camera = this._camera;\n                truckX = deltaX * (camera.right - camera.left) / camera.zoom / this._elementRect.width;\n                pedestalY = deltaY * (camera.top - camera.bottom) / camera.zoom / this._elementRect.height;\n            }\n            else {\n                return;\n            }\n            if (this.verticalDragToForward) {\n                dragToOffset ?\n                    this.setFocalOffset(this._focalOffsetEnd.x + truckX, this._focalOffsetEnd.y, this._focalOffsetEnd.z, true) :\n                    this.truck(truckX, 0, true);\n                this.forward(-pedestalY, true);\n            }\n            else {\n                dragToOffset ?\n                    this.setFocalOffset(this._focalOffsetEnd.x + truckX, this._focalOffsetEnd.y + pedestalY, this._focalOffsetEnd.z, true) :\n                    this.truck(truckX, pedestalY, true);\n            }\n        };\n        this._rotateInternal = (deltaX, deltaY) => {\n            const theta = PI_2 * this.azimuthRotateSpeed * deltaX / this._elementRect.height; // divide by *height* to refer the resolution\n            const phi = PI_2 * this.polarRotateSpeed * deltaY / this._elementRect.height;\n            this.rotate(theta, phi, true);\n        };\n        this._dollyInternal = (delta, x, y) => {\n            const dollyScale = Math.pow(0.95, -delta * this.dollySpeed);\n            const distance = this._sphericalEnd.radius * dollyScale;\n            const prevRadius = this._sphericalEnd.radius;\n            const signedPrevRadius = prevRadius * (delta >= 0 ? -1 : 1);\n            this.dollyTo(distance);\n            if (this.infinityDolly && (distance < this.minDistance || this.maxDistance === this.minDistance)) {\n                this._camera.getWorldDirection(_v3A);\n                this._targetEnd.add(_v3A.normalize().multiplyScalar(signedPrevRadius));\n                this._target.add(_v3A.normalize().multiplyScalar(signedPrevRadius));\n            }\n            if (this.dollyToCursor) {\n                this._dollyControlAmount += this._sphericalEnd.radius - prevRadius;\n                if (this.infinityDolly && (distance < this.minDistance || this.maxDistance === this.minDistance)) {\n                    this._dollyControlAmount -= signedPrevRadius;\n                }\n                this._dollyControlCoord.set(x, y);\n            }\n        };\n        this._zoomInternal = (delta, x, y) => {\n            const zoomScale = Math.pow(0.95, delta * this.dollySpeed);\n            const prevZoom = this._zoomEnd;\n            // for both PerspectiveCamera and OrthographicCamera\n            this.zoomTo(this._zoom * zoomScale);\n            if (this.dollyToCursor) {\n                this._dollyControlAmount += this._zoomEnd - prevZoom;\n                this._dollyControlCoord.set(x, y);\n            }\n        };\n        // Check if the user has installed THREE\n        if (typeof THREE === 'undefined') {\n            console.error('camera-controls: `THREE` is undefined. You must first run `CameraControls.install( { THREE: THREE } )`. Check the docs for further information.');\n        }\n        this._camera = camera;\n        this._yAxisUpSpace = new THREE.Quaternion().setFromUnitVectors(this._camera.up, _AXIS_Y);\n        this._yAxisUpSpaceInverse = this._yAxisUpSpace.clone().invert();\n        this._state = ACTION.NONE;\n        // the location\n        this._target = new THREE.Vector3();\n        this._targetEnd = this._target.clone();\n        this._focalOffset = new THREE.Vector3();\n        this._focalOffsetEnd = this._focalOffset.clone();\n        // rotation\n        this._spherical = new THREE.Spherical().setFromVector3(_v3A.copy(this._camera.position).applyQuaternion(this._yAxisUpSpace));\n        this._sphericalEnd = this._spherical.clone();\n        this._zoom = this._camera.zoom;\n        this._zoomEnd = this._zoom;\n        // collisionTest uses nearPlane.s\n        this._nearPlaneCorners = [\n            new THREE.Vector3(),\n            new THREE.Vector3(),\n            new THREE.Vector3(),\n            new THREE.Vector3(),\n        ];\n        this._updateNearPlaneCorners();\n        // Target cannot move outside of this box\n        this._boundary = new THREE.Box3(new THREE.Vector3(-Infinity, -Infinity, -Infinity), new THREE.Vector3(Infinity, Infinity, Infinity));\n        // reset\n        this._cameraUp0 = this._camera.up.clone();\n        this._target0 = this._target.clone();\n        this._position0 = this._camera.position.clone();\n        this._zoom0 = this._zoom;\n        this._focalOffset0 = this._focalOffset.clone();\n        this._dollyControlAmount = 0;\n        this._dollyControlCoord = new THREE.Vector2();\n        // configs\n        this.mouseButtons = {\n            left: ACTION.ROTATE,\n            middle: ACTION.DOLLY,\n            right: ACTION.TRUCK,\n            wheel: isPerspectiveCamera(this._camera) ? ACTION.DOLLY :\n                isOrthographicCamera(this._camera) ? ACTION.ZOOM :\n                    ACTION.NONE,\n        };\n        this.touches = {\n            one: ACTION.TOUCH_ROTATE,\n            two: isPerspectiveCamera(this._camera) ? ACTION.TOUCH_DOLLY_TRUCK :\n                isOrthographicCamera(this._camera) ? ACTION.TOUCH_ZOOM_TRUCK :\n                    ACTION.NONE,\n            three: ACTION.TOUCH_TRUCK,\n        };\n        const dragStartPosition = new THREE.Vector2();\n        const lastDragPosition = new THREE.Vector2();\n        const dollyStart = new THREE.Vector2();\n        const onPointerDown = (event) => {\n            if (!this._enabled || !this._domElement)\n                return;\n            // Don't call `event.preventDefault()` on the pointerdown event\n            // to keep receiving pointermove evens outside dragging iframe\n            // https://taye.me/blog/tips/2015/11/16/mouse-drag-outside-iframe/\n            const mouseButton = event.pointerType !== 'mouse' ? null :\n                (event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT ? MOUSE_BUTTON.LEFT :\n                    (event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.MIDDLE ? MOUSE_BUTTON.MIDDLE :\n                        (event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.RIGHT ? MOUSE_BUTTON.RIGHT :\n                            null;\n            if (mouseButton !== null) {\n                const zombiePointer = this._findPointerByMouseButton(mouseButton);\n                zombiePointer && this._disposePointer(zombiePointer);\n            }\n            if ((event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT && this._lockedPointer)\n                return;\n            const pointer = {\n                pointerId: event.pointerId,\n                clientX: event.clientX,\n                clientY: event.clientY,\n                deltaX: 0,\n                deltaY: 0,\n                mouseButton,\n            };\n            this._activePointers.push(pointer);\n            // eslint-disable-next-line no-undef\n            this._domElement.ownerDocument.removeEventListener('pointermove', onPointerMove, { passive: false });\n            this._domElement.ownerDocument.removeEventListener('pointerup', onPointerUp);\n            this._domElement.ownerDocument.addEventListener('pointermove', onPointerMove, { passive: false });\n            this._domElement.ownerDocument.addEventListener('pointerup', onPointerUp);\n            this._isDragging = true;\n            startDragging(event);\n        };\n        const onMouseDown = (event) => {\n            if (!this._enabled || !this._domElement || this._lockedPointer)\n                return;\n            const mouseButton = (event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT ? MOUSE_BUTTON.LEFT :\n                (event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.MIDDLE ? MOUSE_BUTTON.MIDDLE :\n                    (event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.RIGHT ? MOUSE_BUTTON.RIGHT :\n                        null;\n            if (mouseButton !== null) {\n                const zombiePointer = this._findPointerByMouseButton(mouseButton);\n                zombiePointer && this._disposePointer(zombiePointer);\n            }\n            const pointer = {\n                pointerId: 1,\n                clientX: event.clientX,\n                clientY: event.clientY,\n                deltaX: 0,\n                deltaY: 0,\n                mouseButton: (event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT ? MOUSE_BUTTON.LEFT :\n                    (event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.LEFT ? MOUSE_BUTTON.MIDDLE :\n                        (event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.LEFT ? MOUSE_BUTTON.RIGHT :\n                            null,\n            };\n            this._activePointers.push(pointer);\n            // see https://github.com/microsoft/TypeScript/issues/32912#issuecomment-522142969\n            // eslint-disable-next-line no-undef\n            this._domElement.ownerDocument.removeEventListener('mousemove', onMouseMove);\n            this._domElement.ownerDocument.removeEventListener('mouseup', onMouseUp);\n            this._domElement.ownerDocument.addEventListener('mousemove', onMouseMove);\n            this._domElement.ownerDocument.addEventListener('mouseup', onMouseUp);\n            this._isDragging = true;\n            startDragging(event);\n        };\n        const onPointerMove = (event) => {\n            if (event.cancelable)\n                event.preventDefault();\n            const pointerId = event.pointerId;\n            const pointer = this._lockedPointer || this._findPointerById(pointerId);\n            if (!pointer)\n                return;\n            pointer.clientX = event.clientX;\n            pointer.clientY = event.clientY;\n            pointer.deltaX = event.movementX;\n            pointer.deltaY = event.movementY;\n            this._state = 0;\n            if (event.pointerType === 'touch') {\n                switch (this._activePointers.length) {\n                    case 1:\n                        this._state = this.touches.one;\n                        break;\n                    case 2:\n                        this._state = this.touches.two;\n                        break;\n                    case 3:\n                        this._state = this.touches.three;\n                        break;\n                }\n            }\n            else {\n                if ((!this._isDragging && this._lockedPointer) ||\n                    this._isDragging && (event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT) {\n                    this._state = this._state | this.mouseButtons.left;\n                }\n                if (this._isDragging && (event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.MIDDLE) {\n                    this._state = this._state | this.mouseButtons.middle;\n                }\n                if (this._isDragging && (event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.RIGHT) {\n                    this._state = this._state | this.mouseButtons.right;\n                }\n            }\n            dragging();\n        };\n        const onMouseMove = (event) => {\n            const pointer = this._lockedPointer || this._findPointerById(1);\n            if (!pointer)\n                return;\n            pointer.clientX = event.clientX;\n            pointer.clientY = event.clientY;\n            pointer.deltaX = event.movementX;\n            pointer.deltaY = event.movementY;\n            this._state = 0;\n            if (this._lockedPointer ||\n                (event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT) {\n                this._state = this._state | this.mouseButtons.left;\n            }\n            if ((event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.MIDDLE) {\n                this._state = this._state | this.mouseButtons.middle;\n            }\n            if ((event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.RIGHT) {\n                this._state = this._state | this.mouseButtons.right;\n            }\n            dragging();\n        };\n        const onPointerUp = (event) => {\n            const pointer = this._findPointerById(event.pointerId);\n            if (pointer && pointer === this._lockedPointer)\n                return;\n            pointer && this._disposePointer(pointer);\n            if (event.pointerType === 'touch') {\n                switch (this._activePointers.length) {\n                    case 0:\n                        this._state = ACTION.NONE;\n                        break;\n                    case 1:\n                        this._state = this.touches.one;\n                        break;\n                    case 2:\n                        this._state = this.touches.two;\n                        break;\n                    case 3:\n                        this._state = this.touches.three;\n                        break;\n                }\n            }\n            else {\n                this._state = ACTION.NONE;\n            }\n            endDragging();\n        };\n        const onMouseUp = () => {\n            const pointer = this._findPointerById(1);\n            if (pointer && pointer === this._lockedPointer)\n                return;\n            pointer && this._disposePointer(pointer);\n            this._state = ACTION.NONE;\n            endDragging();\n        };\n        let lastScrollTimeStamp = -1;\n        const onMouseWheel = (event) => {\n            if (!this._enabled || this.mouseButtons.wheel === ACTION.NONE)\n                return;\n            event.preventDefault();\n            if (this.dollyToCursor ||\n                this.mouseButtons.wheel === ACTION.ROTATE ||\n                this.mouseButtons.wheel === ACTION.TRUCK) {\n                const now = performance.now();\n                // only need to fire this at scroll start.\n                if (lastScrollTimeStamp - now < 1000)\n                    this._getClientRect(this._elementRect);\n                lastScrollTimeStamp = now;\n            }\n            // Ref: https://github.com/cedricpinson/osgjs/blob/00e5a7e9d9206c06fdde0436e1d62ab7cb5ce853/sources/osgViewer/input/source/InputSourceMouse.js#L89-L103\n            const deltaYFactor = isMac ? -1 : -3;\n            const delta = (event.deltaMode === 1) ? event.deltaY / deltaYFactor : event.deltaY / (deltaYFactor * 10);\n            const x = this.dollyToCursor ? (event.clientX - this._elementRect.x) / this._elementRect.width * 2 - 1 : 0;\n            const y = this.dollyToCursor ? (event.clientY - this._elementRect.y) / this._elementRect.height * -2 + 1 : 0;\n            switch (this.mouseButtons.wheel) {\n                case ACTION.ROTATE: {\n                    this._rotateInternal(event.deltaX, event.deltaY);\n                    this._isUserControllingRotate = true;\n                    break;\n                }\n                case ACTION.TRUCK: {\n                    this._truckInternal(event.deltaX, event.deltaY, false);\n                    this._isUserControllingTruck = true;\n                    break;\n                }\n                case ACTION.OFFSET: {\n                    this._truckInternal(event.deltaX, event.deltaY, true);\n                    this._isUserControllingOffset = true;\n                    break;\n                }\n                case ACTION.DOLLY: {\n                    this._dollyInternal(-delta, x, y);\n                    this._isUserControllingDolly = true;\n                    break;\n                }\n                case ACTION.ZOOM: {\n                    this._zoomInternal(-delta, x, y);\n                    this._isUserControllingZoom = true;\n                    break;\n                }\n            }\n            this.dispatchEvent({ type: 'control' });\n        };\n        const onContextMenu = (event) => {\n            if (!this._domElement || !this._enabled)\n                return;\n            // contextmenu event is fired right after pointerdown/mousedown.\n            // remove attached handlers and active pointer, if interrupted by contextmenu.\n            if (this.mouseButtons.right === CameraControls.ACTION.NONE) {\n                const pointerId = event instanceof PointerEvent ? event.pointerId :\n                    event instanceof MouseEvent ? 0 :\n                        0;\n                const pointer = this._findPointerById(pointerId);\n                pointer && this._disposePointer(pointer);\n                // eslint-disable-next-line no-undef\n                this._domElement.ownerDocument.removeEventListener('pointermove', onPointerMove, { passive: false });\n                this._domElement.ownerDocument.removeEventListener('pointerup', onPointerUp);\n                this._domElement.ownerDocument.removeEventListener('mousemove', onMouseMove);\n                this._domElement.ownerDocument.removeEventListener('mouseup', onMouseUp);\n                return;\n            }\n            event.preventDefault();\n        };\n        const startDragging = (event) => {\n            if (!this._enabled)\n                return;\n            extractClientCoordFromEvent(this._activePointers, _v2);\n            this._getClientRect(this._elementRect);\n            dragStartPosition.copy(_v2);\n            lastDragPosition.copy(_v2);\n            const isMultiTouch = this._activePointers.length >= 2;\n            if (isMultiTouch) {\n                // 2 finger pinch\n                const dx = _v2.x - this._activePointers[1].clientX;\n                const dy = _v2.y - this._activePointers[1].clientY;\n                const distance = Math.sqrt(dx * dx + dy * dy);\n                dollyStart.set(0, distance);\n                // center coords of 2 finger truck\n                const x = (this._activePointers[0].clientX + this._activePointers[1].clientX) * 0.5;\n                const y = (this._activePointers[0].clientY + this._activePointers[1].clientY) * 0.5;\n                lastDragPosition.set(x, y);\n            }\n            this._state = 0;\n            if (!event) {\n                if (this._lockedPointer)\n                    this._state = this._state | this.mouseButtons.left;\n            }\n            else if ('pointerType' in event && event.pointerType === 'touch') {\n                switch (this._activePointers.length) {\n                    case 1:\n                        this._state = this.touches.one;\n                        break;\n                    case 2:\n                        this._state = this.touches.two;\n                        break;\n                    case 3:\n                        this._state = this.touches.three;\n                        break;\n                }\n            }\n            else {\n                if (!this._lockedPointer && (event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT) {\n                    this._state = this._state | this.mouseButtons.left;\n                }\n                if ((event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.MIDDLE) {\n                    this._state = this._state | this.mouseButtons.middle;\n                }\n                if ((event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.RIGHT) {\n                    this._state = this._state | this.mouseButtons.right;\n                }\n            }\n            // stop current movement on drag start\n            if ((this._state & ACTION.ROTATE) === ACTION.ROTATE ||\n                (this._state & ACTION.TOUCH_ROTATE) === ACTION.TOUCH_ROTATE ||\n                (this._state & ACTION.TOUCH_DOLLY_ROTATE) === ACTION.TOUCH_DOLLY_ROTATE ||\n                (this._state & ACTION.TOUCH_ZOOM_ROTATE) === ACTION.TOUCH_ZOOM_ROTATE) {\n                this._sphericalEnd.theta = this._spherical.theta;\n                this._sphericalEnd.phi = this._spherical.phi;\n                this._thetaVelocity.value = 0;\n                this._phiVelocity.value = 0;\n            }\n            if ((this._state & ACTION.TRUCK) === ACTION.TRUCK ||\n                (this._state & ACTION.TOUCH_TRUCK) === ACTION.TOUCH_TRUCK ||\n                (this._state & ACTION.TOUCH_DOLLY_TRUCK) === ACTION.TOUCH_DOLLY_TRUCK ||\n                (this._state & ACTION.TOUCH_ZOOM_TRUCK) === ACTION.TOUCH_ZOOM_TRUCK) {\n                this._targetEnd.copy(this._target);\n                this._targetVelocity.set(0, 0, 0);\n            }\n            if ((this._state & ACTION.DOLLY) === ACTION.DOLLY ||\n                (this._state & ACTION.TOUCH_DOLLY) === ACTION.TOUCH_DOLLY ||\n                (this._state & ACTION.TOUCH_DOLLY_TRUCK) === ACTION.TOUCH_DOLLY_TRUCK ||\n                (this._state & ACTION.TOUCH_DOLLY_OFFSET) === ACTION.TOUCH_DOLLY_OFFSET ||\n                (this._state & ACTION.TOUCH_DOLLY_ROTATE) === ACTION.TOUCH_DOLLY_ROTATE) {\n                this._sphericalEnd.radius = this._spherical.radius;\n                this._radiusVelocity.value = 0;\n            }\n            if ((this._state & ACTION.ZOOM) === ACTION.ZOOM ||\n                (this._state & ACTION.TOUCH_ZOOM) === ACTION.TOUCH_ZOOM ||\n                (this._state & ACTION.TOUCH_ZOOM_TRUCK) === ACTION.TOUCH_ZOOM_TRUCK ||\n                (this._state & ACTION.TOUCH_ZOOM_OFFSET) === ACTION.TOUCH_ZOOM_OFFSET ||\n                (this._state & ACTION.TOUCH_ZOOM_ROTATE) === ACTION.TOUCH_ZOOM_ROTATE) {\n                this._zoomEnd = this._zoom;\n                this._zoomVelocity.value = 0;\n            }\n            if ((this._state & ACTION.OFFSET) === ACTION.OFFSET ||\n                (this._state & ACTION.TOUCH_OFFSET) === ACTION.TOUCH_OFFSET ||\n                (this._state & ACTION.TOUCH_DOLLY_OFFSET) === ACTION.TOUCH_DOLLY_OFFSET ||\n                (this._state & ACTION.TOUCH_ZOOM_OFFSET) === ACTION.TOUCH_ZOOM_OFFSET) {\n                this._focalOffsetEnd.copy(this._focalOffset);\n                this._focalOffsetVelocity.set(0, 0, 0);\n            }\n            this.dispatchEvent({ type: 'controlstart' });\n        };\n        const dragging = () => {\n            if (!this._enabled)\n                return;\n            extractClientCoordFromEvent(this._activePointers, _v2);\n            // When pointer lock is enabled clientX, clientY, screenX, and screenY remain 0.\n            // If pointer lock is enabled, use the Delta directory, and assume active-pointer is not multiple.\n            const isPointerLockActive = this._domElement && document.pointerLockElement === this._domElement;\n            const lockedPointer = isPointerLockActive ? this._lockedPointer || this._activePointers[0] : null;\n            const deltaX = lockedPointer ? -lockedPointer.deltaX : lastDragPosition.x - _v2.x;\n            const deltaY = lockedPointer ? -lockedPointer.deltaY : lastDragPosition.y - _v2.y;\n            lastDragPosition.copy(_v2);\n            if ((this._state & ACTION.ROTATE) === ACTION.ROTATE ||\n                (this._state & ACTION.TOUCH_ROTATE) === ACTION.TOUCH_ROTATE ||\n                (this._state & ACTION.TOUCH_DOLLY_ROTATE) === ACTION.TOUCH_DOLLY_ROTATE ||\n                (this._state & ACTION.TOUCH_ZOOM_ROTATE) === ACTION.TOUCH_ZOOM_ROTATE) {\n                this._rotateInternal(deltaX, deltaY);\n                this._isUserControllingRotate = true;\n            }\n            if ((this._state & ACTION.DOLLY) === ACTION.DOLLY ||\n                (this._state & ACTION.ZOOM) === ACTION.ZOOM) {\n                const dollyX = this.dollyToCursor ? (dragStartPosition.x - this._elementRect.x) / this._elementRect.width * 2 - 1 : 0;\n                const dollyY = this.dollyToCursor ? (dragStartPosition.y - this._elementRect.y) / this._elementRect.height * -2 + 1 : 0;\n                const dollyDirection = this.dollyDragInverted ? -1 : 1;\n                if ((this._state & ACTION.DOLLY) === ACTION.DOLLY) {\n                    this._dollyInternal(dollyDirection * deltaY * TOUCH_DOLLY_FACTOR, dollyX, dollyY);\n                    this._isUserControllingDolly = true;\n                }\n                else {\n                    this._zoomInternal(dollyDirection * deltaY * TOUCH_DOLLY_FACTOR, dollyX, dollyY);\n                    this._isUserControllingZoom = true;\n                }\n            }\n            if ((this._state & ACTION.TOUCH_DOLLY) === ACTION.TOUCH_DOLLY ||\n                (this._state & ACTION.TOUCH_ZOOM) === ACTION.TOUCH_ZOOM ||\n                (this._state & ACTION.TOUCH_DOLLY_TRUCK) === ACTION.TOUCH_DOLLY_TRUCK ||\n                (this._state & ACTION.TOUCH_ZOOM_TRUCK) === ACTION.TOUCH_ZOOM_TRUCK ||\n                (this._state & ACTION.TOUCH_DOLLY_OFFSET) === ACTION.TOUCH_DOLLY_OFFSET ||\n                (this._state & ACTION.TOUCH_ZOOM_OFFSET) === ACTION.TOUCH_ZOOM_OFFSET ||\n                (this._state & ACTION.TOUCH_DOLLY_ROTATE) === ACTION.TOUCH_DOLLY_ROTATE ||\n                (this._state & ACTION.TOUCH_ZOOM_ROTATE) === ACTION.TOUCH_ZOOM_ROTATE) {\n                const dx = _v2.x - this._activePointers[1].clientX;\n                const dy = _v2.y - this._activePointers[1].clientY;\n                const distance = Math.sqrt(dx * dx + dy * dy);\n                const dollyDelta = dollyStart.y - distance;\n                dollyStart.set(0, distance);\n                const dollyX = this.dollyToCursor ? (lastDragPosition.x - this._elementRect.x) / this._elementRect.width * 2 - 1 : 0;\n                const dollyY = this.dollyToCursor ? (lastDragPosition.y - this._elementRect.y) / this._elementRect.height * -2 + 1 : 0;\n                if ((this._state & ACTION.TOUCH_DOLLY) === ACTION.TOUCH_DOLLY ||\n                    (this._state & ACTION.TOUCH_DOLLY_ROTATE) === ACTION.TOUCH_DOLLY_ROTATE ||\n                    (this._state & ACTION.TOUCH_DOLLY_TRUCK) === ACTION.TOUCH_DOLLY_TRUCK ||\n                    (this._state & ACTION.TOUCH_DOLLY_OFFSET) === ACTION.TOUCH_DOLLY_OFFSET) {\n                    this._dollyInternal(dollyDelta * TOUCH_DOLLY_FACTOR, dollyX, dollyY);\n                    this._isUserControllingDolly = true;\n                }\n                else {\n                    this._zoomInternal(dollyDelta * TOUCH_DOLLY_FACTOR, dollyX, dollyY);\n                    this._isUserControllingZoom = true;\n                }\n            }\n            if ((this._state & ACTION.TRUCK) === ACTION.TRUCK ||\n                (this._state & ACTION.TOUCH_TRUCK) === ACTION.TOUCH_TRUCK ||\n                (this._state & ACTION.TOUCH_DOLLY_TRUCK) === ACTION.TOUCH_DOLLY_TRUCK ||\n                (this._state & ACTION.TOUCH_ZOOM_TRUCK) === ACTION.TOUCH_ZOOM_TRUCK) {\n                this._truckInternal(deltaX, deltaY, false);\n                this._isUserControllingTruck = true;\n            }\n            if ((this._state & ACTION.OFFSET) === ACTION.OFFSET ||\n                (this._state & ACTION.TOUCH_OFFSET) === ACTION.TOUCH_OFFSET ||\n                (this._state & ACTION.TOUCH_DOLLY_OFFSET) === ACTION.TOUCH_DOLLY_OFFSET ||\n                (this._state & ACTION.TOUCH_ZOOM_OFFSET) === ACTION.TOUCH_ZOOM_OFFSET) {\n                this._truckInternal(deltaX, deltaY, true);\n                this._isUserControllingOffset = true;\n            }\n            this.dispatchEvent({ type: 'control' });\n        };\n        const endDragging = () => {\n            extractClientCoordFromEvent(this._activePointers, _v2);\n            lastDragPosition.copy(_v2);\n            if (this._activePointers.length === 0 ||\n                (this._activePointers.length === 1 && this._activePointers[0] === this._lockedPointer)) {\n                this._isDragging = false;\n            }\n            if (this._activePointers.length === 0 && this._domElement) {\n                // eslint-disable-next-line no-undef\n                this._domElement.ownerDocument.removeEventListener('pointermove', onPointerMove, { passive: false });\n                this._domElement.ownerDocument.removeEventListener('mousemove', onMouseMove);\n                this._domElement.ownerDocument.removeEventListener('pointerup', onPointerUp);\n                this._domElement.ownerDocument.removeEventListener('mouseup', onMouseUp);\n                this.dispatchEvent({ type: 'controlend' });\n            }\n        };\n        this.lockPointer = () => {\n            if (!this._enabled || !this._domElement)\n                return;\n            this.cancel();\n            // Element.requestPointerLock is allowed to happen without any pointer active - create a faux one for compatibility with controls\n            this._lockedPointer = {\n                pointerId: -1,\n                clientX: 0,\n                clientY: 0,\n                deltaX: 0,\n                deltaY: 0,\n                mouseButton: null,\n            };\n            this._activePointers.push(this._lockedPointer);\n            // eslint-disable-next-line no-undef\n            this._domElement.ownerDocument.removeEventListener('pointermove', onPointerMove, { passive: false });\n            this._domElement.ownerDocument.removeEventListener('pointerup', onPointerUp);\n            this._domElement.requestPointerLock();\n            this._domElement.ownerDocument.addEventListener('pointerlockchange', onPointerLockChange);\n            this._domElement.ownerDocument.addEventListener('pointerlockerror', onPointerLockError);\n            this._domElement.ownerDocument.addEventListener('pointermove', onPointerMove, { passive: false });\n            this._domElement.ownerDocument.addEventListener('pointerup', onPointerUp);\n            startDragging();\n        };\n        this.unlockPointer = () => {\n            if (this._lockedPointer !== null) {\n                this._disposePointer(this._lockedPointer);\n                this._lockedPointer = null;\n            }\n            document.exitPointerLock();\n            this.cancel();\n            if (!this._domElement)\n                return;\n            this._domElement.ownerDocument.removeEventListener('pointerlockchange', onPointerLockChange);\n            this._domElement.ownerDocument.removeEventListener('pointerlockerror', onPointerLockError);\n        };\n        const onPointerLockChange = () => {\n            const isPointerLockActive = this._domElement && this._domElement.ownerDocument.pointerLockElement === this._domElement;\n            if (!isPointerLockActive)\n                this.unlockPointer();\n        };\n        const onPointerLockError = () => {\n            this.unlockPointer();\n        };\n        this._addAllEventListeners = (domElement) => {\n            this._domElement = domElement;\n            this._domElement.style.touchAction = 'none';\n            this._domElement.style.userSelect = 'none';\n            this._domElement.style.webkitUserSelect = 'none';\n            this._domElement.addEventListener('pointerdown', onPointerDown);\n            isPointerEventsNotSupported && this._domElement.addEventListener('mousedown', onMouseDown);\n            this._domElement.addEventListener('pointercancel', onPointerUp);\n            this._domElement.addEventListener('wheel', onMouseWheel, { passive: false });\n            this._domElement.addEventListener('contextmenu', onContextMenu);\n        };\n        this._removeAllEventListeners = () => {\n            if (!this._domElement)\n                return;\n            this._domElement.style.touchAction = '';\n            this._domElement.style.userSelect = '';\n            this._domElement.style.webkitUserSelect = '';\n            this._domElement.removeEventListener('pointerdown', onPointerDown);\n            this._domElement.removeEventListener('mousedown', onMouseDown);\n            this._domElement.removeEventListener('pointercancel', onPointerUp);\n            // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener#matching_event_listeners_for_removal\n            // > it's probably wise to use the same values used for the call to `addEventListener()` when calling `removeEventListener()`\n            // see https://github.com/microsoft/TypeScript/issues/32912#issuecomment-522142969\n            // eslint-disable-next-line no-undef\n            this._domElement.removeEventListener('wheel', onMouseWheel, { passive: false });\n            this._domElement.removeEventListener('contextmenu', onContextMenu);\n            // eslint-disable-next-line no-undef\n            this._domElement.ownerDocument.removeEventListener('pointermove', onPointerMove, { passive: false });\n            this._domElement.ownerDocument.removeEventListener('mousemove', onMouseMove);\n            this._domElement.ownerDocument.removeEventListener('pointerup', onPointerUp);\n            this._domElement.ownerDocument.removeEventListener('mouseup', onMouseUp);\n            this._domElement.ownerDocument.removeEventListener('pointerlockchange', onPointerLockChange);\n            this._domElement.ownerDocument.removeEventListener('pointerlockerror', onPointerLockError);\n        };\n        this.cancel = () => {\n            if (this._state === ACTION.NONE)\n                return;\n            this._state = ACTION.NONE;\n            this._activePointers.length = 0;\n            endDragging();\n        };\n        if (domElement)\n            this.connect(domElement);\n        this.update(0);\n    }\n    /**\n     * The camera to be controlled\n     * @category Properties\n     */\n    get camera() {\n        return this._camera;\n    }\n    set camera(camera) {\n        this._camera = camera;\n        this.updateCameraUp();\n        this._camera.updateProjectionMatrix();\n        this._updateNearPlaneCorners();\n        this._needsUpdate = true;\n    }\n    /**\n     * Whether or not the controls are enabled.\n     * `false` to disable user dragging/touch-move, but all methods works.\n     * @category Properties\n     */\n    get enabled() {\n        return this._enabled;\n    }\n    set enabled(enabled) {\n        this._enabled = enabled;\n        if (!this._domElement)\n            return;\n        if (enabled) {\n            this._domElement.style.touchAction = 'none';\n            this._domElement.style.userSelect = 'none';\n            this._domElement.style.webkitUserSelect = 'none';\n        }\n        else {\n            this.cancel();\n            this._domElement.style.touchAction = '';\n            this._domElement.style.userSelect = '';\n            this._domElement.style.webkitUserSelect = '';\n        }\n    }\n    /**\n     * Returns `true` if the controls are active updating.\n     * readonly value.\n     * @category Properties\n     */\n    get active() {\n        return !this._hasRested;\n    }\n    /**\n     * Getter for the current `ACTION`.\n     * readonly value.\n     * @category Properties\n     */\n    get currentAction() {\n        return this._state;\n    }\n    /**\n     * get/set Current distance.\n     * @category Properties\n     */\n    get distance() {\n        return this._spherical.radius;\n    }\n    set distance(distance) {\n        if (this._spherical.radius === distance &&\n            this._sphericalEnd.radius === distance)\n            return;\n        this._spherical.radius = distance;\n        this._sphericalEnd.radius = distance;\n        this._needsUpdate = true;\n    }\n    // horizontal angle\n    /**\n     * get/set the azimuth angle (horizontal) in radians.\n     * Every 360 degrees turn is added to `.azimuthAngle` value, which is accumulative.\n     * @category Properties\n     */\n    get azimuthAngle() {\n        return this._spherical.theta;\n    }\n    set azimuthAngle(azimuthAngle) {\n        if (this._spherical.theta === azimuthAngle &&\n            this._sphericalEnd.theta === azimuthAngle)\n            return;\n        this._spherical.theta = azimuthAngle;\n        this._sphericalEnd.theta = azimuthAngle;\n        this._needsUpdate = true;\n    }\n    // vertical angle\n    /**\n     * get/set the polar angle (vertical) in radians.\n     * @category Properties\n     */\n    get polarAngle() {\n        return this._spherical.phi;\n    }\n    set polarAngle(polarAngle) {\n        if (this._spherical.phi === polarAngle &&\n            this._sphericalEnd.phi === polarAngle)\n            return;\n        this._spherical.phi = polarAngle;\n        this._sphericalEnd.phi = polarAngle;\n        this._needsUpdate = true;\n    }\n    /**\n     * Whether camera position should be enclosed in the boundary or not.\n     * @category Properties\n     */\n    get boundaryEnclosesCamera() {\n        return this._boundaryEnclosesCamera;\n    }\n    set boundaryEnclosesCamera(boundaryEnclosesCamera) {\n        this._boundaryEnclosesCamera = boundaryEnclosesCamera;\n        this._needsUpdate = true;\n    }\n    /**\n     * Adds the specified event listener.\n     * Applicable event types (which is `K`) are:\n     * | Event name          | Timing |\n     * | ------------------- | ------ |\n     * | `'controlstart'`    | When the user starts to control the camera via mouse / touches. ¹ |\n     * | `'control'`         | When the user controls the camera (dragging). |\n     * | `'controlend'`      | When the user ends to control the camera. ¹ |\n     * | `'transitionstart'` | When any kind of transition starts, either user control or using a method with `enableTransition = true` |\n     * | `'update'`          | When the camera position is updated. |\n     * | `'wake'`            | When the camera starts moving. |\n     * | `'rest'`            | When the camera movement is below `.restThreshold` ². |\n     * | `'sleep'`           | When the camera end moving. |\n     *\n     * 1. `mouseButtons.wheel` (Mouse wheel control) does not emit `'controlstart'` and `'controlend'`. `mouseButtons.wheel` uses scroll-event internally, and scroll-event happens intermittently. That means \"start\" and \"end\" cannot be detected.\n     * 2. Due to damping, `sleep` will usually fire a few seconds after the camera _appears_ to have stopped moving. If you want to do something (e.g. enable UI, perform another transition) at the point when the camera has stopped, you probably want the `rest` event. This can be fine tuned using the `.restThreshold` parameter. See the [Rest and Sleep Example](https://yomotsu.github.io/camera-controls/examples/rest-and-sleep.html).\n     *\n     * e.g.\n     * ```\n     * cameraControl.addEventListener( 'controlstart', myCallbackFunction );\n     * ```\n     * @param type event name\n     * @param listener handler function\n     * @category Methods\n     */\n    addEventListener(type, listener) {\n        super.addEventListener(type, listener);\n    }\n    /**\n     * Removes the specified event listener\n     * e.g.\n     * ```\n     * cameraControl.addEventListener( 'controlstart', myCallbackFunction );\n     * ```\n     * @param type event name\n     * @param listener handler function\n     * @category Methods\n     */\n    removeEventListener(type, listener) {\n        super.removeEventListener(type, listener);\n    }\n    /**\n     * Rotate azimuthal angle(horizontal) and polar angle(vertical).\n     * Every value is added to the current value.\n     * @param azimuthAngle Azimuth rotate angle. In radian.\n     * @param polarAngle Polar rotate angle. In radian.\n     * @param enableTransition Whether to move smoothly or immediately\n     * @category Methods\n     */\n    rotate(azimuthAngle, polarAngle, enableTransition = false) {\n        return this.rotateTo(this._sphericalEnd.theta + azimuthAngle, this._sphericalEnd.phi + polarAngle, enableTransition);\n    }\n    /**\n     * Rotate azimuthal angle(horizontal) to the given angle and keep the same polar angle(vertical) target.\n     *\n     * e.g.\n     * ```\n     * cameraControls.rotateAzimuthTo( 30 * THREE.MathUtils.DEG2RAD, true );\n     * ```\n     * @param azimuthAngle Azimuth rotate angle. In radian.\n     * @param enableTransition Whether to move smoothly or immediately\n     * @category Methods\n     */\n    rotateAzimuthTo(azimuthAngle, enableTransition = false) {\n        return this.rotateTo(azimuthAngle, this._sphericalEnd.phi, enableTransition);\n    }\n    /**\n     * Rotate polar angle(vertical) to the given angle and keep the same azimuthal angle(horizontal) target.\n     *\n     * e.g.\n     * ```\n     * cameraControls.rotatePolarTo( 30 * THREE.MathUtils.DEG2RAD, true );\n     * ```\n     * @param polarAngle Polar rotate angle. In radian.\n     * @param enableTransition Whether to move smoothly or immediately\n     * @category Methods\n     */\n    rotatePolarTo(polarAngle, enableTransition = false) {\n        return this.rotateTo(this._sphericalEnd.theta, polarAngle, enableTransition);\n    }\n    /**\n     * Rotate azimuthal angle(horizontal) and polar angle(vertical) to the given angle.\n     * Camera view will rotate over the orbit pivot absolutely:\n     *\n     * azimuthAngle\n     * ```\n     *       0º\n     *         \\\n     * 90º -----+----- -90º\n     *           \\\n     *           180º\n     * ```\n     * | direction | angle                  |\n     * | --------- | ---------------------- |\n     * | front     | 0º                     |\n     * | left      | 90º (`Math.PI / 2`)    |\n     * | right     | -90º (`- Math.PI / 2`) |\n     * | back      | 180º (`Math.PI`)       |\n     *\n     * polarAngle\n     * ```\n     *     180º\n     *      |\n     *      90º\n     *      |\n     *      0º\n     * ```\n     * | direction            | angle                  |\n     * | -------------------- | ---------------------- |\n     * | top/sky              | 180º (`Math.PI`)       |\n     * | horizontal from view | 90º (`Math.PI / 2`)    |\n     * | bottom/floor         | 0º                     |\n     *\n     * @param azimuthAngle Azimuth rotate angle to. In radian.\n     * @param polarAngle Polar rotate angle to. In radian.\n     * @param enableTransition  Whether to move smoothly or immediately\n     * @category Methods\n     */\n    rotateTo(azimuthAngle, polarAngle, enableTransition = false) {\n        this._isUserControllingRotate = false;\n        const theta = clamp(azimuthAngle, this.minAzimuthAngle, this.maxAzimuthAngle);\n        const phi = clamp(polarAngle, this.minPolarAngle, this.maxPolarAngle);\n        this._sphericalEnd.theta = theta;\n        this._sphericalEnd.phi = phi;\n        this._sphericalEnd.makeSafe();\n        this._needsUpdate = true;\n        if (!enableTransition) {\n            this._spherical.theta = this._sphericalEnd.theta;\n            this._spherical.phi = this._sphericalEnd.phi;\n        }\n        const resolveImmediately = !enableTransition ||\n            approxEquals(this._spherical.theta, this._sphericalEnd.theta, this.restThreshold) &&\n                approxEquals(this._spherical.phi, this._sphericalEnd.phi, this.restThreshold);\n        return this._createOnRestPromise(resolveImmediately);\n    }\n    /**\n     * Dolly in/out camera position.\n     * @param distance Distance of dollyIn. Negative number for dollyOut.\n     * @param enableTransition Whether to move smoothly or immediately.\n     * @category Methods\n     */\n    dolly(distance, enableTransition = false) {\n        return this.dollyTo(this._sphericalEnd.radius - distance, enableTransition);\n    }\n    /**\n     * Dolly in/out camera position to given distance.\n     * @param distance Distance of dolly.\n     * @param enableTransition Whether to move smoothly or immediately.\n     * @category Methods\n     */\n    dollyTo(distance, enableTransition = false) {\n        this._isUserControllingDolly = false;\n        const lastRadius = this._sphericalEnd.radius;\n        const newRadius = clamp(distance, this.minDistance, this.maxDistance);\n        const hasCollider = this.colliderMeshes.length >= 1;\n        if (hasCollider) {\n            const maxDistanceByCollisionTest = this._collisionTest();\n            const isCollided = approxEquals(maxDistanceByCollisionTest, this._spherical.radius);\n            const isDollyIn = lastRadius > newRadius;\n            if (!isDollyIn && isCollided)\n                return Promise.resolve();\n            this._sphericalEnd.radius = Math.min(newRadius, maxDistanceByCollisionTest);\n        }\n        else {\n            this._sphericalEnd.radius = newRadius;\n        }\n        this._needsUpdate = true;\n        if (!enableTransition) {\n            this._spherical.radius = this._sphericalEnd.radius;\n        }\n        const resolveImmediately = !enableTransition || approxEquals(this._spherical.radius, this._sphericalEnd.radius, this.restThreshold);\n        return this._createOnRestPromise(resolveImmediately);\n    }\n    /**\n     * Zoom in/out camera. The value is added to camera zoom.\n     * Limits set with `.minZoom` and `.maxZoom`\n     * @param zoomStep zoom scale\n     * @param enableTransition Whether to move smoothly or immediately\n     * @category Methods\n     */\n    zoom(zoomStep, enableTransition = false) {\n        return this.zoomTo(this._zoomEnd + zoomStep, enableTransition);\n    }\n    /**\n     * Zoom in/out camera to given scale. The value overwrites camera zoom.\n     * Limits set with .minZoom and .maxZoom\n     * @param zoom\n     * @param enableTransition\n     * @category Methods\n     */\n    zoomTo(zoom, enableTransition = false) {\n        this._isUserControllingZoom = false;\n        this._zoomEnd = clamp(zoom, this.minZoom, this.maxZoom);\n        this._needsUpdate = true;\n        if (!enableTransition) {\n            this._zoom = this._zoomEnd;\n        }\n        const resolveImmediately = !enableTransition || approxEquals(this._zoom, this._zoomEnd, this.restThreshold);\n        return this._createOnRestPromise(resolveImmediately);\n    }\n    /**\n     * @deprecated `pan()` has been renamed to `truck()`\n     * @category Methods\n     */\n    pan(x, y, enableTransition = false) {\n        console.warn('`pan` has been renamed to `truck`');\n        return this.truck(x, y, enableTransition);\n    }\n    /**\n     * Truck and pedestal camera using current azimuthal angle\n     * @param x Horizontal translate amount\n     * @param y Vertical translate amount\n     * @param enableTransition Whether to move smoothly or immediately\n     * @category Methods\n     */\n    truck(x, y, enableTransition = false) {\n        this._camera.updateMatrix();\n        _xColumn.setFromMatrixColumn(this._camera.matrix, 0);\n        _yColumn.setFromMatrixColumn(this._camera.matrix, 1);\n        _xColumn.multiplyScalar(x);\n        _yColumn.multiplyScalar(-y);\n        const offset = _v3A.copy(_xColumn).add(_yColumn);\n        const to = _v3B.copy(this._targetEnd).add(offset);\n        return this.moveTo(to.x, to.y, to.z, enableTransition);\n    }\n    /**\n     * Move forward / backward.\n     * @param distance Amount to move forward / backward. Negative value to move backward\n     * @param enableTransition Whether to move smoothly or immediately\n     * @category Methods\n     */\n    forward(distance, enableTransition = false) {\n        _v3A.setFromMatrixColumn(this._camera.matrix, 0);\n        _v3A.crossVectors(this._camera.up, _v3A);\n        _v3A.multiplyScalar(distance);\n        const to = _v3B.copy(this._targetEnd).add(_v3A);\n        return this.moveTo(to.x, to.y, to.z, enableTransition);\n    }\n    /**\n     * Move up / down.\n     * @param height Amount to move up / down. Negative value to move down\n     * @param enableTransition Whether to move smoothly or immediately\n     * @category Methods\n     */\n    elevate(height, enableTransition = false) {\n        _v3A.copy(this._camera.up).multiplyScalar(height);\n        return this.moveTo(this._targetEnd.x + _v3A.x, this._targetEnd.y + _v3A.y, this._targetEnd.z + _v3A.z, enableTransition);\n    }\n    /**\n     * Move target position to given point.\n     * @param x x coord to move center position\n     * @param y y coord to move center position\n     * @param z z coord to move center position\n     * @param enableTransition Whether to move smoothly or immediately\n     * @category Methods\n     */\n    moveTo(x, y, z, enableTransition = false) {\n        this._isUserControllingTruck = false;\n        const offset = _v3A.set(x, y, z).sub(this._targetEnd);\n        this._encloseToBoundary(this._targetEnd, offset, this.boundaryFriction);\n        this._needsUpdate = true;\n        if (!enableTransition) {\n            this._target.copy(this._targetEnd);\n        }\n        const resolveImmediately = !enableTransition ||\n            approxEquals(this._target.x, this._targetEnd.x, this.restThreshold) &&\n                approxEquals(this._target.y, this._targetEnd.y, this.restThreshold) &&\n                approxEquals(this._target.z, this._targetEnd.z, this.restThreshold);\n        return this._createOnRestPromise(resolveImmediately);\n    }\n    /**\n     * Look in the given point direction.\n     * @param x point x.\n     * @param y point y.\n     * @param z point z.\n     * @param enableTransition Whether to move smoothly or immediately.\n     * @returns Transition end promise\n     * @category Methods\n     */\n    lookInDirectionOf(x, y, z, enableTransition = false) {\n        const point = _v3A.set(x, y, z);\n        const direction = point.sub(this._targetEnd).normalize();\n        const position = direction.multiplyScalar(-this._sphericalEnd.radius);\n        return this.setPosition(position.x, position.y, position.z, enableTransition);\n    }\n    /**\n     * Fit the viewport to the box or the bounding box of the object, using the nearest axis. paddings are in unit.\n     * set `cover: true` to fill enter screen.\n     * e.g.\n     * ```\n     * cameraControls.fitToBox( myMesh );\n     * ```\n     * @param box3OrObject Axis aligned bounding box to fit the view.\n     * @param enableTransition Whether to move smoothly or immediately.\n     * @param options | `<object>` { cover: boolean, paddingTop: number, paddingLeft: number, paddingBottom: number, paddingRight: number }\n     * @returns Transition end promise\n     * @category Methods\n     */\n    fitToBox(box3OrObject, enableTransition, { cover = false, paddingLeft = 0, paddingRight = 0, paddingBottom = 0, paddingTop = 0 } = {}) {\n        const promises = [];\n        const aabb = box3OrObject.isBox3\n            ? _box3A.copy(box3OrObject)\n            : _box3A.setFromObject(box3OrObject);\n        if (aabb.isEmpty()) {\n            console.warn('camera-controls: fitTo() cannot be used with an empty box. Aborting');\n            Promise.resolve();\n        }\n        // round to closest axis ( forward | backward | right | left | top | bottom )\n        const theta = roundToStep(this._sphericalEnd.theta, PI_HALF);\n        const phi = roundToStep(this._sphericalEnd.phi, PI_HALF);\n        promises.push(this.rotateTo(theta, phi, enableTransition));\n        const normal = _v3A.setFromSpherical(this._sphericalEnd).normalize();\n        const rotation = _quaternionA.setFromUnitVectors(normal, _AXIS_Z);\n        const viewFromPolar = approxEquals(Math.abs(normal.y), 1);\n        if (viewFromPolar) {\n            rotation.multiply(_quaternionB.setFromAxisAngle(_AXIS_Y, theta));\n        }\n        rotation.multiply(this._yAxisUpSpaceInverse);\n        // make oriented bounding box\n        const bb = _box3B.makeEmpty();\n        // left bottom back corner\n        _v3B.copy(aabb.min).applyQuaternion(rotation);\n        bb.expandByPoint(_v3B);\n        // right bottom back corner\n        _v3B.copy(aabb.min).setX(aabb.max.x).applyQuaternion(rotation);\n        bb.expandByPoint(_v3B);\n        // left top back corner\n        _v3B.copy(aabb.min).setY(aabb.max.y).applyQuaternion(rotation);\n        bb.expandByPoint(_v3B);\n        // right top back corner\n        _v3B.copy(aabb.max).setZ(aabb.min.z).applyQuaternion(rotation);\n        bb.expandByPoint(_v3B);\n        // left bottom front corner\n        _v3B.copy(aabb.min).setZ(aabb.max.z).applyQuaternion(rotation);\n        bb.expandByPoint(_v3B);\n        // right bottom front corner\n        _v3B.copy(aabb.max).setY(aabb.min.y).applyQuaternion(rotation);\n        bb.expandByPoint(_v3B);\n        // left top front corner\n        _v3B.copy(aabb.max).setX(aabb.min.x).applyQuaternion(rotation);\n        bb.expandByPoint(_v3B);\n        // right top front corner\n        _v3B.copy(aabb.max).applyQuaternion(rotation);\n        bb.expandByPoint(_v3B);\n        // add padding\n        bb.min.x -= paddingLeft;\n        bb.min.y -= paddingBottom;\n        bb.max.x += paddingRight;\n        bb.max.y += paddingTop;\n        rotation.setFromUnitVectors(_AXIS_Z, normal);\n        if (viewFromPolar) {\n            rotation.premultiply(_quaternionB.invert());\n        }\n        rotation.premultiply(this._yAxisUpSpace);\n        const bbSize = bb.getSize(_v3A);\n        const center = bb.getCenter(_v3B).applyQuaternion(rotation);\n        if (isPerspectiveCamera(this._camera)) {\n            const distance = this.getDistanceToFitBox(bbSize.x, bbSize.y, bbSize.z, cover);\n            promises.push(this.moveTo(center.x, center.y, center.z, enableTransition));\n            promises.push(this.dollyTo(distance, enableTransition));\n            promises.push(this.setFocalOffset(0, 0, 0, enableTransition));\n        }\n        else if (isOrthographicCamera(this._camera)) {\n            const camera = this._camera;\n            const width = camera.right - camera.left;\n            const height = camera.top - camera.bottom;\n            const zoom = cover ? Math.max(width / bbSize.x, height / bbSize.y) : Math.min(width / bbSize.x, height / bbSize.y);\n            promises.push(this.moveTo(center.x, center.y, center.z, enableTransition));\n            promises.push(this.zoomTo(zoom, enableTransition));\n            promises.push(this.setFocalOffset(0, 0, 0, enableTransition));\n        }\n        return Promise.all(promises);\n    }\n    /**\n     * Fit the viewport to the sphere or the bounding sphere of the object.\n     * @param sphereOrMesh\n     * @param enableTransition\n     * @category Methods\n     */\n    fitToSphere(sphereOrMesh, enableTransition) {\n        const promises = [];\n        const isSphere = sphereOrMesh instanceof THREE.Sphere;\n        const boundingSphere = isSphere ?\n            _sphere.copy(sphereOrMesh) :\n            CameraControls.createBoundingSphere(sphereOrMesh, _sphere);\n        promises.push(this.moveTo(boundingSphere.center.x, boundingSphere.center.y, boundingSphere.center.z, enableTransition));\n        if (isPerspectiveCamera(this._camera)) {\n            const distanceToFit = this.getDistanceToFitSphere(boundingSphere.radius);\n            promises.push(this.dollyTo(distanceToFit, enableTransition));\n        }\n        else if (isOrthographicCamera(this._camera)) {\n            const width = this._camera.right - this._camera.left;\n            const height = this._camera.top - this._camera.bottom;\n            const diameter = 2 * boundingSphere.radius;\n            const zoom = Math.min(width / diameter, height / diameter);\n            promises.push(this.zoomTo(zoom, enableTransition));\n        }\n        promises.push(this.setFocalOffset(0, 0, 0, enableTransition));\n        return Promise.all(promises);\n    }\n    /**\n     * Look at the `target` from the `position`.\n     * @param positionX\n     * @param positionY\n     * @param positionZ\n     * @param targetX\n     * @param targetY\n     * @param targetZ\n     * @param enableTransition\n     * @category Methods\n     */\n    setLookAt(positionX, positionY, positionZ, targetX, targetY, targetZ, enableTransition = false) {\n        this._isUserControllingRotate = false;\n        this._isUserControllingDolly = false;\n        this._isUserControllingTruck = false;\n        const target = _v3B.set(targetX, targetY, targetZ);\n        const position = _v3A.set(positionX, positionY, positionZ);\n        this._targetEnd.copy(target);\n        this._sphericalEnd.setFromVector3(position.sub(target).applyQuaternion(this._yAxisUpSpace));\n        this.normalizeRotations();\n        this._needsUpdate = true;\n        if (!enableTransition) {\n            this._target.copy(this._targetEnd);\n            this._spherical.copy(this._sphericalEnd);\n        }\n        const resolveImmediately = !enableTransition ||\n            approxEquals(this._target.x, this._targetEnd.x, this.restThreshold) &&\n                approxEquals(this._target.y, this._targetEnd.y, this.restThreshold) &&\n                approxEquals(this._target.z, this._targetEnd.z, this.restThreshold) &&\n                approxEquals(this._spherical.theta, this._sphericalEnd.theta, this.restThreshold) &&\n                approxEquals(this._spherical.phi, this._sphericalEnd.phi, this.restThreshold) &&\n                approxEquals(this._spherical.radius, this._sphericalEnd.radius, this.restThreshold);\n        return this._createOnRestPromise(resolveImmediately);\n    }\n    /**\n     * Similar to setLookAt, but it interpolates between two states.\n     * @param positionAX\n     * @param positionAY\n     * @param positionAZ\n     * @param targetAX\n     * @param targetAY\n     * @param targetAZ\n     * @param positionBX\n     * @param positionBY\n     * @param positionBZ\n     * @param targetBX\n     * @param targetBY\n     * @param targetBZ\n     * @param t\n     * @param enableTransition\n     * @category Methods\n     */\n    lerpLookAt(positionAX, positionAY, positionAZ, targetAX, targetAY, targetAZ, positionBX, positionBY, positionBZ, targetBX, targetBY, targetBZ, t, enableTransition = false) {\n        this._isUserControllingRotate = false;\n        this._isUserControllingDolly = false;\n        this._isUserControllingTruck = false;\n        const targetA = _v3A.set(targetAX, targetAY, targetAZ);\n        const positionA = _v3B.set(positionAX, positionAY, positionAZ);\n        _sphericalA.setFromVector3(positionA.sub(targetA).applyQuaternion(this._yAxisUpSpace));\n        const targetB = _v3C.set(targetBX, targetBY, targetBZ);\n        const positionB = _v3B.set(positionBX, positionBY, positionBZ);\n        _sphericalB.setFromVector3(positionB.sub(targetB).applyQuaternion(this._yAxisUpSpace));\n        this._targetEnd.copy(targetA.lerp(targetB, t)); // tricky\n        const deltaTheta = _sphericalB.theta - _sphericalA.theta;\n        const deltaPhi = _sphericalB.phi - _sphericalA.phi;\n        const deltaRadius = _sphericalB.radius - _sphericalA.radius;\n        this._sphericalEnd.set(_sphericalA.radius + deltaRadius * t, _sphericalA.phi + deltaPhi * t, _sphericalA.theta + deltaTheta * t);\n        this.normalizeRotations();\n        this._needsUpdate = true;\n        if (!enableTransition) {\n            this._target.copy(this._targetEnd);\n            this._spherical.copy(this._sphericalEnd);\n        }\n        const resolveImmediately = !enableTransition ||\n            approxEquals(this._target.x, this._targetEnd.x, this.restThreshold) &&\n                approxEquals(this._target.y, this._targetEnd.y, this.restThreshold) &&\n                approxEquals(this._target.z, this._targetEnd.z, this.restThreshold) &&\n                approxEquals(this._spherical.theta, this._sphericalEnd.theta, this.restThreshold) &&\n                approxEquals(this._spherical.phi, this._sphericalEnd.phi, this.restThreshold) &&\n                approxEquals(this._spherical.radius, this._sphericalEnd.radius, this.restThreshold);\n        return this._createOnRestPromise(resolveImmediately);\n    }\n    /**\n     * Set angle and distance by given position.\n     * An alias of `setLookAt()`, without target change. Thus keep gazing at the current target\n     * @param positionX\n     * @param positionY\n     * @param positionZ\n     * @param enableTransition\n     * @category Methods\n     */\n    setPosition(positionX, positionY, positionZ, enableTransition = false) {\n        return this.setLookAt(positionX, positionY, positionZ, this._targetEnd.x, this._targetEnd.y, this._targetEnd.z, enableTransition);\n    }\n    /**\n     * Set the target position where gaze at.\n     * An alias of `setLookAt()`, without position change. Thus keep the same position.\n     * @param targetX\n     * @param targetY\n     * @param targetZ\n     * @param enableTransition\n     * @category Methods\n     */\n    setTarget(targetX, targetY, targetZ, enableTransition = false) {\n        const pos = this.getPosition(_v3A);\n        const promise = this.setLookAt(pos.x, pos.y, pos.z, targetX, targetY, targetZ, enableTransition);\n        // see https://github.com/yomotsu/camera-controls/issues/335\n        this._sphericalEnd.phi = clamp(this.polarAngle, this.minPolarAngle, this.maxPolarAngle);\n        return promise;\n    }\n    /**\n     * Set focal offset using the screen parallel coordinates. z doesn't affect in Orthographic as with Dolly.\n     * @param x\n     * @param y\n     * @param z\n     * @param enableTransition\n     * @category Methods\n     */\n    setFocalOffset(x, y, z, enableTransition = false) {\n        this._isUserControllingOffset = false;\n        this._focalOffsetEnd.set(x, y, z);\n        this._needsUpdate = true;\n        if (!enableTransition)\n            this._focalOffset.copy(this._focalOffsetEnd);\n        const resolveImmediately = !enableTransition ||\n            approxEquals(this._focalOffset.x, this._focalOffsetEnd.x, this.restThreshold) &&\n                approxEquals(this._focalOffset.y, this._focalOffsetEnd.y, this.restThreshold) &&\n                approxEquals(this._focalOffset.z, this._focalOffsetEnd.z, this.restThreshold);\n        return this._createOnRestPromise(resolveImmediately);\n    }\n    /**\n     * Set orbit point without moving the camera.\n     * SHOULD NOT RUN DURING ANIMATIONS. `setOrbitPoint()` will immediately fix the positions.\n     * @param targetX\n     * @param targetY\n     * @param targetZ\n     * @category Methods\n     */\n    setOrbitPoint(targetX, targetY, targetZ) {\n        this._camera.updateMatrixWorld();\n        _xColumn.setFromMatrixColumn(this._camera.matrixWorldInverse, 0);\n        _yColumn.setFromMatrixColumn(this._camera.matrixWorldInverse, 1);\n        _zColumn.setFromMatrixColumn(this._camera.matrixWorldInverse, 2);\n        const position = _v3A.set(targetX, targetY, targetZ);\n        const distance = position.distanceTo(this._camera.position);\n        const cameraToPoint = position.sub(this._camera.position);\n        _xColumn.multiplyScalar(cameraToPoint.x);\n        _yColumn.multiplyScalar(cameraToPoint.y);\n        _zColumn.multiplyScalar(cameraToPoint.z);\n        _v3A.copy(_xColumn).add(_yColumn).add(_zColumn);\n        _v3A.z = _v3A.z + distance;\n        this.dollyTo(distance, false);\n        this.setFocalOffset(-_v3A.x, _v3A.y, -_v3A.z, false);\n        this.moveTo(targetX, targetY, targetZ, false);\n    }\n    /**\n     * Set the boundary box that encloses the target of the camera. box3 is in THREE.Box3\n     * @param box3\n     * @category Methods\n     */\n    setBoundary(box3) {\n        if (!box3) {\n            this._boundary.min.set(-Infinity, -Infinity, -Infinity);\n            this._boundary.max.set(Infinity, Infinity, Infinity);\n            this._needsUpdate = true;\n            return;\n        }\n        this._boundary.copy(box3);\n        this._boundary.clampPoint(this._targetEnd, this._targetEnd);\n        this._needsUpdate = true;\n    }\n    /**\n     * Set (or unset) the current viewport.\n     * Set this when you want to use renderer viewport and .dollyToCursor feature at the same time.\n     * @param viewportOrX\n     * @param y\n     * @param width\n     * @param height\n     * @category Methods\n     */\n    setViewport(viewportOrX, y, width, height) {\n        if (viewportOrX === null) { // null\n            this._viewport = null;\n            return;\n        }\n        this._viewport = this._viewport || new THREE.Vector4();\n        if (typeof viewportOrX === 'number') { // number\n            this._viewport.set(viewportOrX, y, width, height);\n        }\n        else { // Vector4\n            this._viewport.copy(viewportOrX);\n        }\n    }\n    /**\n     * Calculate the distance to fit the box.\n     * @param width box width\n     * @param height box height\n     * @param depth box depth\n     * @returns distance\n     * @category Methods\n     */\n    getDistanceToFitBox(width, height, depth, cover = false) {\n        if (notSupportedInOrthographicCamera(this._camera, 'getDistanceToFitBox'))\n            return this._spherical.radius;\n        const boundingRectAspect = width / height;\n        const fov = this._camera.getEffectiveFOV() * DEG2RAD;\n        const aspect = this._camera.aspect;\n        const heightToFit = (cover ? boundingRectAspect > aspect : boundingRectAspect < aspect) ? height : width / aspect;\n        return heightToFit * 0.5 / Math.tan(fov * 0.5) + depth * 0.5;\n    }\n    /**\n     * Calculate the distance to fit the sphere.\n     * @param radius sphere radius\n     * @returns distance\n     * @category Methods\n     */\n    getDistanceToFitSphere(radius) {\n        if (notSupportedInOrthographicCamera(this._camera, 'getDistanceToFitSphere'))\n            return this._spherical.radius;\n        // https://stackoverflow.com/a/44849975\n        const vFOV = this._camera.getEffectiveFOV() * DEG2RAD;\n        const hFOV = Math.atan(Math.tan(vFOV * 0.5) * this._camera.aspect) * 2;\n        const fov = 1 < this._camera.aspect ? vFOV : hFOV;\n        return radius / (Math.sin(fov * 0.5));\n    }\n    /**\n     * Returns its current gazing target, which is the center position of the orbit.\n     * @param out current gazing target\n     * @category Methods\n     */\n    getTarget(out) {\n        const _out = !!out && out.isVector3 ? out : new THREE.Vector3();\n        return _out.copy(this._targetEnd);\n    }\n    /**\n     * Returns its current position.\n     * @param out current position\n     * @category Methods\n     */\n    getPosition(out) {\n        const _out = !!out && out.isVector3 ? out : new THREE.Vector3();\n        return _out.setFromSpherical(this._sphericalEnd).applyQuaternion(this._yAxisUpSpaceInverse).add(this._targetEnd);\n    }\n    /**\n     * Returns its current focal offset, which is how much the camera appears to be translated in screen parallel coordinates.\n     * @param out current focal offset\n     * @category Methods\n     */\n    getFocalOffset(out) {\n        const _out = !!out && out.isVector3 ? out : new THREE.Vector3();\n        return _out.copy(this._focalOffsetEnd);\n    }\n    /**\n     * Normalize camera azimuth angle rotation between 0 and 360 degrees.\n     * @category Methods\n     */\n    normalizeRotations() {\n        this._sphericalEnd.theta = this._sphericalEnd.theta % PI_2;\n        if (this._sphericalEnd.theta < 0)\n            this._sphericalEnd.theta += PI_2;\n        this._spherical.theta += PI_2 * Math.round((this._sphericalEnd.theta - this._spherical.theta) / PI_2);\n    }\n    /**\n     * Reset all rotation and position to defaults.\n     * @param enableTransition\n     * @category Methods\n     */\n    reset(enableTransition = false) {\n        if (!approxEquals(this._camera.up.x, this._cameraUp0.x) ||\n            !approxEquals(this._camera.up.y, this._cameraUp0.y) ||\n            !approxEquals(this._camera.up.z, this._cameraUp0.z)) {\n            this._camera.up.copy(this._cameraUp0);\n            const position = this.getPosition(_v3A);\n            this.updateCameraUp();\n            this.setPosition(position.x, position.y, position.z);\n        }\n        const promises = [\n            this.setLookAt(this._position0.x, this._position0.y, this._position0.z, this._target0.x, this._target0.y, this._target0.z, enableTransition),\n            this.setFocalOffset(this._focalOffset0.x, this._focalOffset0.y, this._focalOffset0.z, enableTransition),\n            this.zoomTo(this._zoom0, enableTransition),\n        ];\n        return Promise.all(promises);\n    }\n    /**\n     * Set current camera position as the default position.\n     * @category Methods\n     */\n    saveState() {\n        this._cameraUp0.copy(this._camera.up);\n        this.getTarget(this._target0);\n        this.getPosition(this._position0);\n        this._zoom0 = this._zoom;\n        this._focalOffset0.copy(this._focalOffset);\n    }\n    /**\n     * Sync camera-up direction.\n     * When camera-up vector is changed, `.updateCameraUp()` must be called.\n     * @category Methods\n     */\n    updateCameraUp() {\n        this._yAxisUpSpace.setFromUnitVectors(this._camera.up, _AXIS_Y);\n        this._yAxisUpSpaceInverse.copy(this._yAxisUpSpace).invert();\n    }\n    /**\n     * Apply current camera-up direction to the camera.\n     * The orbit system will be re-initialized with the current position.\n     * @category Methods\n     */\n    applyCameraUp() {\n        const cameraDirection = _v3A.subVectors(this._target, this._camera.position).normalize();\n        // So first find the vector off to the side, orthogonal to both this.object.up and\n        // the \"view\" vector.\n        const side = _v3B.crossVectors(cameraDirection, this._camera.up).normalize();\n        // Then find the vector orthogonal to both this \"side\" vector and the \"view\" vector.\n        // This vector will be the new \"up\" vector.\n        this._camera.up.crossVectors(side, cameraDirection).normalize();\n        this._camera.updateMatrixWorld();\n        const position = this.getPosition(_v3A);\n        this.updateCameraUp();\n        this.setPosition(position.x, position.y, position.z);\n    }\n    /**\n     * Update camera position and directions.\n     * This should be called in your tick loop every time, and returns true if re-rendering is needed.\n     * @param delta\n     * @returns updated\n     * @category Methods\n     */\n    update(delta) {\n        const deltaTheta = this._sphericalEnd.theta - this._spherical.theta;\n        const deltaPhi = this._sphericalEnd.phi - this._spherical.phi;\n        const deltaRadius = this._sphericalEnd.radius - this._spherical.radius;\n        const deltaTarget = _deltaTarget.subVectors(this._targetEnd, this._target);\n        const deltaOffset = _deltaOffset.subVectors(this._focalOffsetEnd, this._focalOffset);\n        const deltaZoom = this._zoomEnd - this._zoom;\n        // update theta\n        if (approxZero(deltaTheta)) {\n            this._thetaVelocity.value = 0;\n            this._spherical.theta = this._sphericalEnd.theta;\n        }\n        else {\n            const smoothTime = this._isUserControllingRotate ? this.draggingSmoothTime : this.smoothTime;\n            this._spherical.theta = smoothDamp(this._spherical.theta, this._sphericalEnd.theta, this._thetaVelocity, smoothTime, Infinity, delta);\n            this._needsUpdate = true;\n        }\n        // update phi\n        if (approxZero(deltaPhi)) {\n            this._phiVelocity.value = 0;\n            this._spherical.phi = this._sphericalEnd.phi;\n        }\n        else {\n            const smoothTime = this._isUserControllingRotate ? this.draggingSmoothTime : this.smoothTime;\n            this._spherical.phi = smoothDamp(this._spherical.phi, this._sphericalEnd.phi, this._phiVelocity, smoothTime, Infinity, delta);\n            this._needsUpdate = true;\n        }\n        // update distance\n        if (approxZero(deltaRadius)) {\n            this._radiusVelocity.value = 0;\n            this._spherical.radius = this._sphericalEnd.radius;\n        }\n        else {\n            const smoothTime = this._isUserControllingDolly ? this.draggingSmoothTime : this.smoothTime;\n            this._spherical.radius = smoothDamp(this._spherical.radius, this._sphericalEnd.radius, this._radiusVelocity, smoothTime, this.maxSpeed, delta);\n            this._needsUpdate = true;\n        }\n        // update target position\n        if (approxZero(deltaTarget.x) && approxZero(deltaTarget.y) && approxZero(deltaTarget.z)) {\n            this._targetVelocity.set(0, 0, 0);\n            this._target.copy(this._targetEnd);\n        }\n        else {\n            const smoothTime = this._isUserControllingTruck ? this.draggingSmoothTime : this.smoothTime;\n            smoothDampVec3(this._target, this._targetEnd, this._targetVelocity, smoothTime, this.maxSpeed, delta, this._target);\n            this._needsUpdate = true;\n        }\n        // update focalOffset\n        if (approxZero(deltaOffset.x) && approxZero(deltaOffset.y) && approxZero(deltaOffset.z)) {\n            this._focalOffsetVelocity.set(0, 0, 0);\n            this._focalOffset.copy(this._focalOffsetEnd);\n        }\n        else {\n            const smoothTime = this._isUserControllingOffset ? this.draggingSmoothTime : this.smoothTime;\n            smoothDampVec3(this._focalOffset, this._focalOffsetEnd, this._focalOffsetVelocity, smoothTime, this.maxSpeed, delta, this._focalOffset);\n            this._needsUpdate = true;\n        }\n        if (this._dollyControlAmount !== 0) {\n            if (isPerspectiveCamera(this._camera)) {\n                const camera = this._camera;\n                const cameraDirection = _v3A.setFromSpherical(this._spherical).applyQuaternion(this._yAxisUpSpaceInverse).normalize().negate();\n                const planeX = _v3B.copy(cameraDirection).cross(camera.up).normalize();\n                if (planeX.lengthSq() === 0)\n                    planeX.x = 1.0;\n                const planeY = _v3C.crossVectors(planeX, cameraDirection);\n                const worldToScreen = this._sphericalEnd.radius * Math.tan(camera.getEffectiveFOV() * DEG2RAD * 0.5);\n                const prevRadius = this._sphericalEnd.radius - this._dollyControlAmount;\n                const lerpRatio = (prevRadius - this._sphericalEnd.radius) / this._sphericalEnd.radius;\n                const cursor = _v3A.copy(this._targetEnd)\n                    .add(planeX.multiplyScalar(this._dollyControlCoord.x * worldToScreen * camera.aspect))\n                    .add(planeY.multiplyScalar(this._dollyControlCoord.y * worldToScreen));\n                this._targetEnd.lerp(cursor, lerpRatio);\n            }\n            else if (isOrthographicCamera(this._camera)) {\n                const camera = this._camera;\n                const worldCursorPosition = _v3A.set(this._dollyControlCoord.x, this._dollyControlCoord.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera); //.sub( _v3B.set( this._focalOffset.x, this._focalOffset.y, 0 ) );\n                const quaternion = _v3B.set(0, 0, -1).applyQuaternion(camera.quaternion);\n                const cursor = _v3C.copy(worldCursorPosition).add(quaternion.multiplyScalar(-worldCursorPosition.dot(camera.up)));\n                const prevZoom = this._zoom - this._dollyControlAmount;\n                const lerpRatio = -(prevZoom - this._zoomEnd) / this._zoom;\n                // find the \"distance\" (aka plane constant in three.js) of Plane\n                // from a given position (this._targetEnd) and normal vector (cameraDirection)\n                // https://www.maplesoft.com/support/help/maple/view.aspx?path=MathApps%2FEquationOfAPlaneNormal#bkmrk0\n                const cameraDirection = _v3A.setFromSpherical(this._spherical).applyQuaternion(this._yAxisUpSpaceInverse).normalize().negate();\n                const prevPlaneConstant = this._targetEnd.dot(cameraDirection);\n                this._targetEnd.lerp(cursor, lerpRatio);\n                const newPlaneConstant = this._targetEnd.dot(cameraDirection);\n                // Pull back the camera depth that has moved, to be the camera stationary as zoom\n                const pullBack = cameraDirection.multiplyScalar(newPlaneConstant - prevPlaneConstant);\n                this._targetEnd.sub(pullBack);\n            }\n            this._target.copy(this._targetEnd);\n            // target position may be moved beyond boundary.\n            this._boundary.clampPoint(this._targetEnd, this._targetEnd);\n            this._dollyControlAmount = 0;\n        }\n        // update zoom\n        if (approxZero(deltaZoom)) {\n            this._zoomVelocity.value = 0;\n            this._zoom = this._zoomEnd;\n        }\n        else {\n            const smoothTime = this._isUserControllingZoom ? this.draggingSmoothTime : this.smoothTime;\n            this._zoom = smoothDamp(this._zoom, this._zoomEnd, this._zoomVelocity, smoothTime, Infinity, delta);\n        }\n        if (this._camera.zoom !== this._zoom) {\n            this._camera.zoom = this._zoom;\n            this._camera.updateProjectionMatrix();\n            this._updateNearPlaneCorners();\n            this._needsUpdate = true;\n        }\n        // collision detection\n        const maxDistance = this._collisionTest();\n        this._spherical.radius = Math.min(this._spherical.radius, maxDistance);\n        // decompose spherical to the camera position\n        this._spherical.makeSafe();\n        this._camera.position.setFromSpherical(this._spherical).applyQuaternion(this._yAxisUpSpaceInverse).add(this._target);\n        this._camera.lookAt(this._target);\n        // set offset after the orbit movement\n        const affectOffset = !approxZero(this._focalOffset.x) ||\n            !approxZero(this._focalOffset.y) ||\n            !approxZero(this._focalOffset.z);\n        if (affectOffset) {\n            this._camera.updateMatrixWorld();\n            _xColumn.setFromMatrixColumn(this._camera.matrix, 0);\n            _yColumn.setFromMatrixColumn(this._camera.matrix, 1);\n            _zColumn.setFromMatrixColumn(this._camera.matrix, 2);\n            _xColumn.multiplyScalar(this._focalOffset.x);\n            _yColumn.multiplyScalar(-this._focalOffset.y);\n            _zColumn.multiplyScalar(this._focalOffset.z); // notice: z-offset will not affect in Orthographic.\n            _v3A.copy(_xColumn).add(_yColumn).add(_zColumn);\n            this._camera.position.add(_v3A);\n        }\n        if (this._boundaryEnclosesCamera) {\n            this._encloseToBoundary(this._camera.position.copy(this._target), _v3A.setFromSpherical(this._spherical).applyQuaternion(this._yAxisUpSpaceInverse), 1.0);\n        }\n        const updated = this._needsUpdate;\n        if (updated && !this._updatedLastTime) {\n            this._hasRested = false;\n            this.dispatchEvent({ type: 'wake' });\n            this.dispatchEvent({ type: 'update' });\n        }\n        else if (updated) {\n            this.dispatchEvent({ type: 'update' });\n            if (approxZero(deltaTheta, this.restThreshold) &&\n                approxZero(deltaPhi, this.restThreshold) &&\n                approxZero(deltaRadius, this.restThreshold) &&\n                approxZero(deltaTarget.x, this.restThreshold) &&\n                approxZero(deltaTarget.y, this.restThreshold) &&\n                approxZero(deltaTarget.z, this.restThreshold) &&\n                approxZero(deltaOffset.x, this.restThreshold) &&\n                approxZero(deltaOffset.y, this.restThreshold) &&\n                approxZero(deltaOffset.z, this.restThreshold) &&\n                approxZero(deltaZoom, this.restThreshold) &&\n                !this._hasRested) {\n                this._hasRested = true;\n                this.dispatchEvent({ type: 'rest' });\n            }\n        }\n        else if (!updated && this._updatedLastTime) {\n            this.dispatchEvent({ type: 'sleep' });\n        }\n        this._updatedLastTime = updated;\n        this._needsUpdate = false;\n        return updated;\n    }\n    /**\n     * Get all state in JSON string\n     * @category Methods\n     */\n    toJSON() {\n        return JSON.stringify({\n            enabled: this._enabled,\n            minDistance: this.minDistance,\n            maxDistance: infinityToMaxNumber(this.maxDistance),\n            minZoom: this.minZoom,\n            maxZoom: infinityToMaxNumber(this.maxZoom),\n            minPolarAngle: this.minPolarAngle,\n            maxPolarAngle: infinityToMaxNumber(this.maxPolarAngle),\n            minAzimuthAngle: infinityToMaxNumber(this.minAzimuthAngle),\n            maxAzimuthAngle: infinityToMaxNumber(this.maxAzimuthAngle),\n            smoothTime: this.smoothTime,\n            draggingSmoothTime: this.draggingSmoothTime,\n            dollySpeed: this.dollySpeed,\n            truckSpeed: this.truckSpeed,\n            dollyToCursor: this.dollyToCursor,\n            verticalDragToForward: this.verticalDragToForward,\n            target: this._targetEnd.toArray(),\n            position: _v3A.setFromSpherical(this._sphericalEnd).add(this._targetEnd).toArray(),\n            zoom: this._zoomEnd,\n            focalOffset: this._focalOffsetEnd.toArray(),\n            target0: this._target0.toArray(),\n            position0: this._position0.toArray(),\n            zoom0: this._zoom0,\n            focalOffset0: this._focalOffset0.toArray(),\n        });\n    }\n    /**\n     * Reproduce the control state with JSON. enableTransition is where anim or not in a boolean.\n     * @param json\n     * @param enableTransition\n     * @category Methods\n     */\n    fromJSON(json, enableTransition = false) {\n        const obj = JSON.parse(json);\n        this.enabled = obj.enabled;\n        this.minDistance = obj.minDistance;\n        this.maxDistance = maxNumberToInfinity(obj.maxDistance);\n        this.minZoom = obj.minZoom;\n        this.maxZoom = maxNumberToInfinity(obj.maxZoom);\n        this.minPolarAngle = obj.minPolarAngle;\n        this.maxPolarAngle = maxNumberToInfinity(obj.maxPolarAngle);\n        this.minAzimuthAngle = maxNumberToInfinity(obj.minAzimuthAngle);\n        this.maxAzimuthAngle = maxNumberToInfinity(obj.maxAzimuthAngle);\n        this.smoothTime = obj.smoothTime;\n        this.draggingSmoothTime = obj.draggingSmoothTime;\n        this.dollySpeed = obj.dollySpeed;\n        this.truckSpeed = obj.truckSpeed;\n        this.dollyToCursor = obj.dollyToCursor;\n        this.verticalDragToForward = obj.verticalDragToForward;\n        this._target0.fromArray(obj.target0);\n        this._position0.fromArray(obj.position0);\n        this._zoom0 = obj.zoom0;\n        this._focalOffset0.fromArray(obj.focalOffset0);\n        this.moveTo(obj.target[0], obj.target[1], obj.target[2], enableTransition);\n        _sphericalA.setFromVector3(_v3A.fromArray(obj.position).sub(this._targetEnd).applyQuaternion(this._yAxisUpSpace));\n        this.rotateTo(_sphericalA.theta, _sphericalA.phi, enableTransition);\n        this.dollyTo(_sphericalA.radius, enableTransition);\n        this.zoomTo(obj.zoom, enableTransition);\n        this.setFocalOffset(obj.focalOffset[0], obj.focalOffset[1], obj.focalOffset[2], enableTransition);\n        this._needsUpdate = true;\n    }\n    /**\n     * Attach all internal event handlers to enable drag control.\n     * @category Methods\n     */\n    connect(domElement) {\n        if (this._domElement) {\n            console.warn('camera-controls is already connected.');\n            return;\n        }\n        domElement.setAttribute('data-camera-controls-version', VERSION);\n        this._addAllEventListeners(domElement);\n    }\n    /**\n     * Detach all internal event handlers to disable drag control.\n     */\n    disconnect() {\n        this.cancel();\n        this._removeAllEventListeners();\n        if (this._domElement) {\n            this._domElement.removeAttribute('data-camera-controls-version');\n            this._domElement = undefined;\n        }\n    }\n    /**\n     * Dispose the cameraControls instance itself, remove all eventListeners.\n     * @category Methods\n     */\n    dispose() {\n        // remove all user event listeners\n        this.removeAllEventListeners();\n        // remove all internal event listeners\n        this.disconnect();\n    }\n    _findPointerById(pointerId) {\n        return this._activePointers.find((activePointer) => activePointer.pointerId === pointerId);\n    }\n    _findPointerByMouseButton(mouseButton) {\n        return this._activePointers.find((activePointer) => activePointer.mouseButton === mouseButton);\n    }\n    _disposePointer(pointer) {\n        this._activePointers.splice(this._activePointers.indexOf(pointer), 1);\n    }\n    _encloseToBoundary(position, offset, friction) {\n        const offsetLength2 = offset.lengthSq();\n        if (offsetLength2 === 0.0) { // sanity check\n            return position;\n        }\n        // See: https://twitter.com/FMS_Cat/status/1106508958640988161\n        const newTarget = _v3B.copy(offset).add(position); // target\n        const clampedTarget = this._boundary.clampPoint(newTarget, _v3C); // clamped target\n        const deltaClampedTarget = clampedTarget.sub(newTarget); // newTarget -> clampedTarget\n        const deltaClampedTargetLength2 = deltaClampedTarget.lengthSq(); // squared length of deltaClampedTarget\n        if (deltaClampedTargetLength2 === 0.0) { // when the position doesn't have to be clamped\n            return position.add(offset);\n        }\n        else if (deltaClampedTargetLength2 === offsetLength2) { // when the position is completely stuck\n            return position;\n        }\n        else if (friction === 0.0) {\n            return position.add(offset).add(deltaClampedTarget);\n        }\n        else {\n            const offsetFactor = 1.0 + friction * deltaClampedTargetLength2 / offset.dot(deltaClampedTarget);\n            return position\n                .add(_v3B.copy(offset).multiplyScalar(offsetFactor))\n                .add(deltaClampedTarget.multiplyScalar(1.0 - friction));\n        }\n    }\n    _updateNearPlaneCorners() {\n        if (isPerspectiveCamera(this._camera)) {\n            const camera = this._camera;\n            const near = camera.near;\n            const fov = camera.getEffectiveFOV() * DEG2RAD;\n            const heightHalf = Math.tan(fov * 0.5) * near; // near plain half height\n            const widthHalf = heightHalf * camera.aspect; // near plain half width\n            this._nearPlaneCorners[0].set(-widthHalf, -heightHalf, 0);\n            this._nearPlaneCorners[1].set(widthHalf, -heightHalf, 0);\n            this._nearPlaneCorners[2].set(widthHalf, heightHalf, 0);\n            this._nearPlaneCorners[3].set(-widthHalf, heightHalf, 0);\n        }\n        else if (isOrthographicCamera(this._camera)) {\n            const camera = this._camera;\n            const zoomInv = 1 / camera.zoom;\n            const left = camera.left * zoomInv;\n            const right = camera.right * zoomInv;\n            const top = camera.top * zoomInv;\n            const bottom = camera.bottom * zoomInv;\n            this._nearPlaneCorners[0].set(left, top, 0);\n            this._nearPlaneCorners[1].set(right, top, 0);\n            this._nearPlaneCorners[2].set(right, bottom, 0);\n            this._nearPlaneCorners[3].set(left, bottom, 0);\n        }\n    }\n    // lateUpdate\n    _collisionTest() {\n        let distance = Infinity;\n        const hasCollider = this.colliderMeshes.length >= 1;\n        if (!hasCollider)\n            return distance;\n        if (notSupportedInOrthographicCamera(this._camera, '_collisionTest'))\n            return distance;\n        // divide by distance to normalize, lighter than `Vector3.prototype.normalize()`\n        const direction = _v3A.setFromSpherical(this._spherical).divideScalar(this._spherical.radius);\n        _rotationMatrix.lookAt(_ORIGIN, direction, this._camera.up);\n        for (let i = 0; i < 4; i++) {\n            const nearPlaneCorner = _v3B.copy(this._nearPlaneCorners[i]);\n            nearPlaneCorner.applyMatrix4(_rotationMatrix);\n            const origin = _v3C.addVectors(this._target, nearPlaneCorner);\n            _raycaster.set(origin, direction);\n            _raycaster.far = this._spherical.radius + 1;\n            const intersects = _raycaster.intersectObjects(this.colliderMeshes);\n            if (intersects.length !== 0 && intersects[0].distance < distance) {\n                distance = intersects[0].distance;\n            }\n        }\n        return distance;\n    }\n    /**\n     * Get its client rect and package into given `DOMRect` .\n     */\n    _getClientRect(target) {\n        if (!this._domElement)\n            return;\n        const rect = this._domElement.getBoundingClientRect();\n        target.x = rect.left;\n        target.y = rect.top;\n        if (this._viewport) {\n            target.x += this._viewport.x;\n            target.y += rect.height - this._viewport.w - this._viewport.y;\n            target.width = this._viewport.z;\n            target.height = this._viewport.w;\n        }\n        else {\n            target.width = rect.width;\n            target.height = rect.height;\n        }\n        return target;\n    }\n    _createOnRestPromise(resolveImmediately) {\n        if (resolveImmediately)\n            return Promise.resolve();\n        this._hasRested = false;\n        this.dispatchEvent({ type: 'transitionstart' });\n        return new Promise((resolve) => {\n            const onResolve = () => {\n                this.removeEventListener('rest', onResolve);\n                resolve();\n            };\n            this.addEventListener('rest', onResolve);\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _addAllEventListeners(_domElement) { }\n    _removeAllEventListeners() { }\n    /**\n     * backward compatible\n     * @deprecated use smoothTime (in seconds) instead\n     * @category Properties\n     */\n    get dampingFactor() {\n        console.warn('.dampingFactor has been deprecated. use smoothTime (in seconds) instead.');\n        return 0;\n    }\n    /**\n     * backward compatible\n     * @deprecated use smoothTime (in seconds) instead\n     * @category Properties\n     */\n    set dampingFactor(_) {\n        console.warn('.dampingFactor has been deprecated. use smoothTime (in seconds) instead.');\n    }\n    /**\n     * backward compatible\n     * @deprecated use draggingSmoothTime (in seconds) instead\n     * @category Properties\n     */\n    get draggingDampingFactor() {\n        console.warn('.draggingDampingFactor has been deprecated. use draggingSmoothTime (in seconds) instead.');\n        return 0;\n    }\n    /**\n     * backward compatible\n     * @deprecated use draggingSmoothTime (in seconds) instead\n     * @category Properties\n     */\n    set draggingDampingFactor(_) {\n        console.warn('.draggingDampingFactor has been deprecated. use draggingSmoothTime (in seconds) instead.');\n    }\n    static createBoundingSphere(object3d, out = new THREE.Sphere()) {\n        const boundingSphere = out;\n        const center = boundingSphere.center;\n        _box3A.makeEmpty();\n        // find the center\n        object3d.traverseVisible((object) => {\n            if (!object.isMesh)\n                return;\n            _box3A.expandByObject(object);\n        });\n        _box3A.getCenter(center);\n        // find the radius\n        let maxRadiusSq = 0;\n        object3d.traverseVisible((object) => {\n            if (!object.isMesh)\n                return;\n            const mesh = object;\n            const geometry = mesh.geometry.clone();\n            geometry.applyMatrix4(mesh.matrixWorld);\n            const bufferGeometry = geometry;\n            const position = bufferGeometry.attributes.position;\n            for (let i = 0, l = position.count; i < l; i++) {\n                _v3A.fromBufferAttribute(position, i);\n                maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_v3A));\n            }\n        });\n        boundingSphere.radius = Math.sqrt(maxRadiusSq);\n        return boundingSphere;\n    }\n}\n\nexport { CameraControls as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}