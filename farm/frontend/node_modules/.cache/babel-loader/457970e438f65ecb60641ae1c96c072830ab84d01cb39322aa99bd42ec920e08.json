{"ast":null,"code":"import _regeneratorRuntime from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar _FORMAT_MAP, _TYPE_MAP, _ENCODING_MAP;\nimport { Loader, FileLoader, CompressedTexture, UnsignedByteType, LinearFilter, LinearMipmapLinearFilter, sRGBEncoding, LinearEncoding, RGBAFormat, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, FloatType, HalfFloatType, DataTexture, Data3DTexture, RGFormat, RedFormat } from 'three';\nimport { WorkerPool } from '../utils/WorkerPool.js';\nimport { KHR_DF_TRANSFER_SRGB, KHR_DF_FLAG_ALPHA_PREMULTIPLIED, read, VK_FORMAT_UNDEFINED, KHR_SUPERCOMPRESSION_NONE, KHR_SUPERCOMPRESSION_ZSTD, VK_FORMAT_R32G32B32A32_SFLOAT, VK_FORMAT_R16G16B16A16_SFLOAT, VK_FORMAT_R8G8B8A8_UNORM, VK_FORMAT_R8G8B8A8_SRGB, VK_FORMAT_R32G32_SFLOAT, VK_FORMAT_R16G16_SFLOAT, VK_FORMAT_R8G8_UNORM, VK_FORMAT_R8G8_SRGB, VK_FORMAT_R32_SFLOAT, VK_FORMAT_R16_SFLOAT, VK_FORMAT_R8_SRGB, VK_FORMAT_R8_UNORM } from 'ktx-parse';\nimport { ZSTDDecoder } from 'zstddec';\n\n/**\n * Loader for KTX 2.0 GPU Texture containers.\n *\n * KTX 2.0 is a container format for various GPU texture formats. The loader\n * supports Basis Universal GPU textures, which can be quickly transcoded to\n * a wide variety of GPU texture compression formats, as well as some\n * uncompressed DataTexture and Data3DTexture formats.\n *\n * References:\n * - KTX: http://github.khronos.org/KTX-Specification/\n * - DFD: https://www.khronos.org/registry/DataFormat/specs/1.3/dataformat.1.3.html#basicdescriptor\n */\n\nvar _taskCache = new WeakMap();\nvar _activeLoaders = 0;\nvar _zstd;\nvar KTX2Loader = /*#__PURE__*/function (_Loader) {\n  _inherits(KTX2Loader, _Loader);\n  var _super = _createSuper(KTX2Loader);\n  function KTX2Loader(manager) {\n    var _this;\n    _classCallCheck(this, KTX2Loader);\n    _this = _super.call(this, manager);\n    _this.transcoderPath = '';\n    _this.transcoderBinary = null;\n    _this.transcoderPending = null;\n    _this.workerPool = new WorkerPool();\n    _this.workerSourceURL = '';\n    _this.workerConfig = null;\n    if (typeof MSC_TRANSCODER !== 'undefined') {\n      console.warn('THREE.KTX2Loader: Please update to latest \"basis_transcoder\".' + ' \"msc_basis_transcoder\" is no longer supported in three.js r125+.');\n    }\n    return _this;\n  }\n  _createClass(KTX2Loader, [{\n    key: \"setTranscoderPath\",\n    value: function setTranscoderPath(path) {\n      this.transcoderPath = path;\n      return this;\n    }\n  }, {\n    key: \"setWorkerLimit\",\n    value: function setWorkerLimit(num) {\n      this.workerPool.setWorkerLimit(num);\n      return this;\n    }\n  }, {\n    key: \"detectSupport\",\n    value: function detectSupport(renderer) {\n      this.workerConfig = {\n        astcSupported: renderer.extensions.has('WEBGL_compressed_texture_astc'),\n        etc1Supported: renderer.extensions.has('WEBGL_compressed_texture_etc1'),\n        etc2Supported: renderer.extensions.has('WEBGL_compressed_texture_etc'),\n        dxtSupported: renderer.extensions.has('WEBGL_compressed_texture_s3tc'),\n        bptcSupported: renderer.extensions.has('EXT_texture_compression_bptc'),\n        pvrtcSupported: renderer.extensions.has('WEBGL_compressed_texture_pvrtc') || renderer.extensions.has('WEBKIT_WEBGL_compressed_texture_pvrtc')\n      };\n      if (renderer.capabilities.isWebGL2) {\n        // https://github.com/mrdoob/three.js/pull/22928\n        this.workerConfig.etc1Supported = false;\n      }\n      return this;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this2 = this;\n      if (!this.transcoderPending) {\n        // Load transcoder wrapper.\n        var jsLoader = new FileLoader(this.manager);\n        jsLoader.setPath(this.transcoderPath);\n        jsLoader.setWithCredentials(this.withCredentials);\n        var jsContent = jsLoader.loadAsync('basis_transcoder.js'); // Load transcoder WASM binary.\n\n        var binaryLoader = new FileLoader(this.manager);\n        binaryLoader.setPath(this.transcoderPath);\n        binaryLoader.setResponseType('arraybuffer');\n        binaryLoader.setWithCredentials(this.withCredentials);\n        var binaryContent = binaryLoader.loadAsync('basis_transcoder.wasm');\n        this.transcoderPending = Promise.all([jsContent, binaryContent]).then(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n            jsContent = _ref2[0],\n            binaryContent = _ref2[1];\n          var fn = KTX2Loader.BasisWorker.toString();\n          var body = ['/* constants */', 'let _EngineFormat = ' + JSON.stringify(KTX2Loader.EngineFormat), 'let _TranscoderFormat = ' + JSON.stringify(KTX2Loader.TranscoderFormat), 'let _BasisFormat = ' + JSON.stringify(KTX2Loader.BasisFormat), '/* basis_transcoder.js */', jsContent, '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\n');\n          _this2.workerSourceURL = URL.createObjectURL(new Blob([body]));\n          _this2.transcoderBinary = binaryContent;\n          _this2.workerPool.setWorkerCreator(function () {\n            var worker = new Worker(_this2.workerSourceURL);\n            var transcoderBinary = _this2.transcoderBinary.slice(0);\n            worker.postMessage({\n              type: 'init',\n              config: _this2.workerConfig,\n              transcoderBinary: transcoderBinary\n            }, [transcoderBinary]);\n            return worker;\n          });\n        });\n        if (_activeLoaders > 0) {\n          // Each instance loads a transcoder and allocates workers, increasing network and memory cost.\n          console.warn('THREE.KTX2Loader: Multiple active KTX2 loaders may cause performance issues.' + ' Use a single KTX2Loader instance, or call .dispose() on old instances.');\n        }\n        _activeLoaders++;\n      }\n      return this.transcoderPending;\n    }\n  }, {\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var _this3 = this;\n      if (this.workerConfig === null) {\n        throw new Error('THREE.KTX2Loader: Missing initialization with `.detectSupport( renderer )`.');\n      }\n      var loader = new FileLoader(this.manager);\n      loader.setResponseType('arraybuffer');\n      loader.setWithCredentials(this.withCredentials);\n      loader.load(url, function (buffer) {\n        // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n        // again from this thread.\n        if (_taskCache.has(buffer)) {\n          var cachedTask = _taskCache.get(buffer);\n          return cachedTask.promise.then(onLoad).catch(onError);\n        }\n        _this3._createTexture(buffer).then(function (texture) {\n          return onLoad ? onLoad(texture) : null;\n        }).catch(onError);\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"_createTextureFrom\",\n    value: function _createTextureFrom(transcodeResult) {\n      var mipmaps = transcodeResult.mipmaps,\n        width = transcodeResult.width,\n        height = transcodeResult.height,\n        format = transcodeResult.format,\n        type = transcodeResult.type,\n        error = transcodeResult.error,\n        dfdTransferFn = transcodeResult.dfdTransferFn,\n        dfdFlags = transcodeResult.dfdFlags;\n      if (type === 'error') return Promise.reject(error);\n      var texture = new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n      texture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n      texture.magFilter = LinearFilter;\n      texture.generateMipmaps = false;\n      texture.needsUpdate = true;\n      texture.encoding = dfdTransferFn === KHR_DF_TRANSFER_SRGB ? sRGBEncoding : LinearEncoding;\n      texture.premultiplyAlpha = !!(dfdFlags & KHR_DF_FLAG_ALPHA_PREMULTIPLIED);\n      return texture;\n    }\n    /**\n     * @param {ArrayBuffer} buffer\n     * @param {object?} config\n     * @return {Promise<CompressedTexture|DataTexture|Data3DTexture>}\n     */\n  }, {\n    key: \"_createTexture\",\n    value: function _createTexture(buffer) {\n      var _this4 = this;\n      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var container = read(new Uint8Array(buffer));\n      if (container.vkFormat !== VK_FORMAT_UNDEFINED) {\n        return createDataTexture(container);\n      } //\n\n      var taskConfig = config;\n      var texturePending = this.init().then(function () {\n        return _this4.workerPool.postMessage({\n          type: 'transcode',\n          buffer: buffer,\n          taskConfig: taskConfig\n        }, [buffer]);\n      }).then(function (e) {\n        return _this4._createTextureFrom(e.data);\n      }); // Cache the task result.\n\n      _taskCache.set(buffer, {\n        promise: texturePending\n      });\n      return texturePending;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.workerPool.dispose();\n      if (this.workerSourceURL) URL.revokeObjectURL(this.workerSourceURL);\n      _activeLoaders--;\n      return this;\n    }\n  }]);\n  return KTX2Loader;\n}(Loader);\n/* CONSTANTS */\nKTX2Loader.BasisFormat = {\n  ETC1S: 0,\n  UASTC_4x4: 1\n};\nKTX2Loader.TranscoderFormat = {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n};\nKTX2Loader.EngineFormat = {\n  RGBAFormat: RGBAFormat,\n  RGBA_ASTC_4x4_Format: RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format: RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format: RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format: RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format: RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format: RGB_ETC1_Format,\n  RGB_ETC2_Format: RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format: RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format: RGB_S3TC_DXT1_Format\n};\n/* WEB WORKER */\n\nKTX2Loader.BasisWorker = function () {\n  var config;\n  var transcoderPending;\n  var BasisModule;\n  var EngineFormat = _EngineFormat; // eslint-disable-line no-undef\n\n  var TranscoderFormat = _TranscoderFormat; // eslint-disable-line no-undef\n\n  var BasisFormat = _BasisFormat; // eslint-disable-line no-undef\n\n  self.addEventListener('message', function (e) {\n    var message = e.data;\n    switch (message.type) {\n      case 'init':\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n      case 'transcode':\n        transcoderPending.then(function () {\n          try {\n            var _transcode = transcode(message.buffer),\n              width = _transcode.width,\n              height = _transcode.height,\n              hasAlpha = _transcode.hasAlpha,\n              mipmaps = _transcode.mipmaps,\n              format = _transcode.format,\n              dfdTransferFn = _transcode.dfdTransferFn,\n              dfdFlags = _transcode.dfdFlags;\n            var buffers = [];\n            for (var i = 0; i < mipmaps.length; ++i) {\n              buffers.push(mipmaps[i].data.buffer);\n            }\n            self.postMessage({\n              type: 'transcode',\n              id: message.id,\n              width: width,\n              height: height,\n              hasAlpha: hasAlpha,\n              mipmaps: mipmaps,\n              format: format,\n              dfdTransferFn: dfdTransferFn,\n              dfdFlags: dfdFlags\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: 'error',\n              id: message.id,\n              error: error.message\n            });\n          }\n        });\n        break;\n    }\n  });\n  function init(wasmBinary) {\n    transcoderPending = new Promise(function (resolve) {\n      BasisModule = {\n        wasmBinary: wasmBinary,\n        onRuntimeInitialized: resolve\n      };\n      BASIS(BasisModule); // eslint-disable-line no-undef\n    }).then(function () {\n      BasisModule.initializeBasis();\n      if (BasisModule.KTX2File === undefined) {\n        console.warn('THREE.KTX2Loader: Please update Basis Universal transcoder.');\n      }\n    });\n  }\n  function transcode(buffer) {\n    var ktx2File = new BasisModule.KTX2File(new Uint8Array(buffer));\n    function cleanup() {\n      ktx2File.close();\n      ktx2File.delete();\n    }\n    if (!ktx2File.isValid()) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader:\tInvalid or unsupported .ktx2 file');\n    }\n    var basisFormat = ktx2File.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    var width = ktx2File.getWidth();\n    var height = ktx2File.getHeight();\n    var levels = ktx2File.getLevels();\n    var hasAlpha = ktx2File.getHasAlpha();\n    var dfdTransferFn = ktx2File.getDFDTransferFunc();\n    var dfdFlags = ktx2File.getDFDFlags();\n    var _getTranscoderFormat = getTranscoderFormat(basisFormat, width, height, hasAlpha),\n      transcoderFormat = _getTranscoderFormat.transcoderFormat,\n      engineFormat = _getTranscoderFormat.engineFormat;\n    if (!width || !height || !levels) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader:\tInvalid texture');\n    }\n    if (!ktx2File.startTranscoding()) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader: .startTranscoding failed');\n    }\n    var mipmaps = [];\n    for (var mip = 0; mip < levels; mip++) {\n      var levelInfo = ktx2File.getImageLevelInfo(mip, 0, 0);\n      var mipWidth = levelInfo.origWidth;\n      var mipHeight = levelInfo.origHeight;\n      var dst = new Uint8Array(ktx2File.getImageTranscodedSizeInBytes(mip, 0, 0, transcoderFormat));\n      var status = ktx2File.transcodeImage(dst, mip, 0, 0, transcoderFormat, 0, -1, -1);\n      if (!status) {\n        cleanup();\n        throw new Error('THREE.KTX2Loader: .transcodeImage failed.');\n      }\n      mipmaps.push({\n        data: dst,\n        width: mipWidth,\n        height: mipHeight\n      });\n    }\n    cleanup();\n    return {\n      width: width,\n      height: height,\n      hasAlpha: hasAlpha,\n      mipmaps: mipmaps,\n      format: engineFormat,\n      dfdTransferFn: dfdTransferFn,\n      dfdFlags: dfdFlags\n    };\n  } //\n  // Optimal choice of a transcoder target format depends on the Basis format (ETC1S or UASTC),\n  // device capabilities, and texture dimensions. The list below ranks the formats separately\n  // for ETC1S and UASTC.\n  //\n  // In some cases, transcoding UASTC to RGBA32 might be preferred for higher quality (at\n  // significant memory cost) compared to ETC1/2, BC1/3, and PVRTC. The transcoder currently\n  // chooses RGBA32 only as a last resort and does not expose that option to the caller.\n\n  var FORMAT_OPTIONS = [{\n    if: 'astcSupported',\n    basisFormat: [BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n    engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n    priorityETC1S: Infinity,\n    priorityUASTC: 1,\n    needsPowerOfTwo: false\n  }, {\n    if: 'bptcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n    engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n    priorityETC1S: 3,\n    priorityUASTC: 2,\n    needsPowerOfTwo: false\n  }, {\n    if: 'dxtSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n    engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n    priorityETC1S: 4,\n    priorityUASTC: 5,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc2Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n    engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n    priorityETC1S: 1,\n    priorityUASTC: 3,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc1Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1],\n    engineFormat: [EngineFormat.RGB_ETC1_Format],\n    priorityETC1S: 2,\n    priorityUASTC: 4,\n    needsPowerOfTwo: false\n  }, {\n    if: 'pvrtcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n    engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n    priorityETC1S: 5,\n    priorityUASTC: 6,\n    needsPowerOfTwo: true\n  }];\n  var ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  var UASTC_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    var transcoderFormat;\n    var engineFormat;\n    var options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n    for (var i = 0; i < options.length; i++) {\n      var opt = options[i];\n      if (!config[opt.if]) continue;\n      if (!opt.basisFormat.includes(basisFormat)) continue;\n      if (hasAlpha && opt.transcoderFormat.length < 2) continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return {\n        transcoderFormat: transcoderFormat,\n        engineFormat: engineFormat\n      };\n    }\n    console.warn('THREE.KTX2Loader: No suitable compressed texture format found. Decoding to RGBA32.');\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return {\n      transcoderFormat: transcoderFormat,\n      engineFormat: engineFormat\n    };\n  }\n  function isPowerOfTwo(value) {\n    if (value <= 2) return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n}; //\n// DataTexture and Data3DTexture parsing.\n\nvar FORMAT_MAP = (_FORMAT_MAP = {}, _defineProperty(_FORMAT_MAP, VK_FORMAT_R32G32B32A32_SFLOAT, RGBAFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R16G16B16A16_SFLOAT, RGBAFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R8G8B8A8_UNORM, RGBAFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R8G8B8A8_SRGB, RGBAFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R32G32_SFLOAT, RGFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R16G16_SFLOAT, RGFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R8G8_UNORM, RGFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R8G8_SRGB, RGFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R32_SFLOAT, RedFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R16_SFLOAT, RedFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R8_SRGB, RedFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R8_UNORM, RedFormat), _FORMAT_MAP);\nvar TYPE_MAP = (_TYPE_MAP = {}, _defineProperty(_TYPE_MAP, VK_FORMAT_R32G32B32A32_SFLOAT, FloatType), _defineProperty(_TYPE_MAP, VK_FORMAT_R16G16B16A16_SFLOAT, HalfFloatType), _defineProperty(_TYPE_MAP, VK_FORMAT_R8G8B8A8_UNORM, UnsignedByteType), _defineProperty(_TYPE_MAP, VK_FORMAT_R8G8B8A8_SRGB, UnsignedByteType), _defineProperty(_TYPE_MAP, VK_FORMAT_R32G32_SFLOAT, FloatType), _defineProperty(_TYPE_MAP, VK_FORMAT_R16G16_SFLOAT, HalfFloatType), _defineProperty(_TYPE_MAP, VK_FORMAT_R8G8_UNORM, UnsignedByteType), _defineProperty(_TYPE_MAP, VK_FORMAT_R8G8_SRGB, UnsignedByteType), _defineProperty(_TYPE_MAP, VK_FORMAT_R32_SFLOAT, FloatType), _defineProperty(_TYPE_MAP, VK_FORMAT_R16_SFLOAT, HalfFloatType), _defineProperty(_TYPE_MAP, VK_FORMAT_R8_SRGB, UnsignedByteType), _defineProperty(_TYPE_MAP, VK_FORMAT_R8_UNORM, UnsignedByteType), _TYPE_MAP);\nvar ENCODING_MAP = (_ENCODING_MAP = {}, _defineProperty(_ENCODING_MAP, VK_FORMAT_R8G8B8A8_SRGB, sRGBEncoding), _defineProperty(_ENCODING_MAP, VK_FORMAT_R8G8_SRGB, sRGBEncoding), _defineProperty(_ENCODING_MAP, VK_FORMAT_R8_SRGB, sRGBEncoding), _ENCODING_MAP);\nfunction createDataTexture(_x) {\n  return _createDataTexture.apply(this, arguments);\n}\nfunction _createDataTexture() {\n  _createDataTexture = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(container) {\n    var vkFormat, pixelWidth, pixelHeight, pixelDepth, level, levelData, view, texture;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          vkFormat = container.vkFormat, pixelWidth = container.pixelWidth, pixelHeight = container.pixelHeight, pixelDepth = container.pixelDepth;\n          if (!(FORMAT_MAP[vkFormat] === undefined)) {\n            _context2.next = 3;\n            break;\n          }\n          throw new Error('THREE.KTX2Loader: Unsupported vkFormat.');\n        case 3:\n          //\n          level = container.levels[0];\n          if (!(container.supercompressionScheme === KHR_SUPERCOMPRESSION_NONE)) {\n            _context2.next = 8;\n            break;\n          }\n          levelData = level.levelData;\n          _context2.next = 16;\n          break;\n        case 8:\n          if (!(container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD)) {\n            _context2.next = 15;\n            break;\n          }\n          if (!_zstd) {\n            _zstd = new Promise( /*#__PURE__*/function () {\n              var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(resolve) {\n                var zstd;\n                return _regeneratorRuntime().wrap(function _callee$(_context) {\n                  while (1) switch (_context.prev = _context.next) {\n                    case 0:\n                      zstd = new ZSTDDecoder();\n                      _context.next = 3;\n                      return zstd.init();\n                    case 3:\n                      resolve(zstd);\n                    case 4:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }, _callee);\n              }));\n              return function (_x2) {\n                return _ref3.apply(this, arguments);\n              };\n            }());\n          }\n          _context2.next = 12;\n          return _zstd;\n        case 12:\n          levelData = _context2.sent.decode(level.levelData, level.uncompressedByteLength);\n          _context2.next = 16;\n          break;\n        case 15:\n          throw new Error('THREE.KTX2Loader: Unsupported supercompressionScheme.');\n        case 16:\n          if (TYPE_MAP[vkFormat] === FloatType) {\n            view = new Float32Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Float32Array.BYTES_PER_ELEMENT);\n          } else if (TYPE_MAP[vkFormat] === HalfFloatType) {\n            view = new Uint16Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Uint16Array.BYTES_PER_ELEMENT);\n          } else {\n            view = levelData;\n          } //\n          texture = pixelDepth === 0 ? new DataTexture(view, pixelWidth, pixelHeight) : new Data3DTexture(view, pixelWidth, pixelHeight, pixelDepth);\n          texture.type = TYPE_MAP[vkFormat];\n          texture.format = FORMAT_MAP[vkFormat];\n          texture.encoding = ENCODING_MAP[vkFormat] || LinearEncoding;\n          texture.needsUpdate = true; //\n          return _context2.abrupt(\"return\", Promise.resolve(texture));\n        case 23:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _createDataTexture.apply(this, arguments);\n}\nexport { KTX2Loader };","map":{"version":3,"names":["Loader","FileLoader","CompressedTexture","UnsignedByteType","LinearFilter","LinearMipmapLinearFilter","sRGBEncoding","LinearEncoding","RGBAFormat","RGBA_ASTC_4x4_Format","RGBA_BPTC_Format","RGBA_ETC2_EAC_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_S3TC_DXT5_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGB_PVRTC_4BPPV1_Format","RGB_S3TC_DXT1_Format","FloatType","HalfFloatType","DataTexture","Data3DTexture","RGFormat","RedFormat","WorkerPool","KHR_DF_TRANSFER_SRGB","KHR_DF_FLAG_ALPHA_PREMULTIPLIED","read","VK_FORMAT_UNDEFINED","KHR_SUPERCOMPRESSION_NONE","KHR_SUPERCOMPRESSION_ZSTD","VK_FORMAT_R32G32B32A32_SFLOAT","VK_FORMAT_R16G16B16A16_SFLOAT","VK_FORMAT_R8G8B8A8_UNORM","VK_FORMAT_R8G8B8A8_SRGB","VK_FORMAT_R32G32_SFLOAT","VK_FORMAT_R16G16_SFLOAT","VK_FORMAT_R8G8_UNORM","VK_FORMAT_R8G8_SRGB","VK_FORMAT_R32_SFLOAT","VK_FORMAT_R16_SFLOAT","VK_FORMAT_R8_SRGB","VK_FORMAT_R8_UNORM","ZSTDDecoder","_taskCache","WeakMap","_activeLoaders","_zstd","KTX2Loader","_Loader","_inherits","_super","_createSuper","manager","_this","_classCallCheck","call","transcoderPath","transcoderBinary","transcoderPending","workerPool","workerSourceURL","workerConfig","MSC_TRANSCODER","console","warn","_createClass","key","value","setTranscoderPath","path","setWorkerLimit","num","detectSupport","renderer","astcSupported","extensions","has","etc1Supported","etc2Supported","dxtSupported","bptcSupported","pvrtcSupported","capabilities","isWebGL2","init","_this2","jsLoader","setPath","setWithCredentials","withCredentials","jsContent","loadAsync","binaryLoader","setResponseType","binaryContent","Promise","all","then","_ref","_ref2","_slicedToArray","fn","BasisWorker","toString","body","JSON","stringify","EngineFormat","TranscoderFormat","BasisFormat","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","setWorkerCreator","worker","Worker","slice","postMessage","type","config","load","url","onLoad","onProgress","onError","_this3","Error","loader","buffer","cachedTask","get","promise","catch","_createTexture","texture","_createTextureFrom","transcodeResult","mipmaps","width","height","format","error","dfdTransferFn","dfdFlags","reject","minFilter","length","magFilter","generateMipmaps","needsUpdate","encoding","premultiplyAlpha","_this4","arguments","undefined","container","Uint8Array","vkFormat","createDataTexture","taskConfig","texturePending","e","data","set","dispose","revokeObjectURL","ETC1S","UASTC_4x4","ETC1","ETC2","BC1","BC3","BC4","BC5","BC7_M6_OPAQUE_ONLY","BC7_M5","PVRTC1_4_RGB","PVRTC1_4_RGBA","ASTC_4x4","ATC_RGB","ATC_RGBA_INTERPOLATED_ALPHA","RGBA32","RGB565","BGR565","RGBA4444","BasisModule","_EngineFormat","_TranscoderFormat","_BasisFormat","self","addEventListener","message","_transcode","transcode","hasAlpha","buffers","i","push","id","wasmBinary","resolve","onRuntimeInitialized","BASIS","initializeBasis","KTX2File","ktx2File","cleanup","close","delete","isValid","basisFormat","isUASTC","getWidth","getHeight","levels","getLevels","getHasAlpha","getDFDTransferFunc","getDFDFlags","_getTranscoderFormat","getTranscoderFormat","transcoderFormat","engineFormat","startTranscoding","mip","levelInfo","getImageLevelInfo","mipWidth","origWidth","mipHeight","origHeight","dst","getImageTranscodedSizeInBytes","status","transcodeImage","FORMAT_OPTIONS","if","priorityETC1S","Infinity","priorityUASTC","needsPowerOfTwo","ETC1S_OPTIONS","sort","a","b","UASTC_OPTIONS","options","opt","includes","isPowerOfTwo","FORMAT_MAP","_FORMAT_MAP","_defineProperty","TYPE_MAP","_TYPE_MAP","ENCODING_MAP","_ENCODING_MAP","_x","_createDataTexture","apply","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","pixelWidth","pixelHeight","pixelDepth","level","levelData","view","wrap","_callee2$","_context2","prev","next","supercompressionScheme","_ref3","_callee","zstd","_callee$","_context","stop","_x2","sent","decode","uncompressedByteLength","Float32Array","byteOffset","byteLength","BYTES_PER_ELEMENT","Uint16Array","abrupt"],"sources":["/home/samuel/experiment/3d/farm/frontend/node_modules/three-stdlib/loaders/KTX2Loader.js"],"sourcesContent":["import { Loader, FileLoader, CompressedTexture, UnsignedByteType, LinearFilter, LinearMipmapLinearFilter, sRGBEncoding, LinearEncoding, RGBAFormat, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, FloatType, HalfFloatType, DataTexture, Data3DTexture, RGFormat, RedFormat } from 'three';\nimport { WorkerPool } from '../utils/WorkerPool.js';\nimport { KHR_DF_TRANSFER_SRGB, KHR_DF_FLAG_ALPHA_PREMULTIPLIED, read, VK_FORMAT_UNDEFINED, KHR_SUPERCOMPRESSION_NONE, KHR_SUPERCOMPRESSION_ZSTD, VK_FORMAT_R32G32B32A32_SFLOAT, VK_FORMAT_R16G16B16A16_SFLOAT, VK_FORMAT_R8G8B8A8_UNORM, VK_FORMAT_R8G8B8A8_SRGB, VK_FORMAT_R32G32_SFLOAT, VK_FORMAT_R16G16_SFLOAT, VK_FORMAT_R8G8_UNORM, VK_FORMAT_R8G8_SRGB, VK_FORMAT_R32_SFLOAT, VK_FORMAT_R16_SFLOAT, VK_FORMAT_R8_SRGB, VK_FORMAT_R8_UNORM } from 'ktx-parse';\nimport { ZSTDDecoder } from 'zstddec';\n\n/**\n * Loader for KTX 2.0 GPU Texture containers.\n *\n * KTX 2.0 is a container format for various GPU texture formats. The loader\n * supports Basis Universal GPU textures, which can be quickly transcoded to\n * a wide variety of GPU texture compression formats, as well as some\n * uncompressed DataTexture and Data3DTexture formats.\n *\n * References:\n * - KTX: http://github.khronos.org/KTX-Specification/\n * - DFD: https://www.khronos.org/registry/DataFormat/specs/1.3/dataformat.1.3.html#basicdescriptor\n */\n\nconst _taskCache = new WeakMap();\n\nlet _activeLoaders = 0;\n\nlet _zstd;\n\nclass KTX2Loader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.transcoderPath = '';\n    this.transcoderBinary = null;\n    this.transcoderPending = null;\n    this.workerPool = new WorkerPool();\n    this.workerSourceURL = '';\n    this.workerConfig = null;\n\n    if (typeof MSC_TRANSCODER !== 'undefined') {\n      console.warn('THREE.KTX2Loader: Please update to latest \"basis_transcoder\".' + ' \"msc_basis_transcoder\" is no longer supported in three.js r125+.');\n    }\n  }\n\n  setTranscoderPath(path) {\n    this.transcoderPath = path;\n    return this;\n  }\n\n  setWorkerLimit(num) {\n    this.workerPool.setWorkerLimit(num);\n    return this;\n  }\n\n  detectSupport(renderer) {\n    this.workerConfig = {\n      astcSupported: renderer.extensions.has('WEBGL_compressed_texture_astc'),\n      etc1Supported: renderer.extensions.has('WEBGL_compressed_texture_etc1'),\n      etc2Supported: renderer.extensions.has('WEBGL_compressed_texture_etc'),\n      dxtSupported: renderer.extensions.has('WEBGL_compressed_texture_s3tc'),\n      bptcSupported: renderer.extensions.has('EXT_texture_compression_bptc'),\n      pvrtcSupported: renderer.extensions.has('WEBGL_compressed_texture_pvrtc') || renderer.extensions.has('WEBKIT_WEBGL_compressed_texture_pvrtc')\n    };\n\n    if (renderer.capabilities.isWebGL2) {\n      // https://github.com/mrdoob/three.js/pull/22928\n      this.workerConfig.etc1Supported = false;\n    }\n\n    return this;\n  }\n\n  init() {\n    if (!this.transcoderPending) {\n      // Load transcoder wrapper.\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.transcoderPath);\n      jsLoader.setWithCredentials(this.withCredentials);\n      const jsContent = jsLoader.loadAsync('basis_transcoder.js'); // Load transcoder WASM binary.\n\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.transcoderPath);\n      binaryLoader.setResponseType('arraybuffer');\n      binaryLoader.setWithCredentials(this.withCredentials);\n      const binaryContent = binaryLoader.loadAsync('basis_transcoder.wasm');\n      this.transcoderPending = Promise.all([jsContent, binaryContent]).then(([jsContent, binaryContent]) => {\n        const fn = KTX2Loader.BasisWorker.toString();\n        const body = ['/* constants */', 'let _EngineFormat = ' + JSON.stringify(KTX2Loader.EngineFormat), 'let _TranscoderFormat = ' + JSON.stringify(KTX2Loader.TranscoderFormat), 'let _BasisFormat = ' + JSON.stringify(KTX2Loader.BasisFormat), '/* basis_transcoder.js */', jsContent, '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\n');\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n        this.transcoderBinary = binaryContent;\n        this.workerPool.setWorkerCreator(() => {\n          const worker = new Worker(this.workerSourceURL);\n          const transcoderBinary = this.transcoderBinary.slice(0);\n          worker.postMessage({\n            type: 'init',\n            config: this.workerConfig,\n            transcoderBinary\n          }, [transcoderBinary]);\n          return worker;\n        });\n      });\n\n      if (_activeLoaders > 0) {\n        // Each instance loads a transcoder and allocates workers, increasing network and memory cost.\n        console.warn('THREE.KTX2Loader: Multiple active KTX2 loaders may cause performance issues.' + ' Use a single KTX2Loader instance, or call .dispose() on old instances.');\n      }\n\n      _activeLoaders++;\n    }\n\n    return this.transcoderPending;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    if (this.workerConfig === null) {\n      throw new Error('THREE.KTX2Loader: Missing initialization with `.detectSupport( renderer )`.');\n    }\n\n    const loader = new FileLoader(this.manager);\n    loader.setResponseType('arraybuffer');\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, buffer => {\n      // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n      // again from this thread.\n      if (_taskCache.has(buffer)) {\n        const cachedTask = _taskCache.get(buffer);\n\n        return cachedTask.promise.then(onLoad).catch(onError);\n      }\n\n      this._createTexture(buffer).then(texture => onLoad ? onLoad(texture) : null).catch(onError);\n    }, onProgress, onError);\n  }\n\n  _createTextureFrom(transcodeResult) {\n    const {\n      mipmaps,\n      width,\n      height,\n      format,\n      type,\n      error,\n      dfdTransferFn,\n      dfdFlags\n    } = transcodeResult;\n    if (type === 'error') return Promise.reject(error);\n    const texture = new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n    texture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n    texture.magFilter = LinearFilter;\n    texture.generateMipmaps = false;\n    texture.needsUpdate = true;\n    texture.encoding = dfdTransferFn === KHR_DF_TRANSFER_SRGB ? sRGBEncoding : LinearEncoding;\n    texture.premultiplyAlpha = !!(dfdFlags & KHR_DF_FLAG_ALPHA_PREMULTIPLIED);\n    return texture;\n  }\n  /**\n   * @param {ArrayBuffer} buffer\n   * @param {object?} config\n   * @return {Promise<CompressedTexture|DataTexture|Data3DTexture>}\n   */\n\n\n  _createTexture(buffer, config = {}) {\n    const container = read(new Uint8Array(buffer));\n\n    if (container.vkFormat !== VK_FORMAT_UNDEFINED) {\n      return createDataTexture(container);\n    } //\n\n\n    const taskConfig = config;\n    const texturePending = this.init().then(() => {\n      return this.workerPool.postMessage({\n        type: 'transcode',\n        buffer,\n        taskConfig: taskConfig\n      }, [buffer]);\n    }).then(e => this._createTextureFrom(e.data)); // Cache the task result.\n\n    _taskCache.set(buffer, {\n      promise: texturePending\n    });\n\n    return texturePending;\n  }\n\n  dispose() {\n    this.workerPool.dispose();\n    if (this.workerSourceURL) URL.revokeObjectURL(this.workerSourceURL);\n    _activeLoaders--;\n    return this;\n  }\n\n}\n/* CONSTANTS */\n\n\nKTX2Loader.BasisFormat = {\n  ETC1S: 0,\n  UASTC_4x4: 1\n};\nKTX2Loader.TranscoderFormat = {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n};\nKTX2Loader.EngineFormat = {\n  RGBAFormat: RGBAFormat,\n  RGBA_ASTC_4x4_Format: RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format: RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format: RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format: RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format: RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format: RGB_ETC1_Format,\n  RGB_ETC2_Format: RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format: RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format: RGB_S3TC_DXT1_Format\n};\n/* WEB WORKER */\n\nKTX2Loader.BasisWorker = function () {\n  let config;\n  let transcoderPending;\n  let BasisModule;\n  const EngineFormat = _EngineFormat; // eslint-disable-line no-undef\n\n  const TranscoderFormat = _TranscoderFormat; // eslint-disable-line no-undef\n\n  const BasisFormat = _BasisFormat; // eslint-disable-line no-undef\n\n  self.addEventListener('message', function (e) {\n    const message = e.data;\n\n    switch (message.type) {\n      case 'init':\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n\n      case 'transcode':\n        transcoderPending.then(() => {\n          try {\n            const {\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format,\n              dfdTransferFn,\n              dfdFlags\n            } = transcode(message.buffer);\n            const buffers = [];\n\n            for (let i = 0; i < mipmaps.length; ++i) {\n              buffers.push(mipmaps[i].data.buffer);\n            }\n\n            self.postMessage({\n              type: 'transcode',\n              id: message.id,\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format,\n              dfdTransferFn,\n              dfdFlags\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: 'error',\n              id: message.id,\n              error: error.message\n            });\n          }\n        });\n        break;\n    }\n  });\n\n  function init(wasmBinary) {\n    transcoderPending = new Promise(resolve => {\n      BasisModule = {\n        wasmBinary,\n        onRuntimeInitialized: resolve\n      };\n      BASIS(BasisModule); // eslint-disable-line no-undef\n    }).then(() => {\n      BasisModule.initializeBasis();\n\n      if (BasisModule.KTX2File === undefined) {\n        console.warn('THREE.KTX2Loader: Please update Basis Universal transcoder.');\n      }\n    });\n  }\n\n  function transcode(buffer) {\n    const ktx2File = new BasisModule.KTX2File(new Uint8Array(buffer));\n\n    function cleanup() {\n      ktx2File.close();\n      ktx2File.delete();\n    }\n\n    if (!ktx2File.isValid()) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader:\tInvalid or unsupported .ktx2 file');\n    }\n\n    const basisFormat = ktx2File.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    const width = ktx2File.getWidth();\n    const height = ktx2File.getHeight();\n    const levels = ktx2File.getLevels();\n    const hasAlpha = ktx2File.getHasAlpha();\n    const dfdTransferFn = ktx2File.getDFDTransferFunc();\n    const dfdFlags = ktx2File.getDFDFlags();\n    const {\n      transcoderFormat,\n      engineFormat\n    } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n\n    if (!width || !height || !levels) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader:\tInvalid texture');\n    }\n\n    if (!ktx2File.startTranscoding()) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader: .startTranscoding failed');\n    }\n\n    const mipmaps = [];\n\n    for (let mip = 0; mip < levels; mip++) {\n      const levelInfo = ktx2File.getImageLevelInfo(mip, 0, 0);\n      const mipWidth = levelInfo.origWidth;\n      const mipHeight = levelInfo.origHeight;\n      const dst = new Uint8Array(ktx2File.getImageTranscodedSizeInBytes(mip, 0, 0, transcoderFormat));\n      const status = ktx2File.transcodeImage(dst, mip, 0, 0, transcoderFormat, 0, -1, -1);\n\n      if (!status) {\n        cleanup();\n        throw new Error('THREE.KTX2Loader: .transcodeImage failed.');\n      }\n\n      mipmaps.push({\n        data: dst,\n        width: mipWidth,\n        height: mipHeight\n      });\n    }\n\n    cleanup();\n    return {\n      width,\n      height,\n      hasAlpha,\n      mipmaps,\n      format: engineFormat,\n      dfdTransferFn,\n      dfdFlags\n    };\n  } //\n  // Optimal choice of a transcoder target format depends on the Basis format (ETC1S or UASTC),\n  // device capabilities, and texture dimensions. The list below ranks the formats separately\n  // for ETC1S and UASTC.\n  //\n  // In some cases, transcoding UASTC to RGBA32 might be preferred for higher quality (at\n  // significant memory cost) compared to ETC1/2, BC1/3, and PVRTC. The transcoder currently\n  // chooses RGBA32 only as a last resort and does not expose that option to the caller.\n\n\n  const FORMAT_OPTIONS = [{\n    if: 'astcSupported',\n    basisFormat: [BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n    engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n    priorityETC1S: Infinity,\n    priorityUASTC: 1,\n    needsPowerOfTwo: false\n  }, {\n    if: 'bptcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n    engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n    priorityETC1S: 3,\n    priorityUASTC: 2,\n    needsPowerOfTwo: false\n  }, {\n    if: 'dxtSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n    engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n    priorityETC1S: 4,\n    priorityUASTC: 5,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc2Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n    engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n    priorityETC1S: 1,\n    priorityUASTC: 3,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc1Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1],\n    engineFormat: [EngineFormat.RGB_ETC1_Format],\n    priorityETC1S: 2,\n    priorityUASTC: 4,\n    needsPowerOfTwo: false\n  }, {\n    if: 'pvrtcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n    engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n    priorityETC1S: 5,\n    priorityUASTC: 6,\n    needsPowerOfTwo: true\n  }];\n  const ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  const UASTC_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    let transcoderFormat;\n    let engineFormat;\n    const options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n\n    for (let i = 0; i < options.length; i++) {\n      const opt = options[i];\n      if (!config[opt.if]) continue;\n      if (!opt.basisFormat.includes(basisFormat)) continue;\n      if (hasAlpha && opt.transcoderFormat.length < 2) continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return {\n        transcoderFormat,\n        engineFormat\n      };\n    }\n\n    console.warn('THREE.KTX2Loader: No suitable compressed texture format found. Decoding to RGBA32.');\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return {\n      transcoderFormat,\n      engineFormat\n    };\n  }\n\n  function isPowerOfTwo(value) {\n    if (value <= 2) return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n}; //\n// DataTexture and Data3DTexture parsing.\n\n\nconst FORMAT_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_UNORM]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_SRGB]: RGBAFormat,\n  [VK_FORMAT_R32G32_SFLOAT]: RGFormat,\n  [VK_FORMAT_R16G16_SFLOAT]: RGFormat,\n  [VK_FORMAT_R8G8_UNORM]: RGFormat,\n  [VK_FORMAT_R8G8_SRGB]: RGFormat,\n  [VK_FORMAT_R32_SFLOAT]: RedFormat,\n  [VK_FORMAT_R16_SFLOAT]: RedFormat,\n  [VK_FORMAT_R8_SRGB]: RedFormat,\n  [VK_FORMAT_R8_UNORM]: RedFormat\n};\nconst TYPE_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8B8A8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8B8A8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R32G32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R8_UNORM]: UnsignedByteType\n};\nconst ENCODING_MAP = {\n  [VK_FORMAT_R8G8B8A8_SRGB]: sRGBEncoding,\n  [VK_FORMAT_R8G8_SRGB]: sRGBEncoding,\n  [VK_FORMAT_R8_SRGB]: sRGBEncoding\n};\n\nasync function createDataTexture(container) {\n  const {\n    vkFormat,\n    pixelWidth,\n    pixelHeight,\n    pixelDepth\n  } = container;\n\n  if (FORMAT_MAP[vkFormat] === undefined) {\n    throw new Error('THREE.KTX2Loader: Unsupported vkFormat.');\n  } //\n\n\n  const level = container.levels[0];\n  let levelData;\n  let view;\n\n  if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_NONE) {\n    levelData = level.levelData;\n  } else if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD) {\n    if (!_zstd) {\n      _zstd = new Promise(async resolve => {\n        const zstd = new ZSTDDecoder();\n        await zstd.init();\n        resolve(zstd);\n      });\n    }\n\n    levelData = (await _zstd).decode(level.levelData, level.uncompressedByteLength);\n  } else {\n    throw new Error('THREE.KTX2Loader: Unsupported supercompressionScheme.');\n  }\n\n  if (TYPE_MAP[vkFormat] === FloatType) {\n    view = new Float32Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Float32Array.BYTES_PER_ELEMENT);\n  } else if (TYPE_MAP[vkFormat] === HalfFloatType) {\n    view = new Uint16Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Uint16Array.BYTES_PER_ELEMENT);\n  } else {\n    view = levelData;\n  } //\n\n\n  const texture = pixelDepth === 0 ? new DataTexture(view, pixelWidth, pixelHeight) : new Data3DTexture(view, pixelWidth, pixelHeight, pixelDepth);\n  texture.type = TYPE_MAP[vkFormat];\n  texture.format = FORMAT_MAP[vkFormat];\n  texture.encoding = ENCODING_MAP[vkFormat] || LinearEncoding;\n  texture.needsUpdate = true; //\n\n  return Promise.resolve(texture);\n}\n\nexport { KTX2Loader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}