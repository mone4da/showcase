{"ast":null,"code":"import{jsx as _jsx}from\"react/jsx-runtime\";var Wall=function Wall(props){var x=props.x,h=props.h,z=props.z;console.log(x,z,h);return/*#__PURE__*/_jsx(\"rectangle\",{x:x,y:z,width:1,height:1,fill:h?'green':'black'});/*return\t<mesh position={[x,0,z]}>\n\t\t<boxGeometry args={ [1,.4*h,1] } />\n\t\t<meshBasicMaterial color={h ? 'green' : 'black'} />\n\t</mesh>*/};var Maze=function Maze(props){var data=props.data,style=props.style;var width=data[0].length;var height=data.length;var scale={x:style.width/width,y:style.height/height};console.log(width,height,scale);return/*#__PURE__*/_jsx(\"svg\",{style:style,children:/*#__PURE__*/_jsx(\"rectangle\",{width:width,height:height,fill:\"orange\"})});};export default Maze;// viewBox={`0 0 ${width} ${height}`}\n//transform={`scale(${scale.x},${scale.y})`}\n/*\n\t\t\t<g >\n\t\t\t\t<rectangle width={width} height={height} fill='orange' />\n\t\t\t\t{data.map( (row, r) => row.map((w,c) => <Wall x={c} h={w} z={r} /> ))}\n\t\t\t</g>\n\n*/","map":{"version":3,"names":["Wall","props","x","h","z","console","log","_jsx","y","width","height","fill","Maze","data","style","length","scale","children"],"sources":["/home/samuel/experiment/3d/farm/frontend/src/view/maze.js"],"sourcesContent":["\nconst Wall = props => {\n\t\tlet {x,h,z} = props\n\n\tconsole.log(x,z,h)\n\treturn <rectangle\n\t\t\tx={x}\n\t\t\ty={z}\n\t\t\twidth={1}\n\t\t\theight={1}\n\t\t\tfill={h ? 'green' : 'black'} \n\t\t/>\n\n/*return\t<mesh position={[x,0,z]}>\n\t\t<boxGeometry args={ [1,.4*h,1] } />\n\t\t<meshBasicMaterial color={h ? 'green' : 'black'} />\n\t</mesh>*/\n\n}\n\nlet Maze = props => {\n\tlet {data, style} = props\n\n\tlet width = data[0].length\n\tlet height = data.length\n\n\tlet scale = {\n\t\tx : style.width/width,\n\t\ty: style.height/height\n\t}\n\n\tconsole.log(width, height, scale)\n\n\treturn <svg style={style} >\n\t\t\t<rectangle width={width} height={height} fill='orange' />\n\t\t</svg>\n}\n\nexport default Maze\n\n// viewBox={`0 0 ${width} ${height}`}\n//transform={`scale(${scale.x},${scale.y})`}\n/*\n\t\t\t<g >\n\t\t\t\t<rectangle width={width} height={height} fill='orange' />\n\t\t\t\t{data.map( (row, r) => row.map((w,c) => <Wall x={c} h={w} z={r} /> ))}\n\t\t\t</g>\n\n*/\n"],"mappings":"2CACA,GAAM,CAAAA,IAAI,CAAG,QAAP,CAAAA,IAAIA,CAAGC,KAAK,CAAI,CACpB,GAAK,CAAAC,CAAC,CAAQD,KAAK,CAAdC,CAAC,CAACC,CAAC,CAAMF,KAAK,CAAZE,CAAC,CAACC,CAAC,CAAIH,KAAK,CAAVG,CAAC,CAEXC,OAAO,CAACC,GAAG,CAACJ,CAAC,CAACE,CAAC,CAACD,CAAC,CAAC,CAClB,mBAAOI,IAAA,cACLL,CAAC,CAAEA,CAAE,CACLM,CAAC,CAAEJ,CAAE,CACLK,KAAK,CAAE,CAAE,CACTC,MAAM,CAAE,CAAE,CACVC,IAAI,CAAER,CAAC,CAAG,OAAO,CAAG,OAAQ,EAC3B,CAEJ;AACA;AACA;AACA,UAEA,CAAC,CAED,GAAI,CAAAS,IAAI,CAAG,QAAP,CAAAA,IAAIA,CAAGX,KAAK,CAAI,CACnB,GAAK,CAAAY,IAAI,CAAWZ,KAAK,CAApBY,IAAI,CAAEC,KAAK,CAAIb,KAAK,CAAda,KAAK,CAEhB,GAAI,CAAAL,KAAK,CAAGI,IAAI,CAAC,CAAC,CAAC,CAACE,MAAM,CAC1B,GAAI,CAAAL,MAAM,CAAGG,IAAI,CAACE,MAAM,CAExB,GAAI,CAAAC,KAAK,CAAG,CACXd,CAAC,CAAGY,KAAK,CAACL,KAAK,CAACA,KAAK,CACrBD,CAAC,CAAEM,KAAK,CAACJ,MAAM,CAACA,MACjB,CAAC,CAEDL,OAAO,CAACC,GAAG,CAACG,KAAK,CAAEC,MAAM,CAAEM,KAAK,CAAC,CAEjC,mBAAOT,IAAA,QAAKO,KAAK,CAAEA,KAAM,CAAAG,QAAA,cACvBV,IAAA,cAAWE,KAAK,CAAEA,KAAM,CAACC,MAAM,CAAEA,MAAO,CAACC,IAAI,CAAC,QAAQ,EAAG,EACpD,CACR,CAAC,CAED,cAAe,CAAAC,IAAI,CAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}