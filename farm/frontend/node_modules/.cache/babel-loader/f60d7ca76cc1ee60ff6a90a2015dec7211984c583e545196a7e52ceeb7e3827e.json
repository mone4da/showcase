{"ast":null,"code":"import _classCallCheck from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Box3, Vector3, InstancedBufferGeometry, Float32BufferAttribute, InstancedInterleavedBuffer, InterleavedBufferAttribute, WireframeGeometry, Sphere } from 'three';\nvar _box = new Box3();\nvar _vector = new Vector3();\nvar LineSegmentsGeometry = /*#__PURE__*/function (_InstancedBufferGeome) {\n  _inherits(LineSegmentsGeometry, _InstancedBufferGeome);\n  var _super = _createSuper(LineSegmentsGeometry);\n  function LineSegmentsGeometry() {\n    var _this;\n    _classCallCheck(this, LineSegmentsGeometry);\n    _this = _super.call(this);\n    _this.isLineSegmentsGeometry = true;\n    _this.type = 'LineSegmentsGeometry';\n    var positions = [-1, 2, 0, 1, 2, 0, -1, 1, 0, 1, 1, 0, -1, 0, 0, 1, 0, 0, -1, -1, 0, 1, -1, 0];\n    var uvs = [-1, 2, 1, 2, -1, 1, 1, 1, -1, -1, 1, -1, -1, -2, 1, -2];\n    var index = [0, 2, 1, 2, 3, 1, 2, 4, 3, 4, 5, 3, 4, 6, 5, 6, 7, 5];\n    _this.setIndex(index);\n    _this.setAttribute('position', new Float32BufferAttribute(positions, 3));\n    _this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n    return _this;\n  }\n  _createClass(LineSegmentsGeometry, [{\n    key: \"applyMatrix4\",\n    value: function applyMatrix4(matrix) {\n      var start = this.attributes.instanceStart;\n      var end = this.attributes.instanceEnd;\n      if (start !== undefined) {\n        start.applyMatrix4(matrix);\n        end.applyMatrix4(matrix);\n        start.needsUpdate = true;\n      }\n      if (this.boundingBox !== null) {\n        this.computeBoundingBox();\n      }\n      if (this.boundingSphere !== null) {\n        this.computeBoundingSphere();\n      }\n      return this;\n    }\n  }, {\n    key: \"setPositions\",\n    value: function setPositions(array) {\n      var lineSegments;\n      if (array instanceof Float32Array) {\n        lineSegments = array;\n      } else if (Array.isArray(array)) {\n        lineSegments = new Float32Array(array);\n      }\n      var instanceBuffer = new InstancedInterleavedBuffer(lineSegments, 6, 1); // xyz, xyz\n\n      this.setAttribute('instanceStart', new InterleavedBufferAttribute(instanceBuffer, 3, 0)); // xyz\n\n      this.setAttribute('instanceEnd', new InterleavedBufferAttribute(instanceBuffer, 3, 3)); // xyz\n      //\n\n      this.computeBoundingBox();\n      this.computeBoundingSphere();\n      return this;\n    }\n  }, {\n    key: \"setColors\",\n    value: function setColors(array) {\n      var colors;\n      if (array instanceof Float32Array) {\n        colors = array;\n      } else if (Array.isArray(array)) {\n        colors = new Float32Array(array);\n      }\n      var instanceColorBuffer = new InstancedInterleavedBuffer(colors, 6, 1); // rgb, rgb\n\n      this.setAttribute('instanceColorStart', new InterleavedBufferAttribute(instanceColorBuffer, 3, 0)); // rgb\n\n      this.setAttribute('instanceColorEnd', new InterleavedBufferAttribute(instanceColorBuffer, 3, 3)); // rgb\n\n      return this;\n    }\n  }, {\n    key: \"fromWireframeGeometry\",\n    value: function fromWireframeGeometry(geometry) {\n      this.setPositions(geometry.attributes.position.array);\n      return this;\n    }\n  }, {\n    key: \"fromEdgesGeometry\",\n    value: function fromEdgesGeometry(geometry) {\n      this.setPositions(geometry.attributes.position.array);\n      return this;\n    }\n  }, {\n    key: \"fromMesh\",\n    value: function fromMesh(mesh) {\n      this.fromWireframeGeometry(new WireframeGeometry(mesh.geometry)); // set colors, maybe\n\n      return this;\n    }\n  }, {\n    key: \"fromLineSegments\",\n    value: function fromLineSegments(lineSegments) {\n      var geometry = lineSegments.geometry;\n      this.setPositions(geometry.attributes.position.array); // assumes non-indexed\n      // set colors, maybe\n\n      return this;\n    }\n  }, {\n    key: \"computeBoundingBox\",\n    value: function computeBoundingBox() {\n      if (this.boundingBox === null) {\n        this.boundingBox = new Box3();\n      }\n      var start = this.attributes.instanceStart;\n      var end = this.attributes.instanceEnd;\n      if (start !== undefined && end !== undefined) {\n        this.boundingBox.setFromBufferAttribute(start);\n        _box.setFromBufferAttribute(end);\n        this.boundingBox.union(_box);\n      }\n    }\n  }, {\n    key: \"computeBoundingSphere\",\n    value: function computeBoundingSphere() {\n      if (this.boundingSphere === null) {\n        this.boundingSphere = new Sphere();\n      }\n      if (this.boundingBox === null) {\n        this.computeBoundingBox();\n      }\n      var start = this.attributes.instanceStart;\n      var end = this.attributes.instanceEnd;\n      if (start !== undefined && end !== undefined) {\n        var center = this.boundingSphere.center;\n        this.boundingBox.getCenter(center);\n        var maxRadiusSq = 0;\n        for (var i = 0, il = start.count; i < il; i++) {\n          _vector.fromBufferAttribute(start, i);\n          maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));\n          _vector.fromBufferAttribute(end, i);\n          maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));\n        }\n        this.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n        if (isNaN(this.boundingSphere.radius)) {\n          console.error('THREE.LineSegmentsGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.', this);\n        }\n      }\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {// todo\n    }\n  }, {\n    key: \"applyMatrix\",\n    value: function applyMatrix(matrix) {\n      console.warn('THREE.LineSegmentsGeometry: applyMatrix() has been renamed to applyMatrix4().');\n      return this.applyMatrix4(matrix);\n    }\n  }]);\n  return LineSegmentsGeometry;\n}(InstancedBufferGeometry);\nexport { LineSegmentsGeometry };","map":{"version":3,"names":["Box3","Vector3","InstancedBufferGeometry","Float32BufferAttribute","InstancedInterleavedBuffer","InterleavedBufferAttribute","WireframeGeometry","Sphere","_box","_vector","LineSegmentsGeometry","_InstancedBufferGeome","_inherits","_super","_createSuper","_this","_classCallCheck","call","isLineSegmentsGeometry","type","positions","uvs","index","setIndex","setAttribute","_createClass","key","value","applyMatrix4","matrix","start","attributes","instanceStart","end","instanceEnd","undefined","needsUpdate","boundingBox","computeBoundingBox","boundingSphere","computeBoundingSphere","setPositions","array","lineSegments","Float32Array","Array","isArray","instanceBuffer","setColors","colors","instanceColorBuffer","fromWireframeGeometry","geometry","position","fromEdgesGeometry","fromMesh","mesh","fromLineSegments","setFromBufferAttribute","union","center","getCenter","maxRadiusSq","i","il","count","fromBufferAttribute","Math","max","distanceToSquared","radius","sqrt","isNaN","console","error","toJSON","applyMatrix","warn"],"sources":["/home/samuel/experiment/3d/farm/frontend/node_modules/three-stdlib/lines/LineSegmentsGeometry.js"],"sourcesContent":["import { Box3, Vector3, InstancedBufferGeometry, Float32BufferAttribute, InstancedInterleavedBuffer, InterleavedBufferAttribute, WireframeGeometry, Sphere } from 'three';\n\nconst _box = new Box3();\n\nconst _vector = new Vector3();\n\nclass LineSegmentsGeometry extends InstancedBufferGeometry {\n  constructor() {\n    super();\n    this.isLineSegmentsGeometry = true;\n    this.type = 'LineSegmentsGeometry';\n    const positions = [-1, 2, 0, 1, 2, 0, -1, 1, 0, 1, 1, 0, -1, 0, 0, 1, 0, 0, -1, -1, 0, 1, -1, 0];\n    const uvs = [-1, 2, 1, 2, -1, 1, 1, 1, -1, -1, 1, -1, -1, -2, 1, -2];\n    const index = [0, 2, 1, 2, 3, 1, 2, 4, 3, 4, 5, 3, 4, 6, 5, 6, 7, 5];\n    this.setIndex(index);\n    this.setAttribute('position', new Float32BufferAttribute(positions, 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n  }\n\n  applyMatrix4(matrix) {\n    const start = this.attributes.instanceStart;\n    const end = this.attributes.instanceEnd;\n\n    if (start !== undefined) {\n      start.applyMatrix4(matrix);\n      end.applyMatrix4(matrix);\n      start.needsUpdate = true;\n    }\n\n    if (this.boundingBox !== null) {\n      this.computeBoundingBox();\n    }\n\n    if (this.boundingSphere !== null) {\n      this.computeBoundingSphere();\n    }\n\n    return this;\n  }\n\n  setPositions(array) {\n    let lineSegments;\n\n    if (array instanceof Float32Array) {\n      lineSegments = array;\n    } else if (Array.isArray(array)) {\n      lineSegments = new Float32Array(array);\n    }\n\n    const instanceBuffer = new InstancedInterleavedBuffer(lineSegments, 6, 1); // xyz, xyz\n\n    this.setAttribute('instanceStart', new InterleavedBufferAttribute(instanceBuffer, 3, 0)); // xyz\n\n    this.setAttribute('instanceEnd', new InterleavedBufferAttribute(instanceBuffer, 3, 3)); // xyz\n    //\n\n    this.computeBoundingBox();\n    this.computeBoundingSphere();\n    return this;\n  }\n\n  setColors(array) {\n    let colors;\n\n    if (array instanceof Float32Array) {\n      colors = array;\n    } else if (Array.isArray(array)) {\n      colors = new Float32Array(array);\n    }\n\n    const instanceColorBuffer = new InstancedInterleavedBuffer(colors, 6, 1); // rgb, rgb\n\n    this.setAttribute('instanceColorStart', new InterleavedBufferAttribute(instanceColorBuffer, 3, 0)); // rgb\n\n    this.setAttribute('instanceColorEnd', new InterleavedBufferAttribute(instanceColorBuffer, 3, 3)); // rgb\n\n    return this;\n  }\n\n  fromWireframeGeometry(geometry) {\n    this.setPositions(geometry.attributes.position.array);\n    return this;\n  }\n\n  fromEdgesGeometry(geometry) {\n    this.setPositions(geometry.attributes.position.array);\n    return this;\n  }\n\n  fromMesh(mesh) {\n    this.fromWireframeGeometry(new WireframeGeometry(mesh.geometry)); // set colors, maybe\n\n    return this;\n  }\n\n  fromLineSegments(lineSegments) {\n    const geometry = lineSegments.geometry;\n    this.setPositions(geometry.attributes.position.array); // assumes non-indexed\n    // set colors, maybe\n\n    return this;\n  }\n\n  computeBoundingBox() {\n    if (this.boundingBox === null) {\n      this.boundingBox = new Box3();\n    }\n\n    const start = this.attributes.instanceStart;\n    const end = this.attributes.instanceEnd;\n\n    if (start !== undefined && end !== undefined) {\n      this.boundingBox.setFromBufferAttribute(start);\n\n      _box.setFromBufferAttribute(end);\n\n      this.boundingBox.union(_box);\n    }\n  }\n\n  computeBoundingSphere() {\n    if (this.boundingSphere === null) {\n      this.boundingSphere = new Sphere();\n    }\n\n    if (this.boundingBox === null) {\n      this.computeBoundingBox();\n    }\n\n    const start = this.attributes.instanceStart;\n    const end = this.attributes.instanceEnd;\n\n    if (start !== undefined && end !== undefined) {\n      const center = this.boundingSphere.center;\n      this.boundingBox.getCenter(center);\n      let maxRadiusSq = 0;\n\n      for (let i = 0, il = start.count; i < il; i++) {\n        _vector.fromBufferAttribute(start, i);\n\n        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));\n\n        _vector.fromBufferAttribute(end, i);\n\n        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));\n      }\n\n      this.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n\n      if (isNaN(this.boundingSphere.radius)) {\n        console.error('THREE.LineSegmentsGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.', this);\n      }\n    }\n  }\n\n  toJSON() {// todo\n  }\n\n  applyMatrix(matrix) {\n    console.warn('THREE.LineSegmentsGeometry: applyMatrix() has been renamed to applyMatrix4().');\n    return this.applyMatrix4(matrix);\n  }\n\n}\n\nexport { LineSegmentsGeometry };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}