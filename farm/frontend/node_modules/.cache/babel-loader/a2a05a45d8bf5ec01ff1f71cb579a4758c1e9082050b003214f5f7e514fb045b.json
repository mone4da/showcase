{"ast":null,"code":"import _classCallCheck from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Vector2, MeshNormalMaterial, ShaderMaterial, Vector4, WebGLRenderTarget, DepthTexture, NearestFilter, RGBAFormat } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nvar RenderPixelatedPass = /*#__PURE__*/function (_Pass) {\n  _inherits(RenderPixelatedPass, _Pass);\n  var _super = _createSuper(RenderPixelatedPass);\n  function RenderPixelatedPass(resolution, pixelSize, scene, camera) {\n    var _this;\n    var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    _classCallCheck(this, RenderPixelatedPass);\n    var _options$normalEdgeSt, _options$depthEdgeStr;\n    _this = _super.call(this);\n    _this.pixelSize = pixelSize;\n    _this.resolution = new Vector2();\n    _this.renderResolution = new Vector2();\n    _this.setSize(resolution.x, resolution.y);\n    _this.fsQuad = new FullScreenQuad(_this.material());\n    _this.scene = scene;\n    _this.camera = camera;\n    _this.normalEdgeStrength = (_options$normalEdgeSt = options.normalEdgeStrength) != null ? _options$normalEdgeSt : 0.3;\n    _this.depthEdgeStrength = (_options$depthEdgeStr = options.depthEdgeStrength) != null ? _options$depthEdgeStr : 0.4;\n    _this.rgbRenderTarget = pixelRenderTarget(_this.renderResolution, RGBAFormat, true);\n    _this.normalRenderTarget = pixelRenderTarget(_this.renderResolution, RGBAFormat, false);\n    _this.normalMaterial = new MeshNormalMaterial();\n    return _this;\n  }\n  _createClass(RenderPixelatedPass, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this.rgbRenderTarget.dispose();\n      this.normalRenderTarget.dispose();\n      this.fsQuad.dispose();\n    }\n  }, {\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      var _this$rgbRenderTarget, _this$normalRenderTar, _this$fsQuad;\n      this.resolution.set(width, height);\n      this.renderResolution.set(width / this.pixelSize | 0, height / this.pixelSize | 0);\n      var _this$renderResolutio = this.renderResolution,\n        x = _this$renderResolutio.x,\n        y = _this$renderResolutio.y;\n      (_this$rgbRenderTarget = this.rgbRenderTarget) === null || _this$rgbRenderTarget === void 0 ? void 0 : _this$rgbRenderTarget.setSize(x, y);\n      (_this$normalRenderTar = this.normalRenderTarget) === null || _this$normalRenderTar === void 0 ? void 0 : _this$normalRenderTar.setSize(x, y);\n      (_this$fsQuad = this.fsQuad) === null || _this$fsQuad === void 0 ? void 0 : _this$fsQuad.material.uniforms.resolution.value.set(x, y, 1 / x, 1 / y);\n    }\n  }, {\n    key: \"setPixelSize\",\n    value: function setPixelSize(pixelSize) {\n      this.pixelSize = pixelSize;\n      this.setSize(this.resolution.x, this.resolution.y);\n    }\n  }, {\n    key: \"render\",\n    value: function render(renderer, writeBuffer) {\n      var uniforms = this.fsQuad.material.uniforms;\n      uniforms.normalEdgeStrength.value = this.normalEdgeStrength;\n      uniforms.depthEdgeStrength.value = this.depthEdgeStrength;\n      renderer.setRenderTarget(this.rgbRenderTarget);\n      renderer.render(this.scene, this.camera);\n      var overrideMaterial_old = this.scene.overrideMaterial;\n      renderer.setRenderTarget(this.normalRenderTarget);\n      this.scene.overrideMaterial = this.normalMaterial;\n      renderer.render(this.scene, this.camera);\n      this.scene.overrideMaterial = overrideMaterial_old;\n      uniforms.tDiffuse.value = this.rgbRenderTarget.texture;\n      uniforms.tDepth.value = this.rgbRenderTarget.depthTexture;\n      uniforms.tNormal.value = this.normalRenderTarget.texture;\n      if (this.renderToScreen) {\n        renderer.setRenderTarget(null);\n      } else {\n        renderer.setRenderTarget(writeBuffer);\n        if (this.clear) renderer.clear();\n      }\n      this.fsQuad.render(renderer);\n    }\n  }, {\n    key: \"material\",\n    value: function material() {\n      return new ShaderMaterial({\n        uniforms: {\n          tDiffuse: {\n            value: null\n          },\n          tDepth: {\n            value: null\n          },\n          tNormal: {\n            value: null\n          },\n          resolution: {\n            value: new Vector4(this.renderResolution.x, this.renderResolution.y, 1 / this.renderResolution.x, 1 / this.renderResolution.y)\n          },\n          normalEdgeStrength: {\n            value: 0\n          },\n          depthEdgeStrength: {\n            value: 0\n          }\n        },\n        vertexShader: \"\\n\\t\\t\\t\\tvarying vec2 vUv;\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\tvUv = uv;\\n\\t\\t\\t\\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\",\n        fragmentShader: \"\\n\\t\\t\\t\\tuniform sampler2D tDiffuse;\\n\\t\\t\\t\\tuniform sampler2D tDepth;\\n\\t\\t\\t\\tuniform sampler2D tNormal;\\n\\t\\t\\t\\tuniform vec4 resolution;\\n\\t\\t\\t\\tuniform float normalEdgeStrength;\\n\\t\\t\\t\\tuniform float depthEdgeStrength;\\n\\t\\t\\t\\tvarying vec2 vUv;\\n\\n\\t\\t\\t\\tfloat getDepth(int x, int y) {\\n\\n\\t\\t\\t\\t\\treturn texture2D( tDepth, vUv + vec2(x, y) * resolution.zw ).r;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tvec3 getNormal(int x, int y) {\\n\\n\\t\\t\\t\\t\\treturn texture2D( tNormal, vUv + vec2(x, y) * resolution.zw ).rgb * 2.0 - 1.0;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tfloat depthEdgeIndicator(float depth, vec3 normal) {\\n\\n\\t\\t\\t\\t\\tfloat diff = 0.0;\\n\\t\\t\\t\\t\\tdiff += clamp(getDepth(1, 0) - depth, 0.0, 1.0);\\n\\t\\t\\t\\t\\tdiff += clamp(getDepth(-1, 0) - depth, 0.0, 1.0);\\n\\t\\t\\t\\t\\tdiff += clamp(getDepth(0, 1) - depth, 0.0, 1.0);\\n\\t\\t\\t\\t\\tdiff += clamp(getDepth(0, -1) - depth, 0.0, 1.0);\\n\\t\\t\\t\\t\\treturn floor(smoothstep(0.01, 0.02, diff) * 2.) / 2.;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tfloat neighborNormalEdgeIndicator(int x, int y, float depth, vec3 normal) {\\n\\n\\t\\t\\t\\t\\tfloat depthDiff = getDepth(x, y) - depth;\\n\\t\\t\\t\\t\\tvec3 neighborNormal = getNormal(x, y);\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t// Edge pixels should yield to faces who's normals are closer to the bias normal.\\n\\t\\t\\t\\t\\tvec3 normalEdgeBias = vec3(1., 1., 1.); // This should probably be a parameter.\\n\\t\\t\\t\\t\\tfloat normalDiff = dot(normal - neighborNormal, normalEdgeBias);\\n\\t\\t\\t\\t\\tfloat normalIndicator = clamp(smoothstep(-.01, .01, normalDiff), 0.0, 1.0);\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t// Only the shallower pixel should detect the normal edge.\\n\\t\\t\\t\\t\\tfloat depthIndicator = clamp(sign(depthDiff * .25 + .0025), 0.0, 1.0);\\n\\n\\t\\t\\t\\t\\treturn (1.0 - dot(normal, neighborNormal)) * depthIndicator * normalIndicator;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tfloat normalEdgeIndicator(float depth, vec3 normal) {\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\tfloat indicator = 0.0;\\n\\n\\t\\t\\t\\t\\tindicator += neighborNormalEdgeIndicator(0, -1, depth, normal);\\n\\t\\t\\t\\t\\tindicator += neighborNormalEdgeIndicator(0, 1, depth, normal);\\n\\t\\t\\t\\t\\tindicator += neighborNormalEdgeIndicator(-1, 0, depth, normal);\\n\\t\\t\\t\\t\\tindicator += neighborNormalEdgeIndicator(1, 0, depth, normal);\\n\\n\\t\\t\\t\\t\\treturn step(0.1, indicator);\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\tvec4 texel = texture2D( tDiffuse, vUv );\\n\\n\\t\\t\\t\\t\\tfloat depth = 0.0;\\n\\t\\t\\t\\t\\tvec3 normal = vec3(0.0);\\n\\n\\t\\t\\t\\t\\tif (depthEdgeStrength > 0.0 || normalEdgeStrength > 0.0) {\\n\\n\\t\\t\\t\\t\\t\\tdepth = getDepth(0, 0);\\n\\t\\t\\t\\t\\t\\tnormal = getNormal(0, 0);\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tfloat dei = 0.0;\\n\\t\\t\\t\\t\\tif (depthEdgeStrength > 0.0) \\n\\t\\t\\t\\t\\t\\tdei = depthEdgeIndicator(depth, normal);\\n\\n\\t\\t\\t\\t\\tfloat nei = 0.0; \\n\\t\\t\\t\\t\\tif (normalEdgeStrength > 0.0) \\n\\t\\t\\t\\t\\t\\tnei = normalEdgeIndicator(depth, normal);\\n\\n\\t\\t\\t\\t\\tfloat Strength = dei > 0.0 ? (1.0 - depthEdgeStrength * dei) : (1.0 + normalEdgeStrength * nei);\\n\\n\\t\\t\\t\\t\\tgl_FragColor = texel * Strength;\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"\n      });\n    }\n  }]);\n  return RenderPixelatedPass;\n}(Pass);\nfunction pixelRenderTarget(resolution, pixelFormat, useDepthTexture) {\n  var renderTarget = new WebGLRenderTarget(resolution.x, resolution.y, !useDepthTexture ? undefined : {\n    depthTexture: new DepthTexture(resolution.x, resolution.y),\n    depthBuffer: true\n  });\n  renderTarget.texture.format = pixelFormat;\n  renderTarget.texture.minFilter = NearestFilter;\n  renderTarget.texture.magFilter = NearestFilter;\n  renderTarget.texture.generateMipmaps = false;\n  renderTarget.stencilBuffer = false;\n  return renderTarget;\n}\nexport { RenderPixelatedPass };","map":{"version":3,"names":["Vector2","MeshNormalMaterial","ShaderMaterial","Vector4","WebGLRenderTarget","DepthTexture","NearestFilter","RGBAFormat","Pass","FullScreenQuad","RenderPixelatedPass","_Pass","_inherits","_super","_createSuper","resolution","pixelSize","scene","camera","_this","options","arguments","length","undefined","_classCallCheck","_options$normalEdgeSt","_options$depthEdgeStr","call","renderResolution","setSize","x","y","fsQuad","material","normalEdgeStrength","depthEdgeStrength","rgbRenderTarget","pixelRenderTarget","normalRenderTarget","normalMaterial","_createClass","key","value","dispose","width","height","_this$rgbRenderTarget","_this$normalRenderTar","_this$fsQuad","set","_this$renderResolutio","uniforms","setPixelSize","render","renderer","writeBuffer","setRenderTarget","overrideMaterial_old","overrideMaterial","tDiffuse","texture","tDepth","depthTexture","tNormal","renderToScreen","clear","vertexShader","fragmentShader","pixelFormat","useDepthTexture","renderTarget","depthBuffer","format","minFilter","magFilter","generateMipmaps","stencilBuffer"],"sources":["/home/samuel/experiment/3d/farm/frontend/node_modules/three-stdlib/postprocessing/RenderPixelatedPass.js"],"sourcesContent":["import { Vector2, MeshNormalMaterial, ShaderMaterial, Vector4, WebGLRenderTarget, DepthTexture, NearestFilter, RGBAFormat } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\n\nclass RenderPixelatedPass extends Pass {\n  constructor(resolution, pixelSize, scene, camera, options = {}) {\n    var _options$normalEdgeSt, _options$depthEdgeStr;\n\n    super();\n    this.pixelSize = pixelSize;\n    this.resolution = new Vector2();\n    this.renderResolution = new Vector2();\n    this.setSize(resolution.x, resolution.y);\n    this.fsQuad = new FullScreenQuad(this.material());\n    this.scene = scene;\n    this.camera = camera;\n    this.normalEdgeStrength = (_options$normalEdgeSt = options.normalEdgeStrength) != null ? _options$normalEdgeSt : 0.3;\n    this.depthEdgeStrength = (_options$depthEdgeStr = options.depthEdgeStrength) != null ? _options$depthEdgeStr : 0.4;\n    this.rgbRenderTarget = pixelRenderTarget(this.renderResolution, RGBAFormat, true);\n    this.normalRenderTarget = pixelRenderTarget(this.renderResolution, RGBAFormat, false);\n    this.normalMaterial = new MeshNormalMaterial();\n  }\n\n  dispose() {\n    this.rgbRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.fsQuad.dispose();\n  }\n\n  setSize(width, height) {\n    var _this$rgbRenderTarget, _this$normalRenderTar, _this$fsQuad;\n\n    this.resolution.set(width, height);\n    this.renderResolution.set(width / this.pixelSize | 0, height / this.pixelSize | 0);\n    const {\n      x,\n      y\n    } = this.renderResolution;\n    (_this$rgbRenderTarget = this.rgbRenderTarget) === null || _this$rgbRenderTarget === void 0 ? void 0 : _this$rgbRenderTarget.setSize(x, y);\n    (_this$normalRenderTar = this.normalRenderTarget) === null || _this$normalRenderTar === void 0 ? void 0 : _this$normalRenderTar.setSize(x, y);\n    (_this$fsQuad = this.fsQuad) === null || _this$fsQuad === void 0 ? void 0 : _this$fsQuad.material.uniforms.resolution.value.set(x, y, 1 / x, 1 / y);\n  }\n\n  setPixelSize(pixelSize) {\n    this.pixelSize = pixelSize;\n    this.setSize(this.resolution.x, this.resolution.y);\n  }\n\n  render(renderer, writeBuffer) {\n    const uniforms = this.fsQuad.material.uniforms;\n    uniforms.normalEdgeStrength.value = this.normalEdgeStrength;\n    uniforms.depthEdgeStrength.value = this.depthEdgeStrength;\n    renderer.setRenderTarget(this.rgbRenderTarget);\n    renderer.render(this.scene, this.camera);\n    const overrideMaterial_old = this.scene.overrideMaterial;\n    renderer.setRenderTarget(this.normalRenderTarget);\n    this.scene.overrideMaterial = this.normalMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = overrideMaterial_old;\n    uniforms.tDiffuse.value = this.rgbRenderTarget.texture;\n    uniforms.tDepth.value = this.rgbRenderTarget.depthTexture;\n    uniforms.tNormal.value = this.normalRenderTarget.texture;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n    }\n\n    this.fsQuad.render(renderer);\n  }\n\n  material() {\n    return new ShaderMaterial({\n      uniforms: {\n        tDiffuse: {\n          value: null\n        },\n        tDepth: {\n          value: null\n        },\n        tNormal: {\n          value: null\n        },\n        resolution: {\n          value: new Vector4(this.renderResolution.x, this.renderResolution.y, 1 / this.renderResolution.x, 1 / this.renderResolution.y)\n        },\n        normalEdgeStrength: {\n          value: 0\n        },\n        depthEdgeStrength: {\n          value: 0\n        }\n      },\n      vertexShader: `\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\t\t}\n\t\t\t\t`,\n      fragmentShader: `\n\t\t\t\tuniform sampler2D tDiffuse;\n\t\t\t\tuniform sampler2D tDepth;\n\t\t\t\tuniform sampler2D tNormal;\n\t\t\t\tuniform vec4 resolution;\n\t\t\t\tuniform float normalEdgeStrength;\n\t\t\t\tuniform float depthEdgeStrength;\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tfloat getDepth(int x, int y) {\n\n\t\t\t\t\treturn texture2D( tDepth, vUv + vec2(x, y) * resolution.zw ).r;\n\n\t\t\t\t}\n\n\t\t\t\tvec3 getNormal(int x, int y) {\n\n\t\t\t\t\treturn texture2D( tNormal, vUv + vec2(x, y) * resolution.zw ).rgb * 2.0 - 1.0;\n\n\t\t\t\t}\n\n\t\t\t\tfloat depthEdgeIndicator(float depth, vec3 normal) {\n\n\t\t\t\t\tfloat diff = 0.0;\n\t\t\t\t\tdiff += clamp(getDepth(1, 0) - depth, 0.0, 1.0);\n\t\t\t\t\tdiff += clamp(getDepth(-1, 0) - depth, 0.0, 1.0);\n\t\t\t\t\tdiff += clamp(getDepth(0, 1) - depth, 0.0, 1.0);\n\t\t\t\t\tdiff += clamp(getDepth(0, -1) - depth, 0.0, 1.0);\n\t\t\t\t\treturn floor(smoothstep(0.01, 0.02, diff) * 2.) / 2.;\n\n\t\t\t\t}\n\n\t\t\t\tfloat neighborNormalEdgeIndicator(int x, int y, float depth, vec3 normal) {\n\n\t\t\t\t\tfloat depthDiff = getDepth(x, y) - depth;\n\t\t\t\t\tvec3 neighborNormal = getNormal(x, y);\n\t\t\t\t\t\n\t\t\t\t\t// Edge pixels should yield to faces who's normals are closer to the bias normal.\n\t\t\t\t\tvec3 normalEdgeBias = vec3(1., 1., 1.); // This should probably be a parameter.\n\t\t\t\t\tfloat normalDiff = dot(normal - neighborNormal, normalEdgeBias);\n\t\t\t\t\tfloat normalIndicator = clamp(smoothstep(-.01, .01, normalDiff), 0.0, 1.0);\n\t\t\t\t\t\n\t\t\t\t\t// Only the shallower pixel should detect the normal edge.\n\t\t\t\t\tfloat depthIndicator = clamp(sign(depthDiff * .25 + .0025), 0.0, 1.0);\n\n\t\t\t\t\treturn (1.0 - dot(normal, neighborNormal)) * depthIndicator * normalIndicator;\n\n\t\t\t\t}\n\n\t\t\t\tfloat normalEdgeIndicator(float depth, vec3 normal) {\n\t\t\t\t\t\n\t\t\t\t\tfloat indicator = 0.0;\n\n\t\t\t\t\tindicator += neighborNormalEdgeIndicator(0, -1, depth, normal);\n\t\t\t\t\tindicator += neighborNormalEdgeIndicator(0, 1, depth, normal);\n\t\t\t\t\tindicator += neighborNormalEdgeIndicator(-1, 0, depth, normal);\n\t\t\t\t\tindicator += neighborNormalEdgeIndicator(1, 0, depth, normal);\n\n\t\t\t\t\treturn step(0.1, indicator);\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\n\t\t\t\t\tfloat depth = 0.0;\n\t\t\t\t\tvec3 normal = vec3(0.0);\n\n\t\t\t\t\tif (depthEdgeStrength > 0.0 || normalEdgeStrength > 0.0) {\n\n\t\t\t\t\t\tdepth = getDepth(0, 0);\n\t\t\t\t\t\tnormal = getNormal(0, 0);\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat dei = 0.0;\n\t\t\t\t\tif (depthEdgeStrength > 0.0) \n\t\t\t\t\t\tdei = depthEdgeIndicator(depth, normal);\n\n\t\t\t\t\tfloat nei = 0.0; \n\t\t\t\t\tif (normalEdgeStrength > 0.0) \n\t\t\t\t\t\tnei = normalEdgeIndicator(depth, normal);\n\n\t\t\t\t\tfloat Strength = dei > 0.0 ? (1.0 - depthEdgeStrength * dei) : (1.0 + normalEdgeStrength * nei);\n\n\t\t\t\t\tgl_FragColor = texel * Strength;\n\n\t\t\t\t}\n\t\t\t\t`\n    });\n  }\n\n}\n\nfunction pixelRenderTarget(resolution, pixelFormat, useDepthTexture) {\n  const renderTarget = new WebGLRenderTarget(resolution.x, resolution.y, !useDepthTexture ? undefined : {\n    depthTexture: new DepthTexture(resolution.x, resolution.y),\n    depthBuffer: true\n  });\n  renderTarget.texture.format = pixelFormat;\n  renderTarget.texture.minFilter = NearestFilter;\n  renderTarget.texture.magFilter = NearestFilter;\n  renderTarget.texture.generateMipmaps = false;\n  renderTarget.stencilBuffer = false;\n  return renderTarget;\n}\n\nexport { RenderPixelatedPass };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}