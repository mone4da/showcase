{"ast":null,"code":"import _classCallCheck from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/**\n * @author Deepkolos / https://github.com/deepkolos\n */\nvar WorkerPool = /*#__PURE__*/function () {\n  function WorkerPool() {\n    var pool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 4;\n    _classCallCheck(this, WorkerPool);\n    this.pool = pool;\n    this.queue = [];\n    this.workers = [];\n    this.workersResolve = [];\n    this.workerStatus = 0;\n  }\n  _createClass(WorkerPool, [{\n    key: \"_initWorker\",\n    value: function _initWorker(workerId) {\n      if (!this.workers[workerId]) {\n        var worker = this.workerCreator();\n        worker.addEventListener('message', this._onMessage.bind(this, workerId));\n        this.workers[workerId] = worker;\n      }\n    }\n  }, {\n    key: \"_getIdleWorker\",\n    value: function _getIdleWorker() {\n      for (var i = 0; i < this.pool; i++) if (!(this.workerStatus & 1 << i)) return i;\n      return -1;\n    }\n  }, {\n    key: \"_onMessage\",\n    value: function _onMessage(workerId, msg) {\n      var resolve = this.workersResolve[workerId];\n      resolve && resolve(msg);\n      if (this.queue.length) {\n        var _this$queue$shift = this.queue.shift(),\n          _resolve = _this$queue$shift.resolve,\n          _msg = _this$queue$shift.msg,\n          transfer = _this$queue$shift.transfer;\n        this.workersResolve[workerId] = _resolve;\n        this.workers[workerId].postMessage(_msg, transfer);\n      } else {\n        this.workerStatus ^= 1 << workerId;\n      }\n    }\n  }, {\n    key: \"setWorkerCreator\",\n    value: function setWorkerCreator(workerCreator) {\n      this.workerCreator = workerCreator;\n    }\n  }, {\n    key: \"setWorkerLimit\",\n    value: function setWorkerLimit(pool) {\n      this.pool = pool;\n    }\n  }, {\n    key: \"postMessage\",\n    value: function postMessage(msg, transfer) {\n      var _this = this;\n      return new Promise(function (resolve) {\n        var workerId = _this._getIdleWorker();\n        if (workerId !== -1) {\n          _this._initWorker(workerId);\n          _this.workerStatus |= 1 << workerId;\n          _this.workersResolve[workerId] = resolve;\n          _this.workers[workerId].postMessage(msg, transfer);\n        } else {\n          _this.queue.push({\n            resolve: resolve,\n            msg: msg,\n            transfer: transfer\n          });\n        }\n      });\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.workers.forEach(function (worker) {\n        return worker.terminate();\n      });\n      this.workersResolve.length = 0;\n      this.workers.length = 0;\n      this.queue.length = 0;\n      this.workerStatus = 0;\n    }\n  }]);\n  return WorkerPool;\n}();\nexport { WorkerPool };","map":{"version":3,"names":["WorkerPool","pool","arguments","length","undefined","_classCallCheck","queue","workers","workersResolve","workerStatus","_createClass","key","value","_initWorker","workerId","worker","workerCreator","addEventListener","_onMessage","bind","_getIdleWorker","i","msg","resolve","_this$queue$shift","shift","transfer","postMessage","setWorkerCreator","setWorkerLimit","_this","Promise","push","dispose","forEach","terminate"],"sources":["/home/samuel/experiment/3d/farm/frontend/node_modules/three-stdlib/utils/WorkerPool.js"],"sourcesContent":["/**\n * @author Deepkolos / https://github.com/deepkolos\n */\nclass WorkerPool {\n  constructor(pool = 4) {\n    this.pool = pool;\n    this.queue = [];\n    this.workers = [];\n    this.workersResolve = [];\n    this.workerStatus = 0;\n  }\n\n  _initWorker(workerId) {\n    if (!this.workers[workerId]) {\n      const worker = this.workerCreator();\n      worker.addEventListener('message', this._onMessage.bind(this, workerId));\n      this.workers[workerId] = worker;\n    }\n  }\n\n  _getIdleWorker() {\n    for (let i = 0; i < this.pool; i++) if (!(this.workerStatus & 1 << i)) return i;\n\n    return -1;\n  }\n\n  _onMessage(workerId, msg) {\n    const resolve = this.workersResolve[workerId];\n    resolve && resolve(msg);\n\n    if (this.queue.length) {\n      const {\n        resolve,\n        msg,\n        transfer\n      } = this.queue.shift();\n      this.workersResolve[workerId] = resolve;\n      this.workers[workerId].postMessage(msg, transfer);\n    } else {\n      this.workerStatus ^= 1 << workerId;\n    }\n  }\n\n  setWorkerCreator(workerCreator) {\n    this.workerCreator = workerCreator;\n  }\n\n  setWorkerLimit(pool) {\n    this.pool = pool;\n  }\n\n  postMessage(msg, transfer) {\n    return new Promise(resolve => {\n      const workerId = this._getIdleWorker();\n\n      if (workerId !== -1) {\n        this._initWorker(workerId);\n\n        this.workerStatus |= 1 << workerId;\n        this.workersResolve[workerId] = resolve;\n        this.workers[workerId].postMessage(msg, transfer);\n      } else {\n        this.queue.push({\n          resolve,\n          msg,\n          transfer\n        });\n      }\n    });\n  }\n\n  dispose() {\n    this.workers.forEach(worker => worker.terminate());\n    this.workersResolve.length = 0;\n    this.workers.length = 0;\n    this.queue.length = 0;\n    this.workerStatus = 0;\n  }\n\n}\n\nexport { WorkerPool };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}