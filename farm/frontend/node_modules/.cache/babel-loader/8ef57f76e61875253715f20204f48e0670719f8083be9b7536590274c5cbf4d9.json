{"ast":null,"code":"import _classCallCheck from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { Vector2, WebGLRenderTarget, UniformsUtils, ShaderMaterial, AdditiveBlending } from 'three';\nimport { ConvolutionShader } from '../shaders/ConvolutionShader.js';\nvar BloomPass = /*#__PURE__*/function (_Pass) {\n  _inherits(BloomPass, _Pass);\n  var _super = _createSuper(BloomPass);\n  function BloomPass() {\n    var _this;\n    var strength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var kernelSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 25;\n    var sigma = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;\n    var resolution = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 256;\n    _classCallCheck(this, BloomPass);\n    _this = _super.call(this); // render targets\n\n    _defineProperty(_assertThisInitialized(_this), \"renderTargetX\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"renderTargetY\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"materialCombine\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"materialConvolution\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"fsQuad\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"combineUniforms\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"convolutionUniforms\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"blurX\", new Vector2(0.001953125, 0.0));\n    _defineProperty(_assertThisInitialized(_this), \"blurY\", new Vector2(0.0, 0.001953125));\n    _this.renderTargetX = new WebGLRenderTarget(resolution, resolution);\n    _this.renderTargetX.texture.name = 'BloomPass.x';\n    _this.renderTargetY = new WebGLRenderTarget(resolution, resolution);\n    _this.renderTargetY.texture.name = 'BloomPass.y'; // combine material\n\n    _this.combineUniforms = UniformsUtils.clone(CombineShader.uniforms);\n    _this.combineUniforms['strength'].value = strength;\n    _this.materialCombine = new ShaderMaterial({\n      uniforms: _this.combineUniforms,\n      vertexShader: CombineShader.vertexShader,\n      fragmentShader: CombineShader.fragmentShader,\n      blending: AdditiveBlending,\n      transparent: true\n    }); // convolution material\n\n    if (ConvolutionShader === undefined) console.error('BloomPass relies on ConvolutionShader');\n    var convolutionShader = ConvolutionShader;\n    _this.convolutionUniforms = UniformsUtils.clone(convolutionShader.uniforms);\n    _this.convolutionUniforms['uImageIncrement'].value = _this.blurX;\n    _this.convolutionUniforms['cKernel'].value = ConvolutionShader.buildKernel(sigma);\n    _this.materialConvolution = new ShaderMaterial({\n      uniforms: _this.convolutionUniforms,\n      vertexShader: convolutionShader.vertexShader,\n      fragmentShader: convolutionShader.fragmentShader,\n      defines: {\n        KERNEL_SIZE_FLOAT: kernelSize.toFixed(1),\n        KERNEL_SIZE_INT: kernelSize.toFixed(0)\n      }\n    });\n    _this.needsSwap = false;\n    _this.fsQuad = new FullScreenQuad(_this.materialConvolution);\n    return _this;\n  }\n  _createClass(BloomPass, [{\n    key: \"render\",\n    value: function render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n      if (maskActive) renderer.state.buffers.stencil.setTest(false); // Render quad with blured scene into texture (convolution pass 1)\n\n      this.fsQuad.material = this.materialConvolution;\n      this.convolutionUniforms['tDiffuse'].value = readBuffer.texture;\n      this.convolutionUniforms['uImageIncrement'].value = this.blurX;\n      renderer.setRenderTarget(this.renderTargetX);\n      renderer.clear();\n      this.fsQuad.render(renderer); // Render quad with blured scene into texture (convolution pass 2)\n\n      this.convolutionUniforms['tDiffuse'].value = this.renderTargetX.texture;\n      this.convolutionUniforms['uImageIncrement'].value = this.blurY;\n      renderer.setRenderTarget(this.renderTargetY);\n      renderer.clear();\n      this.fsQuad.render(renderer); // Render original scene with superimposed blur to texture\n\n      this.fsQuad.material = this.materialCombine;\n      this.combineUniforms['tDiffuse'].value = this.renderTargetY.texture;\n      if (maskActive) renderer.state.buffers.stencil.setTest(true);\n      renderer.setRenderTarget(readBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }]);\n  return BloomPass;\n}(Pass);\nvar CombineShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    strength: {\n      value: 1.0\n    }\n  },\n  vertexShader: /* glsl */\"\\n  varying vec2 vUv;\\n  void main() {\\n    vUv = uv;\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n  }\",\n  fragmentShader: /* glsl */\"\\n  uniform float strength;\\n  uniform sampler2D tDiffuse;\\n  varying vec2 vUv;\\n  void main() {\\n    vec4 texel = texture2D( tDiffuse, vUv );\\n    gl_FragColor = strength * texel;\\n  }\"\n};\nexport { BloomPass };","map":{"version":3,"names":["_defineProperty","Pass","FullScreenQuad","Vector2","WebGLRenderTarget","UniformsUtils","ShaderMaterial","AdditiveBlending","ConvolutionShader","BloomPass","_Pass","_inherits","_super","_createSuper","_this","strength","arguments","length","undefined","kernelSize","sigma","resolution","_classCallCheck","call","_assertThisInitialized","renderTargetX","texture","name","renderTargetY","combineUniforms","clone","CombineShader","uniforms","value","materialCombine","vertexShader","fragmentShader","blending","transparent","console","error","convolutionShader","convolutionUniforms","blurX","buildKernel","materialConvolution","defines","KERNEL_SIZE_FLOAT","toFixed","KERNEL_SIZE_INT","needsSwap","fsQuad","_createClass","key","render","renderer","writeBuffer","readBuffer","deltaTime","maskActive","state","buffers","stencil","setTest","material","setRenderTarget","clear","blurY","tDiffuse"],"sources":["/home/samuel/experiment/3d/farm/frontend/node_modules/three-stdlib/postprocessing/BloomPass.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { Vector2, WebGLRenderTarget, UniformsUtils, ShaderMaterial, AdditiveBlending } from 'three';\nimport { ConvolutionShader } from '../shaders/ConvolutionShader.js';\n\nclass BloomPass extends Pass {\n  constructor(strength = 1, kernelSize = 25, sigma = 4, resolution = 256) {\n    super(); // render targets\n\n    _defineProperty(this, \"renderTargetX\", void 0);\n\n    _defineProperty(this, \"renderTargetY\", void 0);\n\n    _defineProperty(this, \"materialCombine\", void 0);\n\n    _defineProperty(this, \"materialConvolution\", void 0);\n\n    _defineProperty(this, \"fsQuad\", void 0);\n\n    _defineProperty(this, \"combineUniforms\", void 0);\n\n    _defineProperty(this, \"convolutionUniforms\", void 0);\n\n    _defineProperty(this, \"blurX\", new Vector2(0.001953125, 0.0));\n\n    _defineProperty(this, \"blurY\", new Vector2(0.0, 0.001953125));\n\n    this.renderTargetX = new WebGLRenderTarget(resolution, resolution);\n    this.renderTargetX.texture.name = 'BloomPass.x';\n    this.renderTargetY = new WebGLRenderTarget(resolution, resolution);\n    this.renderTargetY.texture.name = 'BloomPass.y'; // combine material\n\n    this.combineUniforms = UniformsUtils.clone(CombineShader.uniforms);\n    this.combineUniforms['strength'].value = strength;\n    this.materialCombine = new ShaderMaterial({\n      uniforms: this.combineUniforms,\n      vertexShader: CombineShader.vertexShader,\n      fragmentShader: CombineShader.fragmentShader,\n      blending: AdditiveBlending,\n      transparent: true\n    }); // convolution material\n\n    if (ConvolutionShader === undefined) console.error('BloomPass relies on ConvolutionShader');\n    const convolutionShader = ConvolutionShader;\n    this.convolutionUniforms = UniformsUtils.clone(convolutionShader.uniforms);\n    this.convolutionUniforms['uImageIncrement'].value = this.blurX;\n    this.convolutionUniforms['cKernel'].value = ConvolutionShader.buildKernel(sigma);\n    this.materialConvolution = new ShaderMaterial({\n      uniforms: this.convolutionUniforms,\n      vertexShader: convolutionShader.vertexShader,\n      fragmentShader: convolutionShader.fragmentShader,\n      defines: {\n        KERNEL_SIZE_FLOAT: kernelSize.toFixed(1),\n        KERNEL_SIZE_INT: kernelSize.toFixed(0)\n      }\n    });\n    this.needsSwap = false;\n    this.fsQuad = new FullScreenQuad(this.materialConvolution);\n  }\n\n  render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    if (maskActive) renderer.state.buffers.stencil.setTest(false); // Render quad with blured scene into texture (convolution pass 1)\n\n    this.fsQuad.material = this.materialConvolution;\n    this.convolutionUniforms['tDiffuse'].value = readBuffer.texture;\n    this.convolutionUniforms['uImageIncrement'].value = this.blurX;\n    renderer.setRenderTarget(this.renderTargetX);\n    renderer.clear();\n    this.fsQuad.render(renderer); // Render quad with blured scene into texture (convolution pass 2)\n\n    this.convolutionUniforms['tDiffuse'].value = this.renderTargetX.texture;\n    this.convolutionUniforms['uImageIncrement'].value = this.blurY;\n    renderer.setRenderTarget(this.renderTargetY);\n    renderer.clear();\n    this.fsQuad.render(renderer); // Render original scene with superimposed blur to texture\n\n    this.fsQuad.material = this.materialCombine;\n    this.combineUniforms['tDiffuse'].value = this.renderTargetY.texture;\n    if (maskActive) renderer.state.buffers.stencil.setTest(true);\n    renderer.setRenderTarget(readBuffer);\n    if (this.clear) renderer.clear();\n    this.fsQuad.render(renderer);\n  }\n\n}\n\nconst CombineShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    strength: {\n      value: 1.0\n    }\n  },\n  vertexShader:\n  /* glsl */\n  `\n  varying vec2 vUv;\n  void main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n  }`,\n  fragmentShader:\n  /* glsl */\n  `\n  uniform float strength;\n  uniform sampler2D tDiffuse;\n  varying vec2 vUv;\n  void main() {\n    vec4 texel = texture2D( tDiffuse, vUv );\n    gl_FragColor = strength * texel;\n  }`\n};\n\nexport { BloomPass };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}