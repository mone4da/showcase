{"ast":null,"code":"import _classCallCheck from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { DepthTexture, DepthStencilFormat, UnsignedInt248Type, WebGLRenderTarget, NearestFilter, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor, Color, LuminanceFormat, CustomBlending, Vector3, MathUtils, DataTexture, RedFormat, FloatType, RepeatWrapping } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { SimplexNoise } from '../math/SimplexNoise.js';\nimport { SSAOShader, SSAOBlurShader, SSAODepthShader } from '../shaders/SSAOShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nvar SSAOPass = /*#__PURE__*/function (_Pass) {\n  _inherits(SSAOPass, _Pass);\n  var _super = _createSuper(SSAOPass);\n  function SSAOPass(scene, camera, width, height) {\n    var _this;\n    _classCallCheck(this, SSAOPass);\n    _this = _super.call(this);\n    _this.width = width !== undefined ? width : 512;\n    _this.height = height !== undefined ? height : 512;\n    _this.clear = true;\n    _this.camera = camera;\n    _this.scene = scene;\n    _this.kernelRadius = 8;\n    _this.kernelSize = 32;\n    _this.kernel = [];\n    _this.noiseTexture = null;\n    _this.output = 0;\n    _this.minDistance = 0.005;\n    _this.maxDistance = 0.1;\n    _this._visibilityCache = new Map(); //\n\n    _this.generateSampleKernel();\n    _this.generateRandomKernelRotations(); // beauty render target\n\n    var depthTexture = new DepthTexture();\n    depthTexture.format = DepthStencilFormat;\n    depthTexture.type = UnsignedInt248Type;\n    _this.beautyRenderTarget = new WebGLRenderTarget(_this.width, _this.height); // normal render target with depth buffer\n\n    _this.normalRenderTarget = new WebGLRenderTarget(_this.width, _this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      depthTexture: depthTexture\n    }); // ssao render target\n\n    _this.ssaoRenderTarget = new WebGLRenderTarget(_this.width, _this.height);\n    _this.blurRenderTarget = _this.ssaoRenderTarget.clone(); // ssao material\n\n    if (SSAOShader === undefined) {\n      console.error('THREE.SSAOPass: The pass relies on SSAOShader.');\n    }\n    _this.ssaoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOShader.defines),\n      uniforms: UniformsUtils.clone(SSAOShader.uniforms),\n      vertexShader: SSAOShader.vertexShader,\n      fragmentShader: SSAOShader.fragmentShader,\n      blending: NoBlending\n    });\n    _this.ssaoMaterial.uniforms['tDiffuse'].value = _this.beautyRenderTarget.texture;\n    _this.ssaoMaterial.uniforms['tNormal'].value = _this.normalRenderTarget.texture;\n    _this.ssaoMaterial.uniforms['tDepth'].value = _this.normalRenderTarget.depthTexture;\n    _this.ssaoMaterial.uniforms['tNoise'].value = _this.noiseTexture;\n    _this.ssaoMaterial.uniforms['kernel'].value = _this.kernel;\n    _this.ssaoMaterial.uniforms['cameraNear'].value = _this.camera.near;\n    _this.ssaoMaterial.uniforms['cameraFar'].value = _this.camera.far;\n    _this.ssaoMaterial.uniforms['resolution'].value.set(_this.width, _this.height);\n    _this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(_this.camera.projectionMatrix);\n    _this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(_this.camera.projectionMatrixInverse); // normal material\n\n    _this.normalMaterial = new MeshNormalMaterial();\n    _this.normalMaterial.blending = NoBlending; // blur material\n\n    _this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSAOBlurShader.uniforms),\n      vertexShader: SSAOBlurShader.vertexShader,\n      fragmentShader: SSAOBlurShader.fragmentShader\n    });\n    _this.blurMaterial.uniforms['tDiffuse'].value = _this.ssaoRenderTarget.texture;\n    _this.blurMaterial.uniforms['resolution'].value.set(_this.width, _this.height); // material for rendering the depth\n\n    _this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAODepthShader.defines),\n      uniforms: UniformsUtils.clone(SSAODepthShader.uniforms),\n      vertexShader: SSAODepthShader.vertexShader,\n      fragmentShader: SSAODepthShader.fragmentShader,\n      blending: NoBlending\n    });\n    _this.depthRenderMaterial.uniforms['tDepth'].value = _this.normalRenderTarget.depthTexture;\n    _this.depthRenderMaterial.uniforms['cameraNear'].value = _this.camera.near;\n    _this.depthRenderMaterial.uniforms['cameraFar'].value = _this.camera.far; // material for rendering the content of a render target\n\n    _this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: DstColorFactor,\n      blendDst: ZeroFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: DstAlphaFactor,\n      blendDstAlpha: ZeroFactor,\n      blendEquationAlpha: AddEquation\n    });\n    _this.fsQuad = new FullScreenQuad(null);\n    _this.originalClearColor = new Color();\n    return _this;\n  }\n  _createClass(SSAOPass, [{\n    key: \"dispose\",\n    value: function dispose() {\n      // dispose render targets\n      this.beautyRenderTarget.dispose();\n      this.normalRenderTarget.dispose();\n      this.ssaoRenderTarget.dispose();\n      this.blurRenderTarget.dispose(); // dispose materials\n\n      this.normalMaterial.dispose();\n      this.blurMaterial.dispose();\n      this.copyMaterial.dispose();\n      this.depthRenderMaterial.dispose(); // dipsose full screen quad\n\n      this.fsQuad.dispose();\n    }\n  }, {\n    key: \"render\",\n    value: function render(renderer, writeBuffer\n    /*, readBuffer, deltaTime, maskActive */) {\n      if (renderer.capabilities.isWebGL2 === false) this.noiseTexture.format = LuminanceFormat; // render beauty\n\n      renderer.setRenderTarget(this.beautyRenderTarget);\n      renderer.clear();\n      renderer.render(this.scene, this.camera); // render normals and depth (honor only meshes, points and lines do not contribute to SSAO)\n\n      this.overrideVisibility();\n      this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0);\n      this.restoreVisibility(); // render SSAO\n\n      this.ssaoMaterial.uniforms['kernelRadius'].value = this.kernelRadius;\n      this.ssaoMaterial.uniforms['minDistance'].value = this.minDistance;\n      this.ssaoMaterial.uniforms['maxDistance'].value = this.maxDistance;\n      this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget); // render blur\n\n      this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget); // output result to screen\n\n      switch (this.output) {\n        case SSAOPass.OUTPUT.SSAO:\n          this.copyMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case SSAOPass.OUTPUT.Blur:\n          this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case SSAOPass.OUTPUT.Beauty:\n          this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case SSAOPass.OUTPUT.Depth:\n          this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case SSAOPass.OUTPUT.Normal:\n          this.copyMaterial.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case SSAOPass.OUTPUT.Default:\n          this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n          this.copyMaterial.blending = CustomBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        default:\n          console.warn('THREE.SSAOPass: Unknown output type.');\n      }\n    }\n  }, {\n    key: \"renderPass\",\n    value: function renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n      // save original state\n      renderer.getClearColor(this.originalClearColor);\n      var originalClearAlpha = renderer.getClearAlpha();\n      var originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget); // setup pass state\n\n      renderer.autoClear = false;\n      if (clearColor !== undefined && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0.0);\n        renderer.clear();\n      }\n      this.fsQuad.material = passMaterial;\n      this.fsQuad.render(renderer); // restore original state\n\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n  }, {\n    key: \"renderOverride\",\n    value: function renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n      renderer.getClearColor(this.originalClearColor);\n      var originalClearAlpha = renderer.getClearAlpha();\n      var originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget);\n      renderer.autoClear = false;\n      clearColor = overrideMaterial.clearColor || clearColor;\n      clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n      if (clearColor !== undefined && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0.0);\n        renderer.clear();\n      }\n      this.scene.overrideMaterial = overrideMaterial;\n      renderer.render(this.scene, this.camera);\n      this.scene.overrideMaterial = null; // restore original state\n\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n  }, {\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      this.width = width;\n      this.height = height;\n      this.beautyRenderTarget.setSize(width, height);\n      this.ssaoRenderTarget.setSize(width, height);\n      this.normalRenderTarget.setSize(width, height);\n      this.blurRenderTarget.setSize(width, height);\n      this.ssaoMaterial.uniforms['resolution'].value.set(width, height);\n      this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n      this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n      this.blurMaterial.uniforms['resolution'].value.set(width, height);\n    }\n  }, {\n    key: \"generateSampleKernel\",\n    value: function generateSampleKernel() {\n      var kernelSize = this.kernelSize;\n      var kernel = this.kernel;\n      for (var i = 0; i < kernelSize; i++) {\n        var sample = new Vector3();\n        sample.x = Math.random() * 2 - 1;\n        sample.y = Math.random() * 2 - 1;\n        sample.z = Math.random();\n        sample.normalize();\n        var scale = i / kernelSize;\n        scale = MathUtils.lerp(0.1, 1, scale * scale);\n        sample.multiplyScalar(scale);\n        kernel.push(sample);\n      }\n    }\n  }, {\n    key: \"generateRandomKernelRotations\",\n    value: function generateRandomKernelRotations() {\n      var width = 4,\n        height = 4;\n      if (SimplexNoise === undefined) {\n        console.error('THREE.SSAOPass: The pass relies on SimplexNoise.');\n      }\n      var simplex = new SimplexNoise();\n      var size = width * height;\n      var data = new Float32Array(size);\n      for (var i = 0; i < size; i++) {\n        var x = Math.random() * 2 - 1;\n        var y = Math.random() * 2 - 1;\n        var z = 0;\n        data[i] = simplex.noise3d(x, y, z);\n      }\n      this.noiseTexture = new DataTexture(data, width, height, RedFormat, FloatType);\n      this.noiseTexture.wrapS = RepeatWrapping;\n      this.noiseTexture.wrapT = RepeatWrapping;\n      this.noiseTexture.needsUpdate = true;\n    }\n  }, {\n    key: \"overrideVisibility\",\n    value: function overrideVisibility() {\n      var scene = this.scene;\n      var cache = this._visibilityCache;\n      scene.traverse(function (object) {\n        cache.set(object, object.visible);\n        if (object.isPoints || object.isLine) object.visible = false;\n      });\n    }\n  }, {\n    key: \"restoreVisibility\",\n    value: function restoreVisibility() {\n      var scene = this.scene;\n      var cache = this._visibilityCache;\n      scene.traverse(function (object) {\n        var visible = cache.get(object);\n        object.visible = visible;\n      });\n      cache.clear();\n    }\n  }]);\n  return SSAOPass;\n}(Pass);\nSSAOPass.OUTPUT = {\n  Default: 0,\n  SSAO: 1,\n  Blur: 2,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5\n};\nexport { SSAOPass };","map":{"version":3,"names":["DepthTexture","DepthStencilFormat","UnsignedInt248Type","WebGLRenderTarget","NearestFilter","ShaderMaterial","UniformsUtils","NoBlending","MeshNormalMaterial","DstColorFactor","ZeroFactor","AddEquation","DstAlphaFactor","Color","LuminanceFormat","CustomBlending","Vector3","MathUtils","DataTexture","RedFormat","FloatType","RepeatWrapping","Pass","FullScreenQuad","SimplexNoise","SSAOShader","SSAOBlurShader","SSAODepthShader","CopyShader","SSAOPass","_Pass","_inherits","_super","_createSuper","scene","camera","width","height","_this","_classCallCheck","call","undefined","clear","kernelRadius","kernelSize","kernel","noiseTexture","output","minDistance","maxDistance","_visibilityCache","Map","generateSampleKernel","generateRandomKernelRotations","depthTexture","format","type","beautyRenderTarget","normalRenderTarget","minFilter","magFilter","ssaoRenderTarget","blurRenderTarget","clone","console","error","ssaoMaterial","defines","Object","assign","uniforms","vertexShader","fragmentShader","blending","value","texture","near","far","set","copy","projectionMatrix","projectionMatrixInverse","normalMaterial","blurMaterial","depthRenderMaterial","copyMaterial","transparent","depthTest","depthWrite","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","fsQuad","originalClearColor","_createClass","key","dispose","render","renderer","writeBuffer","capabilities","isWebGL2","setRenderTarget","overrideVisibility","renderOverride","restoreVisibility","renderPass","OUTPUT","SSAO","renderToScreen","Blur","Beauty","Depth","Normal","Default","warn","passMaterial","renderTarget","clearColor","clearAlpha","getClearColor","originalClearAlpha","getClearAlpha","originalAutoClear","autoClear","setClearColor","setClearAlpha","material","overrideMaterial","setSize","i","sample","x","Math","random","y","z","normalize","scale","lerp","multiplyScalar","push","simplex","size","data","Float32Array","noise3d","wrapS","wrapT","needsUpdate","cache","traverse","object","visible","isPoints","isLine","get"],"sources":["/home/samuel/experiment/3d/farm/frontend/node_modules/three-stdlib/postprocessing/SSAOPass.js"],"sourcesContent":["import { DepthTexture, DepthStencilFormat, UnsignedInt248Type, WebGLRenderTarget, NearestFilter, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor, Color, LuminanceFormat, CustomBlending, Vector3, MathUtils, DataTexture, RedFormat, FloatType, RepeatWrapping } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { SimplexNoise } from '../math/SimplexNoise.js';\nimport { SSAOShader, SSAOBlurShader, SSAODepthShader } from '../shaders/SSAOShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\nclass SSAOPass extends Pass {\n  constructor(scene, camera, width, height) {\n    super();\n    this.width = width !== undefined ? width : 512;\n    this.height = height !== undefined ? height : 512;\n    this.clear = true;\n    this.camera = camera;\n    this.scene = scene;\n    this.kernelRadius = 8;\n    this.kernelSize = 32;\n    this.kernel = [];\n    this.noiseTexture = null;\n    this.output = 0;\n    this.minDistance = 0.005;\n    this.maxDistance = 0.1;\n    this._visibilityCache = new Map(); //\n\n    this.generateSampleKernel();\n    this.generateRandomKernelRotations(); // beauty render target\n\n    const depthTexture = new DepthTexture();\n    depthTexture.format = DepthStencilFormat;\n    depthTexture.type = UnsignedInt248Type;\n    this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height); // normal render target with depth buffer\n\n    this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      depthTexture: depthTexture\n    }); // ssao render target\n\n    this.ssaoRenderTarget = new WebGLRenderTarget(this.width, this.height);\n    this.blurRenderTarget = this.ssaoRenderTarget.clone(); // ssao material\n\n    if (SSAOShader === undefined) {\n      console.error('THREE.SSAOPass: The pass relies on SSAOShader.');\n    }\n\n    this.ssaoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOShader.defines),\n      uniforms: UniformsUtils.clone(SSAOShader.uniforms),\n      vertexShader: SSAOShader.vertexShader,\n      fragmentShader: SSAOShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.ssaoMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n    this.ssaoMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture;\n    this.ssaoMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture;\n    this.ssaoMaterial.uniforms['tNoise'].value = this.noiseTexture;\n    this.ssaoMaterial.uniforms['kernel'].value = this.kernel;\n    this.ssaoMaterial.uniforms['cameraNear'].value = this.camera.near;\n    this.ssaoMaterial.uniforms['cameraFar'].value = this.camera.far;\n    this.ssaoMaterial.uniforms['resolution'].value.set(this.width, this.height);\n    this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n    this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse); // normal material\n\n    this.normalMaterial = new MeshNormalMaterial();\n    this.normalMaterial.blending = NoBlending; // blur material\n\n    this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSAOBlurShader.uniforms),\n      vertexShader: SSAOBlurShader.vertexShader,\n      fragmentShader: SSAOBlurShader.fragmentShader\n    });\n    this.blurMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\n    this.blurMaterial.uniforms['resolution'].value.set(this.width, this.height); // material for rendering the depth\n\n    this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAODepthShader.defines),\n      uniforms: UniformsUtils.clone(SSAODepthShader.uniforms),\n      vertexShader: SSAODepthShader.vertexShader,\n      fragmentShader: SSAODepthShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.depthRenderMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture;\n    this.depthRenderMaterial.uniforms['cameraNear'].value = this.camera.near;\n    this.depthRenderMaterial.uniforms['cameraFar'].value = this.camera.far; // material for rendering the content of a render target\n\n    this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: DstColorFactor,\n      blendDst: ZeroFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: DstAlphaFactor,\n      blendDstAlpha: ZeroFactor,\n      blendEquationAlpha: AddEquation\n    });\n    this.fsQuad = new FullScreenQuad(null);\n    this.originalClearColor = new Color();\n  }\n\n  dispose() {\n    // dispose render targets\n    this.beautyRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.ssaoRenderTarget.dispose();\n    this.blurRenderTarget.dispose(); // dispose materials\n\n    this.normalMaterial.dispose();\n    this.blurMaterial.dispose();\n    this.copyMaterial.dispose();\n    this.depthRenderMaterial.dispose(); // dipsose full screen quad\n\n    this.fsQuad.dispose();\n  }\n\n  render(renderer, writeBuffer\n  /*, readBuffer, deltaTime, maskActive */\n  ) {\n    if (renderer.capabilities.isWebGL2 === false) this.noiseTexture.format = LuminanceFormat; // render beauty\n\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    renderer.render(this.scene, this.camera); // render normals and depth (honor only meshes, points and lines do not contribute to SSAO)\n\n    this.overrideVisibility();\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0);\n    this.restoreVisibility(); // render SSAO\n\n    this.ssaoMaterial.uniforms['kernelRadius'].value = this.kernelRadius;\n    this.ssaoMaterial.uniforms['minDistance'].value = this.minDistance;\n    this.ssaoMaterial.uniforms['maxDistance'].value = this.maxDistance;\n    this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget); // render blur\n\n    this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget); // output result to screen\n\n    switch (this.output) {\n      case SSAOPass.OUTPUT.SSAO:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Blur:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Default:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = CustomBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      default:\n        console.warn('THREE.SSAOPass: Unknown output type.');\n    }\n  }\n\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget); // setup pass state\n\n    renderer.autoClear = false;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer); // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null; // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n\n  setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.beautyRenderTarget.setSize(width, height);\n    this.ssaoRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.blurRenderTarget.setSize(width, height);\n    this.ssaoMaterial.uniforms['resolution'].value.set(width, height);\n    this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n    this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n    this.blurMaterial.uniforms['resolution'].value.set(width, height);\n  }\n\n  generateSampleKernel() {\n    const kernelSize = this.kernelSize;\n    const kernel = this.kernel;\n\n    for (let i = 0; i < kernelSize; i++) {\n      const sample = new Vector3();\n      sample.x = Math.random() * 2 - 1;\n      sample.y = Math.random() * 2 - 1;\n      sample.z = Math.random();\n      sample.normalize();\n      let scale = i / kernelSize;\n      scale = MathUtils.lerp(0.1, 1, scale * scale);\n      sample.multiplyScalar(scale);\n      kernel.push(sample);\n    }\n  }\n\n  generateRandomKernelRotations() {\n    const width = 4,\n          height = 4;\n\n    if (SimplexNoise === undefined) {\n      console.error('THREE.SSAOPass: The pass relies on SimplexNoise.');\n    }\n\n    const simplex = new SimplexNoise();\n    const size = width * height;\n    const data = new Float32Array(size);\n\n    for (let i = 0; i < size; i++) {\n      const x = Math.random() * 2 - 1;\n      const y = Math.random() * 2 - 1;\n      const z = 0;\n      data[i] = simplex.noise3d(x, y, z);\n    }\n\n    this.noiseTexture = new DataTexture(data, width, height, RedFormat, FloatType);\n    this.noiseTexture.wrapS = RepeatWrapping;\n    this.noiseTexture.wrapT = RepeatWrapping;\n    this.noiseTexture.needsUpdate = true;\n  }\n\n  overrideVisibility() {\n    const scene = this.scene;\n    const cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      cache.set(object, object.visible);\n      if (object.isPoints || object.isLine) object.visible = false;\n    });\n  }\n\n  restoreVisibility() {\n    const scene = this.scene;\n    const cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      const visible = cache.get(object);\n      object.visible = visible;\n    });\n    cache.clear();\n  }\n\n}\n\nSSAOPass.OUTPUT = {\n  Default: 0,\n  SSAO: 1,\n  Blur: 2,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5\n};\n\nexport { SSAOPass };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}