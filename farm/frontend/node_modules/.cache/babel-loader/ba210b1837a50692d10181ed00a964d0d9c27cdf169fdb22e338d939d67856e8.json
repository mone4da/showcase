{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { NodeUpdateType } from './constants.js';\nimport { getNodesKeys } from './NodeUtils.js';\nimport { MathUtils } from 'three';\nvar _nodeId = 0;\nvar Node = /*#__PURE__*/function () {\n  function Node() {\n    var nodeType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    _classCallCheck(this, Node);\n    this.nodeType = nodeType;\n    this.updateType = NodeUpdateType.None;\n    this.uuid = MathUtils.generateUUID();\n    Object.defineProperty(this, 'id', {\n      value: _nodeId++\n    });\n  }\n  _createClass(Node, [{\n    key: \"type\",\n    get: function get() {\n      return this.constructor.name;\n    }\n  }, {\n    key: \"getHash\",\n    value: function getHash() {\n      return this.uuid;\n    }\n  }, {\n    key: \"getUpdateType\",\n    value: function getUpdateType() {\n      return this.updateType;\n    }\n  }, {\n    key: \"getNodeType\",\n    value: function getNodeType() {\n      return this.nodeType;\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      console.warn('Abstract function.');\n    }\n  }, {\n    key: \"generate\",\n    value: function generate() {\n      console.warn('Abstract function.');\n    }\n  }, {\n    key: \"analyze\",\n    value: function analyze(builder) {\n      var hash = this.getHash(builder);\n      var sharedNode = builder.getNodeFromHash(hash);\n      if (sharedNode !== undefined && this !== sharedNode) {\n        return sharedNode.analyze(builder);\n      }\n      var nodeData = builder.getDataFromNode(this);\n      nodeData.dependenciesCount = nodeData.dependenciesCount === undefined ? 1 : nodeData.dependenciesCount + 1;\n      var nodeKeys = getNodesKeys(this);\n      var _iterator = _createForOfIteratorHelper(nodeKeys),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var property = _step.value;\n          this[property].analyze(builder);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"build\",\n    value: function build(builder) {\n      var output = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var hash = this.getHash(builder);\n      var sharedNode = builder.getNodeFromHash(hash);\n      if (sharedNode !== undefined && this !== sharedNode) {\n        return sharedNode.build(builder, output);\n      }\n      builder.addNode(this);\n      builder.addStack(this);\n      var nodeData = builder.getDataFromNode(this);\n      var isGenerateOnce = this.generate.length === 1;\n      var snippet = null;\n      if (isGenerateOnce) {\n        var type = this.getNodeType(builder);\n        snippet = nodeData.snippet;\n        if (snippet === undefined) {\n          snippet = this.generate(builder) || '';\n          nodeData.snippet = snippet;\n        }\n        snippet = builder.format(snippet, type, output);\n      } else {\n        snippet = this.generate(builder, output) || '';\n      }\n      builder.removeStack(this);\n      return snippet;\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize(json) {\n      var nodeKeys = getNodesKeys(this);\n      if (nodeKeys.length > 0) {\n        var inputNodes = {};\n        var _iterator2 = _createForOfIteratorHelper(nodeKeys),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var property = _step2.value;\n            inputNodes[property] = this[property].toJSON(json.meta).uuid;\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n        json.inputNodes = inputNodes;\n      }\n    }\n  }, {\n    key: \"deserialize\",\n    value: function deserialize(json) {\n      if (json.inputNodes !== undefined) {\n        var nodes = json.meta.nodes;\n        for (var property in json.inputNodes) {\n          var uuid = json.inputNodes[property];\n          this[property] = nodes[uuid];\n        }\n      }\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON(meta) {\n      var uuid = this.uuid,\n        type = this.type;\n      var isRoot = meta === undefined || typeof meta === 'string';\n      if (isRoot) {\n        meta = {\n          textures: {},\n          images: {},\n          nodes: {}\n        };\n      } // serialize\n\n      var data = meta.nodes[uuid];\n      if (data === undefined) {\n        data = {\n          uuid: uuid,\n          type: type,\n          meta: meta,\n          metadata: {\n            version: 4.5,\n            type: 'Node',\n            generator: 'Node.toJSON'\n          }\n        };\n        meta.nodes[data.uuid] = data;\n        this.serialize(data);\n        delete data.meta;\n      } // TODO: Copied from Object3D.toJSON\n\n      function extractFromCache(cache) {\n        var values = [];\n        for (var key in cache) {\n          var _data = cache[key];\n          delete _data.metadata;\n          values.push(_data);\n        }\n        return values;\n      }\n      if (isRoot) {\n        var textures = extractFromCache(meta.textures);\n        var images = extractFromCache(meta.images);\n        var nodes = extractFromCache(meta.nodes);\n        if (textures.length > 0) data.textures = textures;\n        if (images.length > 0) data.images = images;\n        if (nodes.length > 0) data.nodes = nodes;\n      }\n      return data;\n    }\n  }]);\n  return Node;\n}();\nNode.prototype.isNode = true;\nexport default Node;","map":{"version":3,"names":["NodeUpdateType","getNodesKeys","MathUtils","_nodeId","Node","nodeType","arguments","length","undefined","_classCallCheck","updateType","None","uuid","generateUUID","Object","defineProperty","value","_createClass","key","get","constructor","name","getHash","getUpdateType","getNodeType","update","console","warn","generate","analyze","builder","hash","sharedNode","getNodeFromHash","nodeData","getDataFromNode","dependenciesCount","nodeKeys","_iterator","_createForOfIteratorHelper","_step","s","n","done","property","err","e","f","build","output","addNode","addStack","isGenerateOnce","snippet","type","format","removeStack","serialize","json","inputNodes","_iterator2","_step2","toJSON","meta","deserialize","nodes","isRoot","textures","images","data","metadata","version","generator","extractFromCache","cache","values","push","prototype","isNode"],"sources":["/home/samuel/experiment/3d/farm/frontend/node_modules/three-stdlib/nodes/core/Node.js"],"sourcesContent":["import { NodeUpdateType } from './constants.js';\nimport { getNodesKeys } from './NodeUtils.js';\nimport { MathUtils } from 'three';\n\nlet _nodeId = 0;\n\nclass Node {\n  constructor(nodeType = null) {\n    this.nodeType = nodeType;\n    this.updateType = NodeUpdateType.None;\n    this.uuid = MathUtils.generateUUID();\n    Object.defineProperty(this, 'id', {\n      value: _nodeId++\n    });\n  }\n\n  get type() {\n    return this.constructor.name;\n  }\n\n  getHash() {\n    return this.uuid;\n  }\n\n  getUpdateType() {\n    return this.updateType;\n  }\n\n  getNodeType() {\n    return this.nodeType;\n  }\n\n  update() {\n    console.warn('Abstract function.');\n  }\n\n  generate() {\n    console.warn('Abstract function.');\n  }\n\n  analyze(builder) {\n    const hash = this.getHash(builder);\n    const sharedNode = builder.getNodeFromHash(hash);\n\n    if (sharedNode !== undefined && this !== sharedNode) {\n      return sharedNode.analyze(builder);\n    }\n\n    const nodeData = builder.getDataFromNode(this);\n    nodeData.dependenciesCount = nodeData.dependenciesCount === undefined ? 1 : nodeData.dependenciesCount + 1;\n    const nodeKeys = getNodesKeys(this);\n\n    for (const property of nodeKeys) {\n      this[property].analyze(builder);\n    }\n  }\n\n  build(builder, output = null) {\n    const hash = this.getHash(builder);\n    const sharedNode = builder.getNodeFromHash(hash);\n\n    if (sharedNode !== undefined && this !== sharedNode) {\n      return sharedNode.build(builder, output);\n    }\n\n    builder.addNode(this);\n    builder.addStack(this);\n    const nodeData = builder.getDataFromNode(this);\n    const isGenerateOnce = this.generate.length === 1;\n    let snippet = null;\n\n    if (isGenerateOnce) {\n      const type = this.getNodeType(builder);\n      snippet = nodeData.snippet;\n\n      if (snippet === undefined) {\n        snippet = this.generate(builder) || '';\n        nodeData.snippet = snippet;\n      }\n\n      snippet = builder.format(snippet, type, output);\n    } else {\n      snippet = this.generate(builder, output) || '';\n    }\n\n    builder.removeStack(this);\n    return snippet;\n  }\n\n  serialize(json) {\n    const nodeKeys = getNodesKeys(this);\n\n    if (nodeKeys.length > 0) {\n      const inputNodes = {};\n\n      for (const property of nodeKeys) {\n        inputNodes[property] = this[property].toJSON(json.meta).uuid;\n      }\n\n      json.inputNodes = inputNodes;\n    }\n  }\n\n  deserialize(json) {\n    if (json.inputNodes !== undefined) {\n      const nodes = json.meta.nodes;\n\n      for (const property in json.inputNodes) {\n        const uuid = json.inputNodes[property];\n        this[property] = nodes[uuid];\n      }\n    }\n  }\n\n  toJSON(meta) {\n    const {\n      uuid,\n      type\n    } = this;\n    const isRoot = meta === undefined || typeof meta === 'string';\n\n    if (isRoot) {\n      meta = {\n        textures: {},\n        images: {},\n        nodes: {}\n      };\n    } // serialize\n\n\n    let data = meta.nodes[uuid];\n\n    if (data === undefined) {\n      data = {\n        uuid,\n        type,\n        meta,\n        metadata: {\n          version: 4.5,\n          type: 'Node',\n          generator: 'Node.toJSON'\n        }\n      };\n      meta.nodes[data.uuid] = data;\n      this.serialize(data);\n      delete data.meta;\n    } // TODO: Copied from Object3D.toJSON\n\n\n    function extractFromCache(cache) {\n      const values = [];\n\n      for (const key in cache) {\n        const data = cache[key];\n        delete data.metadata;\n        values.push(data);\n      }\n\n      return values;\n    }\n\n    if (isRoot) {\n      const textures = extractFromCache(meta.textures);\n      const images = extractFromCache(meta.images);\n      const nodes = extractFromCache(meta.nodes);\n      if (textures.length > 0) data.textures = textures;\n      if (images.length > 0) data.images = images;\n      if (nodes.length > 0) data.nodes = nodes;\n    }\n\n    return data;\n  }\n\n}\n\nNode.prototype.isNode = true;\n\nexport default Node;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}