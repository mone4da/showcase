{"ast":null,"code":"import _regeneratorRuntime from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nvar VRButton = /*#__PURE__*/function () {\n  function VRButton() {\n    _classCallCheck(this, VRButton);\n  }\n  _createClass(VRButton, null, [{\n    key: \"createButton\",\n    value: function createButton(renderer) {\n      var sessionInit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var button = document.createElement('button');\n      function /*device*/\n      showEnterVR() {\n        var currentSession = null;\n        function onSessionStarted(_x) {\n          return _onSessionStarted.apply(this, arguments);\n        }\n        function _onSessionStarted() {\n          _onSessionStarted = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(session) {\n            return _regeneratorRuntime().wrap(function _callee$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  session.addEventListener('end', onSessionEnded);\n                  _context.next = 3;\n                  return renderer.xr.setSession(session);\n                case 3:\n                  button.textContent = 'EXIT VR';\n                  currentSession = session;\n                case 5:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _callee);\n          }));\n          return _onSessionStarted.apply(this, arguments);\n        }\n        function /*event*/\n        onSessionEnded() {\n          currentSession.removeEventListener('end', onSessionEnded);\n          button.textContent = 'ENTER VR';\n          currentSession = null;\n        } //\n\n        button.style.display = '';\n        button.style.cursor = 'pointer';\n        button.style.left = 'calc(50% - 50px)';\n        button.style.width = '100px';\n        button.textContent = 'ENTER VR';\n        button.onmouseenter = function () {\n          button.style.opacity = '1.0';\n        };\n        button.onmouseleave = function () {\n          button.style.opacity = '0.5';\n        };\n        button.onclick = function () {\n          if (currentSession === null) {\n            var _xr;\n\n            // WebXR's requestReferenceSpace only works if the corresponding feature\n            // was requested at session creation time. For simplicity, just ask for\n            // the interesting ones as optional features, but be aware that the\n            // requestReferenceSpace call will fail if it turns out to be unavailable.\n            // ('local' is always available for immersive sessions and doesn't need to\n            // be requested separately.)\n            var optionalFeatures = [sessionInit.optionalFeatures, 'local-floor', 'bounded-floor', 'hand-tracking'].flat().filter(Boolean);\n            (_xr = navigator.xr) === null || _xr === void 0 ? void 0 : _xr.requestSession('immersive-vr', _objectSpread(_objectSpread({}, sessionInit), {}, {\n              optionalFeatures: optionalFeatures\n            })).then(onSessionStarted);\n          } else {\n            currentSession.end();\n          }\n        };\n      }\n      function disableButton() {\n        button.style.display = '';\n        button.style.cursor = 'auto';\n        button.style.left = 'calc(50% - 75px)';\n        button.style.width = '150px';\n        button.onmouseenter = null;\n        button.onmouseleave = null;\n        button.onclick = null;\n      }\n      function showWebXRNotFound() {\n        disableButton();\n        button.textContent = 'VR NOT SUPPORTED';\n      }\n      function stylizeElement(element) {\n        element.style.position = 'absolute';\n        element.style.bottom = '20px';\n        element.style.padding = '12px 6px';\n        element.style.border = '1px solid #fff';\n        element.style.borderRadius = '4px';\n        element.style.background = 'rgba(0,0,0,0.1)';\n        element.style.color = '#fff';\n        element.style.font = 'normal 13px sans-serif';\n        element.style.textAlign = 'center';\n        element.style.opacity = '0.5';\n        element.style.outline = 'none';\n        element.style.zIndex = '999';\n      }\n      if ('xr' in navigator) {\n        stylizeElement(button);\n        button.id = 'VRButton';\n        button.style.display = 'none' // Query for session mode\n        ;\n\n        navigator.xr.isSessionSupported('immersive-vr').then(function (supported) {\n          supported ? showEnterVR() : showWebXRNotFound();\n          if (supported && VRButton.xrSessionIsGranted) {\n            button.click();\n          }\n        });\n        return button;\n      } else {\n        var message = document.createElement('a');\n        if (window.isSecureContext === false) {\n          message.href = document.location.href.replace(/^http:/, 'https:');\n          message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n        } else {\n          message.href = 'https://immersiveweb.dev/';\n          message.innerHTML = 'WEBXR NOT AVAILABLE';\n        }\n        message.style.left = 'calc(50% - 90px)';\n        message.style.width = '180px';\n        message.style.textDecoration = 'none';\n        stylizeElement(message);\n        return message;\n      }\n    }\n  }, {\n    key: \"registerSessionGrantedListener\",\n    value: function registerSessionGrantedListener() {\n      if ('xr' in navigator) {\n        navigator.xr.addEventListener('sessiongranted', function () {\n          VRButton.xrSessionIsGranted = true;\n        });\n      }\n    }\n  }]);\n  return VRButton;\n}();\n_defineProperty(VRButton, \"xrSessionIsGranted\", false);\nexport { VRButton };","map":{"version":3,"names":["_defineProperty","VRButton","_classCallCheck","_createClass","key","value","createButton","renderer","sessionInit","arguments","length","undefined","button","document","createElement","showEnterVR","currentSession","onSessionStarted","_x","_onSessionStarted","apply","_asyncToGenerator","_regeneratorRuntime","mark","_callee","session","wrap","_callee$","_context","prev","next","addEventListener","onSessionEnded","xr","setSession","textContent","stop","removeEventListener","style","display","cursor","left","width","onmouseenter","opacity","onmouseleave","onclick","_xr","optionalFeatures","flat","filter","Boolean","navigator","requestSession","_objectSpread","then","end","disableButton","showWebXRNotFound","stylizeElement","element","position","bottom","padding","border","borderRadius","background","color","font","textAlign","outline","zIndex","id","isSessionSupported","supported","xrSessionIsGranted","click","message","window","isSecureContext","href","location","replace","innerHTML","textDecoration","registerSessionGrantedListener"],"sources":["/home/samuel/experiment/3d/farm/frontend/node_modules/three-stdlib/webxr/VRButton.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\n\nclass VRButton {\n  static createButton(renderer, sessionInit = {}) {\n    const button = document.createElement('button');\n\n    function\n      /*device*/\n    showEnterVR() {\n      let currentSession = null;\n\n      async function onSessionStarted(session) {\n        session.addEventListener('end', onSessionEnded);\n        await renderer.xr.setSession(session);\n        button.textContent = 'EXIT VR';\n        currentSession = session;\n      }\n\n      function\n        /*event*/\n      onSessionEnded() {\n        currentSession.removeEventListener('end', onSessionEnded);\n        button.textContent = 'ENTER VR';\n        currentSession = null;\n      } //\n\n\n      button.style.display = '';\n      button.style.cursor = 'pointer';\n      button.style.left = 'calc(50% - 50px)';\n      button.style.width = '100px';\n      button.textContent = 'ENTER VR';\n\n      button.onmouseenter = () => {\n        button.style.opacity = '1.0';\n      };\n\n      button.onmouseleave = () => {\n        button.style.opacity = '0.5';\n      };\n\n      button.onclick = () => {\n        if (currentSession === null) {\n          var _xr;\n\n          // WebXR's requestReferenceSpace only works if the corresponding feature\n          // was requested at session creation time. For simplicity, just ask for\n          // the interesting ones as optional features, but be aware that the\n          // requestReferenceSpace call will fail if it turns out to be unavailable.\n          // ('local' is always available for immersive sessions and doesn't need to\n          // be requested separately.)\n          const optionalFeatures = [sessionInit.optionalFeatures, 'local-floor', 'bounded-floor', 'hand-tracking'].flat().filter(Boolean);\n          (_xr = navigator.xr) === null || _xr === void 0 ? void 0 : _xr.requestSession('immersive-vr', { ...sessionInit,\n            optionalFeatures\n          }).then(onSessionStarted);\n        } else {\n          currentSession.end();\n        }\n      };\n    }\n\n    function disableButton() {\n      button.style.display = '';\n      button.style.cursor = 'auto';\n      button.style.left = 'calc(50% - 75px)';\n      button.style.width = '150px';\n      button.onmouseenter = null;\n      button.onmouseleave = null;\n      button.onclick = null;\n    }\n\n    function showWebXRNotFound() {\n      disableButton();\n      button.textContent = 'VR NOT SUPPORTED';\n    }\n\n    function stylizeElement(element) {\n      element.style.position = 'absolute';\n      element.style.bottom = '20px';\n      element.style.padding = '12px 6px';\n      element.style.border = '1px solid #fff';\n      element.style.borderRadius = '4px';\n      element.style.background = 'rgba(0,0,0,0.1)';\n      element.style.color = '#fff';\n      element.style.font = 'normal 13px sans-serif';\n      element.style.textAlign = 'center';\n      element.style.opacity = '0.5';\n      element.style.outline = 'none';\n      element.style.zIndex = '999';\n    }\n\n    if ('xr' in navigator) {\n      stylizeElement(button);\n      button.id = 'VRButton';\n      button.style.display = 'none' // Query for session mode\n      ;\n      navigator.xr.isSessionSupported('immersive-vr').then(supported => {\n        supported ? showEnterVR() : showWebXRNotFound();\n\n        if (supported && VRButton.xrSessionIsGranted) {\n          button.click();\n        }\n      });\n      return button;\n    } else {\n      const message = document.createElement('a');\n\n      if (window.isSecureContext === false) {\n        message.href = document.location.href.replace(/^http:/, 'https:');\n        message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n      } else {\n        message.href = 'https://immersiveweb.dev/';\n        message.innerHTML = 'WEBXR NOT AVAILABLE';\n      }\n\n      message.style.left = 'calc(50% - 90px)';\n      message.style.width = '180px';\n      message.style.textDecoration = 'none';\n      stylizeElement(message);\n      return message;\n    }\n  }\n\n  static registerSessionGrantedListener() {\n    if ('xr' in navigator) {\n      navigator.xr.addEventListener('sessiongranted', () => {\n        VRButton.xrSessionIsGranted = true;\n      });\n    }\n  }\n\n}\n\n_defineProperty(VRButton, \"xrSessionIsGranted\", false);\n\nexport { VRButton };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}