{"ast":null,"code":"import _classCallCheck from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector2, WebGLRenderTarget, Clock, LinearFilter, RGBAFormat } from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ShaderPass } from './ShaderPass.js';\nimport { MaskPass, ClearMaskPass } from './MaskPass.js';\nvar EffectComposer = /*#__PURE__*/function () {\n  function EffectComposer(renderer, renderTarget) {\n    _classCallCheck(this, EffectComposer);\n    _defineProperty(this, \"renderer\", void 0);\n    _defineProperty(this, \"_pixelRatio\", void 0);\n    _defineProperty(this, \"_width\", void 0);\n    _defineProperty(this, \"_height\", void 0);\n    _defineProperty(this, \"renderTarget1\", void 0);\n    _defineProperty(this, \"renderTarget2\", void 0);\n    _defineProperty(this, \"writeBuffer\", void 0);\n    _defineProperty(this, \"readBuffer\", void 0);\n    _defineProperty(this, \"renderToScreen\", void 0);\n    _defineProperty(this, \"passes\", []);\n    _defineProperty(this, \"copyPass\", void 0);\n    _defineProperty(this, \"clock\", void 0);\n    this.renderer = renderer;\n    if (renderTarget === undefined) {\n      var parameters = {\n        minFilter: LinearFilter,\n        magFilter: LinearFilter,\n        format: RGBAFormat\n      };\n      var size = renderer.getSize(new Vector2());\n      this._pixelRatio = renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = new WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio, parameters);\n      renderTarget.texture.name = 'EffectComposer.rt1';\n    } else {\n      this._pixelRatio = 1;\n      this._width = renderTarget.width;\n      this._height = renderTarget.height;\n    }\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.renderTarget2.texture.name = 'EffectComposer.rt2';\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n    this.renderToScreen = true; // dependencies\n\n    if (CopyShader === undefined) {\n      console.error('THREE.EffectComposer relies on CopyShader');\n    }\n    if (ShaderPass === undefined) {\n      console.error('THREE.EffectComposer relies on ShaderPass');\n    }\n    this.copyPass = new ShaderPass(CopyShader);\n    this.clock = new Clock();\n  }\n  _createClass(EffectComposer, [{\n    key: \"swapBuffers\",\n    value: function swapBuffers() {\n      var tmp = this.readBuffer;\n      this.readBuffer = this.writeBuffer;\n      this.writeBuffer = tmp;\n    }\n  }, {\n    key: \"addPass\",\n    value: function addPass(pass) {\n      this.passes.push(pass);\n      pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n    }\n  }, {\n    key: \"insertPass\",\n    value: function insertPass(pass, index) {\n      this.passes.splice(index, 0, pass);\n      pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n    }\n  }, {\n    key: \"removePass\",\n    value: function removePass(pass) {\n      var index = this.passes.indexOf(pass);\n      if (index !== -1) {\n        this.passes.splice(index, 1);\n      }\n    }\n  }, {\n    key: \"isLastEnabledPass\",\n    value: function isLastEnabledPass(passIndex) {\n      for (var i = passIndex + 1; i < this.passes.length; i++) {\n        if (this.passes[i].enabled) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }, {\n    key: \"render\",\n    value: function render(deltaTime) {\n      // deltaTime value is in seconds\n      if (deltaTime === undefined) {\n        deltaTime = this.clock.getDelta();\n      }\n      var currentRenderTarget = this.renderer.getRenderTarget();\n      var maskActive = false;\n      var il = this.passes.length;\n      for (var i = 0; i < il; i++) {\n        var pass = this.passes[i];\n        if (pass.enabled === false) continue;\n        pass.renderToScreen = this.renderToScreen && this.isLastEnabledPass(i);\n        pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);\n        if (pass.needsSwap) {\n          if (maskActive) {\n            var context = this.renderer.getContext();\n            var stencil = this.renderer.state.buffers.stencil; //context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n            stencil.setFunc(context.NOTEQUAL, 1, 0xffffffff);\n            this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime); //context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\n            stencil.setFunc(context.EQUAL, 1, 0xffffffff);\n          }\n          this.swapBuffers();\n        }\n        if (MaskPass !== undefined) {\n          if (pass instanceof MaskPass) {\n            maskActive = true;\n          } else if (pass instanceof ClearMaskPass) {\n            maskActive = false;\n          }\n        }\n      }\n      this.renderer.setRenderTarget(currentRenderTarget);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(renderTarget) {\n      if (renderTarget === undefined) {\n        var size = this.renderer.getSize(new Vector2());\n        this._pixelRatio = this.renderer.getPixelRatio();\n        this._width = size.width;\n        this._height = size.height;\n        renderTarget = this.renderTarget1.clone();\n        renderTarget.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n      }\n      this.renderTarget1.dispose();\n      this.renderTarget2.dispose();\n      this.renderTarget1 = renderTarget;\n      this.renderTarget2 = renderTarget.clone();\n      this.writeBuffer = this.renderTarget1;\n      this.readBuffer = this.renderTarget2;\n    }\n  }, {\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      this._width = width;\n      this._height = height;\n      var effectiveWidth = this._width * this._pixelRatio;\n      var effectiveHeight = this._height * this._pixelRatio;\n      this.renderTarget1.setSize(effectiveWidth, effectiveHeight);\n      this.renderTarget2.setSize(effectiveWidth, effectiveHeight);\n      for (var i = 0; i < this.passes.length; i++) {\n        this.passes[i].setSize(effectiveWidth, effectiveHeight);\n      }\n    }\n  }, {\n    key: \"setPixelRatio\",\n    value: function setPixelRatio(pixelRatio) {\n      this._pixelRatio = pixelRatio;\n      this.setSize(this._width, this._height);\n    }\n  }]);\n  return EffectComposer;\n}();\nexport { EffectComposer };","map":{"version":3,"names":["_defineProperty","Vector2","WebGLRenderTarget","Clock","LinearFilter","RGBAFormat","CopyShader","ShaderPass","MaskPass","ClearMaskPass","EffectComposer","renderer","renderTarget","_classCallCheck","undefined","parameters","minFilter","magFilter","format","size","getSize","_pixelRatio","getPixelRatio","_width","width","_height","height","texture","name","renderTarget1","renderTarget2","clone","writeBuffer","readBuffer","renderToScreen","console","error","copyPass","clock","_createClass","key","value","swapBuffers","tmp","addPass","pass","passes","push","setSize","insertPass","index","splice","removePass","indexOf","isLastEnabledPass","passIndex","i","length","enabled","render","deltaTime","getDelta","currentRenderTarget","getRenderTarget","maskActive","il","needsSwap","context","getContext","stencil","state","buffers","setFunc","NOTEQUAL","EQUAL","setRenderTarget","reset","dispose","effectiveWidth","effectiveHeight","setPixelRatio","pixelRatio"],"sources":["/home/samuel/experiment/3d/farm/frontend/node_modules/three-stdlib/postprocessing/EffectComposer.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector2, WebGLRenderTarget, Clock, LinearFilter, RGBAFormat } from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ShaderPass } from './ShaderPass.js';\nimport { MaskPass, ClearMaskPass } from './MaskPass.js';\n\nclass EffectComposer {\n  constructor(renderer, renderTarget) {\n    _defineProperty(this, \"renderer\", void 0);\n\n    _defineProperty(this, \"_pixelRatio\", void 0);\n\n    _defineProperty(this, \"_width\", void 0);\n\n    _defineProperty(this, \"_height\", void 0);\n\n    _defineProperty(this, \"renderTarget1\", void 0);\n\n    _defineProperty(this, \"renderTarget2\", void 0);\n\n    _defineProperty(this, \"writeBuffer\", void 0);\n\n    _defineProperty(this, \"readBuffer\", void 0);\n\n    _defineProperty(this, \"renderToScreen\", void 0);\n\n    _defineProperty(this, \"passes\", []);\n\n    _defineProperty(this, \"copyPass\", void 0);\n\n    _defineProperty(this, \"clock\", void 0);\n\n    this.renderer = renderer;\n\n    if (renderTarget === undefined) {\n      const parameters = {\n        minFilter: LinearFilter,\n        magFilter: LinearFilter,\n        format: RGBAFormat\n      };\n      const size = renderer.getSize(new Vector2());\n      this._pixelRatio = renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = new WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio, parameters);\n      renderTarget.texture.name = 'EffectComposer.rt1';\n    } else {\n      this._pixelRatio = 1;\n      this._width = renderTarget.width;\n      this._height = renderTarget.height;\n    }\n\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.renderTarget2.texture.name = 'EffectComposer.rt2';\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n    this.renderToScreen = true; // dependencies\n\n    if (CopyShader === undefined) {\n      console.error('THREE.EffectComposer relies on CopyShader');\n    }\n\n    if (ShaderPass === undefined) {\n      console.error('THREE.EffectComposer relies on ShaderPass');\n    }\n\n    this.copyPass = new ShaderPass(CopyShader);\n    this.clock = new Clock();\n  }\n\n  swapBuffers() {\n    const tmp = this.readBuffer;\n    this.readBuffer = this.writeBuffer;\n    this.writeBuffer = tmp;\n  }\n\n  addPass(pass) {\n    this.passes.push(pass);\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n  }\n\n  insertPass(pass, index) {\n    this.passes.splice(index, 0, pass);\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n  }\n\n  removePass(pass) {\n    const index = this.passes.indexOf(pass);\n\n    if (index !== -1) {\n      this.passes.splice(index, 1);\n    }\n  }\n\n  isLastEnabledPass(passIndex) {\n    for (let i = passIndex + 1; i < this.passes.length; i++) {\n      if (this.passes[i].enabled) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  render(deltaTime) {\n    // deltaTime value is in seconds\n    if (deltaTime === undefined) {\n      deltaTime = this.clock.getDelta();\n    }\n\n    const currentRenderTarget = this.renderer.getRenderTarget();\n    let maskActive = false;\n    const il = this.passes.length;\n\n    for (let i = 0; i < il; i++) {\n      const pass = this.passes[i];\n      if (pass.enabled === false) continue;\n      pass.renderToScreen = this.renderToScreen && this.isLastEnabledPass(i);\n      pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);\n\n      if (pass.needsSwap) {\n        if (maskActive) {\n          const context = this.renderer.getContext();\n          const stencil = this.renderer.state.buffers.stencil; //context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n          stencil.setFunc(context.NOTEQUAL, 1, 0xffffffff);\n          this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime); //context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\n          stencil.setFunc(context.EQUAL, 1, 0xffffffff);\n        }\n\n        this.swapBuffers();\n      }\n\n      if (MaskPass !== undefined) {\n        if (pass instanceof MaskPass) {\n          maskActive = true;\n        } else if (pass instanceof ClearMaskPass) {\n          maskActive = false;\n        }\n      }\n    }\n\n    this.renderer.setRenderTarget(currentRenderTarget);\n  }\n\n  reset(renderTarget) {\n    if (renderTarget === undefined) {\n      const size = this.renderer.getSize(new Vector2());\n      this._pixelRatio = this.renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = this.renderTarget1.clone();\n      renderTarget.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n    }\n\n    this.renderTarget1.dispose();\n    this.renderTarget2.dispose();\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n  }\n\n  setSize(width, height) {\n    this._width = width;\n    this._height = height;\n    const effectiveWidth = this._width * this._pixelRatio;\n    const effectiveHeight = this._height * this._pixelRatio;\n    this.renderTarget1.setSize(effectiveWidth, effectiveHeight);\n    this.renderTarget2.setSize(effectiveWidth, effectiveHeight);\n\n    for (let i = 0; i < this.passes.length; i++) {\n      this.passes[i].setSize(effectiveWidth, effectiveHeight);\n    }\n  }\n\n  setPixelRatio(pixelRatio) {\n    this._pixelRatio = pixelRatio;\n    this.setSize(this._width, this._height);\n  }\n\n}\n\nexport { EffectComposer };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}