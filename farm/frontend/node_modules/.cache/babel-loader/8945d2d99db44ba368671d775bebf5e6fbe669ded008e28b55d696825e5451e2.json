{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { ShaderMaterial, Material } from 'three';\nimport { getNodesKeys } from '../core/NodeUtils.js';\nvar NodeMaterial = /*#__PURE__*/function (_ShaderMaterial) {\n  _inherits(NodeMaterial, _ShaderMaterial);\n  var _super = _createSuper(NodeMaterial);\n  function NodeMaterial() {\n    var _this;\n    _classCallCheck(this, NodeMaterial);\n    _this = _super.call(this);\n    _this.type = _this.constructor.name;\n    _this.lights = true;\n    return _this;\n  }\n  _createClass(NodeMaterial, [{\n    key: \"setDefaultValues\",\n    value: function setDefaultValues(values) {\n      // This approach is to reuse the native refreshUniforms*\n      // and turn available the use of features like transmission and environment in core\n      var value;\n      for (var property in values) {\n        value = values[property];\n        if (this[property] === undefined) {\n          if (value && typeof value.clone === 'function') {\n            this[property] = value.clone();\n          } else {\n            this[property] = value;\n          }\n        }\n      }\n      Object.assign(this.defines, values.defines);\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON(meta) {\n      var isRoot = meta === undefined || typeof meta === 'string';\n      if (isRoot) {\n        meta = {\n          textures: {},\n          images: {},\n          nodes: {}\n        };\n      }\n      var data = Material.prototype.toJSON.call(this, meta);\n      var nodeKeys = getNodesKeys(this);\n      data.inputNodes = {};\n      var _iterator = _createForOfIteratorHelper(nodeKeys),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var name = _step.value;\n          data.inputNodes[name] = this[name].toJSON(meta).uuid;\n        } // TODO: Copied from Object3D.toJSON\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      function extractFromCache(cache) {\n        var values = [];\n        for (var key in cache) {\n          var _data = cache[key];\n          delete _data.metadata;\n          values.push(_data);\n        }\n        return values;\n      }\n      if (isRoot) {\n        var textures = extractFromCache(meta.textures);\n        var images = extractFromCache(meta.images);\n        var nodes = extractFromCache(meta.nodes);\n        if (textures.length > 0) data.textures = textures;\n        if (images.length > 0) data.images = images;\n        if (nodes.length > 0) data.nodes = nodes;\n      }\n      return data;\n    }\n  }]);\n  return NodeMaterial;\n}(ShaderMaterial);\nNodeMaterial.prototype.isNodeMaterial = true;\nexport default NodeMaterial;","map":{"version":3,"names":["ShaderMaterial","Material","getNodesKeys","NodeMaterial","_ShaderMaterial","_inherits","_super","_createSuper","_this","_classCallCheck","call","type","constructor","name","lights","_createClass","key","value","setDefaultValues","values","property","undefined","clone","Object","assign","defines","toJSON","meta","isRoot","textures","images","nodes","data","prototype","nodeKeys","inputNodes","_iterator","_createForOfIteratorHelper","_step","s","n","done","uuid","err","e","f","extractFromCache","cache","metadata","push","length","isNodeMaterial"],"sources":["/home/samuel/experiment/3d/farm/frontend/node_modules/three-stdlib/nodes/materials/NodeMaterial.js"],"sourcesContent":["import { ShaderMaterial, Material } from 'three';\nimport { getNodesKeys } from '../core/NodeUtils.js';\n\nclass NodeMaterial extends ShaderMaterial {\n  constructor() {\n    super();\n    this.type = this.constructor.name;\n    this.lights = true;\n  }\n\n  setDefaultValues(values) {\n    // This approach is to reuse the native refreshUniforms*\n    // and turn available the use of features like transmission and environment in core\n    let value;\n\n    for (const property in values) {\n      value = values[property];\n\n      if (this[property] === undefined) {\n        if (value && typeof value.clone === 'function') {\n          this[property] = value.clone();\n        } else {\n          this[property] = value;\n        }\n      }\n    }\n\n    Object.assign(this.defines, values.defines);\n  }\n\n  toJSON(meta) {\n    const isRoot = meta === undefined || typeof meta === 'string';\n\n    if (isRoot) {\n      meta = {\n        textures: {},\n        images: {},\n        nodes: {}\n      };\n    }\n\n    const data = Material.prototype.toJSON.call(this, meta);\n    const nodeKeys = getNodesKeys(this);\n    data.inputNodes = {};\n\n    for (const name of nodeKeys) {\n      data.inputNodes[name] = this[name].toJSON(meta).uuid;\n    } // TODO: Copied from Object3D.toJSON\n\n\n    function extractFromCache(cache) {\n      const values = [];\n\n      for (const key in cache) {\n        const data = cache[key];\n        delete data.metadata;\n        values.push(data);\n      }\n\n      return values;\n    }\n\n    if (isRoot) {\n      const textures = extractFromCache(meta.textures);\n      const images = extractFromCache(meta.images);\n      const nodes = extractFromCache(meta.nodes);\n      if (textures.length > 0) data.textures = textures;\n      if (images.length > 0) data.images = images;\n      if (nodes.length > 0) data.nodes = nodes;\n    }\n\n    return data;\n  }\n\n}\n\nNodeMaterial.prototype.isNodeMaterial = true;\n\nexport default NodeMaterial;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}