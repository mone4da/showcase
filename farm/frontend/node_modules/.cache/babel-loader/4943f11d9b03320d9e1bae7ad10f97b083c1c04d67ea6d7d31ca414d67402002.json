{"ast":null,"code":"import _createClass from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Vector3, Curve } from 'three';\nimport { ParametricGeometry } from './ParametricGeometry.js';\n\n/**\n * Experimenting of primitive geometry creation using Surface Parametric equations\n */\n\nvar ParametricGeometries = {\n  klein: function klein(v, u, target) {\n    u *= Math.PI;\n    v *= 2 * Math.PI;\n    u = u * 2;\n    var x, z;\n    if (u < Math.PI) {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(u) * Math.cos(v);\n      z = -8 * Math.sin(u) - 2 * (1 - Math.cos(u) / 2) * Math.sin(u) * Math.cos(v);\n    } else {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(v + Math.PI);\n      z = -8 * Math.sin(u);\n    }\n    var y = -2 * (1 - Math.cos(u) / 2) * Math.sin(v);\n    target.set(x, y, z);\n  },\n  plane: function plane(width, height) {\n    return function (u, v, target) {\n      var x = u * width;\n      var y = 0;\n      var z = v * height;\n      target.set(x, y, z);\n    };\n  },\n  mobius: function mobius(u, t, target) {\n    // flat mobius strip\n    // http://www.wolframalpha.com/input/?i=M%C3%B6bius+strip+parametric+equations&lk=1&a=ClashPrefs_*Surface.MoebiusStrip.SurfaceProperty.ParametricEquations-\n    u = u - 0.5;\n    var v = 2 * Math.PI * t;\n    var a = 2;\n    var x = Math.cos(v) * (a + u * Math.cos(v / 2));\n    var y = Math.sin(v) * (a + u * Math.cos(v / 2));\n    var z = u * Math.sin(v / 2);\n    target.set(x, y, z);\n  },\n  mobius3d: function mobius3d(u, t, target) {\n    // volumetric mobius strip\n    u *= Math.PI;\n    t *= 2 * Math.PI;\n    u = u * 2;\n    var phi = u / 2;\n    var major = 2.25,\n      a = 0.125,\n      b = 0.65;\n    var x = a * Math.cos(t) * Math.cos(phi) - b * Math.sin(t) * Math.sin(phi);\n    var z = a * Math.cos(t) * Math.sin(phi) + b * Math.sin(t) * Math.cos(phi);\n    var y = (major + x) * Math.sin(u);\n    x = (major + x) * Math.cos(u);\n    target.set(x, y, z);\n  }\n};\n/*********************************************\n *\n * Parametric Replacement for TubeGeometry\n *\n *********************************************/\n\nParametricGeometries.TubeGeometry = /*#__PURE__*/function (_ParametricGeometry) {\n  _inherits(TubeGeometry, _ParametricGeometry);\n  var _super = _createSuper(TubeGeometry);\n  function TubeGeometry(path) {\n    var _this;\n    var segments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 64;\n    var radius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    var segmentsRadius = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 8;\n    var closed = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    _classCallCheck(this, TubeGeometry);\n    var numpoints = segments + 1;\n    var frames = path.computeFrenetFrames(segments, closed),\n      tangents = frames.tangents,\n      normals = frames.normals,\n      binormals = frames.binormals;\n    var position = new Vector3();\n    function ParametricTube(u, v, target) {\n      v *= 2 * Math.PI;\n      var i = Math.floor(u * (numpoints - 1));\n      path.getPointAt(u, position);\n      var normal = normals[i];\n      var binormal = binormals[i];\n      var cx = -radius * Math.cos(v); // TODO: Hack: Negating it so it faces outside.\n\n      var cy = radius * Math.sin(v);\n      position.x += cx * normal.x + cy * binormal.x;\n      position.y += cx * normal.y + cy * binormal.y;\n      position.z += cx * normal.z + cy * binormal.z;\n      target.copy(position);\n    }\n    _this = _super.call(this, ParametricTube, segments, segmentsRadius); // proxy internals\n\n    _this.tangents = tangents;\n    _this.normals = normals;\n    _this.binormals = binormals;\n    _this.path = path;\n    _this.segments = segments;\n    _this.radius = radius;\n    _this.segmentsRadius = segmentsRadius;\n    _this.closed = closed;\n    return _this;\n  }\n  return _createClass(TubeGeometry);\n}(ParametricGeometry);\n/*********************************************\n *\n * Parametric Replacement for TorusKnotGeometry\n *\n *********************************************/\n\nParametricGeometries.TorusKnotGeometry = /*#__PURE__*/function (_ParametricGeometries) {\n  _inherits(TorusKnotGeometry, _ParametricGeometries);\n  var _super2 = _createSuper(TorusKnotGeometry);\n  function TorusKnotGeometry() {\n    var _this2;\n    var radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 200;\n    var tube = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 40;\n    var segmentsT = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 64;\n    var segmentsR = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 8;\n    var p = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 2;\n    var q = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 3;\n    _classCallCheck(this, TorusKnotGeometry);\n    var TorusKnotCurve = /*#__PURE__*/function (_Curve) {\n      _inherits(TorusKnotCurve, _Curve);\n      var _super3 = _createSuper(TorusKnotCurve);\n      function TorusKnotCurve() {\n        _classCallCheck(this, TorusKnotCurve);\n        return _super3.apply(this, arguments);\n      }\n      _createClass(TorusKnotCurve, [{\n        key: \"getPoint\",\n        value: function getPoint(t) {\n          var optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n          var point = optionalTarget;\n          t *= Math.PI * 2;\n          var r = 0.5;\n          var x = (1 + r * Math.cos(q * t)) * Math.cos(p * t);\n          var y = (1 + r * Math.cos(q * t)) * Math.sin(p * t);\n          var z = r * Math.sin(q * t);\n          return point.set(x, y, z).multiplyScalar(radius);\n        }\n      }]);\n      return TorusKnotCurve;\n    }(Curve);\n    var segments = segmentsT;\n    var radiusSegments = segmentsR;\n    var extrudePath = new TorusKnotCurve();\n    _this2 = _super2.call(this, extrudePath, segments, tube, radiusSegments, true, false);\n    _this2.radius = radius;\n    _this2.tube = tube;\n    _this2.segmentsT = segmentsT;\n    _this2.segmentsR = segmentsR;\n    _this2.p = p;\n    _this2.q = q;\n    return _this2;\n  }\n  return _createClass(TorusKnotGeometry);\n}(ParametricGeometries.TubeGeometry);\n/*********************************************\n *\n * Parametric Replacement for SphereGeometry\n *\n *********************************************/\n\nParametricGeometries.SphereGeometry = /*#__PURE__*/function (_ParametricGeometry2) {\n  _inherits(SphereGeometry, _ParametricGeometry2);\n  var _super4 = _createSuper(SphereGeometry);\n  function SphereGeometry(size, u, v) {\n    _classCallCheck(this, SphereGeometry);\n    function sphere(u, v, target) {\n      u *= Math.PI;\n      v *= 2 * Math.PI;\n      var x = size * Math.sin(u) * Math.cos(v);\n      var y = size * Math.sin(u) * Math.sin(v);\n      var z = size * Math.cos(u);\n      target.set(x, y, z);\n    }\n    return _super4.call(this, sphere, u, v);\n  }\n  return _createClass(SphereGeometry);\n}(ParametricGeometry);\n/*********************************************\n *\n * Parametric Replacement for PlaneGeometry\n *\n *********************************************/\n\nParametricGeometries.PlaneGeometry = /*#__PURE__*/function (_ParametricGeometry3) {\n  _inherits(PlaneGeometry, _ParametricGeometry3);\n  var _super5 = _createSuper(PlaneGeometry);\n  function PlaneGeometry(width, depth, segmentsWidth, segmentsDepth) {\n    _classCallCheck(this, PlaneGeometry);\n    function plane(u, v, target) {\n      var x = u * width;\n      var y = 0;\n      var z = v * depth;\n      target.set(x, y, z);\n    }\n    return _super5.call(this, plane, segmentsWidth, segmentsDepth);\n  }\n  return _createClass(PlaneGeometry);\n}(ParametricGeometry);\nexport { ParametricGeometries };","map":{"version":3,"names":["Vector3","Curve","ParametricGeometry","ParametricGeometries","klein","v","u","target","Math","PI","x","z","cos","sin","y","set","plane","width","height","mobius","t","a","mobius3d","phi","major","b","TubeGeometry","_ParametricGeometry","_inherits","_super","_createSuper","path","_this","segments","arguments","length","undefined","radius","segmentsRadius","closed","_classCallCheck","numpoints","frames","computeFrenetFrames","tangents","normals","binormals","position","ParametricTube","i","floor","getPointAt","normal","binormal","cx","cy","copy","call","_createClass","TorusKnotGeometry","_ParametricGeometries","_super2","_this2","tube","segmentsT","segmentsR","p","q","TorusKnotCurve","_Curve","_super3","apply","key","value","getPoint","optionalTarget","point","r","multiplyScalar","radiusSegments","extrudePath","SphereGeometry","_ParametricGeometry2","_super4","size","sphere","PlaneGeometry","_ParametricGeometry3","_super5","depth","segmentsWidth","segmentsDepth"],"sources":["/home/samuel/experiment/3d/farm/frontend/node_modules/three-stdlib/geometries/ParametricGeometries.js"],"sourcesContent":["import { Vector3, Curve } from 'three';\nimport { ParametricGeometry } from './ParametricGeometry.js';\n\n/**\n * Experimenting of primitive geometry creation using Surface Parametric equations\n */\n\nconst ParametricGeometries = {\n  klein: function (v, u, target) {\n    u *= Math.PI;\n    v *= 2 * Math.PI;\n    u = u * 2;\n    let x, z;\n\n    if (u < Math.PI) {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(u) * Math.cos(v);\n      z = -8 * Math.sin(u) - 2 * (1 - Math.cos(u) / 2) * Math.sin(u) * Math.cos(v);\n    } else {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(v + Math.PI);\n      z = -8 * Math.sin(u);\n    }\n\n    const y = -2 * (1 - Math.cos(u) / 2) * Math.sin(v);\n    target.set(x, y, z);\n  },\n  plane: function (width, height) {\n    return function (u, v, target) {\n      const x = u * width;\n      const y = 0;\n      const z = v * height;\n      target.set(x, y, z);\n    };\n  },\n  mobius: function (u, t, target) {\n    // flat mobius strip\n    // http://www.wolframalpha.com/input/?i=M%C3%B6bius+strip+parametric+equations&lk=1&a=ClashPrefs_*Surface.MoebiusStrip.SurfaceProperty.ParametricEquations-\n    u = u - 0.5;\n    const v = 2 * Math.PI * t;\n    const a = 2;\n    const x = Math.cos(v) * (a + u * Math.cos(v / 2));\n    const y = Math.sin(v) * (a + u * Math.cos(v / 2));\n    const z = u * Math.sin(v / 2);\n    target.set(x, y, z);\n  },\n  mobius3d: function (u, t, target) {\n    // volumetric mobius strip\n    u *= Math.PI;\n    t *= 2 * Math.PI;\n    u = u * 2;\n    const phi = u / 2;\n    const major = 2.25,\n          a = 0.125,\n          b = 0.65;\n    let x = a * Math.cos(t) * Math.cos(phi) - b * Math.sin(t) * Math.sin(phi);\n    const z = a * Math.cos(t) * Math.sin(phi) + b * Math.sin(t) * Math.cos(phi);\n    const y = (major + x) * Math.sin(u);\n    x = (major + x) * Math.cos(u);\n    target.set(x, y, z);\n  }\n};\n/*********************************************\n *\n * Parametric Replacement for TubeGeometry\n *\n *********************************************/\n\nParametricGeometries.TubeGeometry = class TubeGeometry extends ParametricGeometry {\n  constructor(path, segments = 64, radius = 1, segmentsRadius = 8, closed = false) {\n    const numpoints = segments + 1;\n    const frames = path.computeFrenetFrames(segments, closed),\n          tangents = frames.tangents,\n          normals = frames.normals,\n          binormals = frames.binormals;\n    const position = new Vector3();\n\n    function ParametricTube(u, v, target) {\n      v *= 2 * Math.PI;\n      const i = Math.floor(u * (numpoints - 1));\n      path.getPointAt(u, position);\n      const normal = normals[i];\n      const binormal = binormals[i];\n      const cx = -radius * Math.cos(v); // TODO: Hack: Negating it so it faces outside.\n\n      const cy = radius * Math.sin(v);\n      position.x += cx * normal.x + cy * binormal.x;\n      position.y += cx * normal.y + cy * binormal.y;\n      position.z += cx * normal.z + cy * binormal.z;\n      target.copy(position);\n    }\n\n    super(ParametricTube, segments, segmentsRadius); // proxy internals\n\n    this.tangents = tangents;\n    this.normals = normals;\n    this.binormals = binormals;\n    this.path = path;\n    this.segments = segments;\n    this.radius = radius;\n    this.segmentsRadius = segmentsRadius;\n    this.closed = closed;\n  }\n\n};\n/*********************************************\n *\n * Parametric Replacement for TorusKnotGeometry\n *\n *********************************************/\n\nParametricGeometries.TorusKnotGeometry = class TorusKnotGeometry extends ParametricGeometries.TubeGeometry {\n  constructor(radius = 200, tube = 40, segmentsT = 64, segmentsR = 8, p = 2, q = 3) {\n    class TorusKnotCurve extends Curve {\n      getPoint(t, optionalTarget = new Vector3()) {\n        const point = optionalTarget;\n        t *= Math.PI * 2;\n        const r = 0.5;\n        const x = (1 + r * Math.cos(q * t)) * Math.cos(p * t);\n        const y = (1 + r * Math.cos(q * t)) * Math.sin(p * t);\n        const z = r * Math.sin(q * t);\n        return point.set(x, y, z).multiplyScalar(radius);\n      }\n\n    }\n\n    const segments = segmentsT;\n    const radiusSegments = segmentsR;\n    const extrudePath = new TorusKnotCurve();\n    super(extrudePath, segments, tube, radiusSegments, true, false);\n    this.radius = radius;\n    this.tube = tube;\n    this.segmentsT = segmentsT;\n    this.segmentsR = segmentsR;\n    this.p = p;\n    this.q = q;\n  }\n\n};\n/*********************************************\n *\n * Parametric Replacement for SphereGeometry\n *\n *********************************************/\n\nParametricGeometries.SphereGeometry = class SphereGeometry extends ParametricGeometry {\n  constructor(size, u, v) {\n    function sphere(u, v, target) {\n      u *= Math.PI;\n      v *= 2 * Math.PI;\n      const x = size * Math.sin(u) * Math.cos(v);\n      const y = size * Math.sin(u) * Math.sin(v);\n      const z = size * Math.cos(u);\n      target.set(x, y, z);\n    }\n\n    super(sphere, u, v);\n  }\n\n};\n/*********************************************\n *\n * Parametric Replacement for PlaneGeometry\n *\n *********************************************/\n\nParametricGeometries.PlaneGeometry = class PlaneGeometry extends ParametricGeometry {\n  constructor(width, depth, segmentsWidth, segmentsDepth) {\n    function plane(u, v, target) {\n      const x = u * width;\n      const y = 0;\n      const z = v * depth;\n      target.set(x, y, z);\n    }\n\n    super(plane, segmentsWidth, segmentsDepth);\n  }\n\n};\n\nexport { ParametricGeometries };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}