import { forwardRef, createElement, useContext, useEffect, createContext, useState, useRef, Fragment } from 'react';
import styled from 'styled-components';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
}

var Context = createContext(null);
var ContextProvider = forwardRef(function (_a, ref) {
    var children = _a.children;
    if (ref === void 0) { ref = null; }
    var _b = useState({
        x: 0,
        y: 0,
        width: 0,
        height: 0,
        maxWidth: 500,
        maxHeight: 500,
        offsetRight: 0,
        offsetBottom: 0,
        offsetTop: 0,
        offsetLeft: 0,
        left: 0,
        right: 0
    }), positions = _b[0], setPositions = _b[1];
    var _c = useState({ x: 0, y: 0 }), offsets = _c[0], setOffsets = _c[1];
    var _d = useState(false), movableActive = _d[0], setMovableActive = _d[1];
    var _e = useState(false), resizbleActive = _e[0], setResizbleActive = _e[1];
    var movableRef = ref || useRef(null);
    return (createElement(Context.Provider, { value: {
            positions: positions,
            setPositions: setPositions,
            offsets: offsets,
            setOffsets: setOffsets,
            movableActive: movableActive,
            setMovableActive: setMovableActive,
            resizbleActive: resizbleActive,
            setResizbleActive: setResizbleActive,
            movableRef: movableRef
        } }, children));
});

var getNameFromClassList = function (classList) {
    var clArrayLength = classList.length;
    return classList[clArrayLength - 1];
};
var getPropertyStyleValueByProp = function (element, prop) {
    return parseFloat(getComputedStyle(element)[prop]);
};
var calcElemInnerBox = function (element) {
    var padding = getPropertyStyleValueByProp(element, 'paddingLeft') +
        getPropertyStyleValueByProp(element, 'paddingRight');
    var borderWidth = getPropertyStyleValueByProp(element, 'borderWidth');
    return borderWidth - padding;
};
var getResizableOffsets = function (resizble, parent) {
    return {
        offsetRight: getPropertyStyleValueByProp(resizble, 'right') - getPropertyStyleValueByProp(parent, 'right'),
        offsetTop: resizble.offsetTop,
        offsetLeft: resizble.offsetLeft,
        offsetBottom: getPropertyStyleValueByProp(resizble, 'bottom') - getPropertyStyleValueByProp(parent, 'bottom')
    };
};

var MovableStyled = styled.div.attrs(function (props) { return ({
    style: __assign({}, props.style, { width: props.width + "px", height: props.height + "px", left: props.x + "px", top: props.y + "px", maxWidth: props.width + "px", border: "" + (!props.hideBorder && "1px solid " + props.borderColor) })
}); })(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n\tposition: absolute;\n\tbox-sizing: border-box;\n\tbackground-size: 35.33333% 35.33333%;\n\tbackground-position: -4% -5%;\n\tbackground-image: ", ";\n\t\tcursor: ", ";\n"], ["\n\tposition: absolute;\n\tbox-sizing: border-box;\n\tbackground-size: 35.33333% 35.33333%;\n\tbackground-position: -4% -5%;\n\tbackground-image: ",
    ";\n\t\tcursor: ", ";\n"])), function (props) { return props.gridBackground && props.movableActive &&
    "linear-gradient(to right, " + props.borderColor + " 1px, transparent 1px),\n    linear-gradient(to bottom, " + props.borderColor + " 1px, transparent 1px)"; }, function (props) { return props.movableActive && "move"; });
var ResizerStyled = styled.div.attrs(function (props) { return ({
    style: {
        background: "" + (props.hideHandlers ? 'transparent' : props.handlersColor)
    }
}); })(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\nwidth: 10px;\nheight: 10px;\nposition: absolute;\n\n\n\t&.top-left {\n\t\tleft: -5px;\n\t\ttop: -5px;\n\t\tcursor: nwse-resize;\n\t}\n\t&.top-right {\n\t\tright: -5px;\n\t\ttop: -5px;\n\t\tcursor: nesw-resize;\n\t}\n\t&.bottom-left {\n\t\tleft: -5px;\n\t\tbottom: -5px;\n\t\tcursor: nesw-resize;\n\t}\n\t&.bottom-right {\n\t\tright: -5px;\n\t\tbottom: -5px;\n\t\tcursor: nwse-resize;\n\t}\n"], ["\nwidth: 10px;\nheight: 10px;\nposition: absolute;\n\n\n\t&.top-left {\n\t\tleft: -5px;\n\t\ttop: -5px;\n\t\tcursor: nwse-resize;\n\t}\n\t&.top-right {\n\t\tright: -5px;\n\t\ttop: -5px;\n\t\tcursor: nesw-resize;\n\t}\n\t&.bottom-left {\n\t\tleft: -5px;\n\t\tbottom: -5px;\n\t\tcursor: nesw-resize;\n\t}\n\t&.bottom-right {\n\t\tright: -5px;\n\t\tbottom: -5px;\n\t\tcursor: nwse-resize;\n\t}\n"])));
var templateObject_1, templateObject_2;

var Movable = function (_a) {
    var useParentBounds = _a.useParentBounds, children = _a.children, hideBorder = _a.hideBorder, _b = _a.borderColor, borderColor = _b === void 0 ? "#000" : _b, initialWidth = _a.initialWidth, initialHeight = _a.initialHeight, initialX = _a.initialX, initialY = _a.initialY, _c = _a.onMouseUp, onMouseUp = _c === void 0 ? function () { } : _c, _d = _a.onDrag, onDrag = _d === void 0 ? function () { } : _d, _e = _a.gridBackground, gridBackground = _e === void 0 ? false : _e, _f = _a.className, className = _f === void 0 ? "" : _f, style = _a.style;
    var _g = useContext(Context), positions = _g.positions, setPositions = _g.setPositions, offsets = _g.offsets, setOffsets = _g.setOffsets, setMovableActive = _g.setMovableActive, movableActive = _g.movableActive, resizbleActive = _g.resizbleActive, movableRef = _g.movableRef;
    useEffect(function () {
        var movableEl = movableRef.current;
        var _a = getResizableOffsets(movableEl, movableEl.parentNode), offsetTop = _a.offsetTop, offsetBottom = _a.offsetBottom, offsetLeft = _a.offsetLeft, offsetRight = _a.offsetRight;
        onDrag(null, __assign({}, positions, { offsetTop: offsetTop,
            offsetBottom: offsetBottom,
            offsetLeft: offsetLeft,
            offsetRight: offsetRight }));
    }, [positions]);
    useEffect(function () {
        setMovableActive(true);
        setOffsets({
            x: initialX,
            y: initialY
        });
        setPositions(__assign({}, positions, { width: initialWidth, height: initialHeight, x: initialX, y: initialY }));
        setMovableActive(false);
    }, [initialY, initialWidth, initialX, initialHeight]);
    var getMovableParentBounds = function (_a) {
        var newX = _a.newX, newY = _a.newY;
        var rect = movableRef.current.getBoundingClientRect();
        var movableEl = movableRef.current;
        var movableParent = movableEl.parentNode.getBoundingClientRect();
        var xPosition = newX, yPosition = newY;
        var parentInnerBoxSpacing = calcElemInnerBox(movableEl.parentNode);
        var maxParentleft = movableParent.left - rect.left;
        var maxParentRight = movableParent.right -
            movableParent.left -
            rect.width -
            parentInnerBoxSpacing;
        var maxParentTop = movableParent.top - rect.top - parentInnerBoxSpacing;
        var maxParentBottom = movableParent.bottom -
            movableParent.top -
            rect.height -
            parentInnerBoxSpacing;
        if (newX < maxParentleft) {
            xPosition = 0;
        }
        if (newX > maxParentRight) {
            xPosition = maxParentRight;
        }
        if (newY < maxParentTop) {
            yPosition = 0;
        }
        if (newY > maxParentBottom) {
            yPosition = maxParentBottom;
        }
        return { xPosition: xPosition, yPosition: yPosition };
    };
    var onMovableTouchStart = function (e) {
        var event = e.touches[0];
        var newX, newY, prevX = 0, prevY = 0;
        prevX = event.clientX - offsets.x;
        prevY = event.clientY - offsets.y;
        var onMovableTouchMove = function (e) {
            var event = e.touches[0];
            newX = event.clientX - prevX;
            newY = event.clientY - prevY;
            var movableEl = movableRef.current;
            var _a = getResizableOffsets(movableEl, movableEl.parentNode), offsetTop = _a.offsetTop, offsetBottom = _a.offsetBottom, offsetLeft = _a.offsetLeft, offsetRight = _a.offsetRight;
            if (useParentBounds) {
                var _b = getMovableParentBounds({
                    newX: newX,
                    newY: newY
                }), xPosition = _b.xPosition, yPosition = _b.yPosition;
                (newX = xPosition), (newY = yPosition);
            }
            setPositions(__assign({}, positions, { x: newX, y: newY, offsetTop: offsetTop,
                offsetBottom: offsetBottom,
                offsetLeft: offsetLeft,
                offsetRight: offsetRight, right: getPropertyStyleValueByProp(movableEl, "right"), left: getPropertyStyleValueByProp(movableEl, "left") }));
            setOffsets({
                x: newX,
                y: newY
            });
        };
        var onMovableTouchEnd = function () {
            setMovableActive(false);
            document.removeEventListener("touchmove", onMovableTouchMove);
            document.removeEventListener("touchend", onMovableTouchEnd);
        };
        document.addEventListener("touchmove", onMovableTouchMove);
        document.addEventListener("touchend", onMovableTouchEnd);
    };
    var onMovableMouseDown = function (e) {
        if (resizbleActive)
            return;
        setMovableActive(true);
        e.preventDefault();
        var newX, newY, prevX = 0, prevY = 0;
        prevX = e.clientX - offsets.x;
        prevY = e.clientY - offsets.y;
        var onMovableMouseMove = function (e) {
            newX = e.clientX - prevX;
            newY = e.clientY - prevY;
            var movableEl = movableRef.current;
            var _a = getResizableOffsets(movableEl, movableEl.parentNode), offsetTop = _a.offsetTop, offsetBottom = _a.offsetBottom, offsetLeft = _a.offsetLeft, offsetRight = _a.offsetRight;
            if (useParentBounds) {
                var _b = getMovableParentBounds({
                    newX: newX,
                    newY: newY
                }), xPosition = _b.xPosition, yPosition = _b.yPosition;
                (newX = xPosition), (newY = yPosition);
            }
            setPositions(__assign({}, positions, { x: newX, y: newY, offsetTop: offsetTop,
                offsetBottom: offsetBottom,
                offsetLeft: offsetLeft,
                offsetRight: offsetRight, right: getPropertyStyleValueByProp(movableEl, "right"), left: getPropertyStyleValueByProp(movableEl, "left") }));
            setOffsets({
                x: newX,
                y: newY
            });
        };
        var onMovableMouseUp = function (e) {
            onMouseUp(e);
            document.removeEventListener("mousemove", onMovableMouseMove);
            document.removeEventListener("mouseup", onMovableMouseUp);
            prevX = newX;
            prevY = newY;
            setMovableActive(false);
        };
        document.addEventListener("mousemove", onMovableMouseMove);
        document.addEventListener("mouseup", onMovableMouseUp);
    };
    return (createElement(MovableStyled, { ref: movableRef, onMouseDown: onMovableMouseDown, onTouchStart: onMovableTouchStart, width: positions.width, height: positions.height, x: positions.x, y: positions.y, maxWidth: positions.maxWidth, maxHeight: positions.maxHeight, hideBorder: hideBorder, borderColor: borderColor, gridBackground: gridBackground, className: className, style: style, movableActive: movableActive }, children));
};

var reizersMap = [
    { className: 'top-left' },
    { className: 'top-right' },
    { className: 'bottom-right' },
    { className: 'bottom-left' }
];

var calcXPositionByMaxLeft = function (_a) {
    var prevLeft = _a.prevLeft, prevWidth = _a.prevWidth, minWidth = _a.minWidth, x = _a.x;
    var maxLeft = prevLeft + prevWidth - minWidth;
    return x < maxLeft ? x : maxLeft;
};
var calcYPositionByMaxBottom = function (_a) {
    var maxBottom = _a.maxBottom, y = _a.y;
    return y < maxBottom ? y : maxBottom;
};
var calcResizablePositionByClass = function (_a) {
    var className = _a.className, pageX = _a.pageX, pageY = _a.pageY, prevX = _a.prevX, prevY = _a.prevY, prevTop = _a.prevTop, prevWidth = _a.prevWidth, prevHeight = _a.prevHeight, prevLeft = _a.prevLeft, minWidth = _a.minWidth, maxBottom = _a.maxBottom;
    var positionClasses = {
        'bottom-right': {
            width: prevWidth + (pageX - prevX),
            height: prevHeight + (pageY - prevY)
        },
        'bottom-left': {
            width: prevWidth - (pageX - prevX),
            x: calcXPositionByMaxLeft({ prevLeft: prevLeft, prevWidth: prevWidth, minWidth: minWidth, x: prevLeft + (pageX - prevX) }),
            height: prevHeight + (pageY - prevY), maxBottom: maxBottom,
        },
        'top-right': {
            width: prevWidth + (pageX - prevX),
            height: prevHeight - (pageY - prevY),
            y: calcYPositionByMaxBottom({ y: prevTop + (pageY - prevY), maxBottom: maxBottom }),
        },
        'top-left': {
            width: prevWidth - (pageX - prevX),
            height: prevHeight - (pageY - prevY),
            y: calcYPositionByMaxBottom({ y: prevTop + (pageY - prevY), maxBottom: maxBottom }),
            x: calcXPositionByMaxLeft({ prevLeft: prevLeft, prevWidth: prevWidth, minWidth: minWidth, x: prevLeft + (pageX - prevX) }),
        },
    };
    return positionClasses[className];
};
var getMaxPositionByParent = function (_a) {
    var className = _a.className, height = _a.height, maxParentBottom = _a.maxParentBottom, maxRight = _a.maxRight, width = _a.width, x = _a.x, y = _a.y, maxWidth = _a.maxWidth, maxHeight = _a.maxHeight;
    var positionClasses = {
        'bottom-right': {
            height: height > maxParentBottom ? maxParentBottom : height,
            width: width > maxRight ? maxRight : width,
            x: x,
            y: y
        },
        'bottom-left': {
            height: height > maxParentBottom ? maxParentBottom : height,
            x: x < 0 ? 0 : x,
            width: x < 0 ? maxWidth : width,
            y: y
        },
        'top-right': {
            width: width > maxRight ? maxRight : width,
            y: y < 0 ? 0 : y,
            height: y < 0 ? maxHeight : height,
            x: x
        },
        'top-left': {
            x: x < 0 ? 0 : x,
            width: x < 0 ? maxWidth : width,
            y: y < 0 ? 0 : y,
            height: y < 0 ? maxHeight : height,
        }
    };
    return positionClasses[className];
};

var Resizble = function (_a) {
    var useParentBounds = _a.useParentBounds, children = _a.children, hideHandlers = _a.hideHandlers, _b = _a.handlersColor, handlersColor = _b === void 0 ? '#000' : _b;
    var _c = useContext(Context), positions = _c.positions, setPositions = _c.setPositions, setOffsets = _c.setOffsets, movableActive = _c.movableActive, setResizbleActive = _c.setResizbleActive, movableRef = _c.movableRef;
    var reizablePropertiesMap = [
        { name: 'prevRight', property: 'right' },
        { name: 'prevTop', property: 'top' },
        { name: 'prevBottom', property: 'bottom' },
        { name: 'prevLeft', property: 'left' },
        { name: 'prevWidth', property: 'width' },
        { name: 'prevHeight', property: 'height' },
        { name: 'minWidth', property: 'min-width' },
        { name: 'maxRight', property: 'right' }
    ];
    var getPrevReizableStyle = function (element) {
        return reizablePropertiesMap.map(function (prop) {
            return getPropertyStyleValueByProp(element, prop.property);
        });
    };
    var getResizableMaxHeight = function (position) {
        var resizerEl = movableRef.current;
        var rect = resizerEl.getBoundingClientRect();
        var movableParent = resizerEl.parentNode.getBoundingClientRect();
        var prevHeight = parseFloat(getComputedStyle(resizerEl, null).getPropertyValue('height').replace('px', ''));
        var maxHeight;
        switch (position) {
            case 'top-right':
            case 'top-left': {
                maxHeight = resizerEl.offsetTop + prevHeight;
                break;
            }
            case 'bottom-right':
            case 'bottom-left': {
                maxHeight = movableParent.height - (resizerEl.parentNode.offsetTop + rect.height);
                break;
            }
        }
        return maxHeight;
    };
    var getResizableMaxRight = function () {
        var resizerEl = movableRef.current;
        var childLeft = parseFloat(getComputedStyle(resizerEl, null).getPropertyValue('left').replace('px', ''));
        var parent = movableRef.current.parentNode;
        var width = parseFloat(getComputedStyle(parent, null).getPropertyValue('width').replace('px', ''));
        var maxRight = width - childLeft;
        return maxRight;
    };
    var prevX = 0;
    var prevY = 0;
    var prevRight = 0;
    var prevWidth = 0;
    var prevHeight = 0;
    var prevLeft = 0;
    var prevTop = 0;
    var prevBottom = 0;
    var minWidth = 0;
    var onResizerTouchStart = function (e) {
        var _a;
        if (movableActive)
            return false;
        e.stopPropagation();
        var activeResizer = e.target;
        var resizerEl = movableRef.current;
        var event = e.touches[0];
        prevX = event.pageX;
        prevY = event.pageY;
        _a = getPrevReizableStyle(resizerEl), prevRight = _a[0], prevTop = _a[1], prevBottom = _a[2], prevLeft = _a[3], prevWidth = _a[4], prevHeight = _a[5], minWidth = _a[6];
        var maxRight = getResizableMaxRight();
        var maxWidth = prevWidth + resizerEl.offsetLeft;
        var onResizableTouchEnd = function () {
            window.removeEventListener('touchmove', onResizerTouchMove);
            setResizbleActive(false);
        };
        var onResizerTouchMove = function (e) {
            var event = e.touches[0];
            var resizerEl = movableRef.current;
            var pageY = event.pageY, pageX = event.pageX;
            var activeResizerClassName = getNameFromClassList(activeResizer.classList);
            var maxParentBottom = getPropertyStyleValueByProp(resizerEl.parentNode, 'height') - (resizerEl.offsetTop);
            var maxBottom = prevHeight + prevTop - minWidth;
            var _a = calcResizablePositionByClass({
                className: activeResizerClassName,
                pageX: pageX, pageY: pageY, prevX: prevX, prevY: prevY,
                prevTop: prevTop, prevWidth: prevWidth, prevHeight: prevHeight, prevLeft: prevLeft,
                minWidth: minWidth, maxBottom: maxBottom, x: positions.x, y: positions.y
            }), width = _a.width, height = _a.height, _b = _a.x, x = _b === void 0 ? positions.x : _b, _c = _a.y, y = _c === void 0 ? positions.y : _c;
            if (useParentBounds) {
                var maxHeight = getResizableMaxHeight(activeResizerClassName);
                var parentBounds = getMaxPositionByParent({ className: activeResizerClassName,
                    height: height, maxHeight: maxHeight, width: width,
                    maxRight: maxRight, x: x, y: y, maxWidth: maxWidth, maxParentBottom: maxParentBottom });
                width = parentBounds.width;
                height = parentBounds.height;
                x = parentBounds.x;
                y = parentBounds.y;
            }
            var _d = getResizableOffsets(resizerEl, resizerEl.parentNode), offsetTop = _d.offsetTop, offsetBottom = _d.offsetBottom, offsetLeft = _d.offsetLeft, offsetRight = _d.offsetRight;
            setPositions(__assign({}, positions, { x: x,
                y: y,
                width: width,
                height: height,
                offsetTop: offsetTop,
                offsetBottom: offsetBottom,
                offsetRight: offsetRight,
                offsetLeft: offsetLeft, right: getPropertyStyleValueByProp(resizerEl, 'right'), left: getPropertyStyleValueByProp(resizerEl, 'left') }));
            setOffsets({
                x: x,
                y: y
            });
        };
        window.addEventListener('touchmove', onResizerTouchMove);
        window.addEventListener('touchend', onResizableTouchEnd);
    };
    var onResizerMouseDown = function (e) {
        var _a;
        if (movableActive)
            return false;
        e.stopPropagation();
        var activeResizer = e.target;
        var resizerEl = movableRef.current;
        prevX = e.pageX;
        prevY = e.pageY;
        _a = getPrevReizableStyle(resizerEl), prevRight = _a[0], prevTop = _a[1], prevBottom = _a[2], prevLeft = _a[3], prevWidth = _a[4], prevHeight = _a[5], minWidth = _a[6];
        var maxRight = getResizableMaxRight();
        var maxWidth = prevWidth + resizerEl.offsetLeft;
        var onResizableMouseUp = function () {
            window.removeEventListener('mousemove', onResizableMouseMove);
            setResizbleActive(false);
        };
        var onResizableMouseMove = function (e) {
            var resizerEl = movableRef.current;
            var pageY = e.pageY, pageX = e.pageX;
            var activeResizerClassName = getNameFromClassList(activeResizer.classList);
            var maxParentBottom = getPropertyStyleValueByProp(resizerEl.parentNode, 'height') - (resizerEl.offsetTop);
            var maxBottom = prevHeight + prevTop - minWidth;
            var _a = calcResizablePositionByClass({
                className: activeResizerClassName,
                pageX: pageX, pageY: pageY, prevX: prevX, prevY: prevY,
                prevTop: prevTop, prevWidth: prevWidth, prevHeight: prevHeight, prevLeft: prevLeft,
                minWidth: minWidth, maxBottom: maxBottom, x: positions.x, y: positions.y
            }), width = _a.width, height = _a.height, _b = _a.x, x = _b === void 0 ? positions.x : _b, _c = _a.y, y = _c === void 0 ? positions.y : _c;
            if (useParentBounds) {
                var maxHeight = getResizableMaxHeight(activeResizerClassName);
                var parentBounds = getMaxPositionByParent({ className: activeResizerClassName,
                    height: height, maxHeight: maxHeight, width: width,
                    maxRight: maxRight, x: x, y: y, maxWidth: maxWidth, maxParentBottom: maxParentBottom });
                width = parentBounds.width;
                height = parentBounds.height;
                x = parentBounds.x;
                y = parentBounds.y;
            }
            var _d = getResizableOffsets(resizerEl, resizerEl.parentNode), offsetTop = _d.offsetTop, offsetBottom = _d.offsetBottom, offsetLeft = _d.offsetLeft, offsetRight = _d.offsetRight;
            setPositions(__assign({}, positions, { x: x,
                y: y,
                width: width,
                height: height,
                offsetTop: offsetTop,
                offsetBottom: offsetBottom,
                offsetRight: offsetRight,
                offsetLeft: offsetLeft, right: getPropertyStyleValueByProp(resizerEl, 'right'), left: getPropertyStyleValueByProp(resizerEl, 'left') }));
            setOffsets({
                x: x,
                y: y
            });
        };
        window.addEventListener('mousemove', onResizableMouseMove);
        window.addEventListener('mouseup', onResizableMouseUp);
    };
    return (createElement(Fragment, null,
        reizersMap.map(function (_a) {
            var className = _a.className;
            return (createElement(ResizerStyled, { className: className, handlersColor: handlersColor, onMouseDown: onResizerMouseDown, onTouchStart: onResizerTouchStart, key: className, hideHandlers: hideHandlers }));
        }),
        children));
};

var index = forwardRef(function (props, ref) {
    return (createElement(ContextProvider, { ref: ref },
        createElement(Movable, __assign({}, props),
            createElement(Resizble, __assign({}, props)))));
});
var MovableComponent = forwardRef(function (props, ref) {
    return (createElement(ContextProvider, { ref: ref },
        createElement(Movable, __assign({}, props))));
});

export default index;
export { MovableComponent };
//# sourceMappingURL=index.es.js.map
