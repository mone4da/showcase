{"ast":null,"code":"import _regeneratorRuntime from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { strToU8, zipSync } from 'fflate';\nimport { Mesh, MeshPhysicalMaterial } from 'three';\nvar USDZExporter = /*#__PURE__*/function () {\n  function USDZExporter() {\n    _classCallCheck(this, USDZExporter);\n    _defineProperty(this, \"PRECISION\", 7);\n    _defineProperty(this, \"materials\", void 0);\n    _defineProperty(this, \"textures\", void 0);\n    _defineProperty(this, \"files\", void 0);\n    this.materials = {};\n    this.textures = {};\n    this.files = {};\n  }\n  _createClass(USDZExporter, [{\n    key: \"parse\",\n    value: function () {\n      var _parse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(scene) {\n        var _this = this;\n        var modelFileName, output, _loop, id, offset, filename, file, headerSize, offsetMod64, padLength, padding;\n        return _regeneratorRuntime().wrap(function _callee$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              modelFileName = 'model.usda'; // model file should be first in USDZ archive so we init it here\n              this.files[modelFileName] = null;\n              output = this.buildHeader();\n              scene.traverseVisible(function (object) {\n                if (object instanceof Mesh && object.isMesh && object.material.isMeshStandardMaterial) {\n                  var geometry = object.geometry;\n                  var material = object.material;\n                  var geometryFileName = 'geometries/Geometry_' + geometry.id + '.usd';\n                  if (!(geometryFileName in _this.files)) {\n                    var meshObject = _this.buildMeshObject(geometry);\n                    _this.files[geometryFileName] = _this.buildUSDFileAsString(meshObject);\n                  }\n                  if (!(material.uuid in _this.materials)) {\n                    _this.materials[material.uuid] = material;\n                  }\n                  output += _this.buildXform(object, geometry, material);\n                }\n              });\n              output += this.buildMaterials(this.materials);\n              this.files[modelFileName] = strToU8(output);\n              output = null;\n              _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n                var texture, color, isRGBA, canvas, blob;\n                return _regeneratorRuntime().wrap(function _loop$(_context) {\n                  while (1) switch (_context.prev = _context.next) {\n                    case 0:\n                      texture = _this.textures[id];\n                      color = id.split('_')[1];\n                      isRGBA = texture.format === 1023;\n                      canvas = _this.imageToCanvas(texture.image, color);\n                      _context.next = 6;\n                      return new Promise(function (resolve) {\n                        return canvas === null || canvas === void 0 ? void 0 : canvas.toBlob(resolve, isRGBA ? 'image/png' : 'image/jpeg', 1);\n                      });\n                    case 6:\n                      blob = _context.sent;\n                      if (!blob) {\n                        _context.next = 13;\n                        break;\n                      }\n                      _context.t0 = Uint8Array;\n                      _context.next = 11;\n                      return blob.arrayBuffer();\n                    case 11:\n                      _context.t1 = _context.sent;\n                      _this.files[\"textures/Texture_\".concat(id, \".\").concat(isRGBA ? 'png' : 'jpg')] = new _context.t0(_context.t1);\n                    case 13:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }, _loop);\n              });\n              _context2.t0 = _regeneratorRuntime().keys(this.textures);\n            case 9:\n              if ((_context2.t1 = _context2.t0()).done) {\n                _context2.next = 14;\n                break;\n              }\n              id = _context2.t1.value;\n              return _context2.delegateYield(_loop(), \"t2\", 12);\n            case 12:\n              _context2.next = 9;\n              break;\n            case 14:\n              // 64 byte alignment\n              // https://github.com/101arrowz/fflate/issues/39#issuecomment-777263109\n              offset = 0;\n              for (filename in this.files) {\n                file = this.files[filename];\n                headerSize = 34 + filename.length;\n                offset += headerSize;\n                offsetMod64 = offset & 63;\n                if (offsetMod64 !== 4 && file !== null && file instanceof Uint8Array) {\n                  padLength = 64 - offsetMod64;\n                  padding = new Uint8Array(padLength);\n                  this.files[filename] = [file, {\n                    extra: {\n                      12345: padding\n                    }\n                  }];\n                }\n                if (file && typeof file.length === 'number') {\n                  offset = file.length;\n                }\n              }\n              return _context2.abrupt(\"return\", zipSync(this.files, {\n                level: 0\n              }));\n            case 17:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee, this);\n      }));\n      function parse(_x) {\n        return _parse.apply(this, arguments);\n      }\n      return parse;\n    }()\n  }, {\n    key: \"imageToCanvas\",\n    value: function imageToCanvas(image, color) {\n      if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof OffscreenCanvas !== 'undefined' && image instanceof OffscreenCanvas || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n        var scale = 1024 / Math.max(image.width, image.height);\n        var canvas = document.createElement('canvas');\n        canvas.width = image.width * Math.min(1, scale);\n        canvas.height = image.height * Math.min(1, scale);\n        var context = canvas.getContext('2d');\n        context === null || context === void 0 ? void 0 : context.drawImage(image, 0, 0, canvas.width, canvas.height);\n        if (color !== undefined) {\n          var hex = parseInt(color, 16);\n          var r = (hex >> 16 & 255) / 255;\n          var g = (hex >> 8 & 255) / 255;\n          var b = (hex & 255) / 255;\n          var imagedata = context === null || context === void 0 ? void 0 : context.getImageData(0, 0, canvas.width, canvas.height);\n          if (imagedata) {\n            var data = imagedata === null || imagedata === void 0 ? void 0 : imagedata.data;\n            for (var i = 0; i < data.length; i += 4) {\n              data[i + 0] = data[i + 0] * r;\n              data[i + 1] = data[i + 1] * g;\n              data[i + 2] = data[i + 2] * b;\n            }\n            context === null || context === void 0 ? void 0 : context.putImageData(imagedata, 0, 0);\n          }\n        }\n        return canvas;\n      }\n    }\n  }, {\n    key: \"buildHeader\",\n    value: function buildHeader() {\n      return \"#usda 1.0\\n(\\n    customLayerData = {\\n        string creator = \\\"Three.js USDZExporter\\\"\\n    }\\n    metersPerUnit = 1\\n    upAxis = \\\"Y\\\"\\n)\\n\";\n    }\n  }, {\n    key: \"buildUSDFileAsString\",\n    value: function buildUSDFileAsString(dataToInsert) {\n      var output = this.buildHeader();\n      output += dataToInsert;\n      return strToU8(output);\n    } // Xform\n  }, {\n    key: \"buildXform\",\n    value: function buildXform(object, geometry, material) {\n      var name = 'Object_' + object.id;\n      var transform = this.buildMatrix(object.matrixWorld);\n      if (object.matrixWorld.determinant() < 0) {\n        console.warn('THREE.USDZExporter: USDZ does not support negative scales', object);\n      }\n      return \"def Xform \\\"\".concat(name, \"\\\" (\\n    prepend references = @./geometries/Geometry_\").concat(geometry.id, \".usd@</Geometry>\\n)\\n{\\n    matrix4d xformOp:transform = \").concat(transform, \"\\n    uniform token[] xformOpOrder = [\\\"xformOp:transform\\\"]\\n    rel material:binding = </Materials/Material_\").concat(material.id, \">\\n}\\n\");\n    }\n  }, {\n    key: \"buildMatrix\",\n    value: function buildMatrix(matrix) {\n      var array = matrix.elements;\n      return \"( \".concat(this.buildMatrixRow(array, 0), \", \").concat(this.buildMatrixRow(array, 4), \", \").concat(this.buildMatrixRow(array, 8), \", \").concat(this.buildMatrixRow(array, 12), \" )\");\n    }\n  }, {\n    key: \"buildMatrixRow\",\n    value: function buildMatrixRow(array, offset) {\n      return \"(\".concat(array[offset + 0], \", \").concat(array[offset + 1], \", \").concat(array[offset + 2], \", \").concat(array[offset + 3], \")\");\n    } // Mesh\n  }, {\n    key: \"buildMeshObject\",\n    value: function buildMeshObject(geometry) {\n      var mesh = this.buildMesh(geometry);\n      return \"\\ndef \\\"Geometry\\\"\\n{\\n  \".concat(mesh, \"\\n}\\n\");\n    }\n  }, {\n    key: \"buildMesh\",\n    value: function buildMesh(geometry) {\n      var name = 'Geometry';\n      var attributes = geometry.attributes;\n      var count = attributes.position.count;\n      return \"\\n    def Mesh \\\"\".concat(name, \"\\\"\\n    {\\n        int[] faceVertexCounts = [\").concat(this.buildMeshVertexCount(geometry), \"]\\n        int[] faceVertexIndices = [\").concat(this.buildMeshVertexIndices(geometry), \"]\\n        normal3f[] normals = [\").concat(this.buildVector3Array(attributes.normal, count), \"] (\\n            interpolation = \\\"vertex\\\"\\n        )\\n        point3f[] points = [\").concat(this.buildVector3Array(attributes.position, count), \"]\\n        float2[] primvars:st = [\").concat(this.buildVector2Array(attributes.uv, count), \"] (\\n            interpolation = \\\"vertex\\\"\\n        )\\n        uniform token subdivisionScheme = \\\"none\\\"\\n    }\\n\");\n    }\n  }, {\n    key: \"buildMeshVertexCount\",\n    value: function buildMeshVertexCount(geometry) {\n      var count = geometry.index !== null ? geometry.index.array.length : geometry.attributes.position.count;\n      return Array(count / 3).fill(3).join(', ');\n    }\n  }, {\n    key: \"buildMeshVertexIndices\",\n    value: function buildMeshVertexIndices(geometry) {\n      if (geometry.index !== null) {\n        // @ts-expect-error\n        return geometry.index.array.join(', ');\n      }\n      var array = [];\n      var length = geometry.attributes.position.count;\n      for (var i = 0; i < length; i++) {\n        array.push(i);\n      }\n      return array.join(', ');\n    }\n  }, {\n    key: \"buildVector3Array\",\n    value: function buildVector3Array(attribute, count) {\n      if (attribute === undefined) {\n        console.warn('USDZExporter: Normals missing.');\n        return Array(count).fill('(0, 0, 0)').join(', ');\n      }\n      var array = [];\n      var data = attribute.array;\n      for (var i = 0; i < data.length; i += 3) {\n        array.push(\"(\".concat(data[i + 0].toPrecision(this.PRECISION), \", \").concat(data[i + 1].toPrecision(this.PRECISION), \", \").concat(data[i + 2].toPrecision(this.PRECISION), \")\"));\n      }\n      return array.join(', ');\n    }\n  }, {\n    key: \"buildVector2Array\",\n    value: function buildVector2Array(attribute, count) {\n      if (attribute === undefined) {\n        console.warn('USDZExporter: UVs missing.');\n        return Array(count).fill('(0, 0)').join(', ');\n      }\n      var array = [];\n      var data = attribute.array;\n      for (var i = 0; i < data.length; i += 2) {\n        // @ts-expect-error\n        array.push(\"(\".concat(data[i + 0].toPrecision(this.PRECISION), \", \").concat(1 - data[i + 1].toPrecision(this.PRECISION), \")\"));\n      }\n      return array.join(', ');\n    } // Materials\n  }, {\n    key: \"buildMaterials\",\n    value: function buildMaterials(materials) {\n      var array = [];\n      for (var uuid in materials) {\n        var material = materials[uuid];\n        array.push(this.buildMaterial(material));\n      }\n      return \"def \\\"Materials\\\"\\n{\\n\".concat(array.join(''), \"\\n}\\n\");\n    }\n  }, {\n    key: \"buildMaterial\",\n    value: function buildMaterial(material) {\n      // https://graphics.pixar.com/usd/docs/UsdPreviewSurface-Proposal.html\n      var pad = '            ';\n      var inputs = [];\n      var samplers = [];\n      if (material.map !== null) {\n        inputs.push(\"\".concat(pad, \"color3f inputs:diffuseColor.connect = </Materials/Material_\").concat(material.id, \"/Texture_\").concat(material.map.id, \"_diffuse.outputs:rgb>\"));\n        samplers.push(this.buildTexture(material, material.map, 'diffuse', material.color));\n      } else {\n        inputs.push(\"\".concat(pad, \"color3f inputs:diffuseColor = \").concat(this.buildColor(material.color)));\n      }\n      if (material.emissiveMap !== null) {\n        inputs.push(\"\".concat(pad, \"color3f inputs:emissiveColor.connect = </Materials/Material_\").concat(material.id, \"/Texture_\").concat(material.emissiveMap.id, \"_emissive.outputs:rgb>\"));\n        samplers.push(this.buildTexture(material, material.emissiveMap, 'emissive'));\n      } else if (material.emissive.getHex() > 0) {\n        inputs.push(\"\".concat(pad, \"color3f inputs:emissiveColor = \").concat(this.buildColor(material.emissive)));\n      }\n      if (material.normalMap !== null) {\n        inputs.push(\"\".concat(pad, \"normal3f inputs:normal.connect = </Materials/Material_\").concat(material.id, \"/Texture_\").concat(material.normalMap.id, \"_normal.outputs:rgb>\"));\n        samplers.push(this.buildTexture(material, material.normalMap, 'normal'));\n      }\n      if (material.aoMap !== null) {\n        inputs.push(\"\".concat(pad, \"float inputs:occlusion.connect = </Materials/Material_\").concat(material.id, \"/Texture_\").concat(material.aoMap.id, \"_occlusion.outputs:r>\"));\n        samplers.push(this.buildTexture(material, material.aoMap, 'occlusion'));\n      }\n      if (material.roughnessMap !== null && material.roughness === 1) {\n        inputs.push(\"\".concat(pad, \"float inputs:roughness.connect = </Materials/Material_\").concat(material.id, \"/Texture_\").concat(material.roughnessMap.id, \"_roughness.outputs:g>\"));\n        samplers.push(this.buildTexture(material, material.roughnessMap, 'roughness'));\n      } else {\n        inputs.push(\"\".concat(pad, \"float inputs:roughness = \").concat(material.roughness));\n      }\n      if (material.metalnessMap !== null && material.metalness === 1) {\n        inputs.push(\"\".concat(pad, \"float inputs:metallic.connect = </Materials/Material_\").concat(material.id, \"/Texture_\").concat(material.metalnessMap.id, \"_metallic.outputs:b>\"));\n        samplers.push(this.buildTexture(material, material.metalnessMap, 'metallic'));\n      } else {\n        inputs.push(\"\".concat(pad, \"float inputs:metallic = \").concat(material.metalness));\n      }\n      inputs.push(\"\".concat(pad, \"float inputs:opacity = \").concat(material.opacity));\n      if (material instanceof MeshPhysicalMaterial) {\n        inputs.push(\"\".concat(pad, \"float inputs:clearcoat = \").concat(material.clearcoat));\n        inputs.push(\"\".concat(pad, \"float inputs:clearcoatRoughness = \").concat(material.clearcoatRoughness));\n        inputs.push(\"\".concat(pad, \"float inputs:ior = \").concat(material.ior));\n      }\n      return \"\\n    def Material \\\"Material_\".concat(material.id, \"\\\"\\n    {\\n        def Shader \\\"PreviewSurface\\\"\\n        {\\n            uniform token info:id = \\\"UsdPreviewSurface\\\"\\n\").concat(inputs.join('\\n'), \"\\n            int inputs:useSpecularWorkflow = 0\\n            token outputs:surface\\n        }\\n        token outputs:surface.connect = </Materials/Material_\").concat(material.id, \"/PreviewSurface.outputs:surface>\\n        token inputs:frame:stPrimvarName = \\\"st\\\"\\n        def Shader \\\"uvReader_st\\\"\\n        {\\n            uniform token info:id = \\\"UsdPrimvarReader_float2\\\"\\n            token inputs:varname.connect = </Materials/Material_\").concat(material.id, \".inputs:frame:stPrimvarName>\\n            float2 inputs:fallback = (0.0, 0.0)\\n            float2 outputs:result\\n        }\\n\").concat(samplers.join('\\n'), \"\\n    }\\n\");\n    }\n  }, {\n    key: \"buildTexture\",\n    value: function buildTexture(material, texture, mapType, color) {\n      var id = texture.id + (color ? '_' + color.getHexString() : '');\n      var isRGBA = texture.format === 1023;\n      this.textures[id] = texture;\n      return \"\\n      def Shader \\\"Transform2d_\".concat(mapType, \"\\\" (\\n          sdrMetadata = {\\n              string role = \\\"math\\\"\\n          }\\n      )\\n      {\\n          uniform token info:id = \\\"UsdTransform2d\\\"\\n          float2 inputs:in.connect = </Materials/Material_\").concat(material.id, \"/uvReader_st.outputs:result>\\n          float2 inputs:scale = \").concat(this.buildVector2(texture.repeat), \"\\n          float2 inputs:translation = \").concat(this.buildVector2(texture.offset), \"\\n          float2 outputs:result\\n      }\\n      def Shader \\\"Texture_\").concat(texture.id, \"_\").concat(mapType, \"\\\"\\n      {\\n          uniform token info:id = \\\"UsdUVTexture\\\"\\n          asset inputs:file = @textures/Texture_\").concat(id, \".\").concat(isRGBA ? 'png' : 'jpg', \"@\\n          float2 inputs:st.connect = </Materials/Material_\").concat(material.id, \"/Transform2d_\").concat(mapType, \".outputs:result>\\n          token inputs:wrapS = \\\"repeat\\\"\\n          token inputs:wrapT = \\\"repeat\\\"\\n          float outputs:r\\n          float outputs:g\\n          float outputs:b\\n          float3 outputs:rgb\\n      }\");\n    }\n  }, {\n    key: \"buildColor\",\n    value: function buildColor(color) {\n      return \"(\".concat(color.r, \", \").concat(color.g, \", \").concat(color.b, \")\");\n    }\n  }, {\n    key: \"buildVector2\",\n    value: function buildVector2(vector) {\n      return \"(\".concat(vector.x, \", \").concat(vector.y, \")\");\n    }\n  }]);\n  return USDZExporter;\n}();\nexport { USDZExporter };","map":{"version":3,"names":["_defineProperty","strToU8","zipSync","Mesh","MeshPhysicalMaterial","USDZExporter","_classCallCheck","materials","textures","files","_createClass","key","value","_parse","_asyncToGenerator","_regeneratorRuntime","mark","_callee","scene","_this","modelFileName","output","_loop","id","offset","filename","file","headerSize","offsetMod64","padLength","padding","wrap","_callee$","_context2","prev","next","buildHeader","traverseVisible","object","isMesh","material","isMeshStandardMaterial","geometry","geometryFileName","meshObject","buildMeshObject","buildUSDFileAsString","uuid","buildXform","buildMaterials","texture","color","isRGBA","canvas","blob","_loop$","_context","split","format","imageToCanvas","image","Promise","resolve","toBlob","sent","t0","Uint8Array","arrayBuffer","t1","concat","stop","keys","done","delegateYield","length","extra","abrupt","level","parse","_x","apply","arguments","HTMLImageElement","HTMLCanvasElement","OffscreenCanvas","ImageBitmap","scale","Math","max","width","height","document","createElement","min","context","getContext","drawImage","undefined","hex","parseInt","r","g","b","imagedata","getImageData","data","i","putImageData","dataToInsert","name","transform","buildMatrix","matrixWorld","determinant","console","warn","matrix","array","elements","buildMatrixRow","mesh","buildMesh","attributes","count","position","buildMeshVertexCount","buildMeshVertexIndices","buildVector3Array","normal","buildVector2Array","uv","index","Array","fill","join","push","attribute","toPrecision","PRECISION","buildMaterial","pad","inputs","samplers","map","buildTexture","buildColor","emissiveMap","emissive","getHex","normalMap","aoMap","roughnessMap","roughness","metalnessMap","metalness","opacity","clearcoat","clearcoatRoughness","ior","mapType","getHexString","buildVector2","repeat","vector","x","y"],"sources":["/home/samuel/experiment/3d/farm/frontend/node_modules/three-stdlib/exporters/USDZExporter.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { strToU8, zipSync } from 'fflate';\nimport { Mesh, MeshPhysicalMaterial } from 'three';\n\nclass USDZExporter {\n  constructor() {\n    _defineProperty(this, \"PRECISION\", 7);\n\n    _defineProperty(this, \"materials\", void 0);\n\n    _defineProperty(this, \"textures\", void 0);\n\n    _defineProperty(this, \"files\", void 0);\n\n    this.materials = {};\n    this.textures = {};\n    this.files = {};\n  }\n\n  async parse(scene) {\n    const modelFileName = 'model.usda'; // model file should be first in USDZ archive so we init it here\n\n    this.files[modelFileName] = null;\n    let output = this.buildHeader();\n    scene.traverseVisible(object => {\n      if (object instanceof Mesh && object.isMesh && object.material.isMeshStandardMaterial) {\n        const geometry = object.geometry;\n        const material = object.material;\n        const geometryFileName = 'geometries/Geometry_' + geometry.id + '.usd';\n\n        if (!(geometryFileName in this.files)) {\n          const meshObject = this.buildMeshObject(geometry);\n          this.files[geometryFileName] = this.buildUSDFileAsString(meshObject);\n        }\n\n        if (!(material.uuid in this.materials)) {\n          this.materials[material.uuid] = material;\n        }\n\n        output += this.buildXform(object, geometry, material);\n      }\n    });\n    output += this.buildMaterials(this.materials);\n    this.files[modelFileName] = strToU8(output);\n    output = null;\n\n    for (const id in this.textures) {\n      const texture = this.textures[id];\n      const color = id.split('_')[1];\n      const isRGBA = texture.format === 1023;\n      const canvas = this.imageToCanvas(texture.image, color);\n      const blob = await new Promise(resolve => canvas === null || canvas === void 0 ? void 0 : canvas.toBlob(resolve, isRGBA ? 'image/png' : 'image/jpeg', 1));\n\n      if (blob) {\n        this.files[`textures/Texture_${id}.${isRGBA ? 'png' : 'jpg'}`] = new Uint8Array(await blob.arrayBuffer());\n      }\n    } // 64 byte alignment\n    // https://github.com/101arrowz/fflate/issues/39#issuecomment-777263109\n\n\n    let offset = 0;\n\n    for (const filename in this.files) {\n      const file = this.files[filename];\n      const headerSize = 34 + filename.length;\n      offset += headerSize;\n      const offsetMod64 = offset & 63;\n\n      if (offsetMod64 !== 4 && file !== null && file instanceof Uint8Array) {\n        const padLength = 64 - offsetMod64;\n        const padding = new Uint8Array(padLength);\n        this.files[filename] = [file, {\n          extra: {\n            12345: padding\n          }\n        }];\n      }\n\n      if (file && typeof file.length === 'number') {\n        offset = file.length;\n      }\n    }\n\n    return zipSync(this.files, {\n      level: 0\n    });\n  }\n\n  imageToCanvas(image, color) {\n    if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof OffscreenCanvas !== 'undefined' && image instanceof OffscreenCanvas || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n      const scale = 1024 / Math.max(image.width, image.height);\n      const canvas = document.createElement('canvas');\n      canvas.width = image.width * Math.min(1, scale);\n      canvas.height = image.height * Math.min(1, scale);\n      const context = canvas.getContext('2d');\n      context === null || context === void 0 ? void 0 : context.drawImage(image, 0, 0, canvas.width, canvas.height);\n\n      if (color !== undefined) {\n        const hex = parseInt(color, 16);\n        const r = (hex >> 16 & 255) / 255;\n        const g = (hex >> 8 & 255) / 255;\n        const b = (hex & 255) / 255;\n        const imagedata = context === null || context === void 0 ? void 0 : context.getImageData(0, 0, canvas.width, canvas.height);\n\n        if (imagedata) {\n          const data = imagedata === null || imagedata === void 0 ? void 0 : imagedata.data;\n\n          for (let i = 0; i < data.length; i += 4) {\n            data[i + 0] = data[i + 0] * r;\n            data[i + 1] = data[i + 1] * g;\n            data[i + 2] = data[i + 2] * b;\n          }\n\n          context === null || context === void 0 ? void 0 : context.putImageData(imagedata, 0, 0);\n        }\n      }\n\n      return canvas;\n    }\n  }\n\n  buildHeader() {\n    return `#usda 1.0\n(\n    customLayerData = {\n        string creator = \"Three.js USDZExporter\"\n    }\n    metersPerUnit = 1\n    upAxis = \"Y\"\n)\n`;\n  }\n\n  buildUSDFileAsString(dataToInsert) {\n    let output = this.buildHeader();\n    output += dataToInsert;\n    return strToU8(output);\n  } // Xform\n\n\n  buildXform(object, geometry, material) {\n    const name = 'Object_' + object.id;\n    const transform = this.buildMatrix(object.matrixWorld);\n\n    if (object.matrixWorld.determinant() < 0) {\n      console.warn('THREE.USDZExporter: USDZ does not support negative scales', object);\n    }\n\n    return `def Xform \"${name}\" (\n    prepend references = @./geometries/Geometry_${geometry.id}.usd@</Geometry>\n)\n{\n    matrix4d xformOp:transform = ${transform}\n    uniform token[] xformOpOrder = [\"xformOp:transform\"]\n    rel material:binding = </Materials/Material_${material.id}>\n}\n`;\n  }\n\n  buildMatrix(matrix) {\n    const array = matrix.elements;\n    return `( ${this.buildMatrixRow(array, 0)}, ${this.buildMatrixRow(array, 4)}, ${this.buildMatrixRow(array, 8)}, ${this.buildMatrixRow(array, 12)} )`;\n  }\n\n  buildMatrixRow(array, offset) {\n    return `(${array[offset + 0]}, ${array[offset + 1]}, ${array[offset + 2]}, ${array[offset + 3]})`;\n  } // Mesh\n\n\n  buildMeshObject(geometry) {\n    const mesh = this.buildMesh(geometry);\n    return `\ndef \"Geometry\"\n{\n  ${mesh}\n}\n`;\n  }\n\n  buildMesh(geometry) {\n    const name = 'Geometry';\n    const attributes = geometry.attributes;\n    const count = attributes.position.count;\n    return `\n    def Mesh \"${name}\"\n    {\n        int[] faceVertexCounts = [${this.buildMeshVertexCount(geometry)}]\n        int[] faceVertexIndices = [${this.buildMeshVertexIndices(geometry)}]\n        normal3f[] normals = [${this.buildVector3Array(attributes.normal, count)}] (\n            interpolation = \"vertex\"\n        )\n        point3f[] points = [${this.buildVector3Array(attributes.position, count)}]\n        float2[] primvars:st = [${this.buildVector2Array(attributes.uv, count)}] (\n            interpolation = \"vertex\"\n        )\n        uniform token subdivisionScheme = \"none\"\n    }\n`;\n  }\n\n  buildMeshVertexCount(geometry) {\n    const count = geometry.index !== null ? geometry.index.array.length : geometry.attributes.position.count;\n    return Array(count / 3).fill(3).join(', ');\n  }\n\n  buildMeshVertexIndices(geometry) {\n    if (geometry.index !== null) {\n      // @ts-expect-error\n      return geometry.index.array.join(', ');\n    }\n\n    const array = [];\n    const length = geometry.attributes.position.count;\n\n    for (let i = 0; i < length; i++) {\n      array.push(i);\n    }\n\n    return array.join(', ');\n  }\n\n  buildVector3Array(attribute, count) {\n    if (attribute === undefined) {\n      console.warn('USDZExporter: Normals missing.');\n      return Array(count).fill('(0, 0, 0)').join(', ');\n    }\n\n    const array = [];\n    const data = attribute.array;\n\n    for (let i = 0; i < data.length; i += 3) {\n      array.push(`(${data[i + 0].toPrecision(this.PRECISION)}, ${data[i + 1].toPrecision(this.PRECISION)}, ${data[i + 2].toPrecision(this.PRECISION)})`);\n    }\n\n    return array.join(', ');\n  }\n\n  buildVector2Array(attribute, count) {\n    if (attribute === undefined) {\n      console.warn('USDZExporter: UVs missing.');\n      return Array(count).fill('(0, 0)').join(', ');\n    }\n\n    const array = [];\n    const data = attribute.array;\n\n    for (let i = 0; i < data.length; i += 2) {\n      // @ts-expect-error\n      array.push(`(${data[i + 0].toPrecision(this.PRECISION)}, ${1 - data[i + 1].toPrecision(this.PRECISION)})`);\n    }\n\n    return array.join(', ');\n  } // Materials\n\n\n  buildMaterials(materials) {\n    const array = [];\n\n    for (const uuid in materials) {\n      const material = materials[uuid];\n      array.push(this.buildMaterial(material));\n    }\n\n    return `def \"Materials\"\n{\n${array.join('')}\n}\n`;\n  }\n\n  buildMaterial(material) {\n    // https://graphics.pixar.com/usd/docs/UsdPreviewSurface-Proposal.html\n    const pad = '            ';\n    const inputs = [];\n    const samplers = [];\n\n    if (material.map !== null) {\n      inputs.push(`${pad}color3f inputs:diffuseColor.connect = </Materials/Material_${material.id}/Texture_${material.map.id}_diffuse.outputs:rgb>`);\n      samplers.push(this.buildTexture(material, material.map, 'diffuse', material.color));\n    } else {\n      inputs.push(`${pad}color3f inputs:diffuseColor = ${this.buildColor(material.color)}`);\n    }\n\n    if (material.emissiveMap !== null) {\n      inputs.push(`${pad}color3f inputs:emissiveColor.connect = </Materials/Material_${material.id}/Texture_${material.emissiveMap.id}_emissive.outputs:rgb>`);\n      samplers.push(this.buildTexture(material, material.emissiveMap, 'emissive'));\n    } else if (material.emissive.getHex() > 0) {\n      inputs.push(`${pad}color3f inputs:emissiveColor = ${this.buildColor(material.emissive)}`);\n    }\n\n    if (material.normalMap !== null) {\n      inputs.push(`${pad}normal3f inputs:normal.connect = </Materials/Material_${material.id}/Texture_${material.normalMap.id}_normal.outputs:rgb>`);\n      samplers.push(this.buildTexture(material, material.normalMap, 'normal'));\n    }\n\n    if (material.aoMap !== null) {\n      inputs.push(`${pad}float inputs:occlusion.connect = </Materials/Material_${material.id}/Texture_${material.aoMap.id}_occlusion.outputs:r>`);\n      samplers.push(this.buildTexture(material, material.aoMap, 'occlusion'));\n    }\n\n    if (material.roughnessMap !== null && material.roughness === 1) {\n      inputs.push(`${pad}float inputs:roughness.connect = </Materials/Material_${material.id}/Texture_${material.roughnessMap.id}_roughness.outputs:g>`);\n      samplers.push(this.buildTexture(material, material.roughnessMap, 'roughness'));\n    } else {\n      inputs.push(`${pad}float inputs:roughness = ${material.roughness}`);\n    }\n\n    if (material.metalnessMap !== null && material.metalness === 1) {\n      inputs.push(`${pad}float inputs:metallic.connect = </Materials/Material_${material.id}/Texture_${material.metalnessMap.id}_metallic.outputs:b>`);\n      samplers.push(this.buildTexture(material, material.metalnessMap, 'metallic'));\n    } else {\n      inputs.push(`${pad}float inputs:metallic = ${material.metalness}`);\n    }\n\n    inputs.push(`${pad}float inputs:opacity = ${material.opacity}`);\n\n    if (material instanceof MeshPhysicalMaterial) {\n      inputs.push(`${pad}float inputs:clearcoat = ${material.clearcoat}`);\n      inputs.push(`${pad}float inputs:clearcoatRoughness = ${material.clearcoatRoughness}`);\n      inputs.push(`${pad}float inputs:ior = ${material.ior}`);\n    }\n\n    return `\n    def Material \"Material_${material.id}\"\n    {\n        def Shader \"PreviewSurface\"\n        {\n            uniform token info:id = \"UsdPreviewSurface\"\n${inputs.join('\\n')}\n            int inputs:useSpecularWorkflow = 0\n            token outputs:surface\n        }\n        token outputs:surface.connect = </Materials/Material_${material.id}/PreviewSurface.outputs:surface>\n        token inputs:frame:stPrimvarName = \"st\"\n        def Shader \"uvReader_st\"\n        {\n            uniform token info:id = \"UsdPrimvarReader_float2\"\n            token inputs:varname.connect = </Materials/Material_${material.id}.inputs:frame:stPrimvarName>\n            float2 inputs:fallback = (0.0, 0.0)\n            float2 outputs:result\n        }\n${samplers.join('\\n')}\n    }\n`;\n  }\n\n  buildTexture(material, texture, mapType, color) {\n    const id = texture.id + (color ? '_' + color.getHexString() : '');\n    const isRGBA = texture.format === 1023;\n    this.textures[id] = texture;\n    return `\n      def Shader \"Transform2d_${mapType}\" (\n          sdrMetadata = {\n              string role = \"math\"\n          }\n      )\n      {\n          uniform token info:id = \"UsdTransform2d\"\n          float2 inputs:in.connect = </Materials/Material_${material.id}/uvReader_st.outputs:result>\n          float2 inputs:scale = ${this.buildVector2(texture.repeat)}\n          float2 inputs:translation = ${this.buildVector2(texture.offset)}\n          float2 outputs:result\n      }\n      def Shader \"Texture_${texture.id}_${mapType}\"\n      {\n          uniform token info:id = \"UsdUVTexture\"\n          asset inputs:file = @textures/Texture_${id}.${isRGBA ? 'png' : 'jpg'}@\n          float2 inputs:st.connect = </Materials/Material_${material.id}/Transform2d_${mapType}.outputs:result>\n          token inputs:wrapS = \"repeat\"\n          token inputs:wrapT = \"repeat\"\n          float outputs:r\n          float outputs:g\n          float outputs:b\n          float3 outputs:rgb\n      }`;\n  }\n\n  buildColor(color) {\n    return `(${color.r}, ${color.g}, ${color.b})`;\n  }\n\n  buildVector2(vector) {\n    return `(${vector.x}, ${vector.y})`;\n  }\n\n}\n\nexport { USDZExporter };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}