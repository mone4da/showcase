{"ast":null,"code":"import _classCallCheck from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/samuel/experiment/3d/farm/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, LoaderUtils, FileLoader, TextureLoader, RepeatWrapping, ClampToEdgeWrapping, Texture, MeshPhongMaterial, MeshLambertMaterial, Color, sRGBEncoding, EquirectangularReflectionMapping, Matrix4, Group, Bone, PropertyBinding, Object3D, OrthographicCamera, PerspectiveCamera, PointLight, MathUtils, SpotLight, DirectionalLight, SkinnedMesh, Mesh, LineBasicMaterial, Line, Vector3, Skeleton, AmbientLight, BufferGeometry, Float32BufferAttribute, Uint16BufferAttribute, Matrix3, Vector4, AnimationClip, Quaternion, Euler, VectorKeyframeTrack, QuaternionKeyframeTrack, NumberKeyframeTrack } from 'three';\nimport { unzlibSync } from 'fflate';\nimport { NURBSCurve } from '../curves/NURBSCurve.js';\n\n/**\n * Loader loads FBX file and generates Group representing FBX scene.\n * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\n * Versions lower than this may load but will probably have errors\n *\n * Needs Support:\n *  Morph normals / blend shape normals\n *\n * FBX format references:\n * \thttps://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\n *\n * Binary format specification:\n *\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\n */\n\nvar fbxTree;\nvar connections;\nvar sceneGraph;\nvar FBXLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(FBXLoader, _Loader);\n  var _super = _createSuper(FBXLoader);\n  function FBXLoader(manager) {\n    _classCallCheck(this, FBXLoader);\n    return _super.call(this, manager);\n  }\n  _createClass(FBXLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var path = scope.path === '' ? LoaderUtils.extractUrlBase(url) : scope.path;\n      var loader = new FileLoader(this.manager);\n      loader.setPath(scope.path);\n      loader.setResponseType('arraybuffer');\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (buffer) {\n        try {\n          onLoad(scope.parse(buffer, path));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(FBXBuffer, path) {\n      if (isFbxFormatBinary(FBXBuffer)) {\n        fbxTree = new BinaryParser().parse(FBXBuffer);\n      } else {\n        var FBXText = convertArrayBufferToString(FBXBuffer);\n        if (!isFbxFormatASCII(FBXText)) {\n          throw new Error('THREE.FBXLoader: Unknown format.');\n        }\n        if (getFbxVersion(FBXText) < 7000) {\n          throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion(FBXText));\n        }\n        fbxTree = new TextParser().parse(FBXText);\n      } // console.log( fbxTree );\n\n      var textureLoader = new TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n      return new FBXTreeParser(textureLoader, this.manager).parse(fbxTree);\n    }\n  }]);\n  return FBXLoader;\n}(Loader); // Parse the FBXTree object returned by the BinaryParser or TextParser and return a Group\nvar FBXTreeParser = /*#__PURE__*/function () {\n  function FBXTreeParser(textureLoader, manager) {\n    _classCallCheck(this, FBXTreeParser);\n    this.textureLoader = textureLoader;\n    this.manager = manager;\n  }\n  _createClass(FBXTreeParser, [{\n    key: \"parse\",\n    value: function parse() {\n      connections = this.parseConnections();\n      var images = this.parseImages();\n      var textures = this.parseTextures(images);\n      var materials = this.parseMaterials(textures);\n      var deformers = this.parseDeformers();\n      var geometryMap = new GeometryParser().parse(deformers);\n      this.parseScene(deformers, geometryMap, materials);\n      return sceneGraph;\n    } // Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n    // and details the connection type\n  }, {\n    key: \"parseConnections\",\n    value: function parseConnections() {\n      var connectionMap = new Map();\n      if ('Connections' in fbxTree) {\n        var rawConnections = fbxTree.Connections.connections;\n        rawConnections.forEach(function (rawConnection) {\n          var fromID = rawConnection[0];\n          var toID = rawConnection[1];\n          var relationship = rawConnection[2];\n          if (!connectionMap.has(fromID)) {\n            connectionMap.set(fromID, {\n              parents: [],\n              children: []\n            });\n          }\n          var parentRelationship = {\n            ID: toID,\n            relationship: relationship\n          };\n          connectionMap.get(fromID).parents.push(parentRelationship);\n          if (!connectionMap.has(toID)) {\n            connectionMap.set(toID, {\n              parents: [],\n              children: []\n            });\n          }\n          var childRelationship = {\n            ID: fromID,\n            relationship: relationship\n          };\n          connectionMap.get(toID).children.push(childRelationship);\n        });\n      }\n      return connectionMap;\n    } // Parse FBXTree.Objects.Video for embedded image data\n    // These images are connected to textures in FBXTree.Objects.Textures\n    // via FBXTree.Connections.\n  }, {\n    key: \"parseImages\",\n    value: function parseImages() {\n      var images = {};\n      var blobs = {};\n      if ('Video' in fbxTree.Objects) {\n        var videoNodes = fbxTree.Objects.Video;\n        for (var nodeID in videoNodes) {\n          var videoNode = videoNodes[nodeID];\n          var id = parseInt(nodeID);\n          images[id] = videoNode.RelativeFilename || videoNode.Filename; // raw image data is in videoNode.Content\n\n          if ('Content' in videoNode) {\n            var arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0;\n            var base64Content = typeof videoNode.Content === 'string' && videoNode.Content !== '';\n            if (arrayBufferContent || base64Content) {\n              var image = this.parseImage(videoNodes[nodeID]);\n              blobs[videoNode.RelativeFilename || videoNode.Filename] = image;\n            }\n          }\n        }\n      }\n      for (var _id in images) {\n        var filename = images[_id];\n        if (blobs[filename] !== undefined) images[_id] = blobs[filename];else images[_id] = images[_id].split('\\\\').pop();\n      }\n      return images;\n    } // Parse embedded image data in FBXTree.Video.Content\n  }, {\n    key: \"parseImage\",\n    value: function parseImage(videoNode) {\n      var content = videoNode.Content;\n      var fileName = videoNode.RelativeFilename || videoNode.Filename;\n      var extension = fileName.slice(fileName.lastIndexOf('.') + 1).toLowerCase();\n      var type;\n      switch (extension) {\n        case 'bmp':\n          type = 'image/bmp';\n          break;\n        case 'jpg':\n        case 'jpeg':\n          type = 'image/jpeg';\n          break;\n        case 'png':\n          type = 'image/png';\n          break;\n        case 'tif':\n          type = 'image/tiff';\n          break;\n        case 'tga':\n          if (this.manager.getHandler('.tga') === null) {\n            console.warn('FBXLoader: TGA loader not found, skipping ', fileName);\n          }\n          type = 'image/tga';\n          break;\n        default:\n          console.warn('FBXLoader: Image type \"' + extension + '\" is not supported.');\n          return;\n      }\n      if (typeof content === 'string') {\n        // ASCII format\n        return 'data:' + type + ';base64,' + content;\n      } else {\n        // Binary Format\n        var array = new Uint8Array(content);\n        return window.URL.createObjectURL(new Blob([array], {\n          type: type\n        }));\n      }\n    } // Parse nodes in FBXTree.Objects.Texture\n    // These contain details such as UV scaling, cropping, rotation etc and are connected\n    // to images in FBXTree.Objects.Video\n  }, {\n    key: \"parseTextures\",\n    value: function parseTextures(images) {\n      var textureMap = new Map();\n      if ('Texture' in fbxTree.Objects) {\n        var textureNodes = fbxTree.Objects.Texture;\n        for (var nodeID in textureNodes) {\n          var texture = this.parseTexture(textureNodes[nodeID], images);\n          textureMap.set(parseInt(nodeID), texture);\n        }\n      }\n      return textureMap;\n    } // Parse individual node in FBXTree.Objects.Texture\n  }, {\n    key: \"parseTexture\",\n    value: function parseTexture(textureNode, images) {\n      var texture = this.loadTexture(textureNode, images);\n      texture.ID = textureNode.id;\n      texture.name = textureNode.attrName;\n      var wrapModeU = textureNode.WrapModeU;\n      var wrapModeV = textureNode.WrapModeV;\n      var valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\n      var valueV = wrapModeV !== undefined ? wrapModeV.value : 0; // http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a\n      // 0: repeat(default), 1: clamp\n\n      texture.wrapS = valueU === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n      texture.wrapT = valueV === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n      if ('Scaling' in textureNode) {\n        var values = textureNode.Scaling.value;\n        texture.repeat.x = values[0];\n        texture.repeat.y = values[1];\n      }\n      return texture;\n    } // load a texture specified as a blob or data URI, or via an external URL using TextureLoader\n  }, {\n    key: \"loadTexture\",\n    value: function loadTexture(textureNode, images) {\n      var fileName;\n      var currentPath = this.textureLoader.path;\n      var children = connections.get(textureNode.id).children;\n      if (children !== undefined && children.length > 0 && images[children[0].ID] !== undefined) {\n        fileName = images[children[0].ID];\n        if (fileName.indexOf('blob:') === 0 || fileName.indexOf('data:') === 0) {\n          this.textureLoader.setPath(undefined);\n        }\n      }\n      var texture;\n      var extension = textureNode.FileName.slice(-3).toLowerCase();\n      if (extension === 'tga') {\n        var loader = this.manager.getHandler('.tga');\n        if (loader === null) {\n          console.warn('FBXLoader: TGA loader not found, creating placeholder texture for', textureNode.RelativeFilename);\n          texture = new Texture();\n        } else {\n          loader.setPath(this.textureLoader.path);\n          texture = loader.load(fileName);\n        }\n      } else if (extension === 'psd') {\n        console.warn('FBXLoader: PSD textures are not supported, creating placeholder texture for', textureNode.RelativeFilename);\n        texture = new Texture();\n      } else {\n        texture = this.textureLoader.load(fileName);\n      }\n      this.textureLoader.setPath(currentPath);\n      return texture;\n    } // Parse nodes in FBXTree.Objects.Material\n  }, {\n    key: \"parseMaterials\",\n    value: function parseMaterials(textureMap) {\n      var materialMap = new Map();\n      if ('Material' in fbxTree.Objects) {\n        var materialNodes = fbxTree.Objects.Material;\n        for (var nodeID in materialNodes) {\n          var material = this.parseMaterial(materialNodes[nodeID], textureMap);\n          if (material !== null) materialMap.set(parseInt(nodeID), material);\n        }\n      }\n      return materialMap;\n    } // Parse single node in FBXTree.Objects.Material\n    // Materials are connected to texture maps in FBXTree.Objects.Textures\n    // FBX format currently only supports Lambert and Phong shading models\n  }, {\n    key: \"parseMaterial\",\n    value: function parseMaterial(materialNode, textureMap) {\n      var ID = materialNode.id;\n      var name = materialNode.attrName;\n      var type = materialNode.ShadingModel; // Case where FBX wraps shading model in property object.\n\n      if (typeof type === 'object') {\n        type = type.value;\n      } // Ignore unused materials which don't have any connections.\n\n      if (!connections.has(ID)) return null;\n      var parameters = this.parseParameters(materialNode, textureMap, ID);\n      var material;\n      switch (type.toLowerCase()) {\n        case 'phong':\n          material = new MeshPhongMaterial();\n          break;\n        case 'lambert':\n          material = new MeshLambertMaterial();\n          break;\n        default:\n          console.warn('THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type);\n          material = new MeshPhongMaterial();\n          break;\n      }\n      material.setValues(parameters);\n      material.name = name;\n      return material;\n    } // Parse FBX material and return parameters suitable for a three.js material\n    // Also parse the texture map and return any textures associated with the material\n  }, {\n    key: \"parseParameters\",\n    value: function parseParameters(materialNode, textureMap, ID) {\n      var parameters = {};\n      if (materialNode.BumpFactor) {\n        parameters.bumpScale = materialNode.BumpFactor.value;\n      }\n      if (materialNode.Diffuse) {\n        parameters.color = new Color().fromArray(materialNode.Diffuse.value);\n      } else if (materialNode.DiffuseColor && (materialNode.DiffuseColor.type === 'Color' || materialNode.DiffuseColor.type === 'ColorRGB')) {\n        // The blender exporter exports diffuse here instead of in materialNode.Diffuse\n        parameters.color = new Color().fromArray(materialNode.DiffuseColor.value);\n      }\n      if (materialNode.DisplacementFactor) {\n        parameters.displacementScale = materialNode.DisplacementFactor.value;\n      }\n      if (materialNode.Emissive) {\n        parameters.emissive = new Color().fromArray(materialNode.Emissive.value);\n      } else if (materialNode.EmissiveColor && (materialNode.EmissiveColor.type === 'Color' || materialNode.EmissiveColor.type === 'ColorRGB')) {\n        // The blender exporter exports emissive color here instead of in materialNode.Emissive\n        parameters.emissive = new Color().fromArray(materialNode.EmissiveColor.value);\n      }\n      if (materialNode.EmissiveFactor) {\n        parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value);\n      }\n      if (materialNode.Opacity) {\n        parameters.opacity = parseFloat(materialNode.Opacity.value);\n      }\n      if (parameters.opacity < 1.0) {\n        parameters.transparent = true;\n      }\n      if (materialNode.ReflectionFactor) {\n        parameters.reflectivity = materialNode.ReflectionFactor.value;\n      }\n      if (materialNode.Shininess) {\n        parameters.shininess = materialNode.Shininess.value;\n      }\n      if (materialNode.Specular) {\n        parameters.specular = new Color().fromArray(materialNode.Specular.value);\n      } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color') {\n        // The blender exporter exports specular color here instead of in materialNode.Specular\n        parameters.specular = new Color().fromArray(materialNode.SpecularColor.value);\n      }\n      var scope = this;\n      connections.get(ID).children.forEach(function (child) {\n        var type = child.relationship;\n        switch (type) {\n          case 'Bump':\n            parameters.bumpMap = scope.getTexture(textureMap, child.ID);\n            break;\n          case 'Maya|TEX_ao_map':\n            parameters.aoMap = scope.getTexture(textureMap, child.ID);\n            break;\n          case 'DiffuseColor':\n          case 'Maya|TEX_color_map':\n            parameters.map = scope.getTexture(textureMap, child.ID);\n            if (parameters.map !== undefined) {\n              parameters.map.encoding = sRGBEncoding;\n            }\n            break;\n          case 'DisplacementColor':\n            parameters.displacementMap = scope.getTexture(textureMap, child.ID);\n            break;\n          case 'EmissiveColor':\n            parameters.emissiveMap = scope.getTexture(textureMap, child.ID);\n            if (parameters.emissiveMap !== undefined) {\n              parameters.emissiveMap.encoding = sRGBEncoding;\n            }\n            break;\n          case 'NormalMap':\n          case 'Maya|TEX_normal_map':\n            parameters.normalMap = scope.getTexture(textureMap, child.ID);\n            break;\n          case 'ReflectionColor':\n            parameters.envMap = scope.getTexture(textureMap, child.ID);\n            if (parameters.envMap !== undefined) {\n              parameters.envMap.mapping = EquirectangularReflectionMapping;\n              parameters.envMap.encoding = sRGBEncoding;\n            }\n            break;\n          case 'SpecularColor':\n            parameters.specularMap = scope.getTexture(textureMap, child.ID);\n            if (parameters.specularMap !== undefined) {\n              parameters.specularMap.encoding = sRGBEncoding;\n            }\n            break;\n          case 'TransparentColor':\n          case 'TransparencyFactor':\n            parameters.alphaMap = scope.getTexture(textureMap, child.ID);\n            parameters.transparent = true;\n            break;\n          case 'AmbientColor':\n          case 'ShininessExponent': // AKA glossiness map\n\n          case 'SpecularFactor': // AKA specularLevel\n\n          case 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor\n\n          default:\n            console.warn('THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type);\n            break;\n        }\n      });\n      return parameters;\n    } // get a texture from the textureMap for use by a material.\n  }, {\n    key: \"getTexture\",\n    value: function getTexture(textureMap, id) {\n      // if the texture is a layered texture, just use the first layer and issue a warning\n      if ('LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {\n        console.warn('THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.');\n        id = connections.get(id).children[0].ID;\n      }\n      return textureMap.get(id);\n    } // Parse nodes in FBXTree.Objects.Deformer\n    // Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n    // Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n  }, {\n    key: \"parseDeformers\",\n    value: function parseDeformers() {\n      var skeletons = {};\n      var morphTargets = {};\n      if ('Deformer' in fbxTree.Objects) {\n        var DeformerNodes = fbxTree.Objects.Deformer;\n        for (var nodeID in DeformerNodes) {\n          var deformerNode = DeformerNodes[nodeID];\n          var relationships = connections.get(parseInt(nodeID));\n          if (deformerNode.attrType === 'Skin') {\n            var skeleton = this.parseSkeleton(relationships, DeformerNodes);\n            skeleton.ID = nodeID;\n            if (relationships.parents.length > 1) {\n              console.warn('THREE.FBXLoader: skeleton attached to more than one geometry is not supported.');\n            }\n            skeleton.geometryID = relationships.parents[0].ID;\n            skeletons[nodeID] = skeleton;\n          } else if (deformerNode.attrType === 'BlendShape') {\n            var morphTarget = {\n              id: nodeID\n            };\n            morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes);\n            morphTarget.id = nodeID;\n            if (relationships.parents.length > 1) {\n              console.warn('THREE.FBXLoader: morph target attached to more than one geometry is not supported.');\n            }\n            morphTargets[nodeID] = morphTarget;\n          }\n        }\n      }\n      return {\n        skeletons: skeletons,\n        morphTargets: morphTargets\n      };\n    } // Parse single nodes in FBXTree.Objects.Deformer\n    // The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n    // Each skin node represents a skeleton and each cluster node represents a bone\n  }, {\n    key: \"parseSkeleton\",\n    value: function parseSkeleton(relationships, deformerNodes) {\n      var rawBones = [];\n      relationships.children.forEach(function (child) {\n        var boneNode = deformerNodes[child.ID];\n        if (boneNode.attrType !== 'Cluster') return;\n        var rawBone = {\n          ID: child.ID,\n          indices: [],\n          weights: [],\n          transformLink: new Matrix4().fromArray(boneNode.TransformLink.a) // transform: new Matrix4().fromArray( boneNode.Transform.a ),\n          // linkMode: boneNode.Mode,\n        };\n\n        if ('Indexes' in boneNode) {\n          rawBone.indices = boneNode.Indexes.a;\n          rawBone.weights = boneNode.Weights.a;\n        }\n        rawBones.push(rawBone);\n      });\n      return {\n        rawBones: rawBones,\n        bones: []\n      };\n    } // The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n  }, {\n    key: \"parseMorphTargets\",\n    value: function parseMorphTargets(relationships, deformerNodes) {\n      var rawMorphTargets = [];\n      for (var i = 0; i < relationships.children.length; i++) {\n        var child = relationships.children[i];\n        var morphTargetNode = deformerNodes[child.ID];\n        var rawMorphTarget = {\n          name: morphTargetNode.attrName,\n          initialWeight: morphTargetNode.DeformPercent,\n          id: morphTargetNode.id,\n          fullWeights: morphTargetNode.FullWeights.a\n        };\n        if (morphTargetNode.attrType !== 'BlendShapeChannel') return;\n        rawMorphTarget.geoID = connections.get(parseInt(child.ID)).children.filter(function (child) {\n          return child.relationship === undefined;\n        })[0].ID;\n        rawMorphTargets.push(rawMorphTarget);\n      }\n      return rawMorphTargets;\n    } // create the main Group() to be returned by the loader\n  }, {\n    key: \"parseScene\",\n    value: function parseScene(deformers, geometryMap, materialMap) {\n      sceneGraph = new Group();\n      var modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap);\n      var modelNodes = fbxTree.Objects.Model;\n      var scope = this;\n      modelMap.forEach(function (model) {\n        var modelNode = modelNodes[model.ID];\n        scope.setLookAtProperties(model, modelNode);\n        var parentConnections = connections.get(model.ID).parents;\n        parentConnections.forEach(function (connection) {\n          var parent = modelMap.get(connection.ID);\n          if (parent !== undefined) parent.add(model);\n        });\n        if (model.parent === null) {\n          sceneGraph.add(model);\n        }\n      });\n      this.bindSkeleton(deformers.skeletons, geometryMap, modelMap);\n      this.createAmbientLight();\n      sceneGraph.traverse(function (node) {\n        if (node.userData.transformData) {\n          if (node.parent) {\n            node.userData.transformData.parentMatrix = node.parent.matrix;\n            node.userData.transformData.parentMatrixWorld = node.parent.matrixWorld;\n          }\n          var transform = generateTransform(node.userData.transformData);\n          node.applyMatrix4(transform);\n          node.updateWorldMatrix();\n        }\n      });\n      var animations = new AnimationParser().parse(); // if all the models where already combined in a single group, just return that\n\n      if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {\n        sceneGraph.children[0].animations = animations;\n        sceneGraph = sceneGraph.children[0];\n      }\n      sceneGraph.animations = animations;\n    } // parse nodes in FBXTree.Objects.Model\n  }, {\n    key: \"parseModels\",\n    value: function parseModels(skeletons, geometryMap, materialMap) {\n      var modelMap = new Map();\n      var modelNodes = fbxTree.Objects.Model;\n      for (var nodeID in modelNodes) {\n        var id = parseInt(nodeID);\n        var node = modelNodes[nodeID];\n        var relationships = connections.get(id);\n        var model = this.buildSkeleton(relationships, skeletons, id, node.attrName);\n        if (!model) {\n          switch (node.attrType) {\n            case 'Camera':\n              model = this.createCamera(relationships);\n              break;\n            case 'Light':\n              model = this.createLight(relationships);\n              break;\n            case 'Mesh':\n              model = this.createMesh(relationships, geometryMap, materialMap);\n              break;\n            case 'NurbsCurve':\n              model = this.createCurve(relationships, geometryMap);\n              break;\n            case 'LimbNode':\n            case 'Root':\n              model = new Bone();\n              break;\n            case 'Null':\n            default:\n              model = new Group();\n              break;\n          }\n          model.name = node.attrName ? PropertyBinding.sanitizeNodeName(node.attrName) : '';\n          model.ID = id;\n        }\n        this.getTransformData(model, node);\n        modelMap.set(id, model);\n      }\n      return modelMap;\n    }\n  }, {\n    key: \"buildSkeleton\",\n    value: function buildSkeleton(relationships, skeletons, id, name) {\n      var bone = null;\n      relationships.parents.forEach(function (parent) {\n        var _loop = function _loop() {\n          var skeleton = skeletons[ID];\n          skeleton.rawBones.forEach(function (rawBone, i) {\n            if (rawBone.ID === parent.ID) {\n              var subBone = bone;\n              bone = new Bone();\n              bone.matrixWorld.copy(rawBone.transformLink); // set name and id here - otherwise in cases where \"subBone\" is created it will not have a name / id\n\n              bone.name = name ? PropertyBinding.sanitizeNodeName(name) : '';\n              bone.ID = id;\n              skeleton.bones[i] = bone; // In cases where a bone is shared between multiple meshes\n              // duplicate the bone here and and it as a child of the first bone\n\n              if (subBone !== null) {\n                bone.add(subBone);\n              }\n            }\n          });\n        };\n        for (var ID in skeletons) {\n          _loop();\n        }\n      });\n      return bone;\n    } // create a PerspectiveCamera or OrthographicCamera\n  }, {\n    key: \"createCamera\",\n    value: function createCamera(relationships) {\n      var model;\n      var cameraAttribute;\n      relationships.children.forEach(function (child) {\n        var attr = fbxTree.Objects.NodeAttribute[child.ID];\n        if (attr !== undefined) {\n          cameraAttribute = attr;\n        }\n      });\n      if (cameraAttribute === undefined) {\n        model = new Object3D();\n      } else {\n        var type = 0;\n        if (cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1) {\n          type = 1;\n        }\n        var nearClippingPlane = 1;\n        if (cameraAttribute.NearPlane !== undefined) {\n          nearClippingPlane = cameraAttribute.NearPlane.value / 1000;\n        }\n        var farClippingPlane = 1000;\n        if (cameraAttribute.FarPlane !== undefined) {\n          farClippingPlane = cameraAttribute.FarPlane.value / 1000;\n        }\n        var width = window.innerWidth;\n        var height = window.innerHeight;\n        if (cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined) {\n          width = cameraAttribute.AspectWidth.value;\n          height = cameraAttribute.AspectHeight.value;\n        }\n        var aspect = width / height;\n        var fov = 45;\n        if (cameraAttribute.FieldOfView !== undefined) {\n          fov = cameraAttribute.FieldOfView.value;\n        }\n        var focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n        switch (type) {\n          case 0:\n            // Perspective\n            model = new PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);\n            if (focalLength !== null) model.setFocalLength(focalLength);\n            break;\n          case 1:\n            // Orthographic\n            model = new OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, nearClippingPlane, farClippingPlane);\n            break;\n          default:\n            console.warn('THREE.FBXLoader: Unknown camera type ' + type + '.');\n            model = new Object3D();\n            break;\n        }\n      }\n      return model;\n    } // Create a DirectionalLight, PointLight or SpotLight\n  }, {\n    key: \"createLight\",\n    value: function createLight(relationships) {\n      var model;\n      var lightAttribute;\n      relationships.children.forEach(function (child) {\n        var attr = fbxTree.Objects.NodeAttribute[child.ID];\n        if (attr !== undefined) {\n          lightAttribute = attr;\n        }\n      });\n      if (lightAttribute === undefined) {\n        model = new Object3D();\n      } else {\n        var type; // LightType can be undefined for Point lights\n\n        if (lightAttribute.LightType === undefined) {\n          type = 0;\n        } else {\n          type = lightAttribute.LightType.value;\n        }\n        var color = 0xffffff;\n        if (lightAttribute.Color !== undefined) {\n          color = new Color().fromArray(lightAttribute.Color.value);\n        }\n        var intensity = lightAttribute.Intensity === undefined ? 1 : lightAttribute.Intensity.value / 100; // light disabled\n\n        if (lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0) {\n          intensity = 0;\n        }\n        var distance = 0;\n        if (lightAttribute.FarAttenuationEnd !== undefined) {\n          if (lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0) {\n            distance = 0;\n          } else {\n            distance = lightAttribute.FarAttenuationEnd.value;\n          }\n        } // TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?\n\n        var decay = 1;\n        switch (type) {\n          case 0:\n            // Point\n            model = new PointLight(color, intensity, distance, decay);\n            break;\n          case 1:\n            // Directional\n            model = new DirectionalLight(color, intensity);\n            break;\n          case 2:\n            // Spot\n            var angle = Math.PI / 3;\n            if (lightAttribute.InnerAngle !== undefined) {\n              angle = MathUtils.degToRad(lightAttribute.InnerAngle.value);\n            }\n            var penumbra = 0;\n            if (lightAttribute.OuterAngle !== undefined) {\n              // TODO: this is not correct - FBX calculates outer and inner angle in degrees\n              // with OuterAngle > InnerAngle && OuterAngle <= Math.PI\n              // while three.js uses a penumbra between (0, 1) to attenuate the inner angle\n              penumbra = MathUtils.degToRad(lightAttribute.OuterAngle.value);\n              penumbra = Math.max(penumbra, 1);\n            }\n            model = new SpotLight(color, intensity, distance, angle, penumbra, decay);\n            break;\n          default:\n            console.warn('THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a PointLight.');\n            model = new PointLight(color, intensity);\n            break;\n        }\n        if (lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1) {\n          model.castShadow = true;\n        }\n      }\n      return model;\n    }\n  }, {\n    key: \"createMesh\",\n    value: function createMesh(relationships, geometryMap, materialMap) {\n      var model;\n      var geometry = null;\n      var material = null;\n      var materials = []; // get geometry and materials(s) from connections\n\n      relationships.children.forEach(function (child) {\n        if (geometryMap.has(child.ID)) {\n          geometry = geometryMap.get(child.ID);\n        }\n        if (materialMap.has(child.ID)) {\n          materials.push(materialMap.get(child.ID));\n        }\n      });\n      if (materials.length > 1) {\n        material = materials;\n      } else if (materials.length > 0) {\n        material = materials[0];\n      } else {\n        material = new MeshPhongMaterial({\n          color: 0xcccccc\n        });\n        materials.push(material);\n      }\n      if ('color' in geometry.attributes) {\n        materials.forEach(function (material) {\n          material.vertexColors = true;\n        });\n      }\n      if (geometry.FBX_Deformer) {\n        model = new SkinnedMesh(geometry, material);\n        model.normalizeSkinWeights();\n      } else {\n        model = new Mesh(geometry, material);\n      }\n      return model;\n    }\n  }, {\n    key: \"createCurve\",\n    value: function createCurve(relationships, geometryMap) {\n      var geometry = relationships.children.reduce(function (geo, child) {\n        if (geometryMap.has(child.ID)) geo = geometryMap.get(child.ID);\n        return geo;\n      }, null); // FBX does not list materials for Nurbs lines, so we'll just put our own in here.\n\n      var material = new LineBasicMaterial({\n        color: 0x3300ff,\n        linewidth: 1\n      });\n      return new Line(geometry, material);\n    } // parse the model node for transform data\n  }, {\n    key: \"getTransformData\",\n    value: function getTransformData(model, modelNode) {\n      var transformData = {};\n      if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n      if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);else transformData.eulerOrder = 'ZYX';\n      if ('Lcl_Translation' in modelNode) transformData.translation = modelNode.Lcl_Translation.value;\n      if ('PreRotation' in modelNode) transformData.preRotation = modelNode.PreRotation.value;\n      if ('Lcl_Rotation' in modelNode) transformData.rotation = modelNode.Lcl_Rotation.value;\n      if ('PostRotation' in modelNode) transformData.postRotation = modelNode.PostRotation.value;\n      if ('Lcl_Scaling' in modelNode) transformData.scale = modelNode.Lcl_Scaling.value;\n      if ('ScalingOffset' in modelNode) transformData.scalingOffset = modelNode.ScalingOffset.value;\n      if ('ScalingPivot' in modelNode) transformData.scalingPivot = modelNode.ScalingPivot.value;\n      if ('RotationOffset' in modelNode) transformData.rotationOffset = modelNode.RotationOffset.value;\n      if ('RotationPivot' in modelNode) transformData.rotationPivot = modelNode.RotationPivot.value;\n      model.userData.transformData = transformData;\n    }\n  }, {\n    key: \"setLookAtProperties\",\n    value: function setLookAtProperties(model, modelNode) {\n      if ('LookAtProperty' in modelNode) {\n        var children = connections.get(model.ID).children;\n        children.forEach(function (child) {\n          if (child.relationship === 'LookAtProperty') {\n            var lookAtTarget = fbxTree.Objects.Model[child.ID];\n            if ('Lcl_Translation' in lookAtTarget) {\n              var pos = lookAtTarget.Lcl_Translation.value; // DirectionalLight, SpotLight\n\n              if (model.target !== undefined) {\n                model.target.position.fromArray(pos);\n                sceneGraph.add(model.target);\n              } else {\n                // Cameras and other Object3Ds\n                model.lookAt(new Vector3().fromArray(pos));\n              }\n            }\n          }\n        });\n      }\n    }\n  }, {\n    key: \"bindSkeleton\",\n    value: function bindSkeleton(skeletons, geometryMap, modelMap) {\n      var bindMatrices = this.parsePoseNodes();\n      var _loop2 = function _loop2() {\n        var skeleton = skeletons[ID];\n        var parents = connections.get(parseInt(skeleton.ID)).parents;\n        parents.forEach(function (parent) {\n          if (geometryMap.has(parent.ID)) {\n            var geoID = parent.ID;\n            var geoRelationships = connections.get(geoID);\n            geoRelationships.parents.forEach(function (geoConnParent) {\n              if (modelMap.has(geoConnParent.ID)) {\n                var model = modelMap.get(geoConnParent.ID);\n                model.bind(new Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID]);\n              }\n            });\n          }\n        });\n      };\n      for (var ID in skeletons) {\n        _loop2();\n      }\n    }\n  }, {\n    key: \"parsePoseNodes\",\n    value: function parsePoseNodes() {\n      var bindMatrices = {};\n      if ('Pose' in fbxTree.Objects) {\n        var BindPoseNode = fbxTree.Objects.Pose;\n        for (var nodeID in BindPoseNode) {\n          if (BindPoseNode[nodeID].attrType === 'BindPose' && BindPoseNode[nodeID].NbPoseNodes > 0) {\n            var poseNodes = BindPoseNode[nodeID].PoseNode;\n            if (Array.isArray(poseNodes)) {\n              poseNodes.forEach(function (poseNode) {\n                bindMatrices[poseNode.Node] = new Matrix4().fromArray(poseNode.Matrix.a);\n              });\n            } else {\n              bindMatrices[poseNodes.Node] = new Matrix4().fromArray(poseNodes.Matrix.a);\n            }\n          }\n        }\n      }\n      return bindMatrices;\n    } // Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\n  }, {\n    key: \"createAmbientLight\",\n    value: function createAmbientLight() {\n      if ('GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings) {\n        var ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n        var r = ambientColor[0];\n        var g = ambientColor[1];\n        var b = ambientColor[2];\n        if (r !== 0 || g !== 0 || b !== 0) {\n          var color = new Color(r, g, b);\n          sceneGraph.add(new AmbientLight(color, 1));\n        }\n      }\n    }\n  }]);\n  return FBXTreeParser;\n}(); // parse Geometry data from FBXTree and return map of BufferGeometries\nvar GeometryParser = /*#__PURE__*/function () {\n  function GeometryParser() {\n    _classCallCheck(this, GeometryParser);\n  }\n  _createClass(GeometryParser, [{\n    key: \"parse\",\n    value:\n    // Parse nodes in FBXTree.Objects.Geometry\n    function parse(deformers) {\n      var geometryMap = new Map();\n      if ('Geometry' in fbxTree.Objects) {\n        var geoNodes = fbxTree.Objects.Geometry;\n        for (var nodeID in geoNodes) {\n          var relationships = connections.get(parseInt(nodeID));\n          var geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers);\n          geometryMap.set(parseInt(nodeID), geo);\n        }\n      }\n      return geometryMap;\n    } // Parse single node in FBXTree.Objects.Geometry\n  }, {\n    key: \"parseGeometry\",\n    value: function parseGeometry(relationships, geoNode, deformers) {\n      switch (geoNode.attrType) {\n        case 'Mesh':\n          return this.parseMeshGeometry(relationships, geoNode, deformers);\n        case 'NurbsCurve':\n          return this.parseNurbsGeometry(geoNode);\n      }\n    } // Parse single node mesh geometry in FBXTree.Objects.Geometry\n  }, {\n    key: \"parseMeshGeometry\",\n    value: function parseMeshGeometry(relationships, geoNode, deformers) {\n      var skeletons = deformers.skeletons;\n      var morphTargets = [];\n      var modelNodes = relationships.parents.map(function (parent) {\n        return fbxTree.Objects.Model[parent.ID];\n      }); // don't create geometry if it is not associated with any models\n\n      if (modelNodes.length === 0) return;\n      var skeleton = relationships.children.reduce(function (skeleton, child) {\n        if (skeletons[child.ID] !== undefined) skeleton = skeletons[child.ID];\n        return skeleton;\n      }, null);\n      relationships.children.forEach(function (child) {\n        if (deformers.morphTargets[child.ID] !== undefined) {\n          morphTargets.push(deformers.morphTargets[child.ID]);\n        }\n      }); // Assume one model and get the preRotation from that\n      // if there is more than one model associated with the geometry this may cause problems\n\n      var modelNode = modelNodes[0];\n      var transformData = {};\n      if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\n      if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n      if ('GeometricTranslation' in modelNode) transformData.translation = modelNode.GeometricTranslation.value;\n      if ('GeometricRotation' in modelNode) transformData.rotation = modelNode.GeometricRotation.value;\n      if ('GeometricScaling' in modelNode) transformData.scale = modelNode.GeometricScaling.value;\n      var transform = generateTransform(transformData);\n      return this.genGeometry(geoNode, skeleton, morphTargets, transform);\n    } // Generate a BufferGeometry from a node in FBXTree.Objects.Geometry\n  }, {\n    key: \"genGeometry\",\n    value: function genGeometry(geoNode, skeleton, morphTargets, preTransform) {\n      var geo = new BufferGeometry();\n      if (geoNode.attrName) geo.name = geoNode.attrName;\n      var geoInfo = this.parseGeoNode(geoNode, skeleton);\n      var buffers = this.genBuffers(geoInfo);\n      var positionAttribute = new Float32BufferAttribute(buffers.vertex, 3);\n      positionAttribute.applyMatrix4(preTransform);\n      geo.setAttribute('position', positionAttribute);\n      if (buffers.colors.length > 0) {\n        geo.setAttribute('color', new Float32BufferAttribute(buffers.colors, 3));\n      }\n      if (skeleton) {\n        geo.setAttribute('skinIndex', new Uint16BufferAttribute(buffers.weightsIndices, 4));\n        geo.setAttribute('skinWeight', new Float32BufferAttribute(buffers.vertexWeights, 4)); // used later to bind the skeleton to the model\n\n        geo.FBX_Deformer = skeleton;\n      }\n      if (buffers.normal.length > 0) {\n        var normalMatrix = new Matrix3().getNormalMatrix(preTransform);\n        var normalAttribute = new Float32BufferAttribute(buffers.normal, 3);\n        normalAttribute.applyNormalMatrix(normalMatrix);\n        geo.setAttribute('normal', normalAttribute);\n      }\n      buffers.uvs.forEach(function (uvBuffer, i) {\n        // subsequent uv buffers are called 'uv1', 'uv2', ...\n        var name = 'uv' + (i + 1).toString(); // the first uv buffer is just called 'uv'\n\n        if (i === 0) {\n          name = 'uv';\n        }\n        geo.setAttribute(name, new Float32BufferAttribute(buffers.uvs[i], 2));\n      });\n      if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n        // Convert the material indices of each vertex into rendering groups on the geometry.\n        var prevMaterialIndex = buffers.materialIndex[0];\n        var startIndex = 0;\n        buffers.materialIndex.forEach(function (currentIndex, i) {\n          if (currentIndex !== prevMaterialIndex) {\n            geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);\n            prevMaterialIndex = currentIndex;\n            startIndex = i;\n          }\n        }); // the loop above doesn't add the last group, do that here.\n\n        if (geo.groups.length > 0) {\n          var lastGroup = geo.groups[geo.groups.length - 1];\n          var lastIndex = lastGroup.start + lastGroup.count;\n          if (lastIndex !== buffers.materialIndex.length) {\n            geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex);\n          }\n        } // case where there are multiple materials but the whole geometry is only\n        // using one of them\n\n        if (geo.groups.length === 0) {\n          geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0]);\n        }\n      }\n      this.addMorphTargets(geo, geoNode, morphTargets, preTransform);\n      return geo;\n    }\n  }, {\n    key: \"parseGeoNode\",\n    value: function parseGeoNode(geoNode, skeleton) {\n      var geoInfo = {};\n      geoInfo.vertexPositions = geoNode.Vertices !== undefined ? geoNode.Vertices.a : [];\n      geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== undefined ? geoNode.PolygonVertexIndex.a : [];\n      if (geoNode.LayerElementColor) {\n        geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);\n      }\n      if (geoNode.LayerElementMaterial) {\n        geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0]);\n      }\n      if (geoNode.LayerElementNormal) {\n        geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);\n      }\n      if (geoNode.LayerElementUV) {\n        geoInfo.uv = [];\n        var i = 0;\n        while (geoNode.LayerElementUV[i]) {\n          if (geoNode.LayerElementUV[i].UV) {\n            geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));\n          }\n          i++;\n        }\n      }\n      geoInfo.weightTable = {};\n      if (skeleton !== null) {\n        geoInfo.skeleton = skeleton;\n        skeleton.rawBones.forEach(function (rawBone, i) {\n          // loop over the bone's vertex indices and weights\n          rawBone.indices.forEach(function (index, j) {\n            if (geoInfo.weightTable[index] === undefined) geoInfo.weightTable[index] = [];\n            geoInfo.weightTable[index].push({\n              id: i,\n              weight: rawBone.weights[j]\n            });\n          });\n        });\n      }\n      return geoInfo;\n    }\n  }, {\n    key: \"genBuffers\",\n    value: function genBuffers(geoInfo) {\n      var buffers = {\n        vertex: [],\n        normal: [],\n        colors: [],\n        uvs: [],\n        materialIndex: [],\n        vertexWeights: [],\n        weightsIndices: []\n      };\n      var polygonIndex = 0;\n      var faceLength = 0;\n      var displayedWeightsWarning = false; // these will hold data for a single face\n\n      var facePositionIndexes = [];\n      var faceNormals = [];\n      var faceColors = [];\n      var faceUVs = [];\n      var faceWeights = [];\n      var faceWeightIndices = [];\n      var scope = this;\n      geoInfo.vertexIndices.forEach(function (vertexIndex, polygonVertexIndex) {\n        var materialIndex;\n        var endOfFace = false; // Face index and vertex index arrays are combined in a single array\n        // A cube with quad faces looks like this:\n        // PolygonVertexIndex: *24 {\n        //  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5\n        //  }\n        // Negative numbers mark the end of a face - first face here is 0, 1, 3, -3\n        // to find index of last vertex bit shift the index: ^ - 1\n\n        if (vertexIndex < 0) {\n          vertexIndex = vertexIndex ^ -1; // equivalent to ( x * -1 ) - 1\n\n          endOfFace = true;\n        }\n        var weightIndices = [];\n        var weights = [];\n        facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);\n        if (geoInfo.color) {\n          var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color);\n          faceColors.push(data[0], data[1], data[2]);\n        }\n        if (geoInfo.skeleton) {\n          if (geoInfo.weightTable[vertexIndex] !== undefined) {\n            geoInfo.weightTable[vertexIndex].forEach(function (wt) {\n              weights.push(wt.weight);\n              weightIndices.push(wt.id);\n            });\n          }\n          if (weights.length > 4) {\n            if (!displayedWeightsWarning) {\n              console.warn('THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.');\n              displayedWeightsWarning = true;\n            }\n            var wIndex = [0, 0, 0, 0];\n            var Weight = [0, 0, 0, 0];\n            weights.forEach(function (weight, weightIndex) {\n              var currentWeight = weight;\n              var currentIndex = weightIndices[weightIndex];\n              Weight.forEach(function (comparedWeight, comparedWeightIndex, comparedWeightArray) {\n                if (currentWeight > comparedWeight) {\n                  comparedWeightArray[comparedWeightIndex] = currentWeight;\n                  currentWeight = comparedWeight;\n                  var tmp = wIndex[comparedWeightIndex];\n                  wIndex[comparedWeightIndex] = currentIndex;\n                  currentIndex = tmp;\n                }\n              });\n            });\n            weightIndices = wIndex;\n            weights = Weight;\n          } // if the weight array is shorter than 4 pad with 0s\n\n          while (weights.length < 4) {\n            weights.push(0);\n            weightIndices.push(0);\n          }\n          for (var i = 0; i < 4; ++i) {\n            faceWeights.push(weights[i]);\n            faceWeightIndices.push(weightIndices[i]);\n          }\n        }\n        if (geoInfo.normal) {\n          var _data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal);\n          faceNormals.push(_data[0], _data[1], _data[2]);\n        }\n        if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n          materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0];\n        }\n        if (geoInfo.uv) {\n          geoInfo.uv.forEach(function (uv, i) {\n            var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv);\n            if (faceUVs[i] === undefined) {\n              faceUVs[i] = [];\n            }\n            faceUVs[i].push(data[0]);\n            faceUVs[i].push(data[1]);\n          });\n        }\n        faceLength++;\n        if (endOfFace) {\n          scope.genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength);\n          polygonIndex++;\n          faceLength = 0; // reset arrays for the next face\n\n          facePositionIndexes = [];\n          faceNormals = [];\n          faceColors = [];\n          faceUVs = [];\n          faceWeights = [];\n          faceWeightIndices = [];\n        }\n      });\n      return buffers;\n    } // Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n  }, {\n    key: \"genFace\",\n    value: function genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength) {\n      var _loop3 = function _loop3(i) {\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]]);\n        if (geoInfo.skeleton) {\n          buffers.vertexWeights.push(faceWeights[0]);\n          buffers.vertexWeights.push(faceWeights[1]);\n          buffers.vertexWeights.push(faceWeights[2]);\n          buffers.vertexWeights.push(faceWeights[3]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3]);\n          buffers.vertexWeights.push(faceWeights[i * 4]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 1]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 2]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 3]);\n          buffers.weightsIndices.push(faceWeightIndices[0]);\n          buffers.weightsIndices.push(faceWeightIndices[1]);\n          buffers.weightsIndices.push(faceWeightIndices[2]);\n          buffers.weightsIndices.push(faceWeightIndices[3]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 1]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 2]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 3]);\n        }\n        if (geoInfo.color) {\n          buffers.colors.push(faceColors[0]);\n          buffers.colors.push(faceColors[1]);\n          buffers.colors.push(faceColors[2]);\n          buffers.colors.push(faceColors[(i - 1) * 3]);\n          buffers.colors.push(faceColors[(i - 1) * 3 + 1]);\n          buffers.colors.push(faceColors[(i - 1) * 3 + 2]);\n          buffers.colors.push(faceColors[i * 3]);\n          buffers.colors.push(faceColors[i * 3 + 1]);\n          buffers.colors.push(faceColors[i * 3 + 2]);\n        }\n        if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n          buffers.materialIndex.push(materialIndex);\n          buffers.materialIndex.push(materialIndex);\n          buffers.materialIndex.push(materialIndex);\n        }\n        if (geoInfo.normal) {\n          buffers.normal.push(faceNormals[0]);\n          buffers.normal.push(faceNormals[1]);\n          buffers.normal.push(faceNormals[2]);\n          buffers.normal.push(faceNormals[(i - 1) * 3]);\n          buffers.normal.push(faceNormals[(i - 1) * 3 + 1]);\n          buffers.normal.push(faceNormals[(i - 1) * 3 + 2]);\n          buffers.normal.push(faceNormals[i * 3]);\n          buffers.normal.push(faceNormals[i * 3 + 1]);\n          buffers.normal.push(faceNormals[i * 3 + 2]);\n        }\n        if (geoInfo.uv) {\n          geoInfo.uv.forEach(function (uv, j) {\n            if (buffers.uvs[j] === undefined) buffers.uvs[j] = [];\n            buffers.uvs[j].push(faceUVs[j][0]);\n            buffers.uvs[j].push(faceUVs[j][1]);\n            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2]);\n            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1]);\n            buffers.uvs[j].push(faceUVs[j][i * 2]);\n            buffers.uvs[j].push(faceUVs[j][i * 2 + 1]);\n          });\n        }\n      };\n      for (var i = 2; i < faceLength; i++) {\n        _loop3(i);\n      }\n    }\n  }, {\n    key: \"addMorphTargets\",\n    value: function addMorphTargets(parentGeo, parentGeoNode, morphTargets, preTransform) {\n      if (morphTargets.length === 0) return;\n      parentGeo.morphTargetsRelative = true;\n      parentGeo.morphAttributes.position = []; // parentGeo.morphAttributes.normal = []; // not implemented\n\n      var scope = this;\n      morphTargets.forEach(function (morphTarget) {\n        morphTarget.rawTargets.forEach(function (rawTarget) {\n          var morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];\n          if (morphGeoNode !== undefined) {\n            scope.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name);\n          }\n        });\n      });\n    } // a morph geometry node is similar to a standard  node, and the node is also contained\n    // in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n    // and a special attribute Index defining which vertices of the original geometry are affected\n    // Normal and position attributes only have data for the vertices that are affected by the morph\n  }, {\n    key: \"genMorphGeometry\",\n    value: function genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, name) {\n      var vertexIndices = parentGeoNode.PolygonVertexIndex !== undefined ? parentGeoNode.PolygonVertexIndex.a : [];\n      var morphPositionsSparse = morphGeoNode.Vertices !== undefined ? morphGeoNode.Vertices.a : [];\n      var indices = morphGeoNode.Indexes !== undefined ? morphGeoNode.Indexes.a : [];\n      var length = parentGeo.attributes.position.count * 3;\n      var morphPositions = new Float32Array(length);\n      for (var i = 0; i < indices.length; i++) {\n        var morphIndex = indices[i] * 3;\n        morphPositions[morphIndex] = morphPositionsSparse[i * 3];\n        morphPositions[morphIndex + 1] = morphPositionsSparse[i * 3 + 1];\n        morphPositions[morphIndex + 2] = morphPositionsSparse[i * 3 + 2];\n      } // TODO: add morph normal support\n\n      var morphGeoInfo = {\n        vertexIndices: vertexIndices,\n        vertexPositions: morphPositions\n      };\n      var morphBuffers = this.genBuffers(morphGeoInfo);\n      var positionAttribute = new Float32BufferAttribute(morphBuffers.vertex, 3);\n      positionAttribute.name = name || morphGeoNode.attrName;\n      positionAttribute.applyMatrix4(preTransform);\n      parentGeo.morphAttributes.position.push(positionAttribute);\n    } // Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n  }, {\n    key: \"parseNormals\",\n    value: function parseNormals(NormalNode) {\n      var mappingType = NormalNode.MappingInformationType;\n      var referenceType = NormalNode.ReferenceInformationType;\n      var buffer = NormalNode.Normals.a;\n      var indexBuffer = [];\n      if (referenceType === 'IndexToDirect') {\n        if ('NormalIndex' in NormalNode) {\n          indexBuffer = NormalNode.NormalIndex.a;\n        } else if ('NormalsIndex' in NormalNode) {\n          indexBuffer = NormalNode.NormalsIndex.a;\n        }\n      }\n      return {\n        dataSize: 3,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    } // Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n  }, {\n    key: \"parseUVs\",\n    value: function parseUVs(UVNode) {\n      var mappingType = UVNode.MappingInformationType;\n      var referenceType = UVNode.ReferenceInformationType;\n      var buffer = UVNode.UV.a;\n      var indexBuffer = [];\n      if (referenceType === 'IndexToDirect') {\n        indexBuffer = UVNode.UVIndex.a;\n      }\n      return {\n        dataSize: 2,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    } // Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n  }, {\n    key: \"parseVertexColors\",\n    value: function parseVertexColors(ColorNode) {\n      var mappingType = ColorNode.MappingInformationType;\n      var referenceType = ColorNode.ReferenceInformationType;\n      var buffer = ColorNode.Colors.a;\n      var indexBuffer = [];\n      if (referenceType === 'IndexToDirect') {\n        indexBuffer = ColorNode.ColorIndex.a;\n      }\n      return {\n        dataSize: 4,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    } // Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n  }, {\n    key: \"parseMaterialIndices\",\n    value: function parseMaterialIndices(MaterialNode) {\n      var mappingType = MaterialNode.MappingInformationType;\n      var referenceType = MaterialNode.ReferenceInformationType;\n      if (mappingType === 'NoMappingInformation') {\n        return {\n          dataSize: 1,\n          buffer: [0],\n          indices: [0],\n          mappingType: 'AllSame',\n          referenceType: referenceType\n        };\n      }\n      var materialIndexBuffer = MaterialNode.Materials.a; // Since materials are stored as indices, there's a bit of a mismatch between FBX and what\n      // we expect.So we create an intermediate buffer that points to the index in the buffer,\n      // for conforming with the other functions we've written for other data.\n\n      var materialIndices = [];\n      for (var i = 0; i < materialIndexBuffer.length; ++i) {\n        materialIndices.push(i);\n      }\n      return {\n        dataSize: 1,\n        buffer: materialIndexBuffer,\n        indices: materialIndices,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    } // Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n  }, {\n    key: \"parseNurbsGeometry\",\n    value: function parseNurbsGeometry(geoNode) {\n      if (NURBSCurve === undefined) {\n        console.error('THREE.FBXLoader: The loader relies on NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.');\n        return new BufferGeometry();\n      }\n      var order = parseInt(geoNode.Order);\n      if (isNaN(order)) {\n        console.error('THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id);\n        return new BufferGeometry();\n      }\n      var degree = order - 1;\n      var knots = geoNode.KnotVector.a;\n      var controlPoints = [];\n      var pointsValues = geoNode.Points.a;\n      for (var i = 0, l = pointsValues.length; i < l; i += 4) {\n        controlPoints.push(new Vector4().fromArray(pointsValues, i));\n      }\n      var startKnot, endKnot;\n      if (geoNode.Form === 'Closed') {\n        controlPoints.push(controlPoints[0]);\n      } else if (geoNode.Form === 'Periodic') {\n        startKnot = degree;\n        endKnot = knots.length - 1 - startKnot;\n        for (var _i = 0; _i < degree; ++_i) {\n          controlPoints.push(controlPoints[_i]);\n        }\n      }\n      var curve = new NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);\n      var points = curve.getPoints(controlPoints.length * 12);\n      return new BufferGeometry().setFromPoints(points);\n    }\n  }]);\n  return GeometryParser;\n}(); // parse animation data from FBXTree\nvar AnimationParser = /*#__PURE__*/function () {\n  function AnimationParser() {\n    _classCallCheck(this, AnimationParser);\n  }\n  _createClass(AnimationParser, [{\n    key: \"parse\",\n    value:\n    // take raw animation clips and turn them into three.js animation clips\n    function parse() {\n      var animationClips = [];\n      var rawClips = this.parseClips();\n      if (rawClips !== undefined) {\n        for (var key in rawClips) {\n          var rawClip = rawClips[key];\n          var clip = this.addClip(rawClip);\n          animationClips.push(clip);\n        }\n      }\n      return animationClips;\n    }\n  }, {\n    key: \"parseClips\",\n    value: function parseClips() {\n      // since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,\n      // if this is undefined we can safely assume there are no animations\n      if (fbxTree.Objects.AnimationCurve === undefined) return undefined;\n      var curveNodesMap = this.parseAnimationCurveNodes();\n      this.parseAnimationCurves(curveNodesMap);\n      var layersMap = this.parseAnimationLayers(curveNodesMap);\n      var rawClips = this.parseAnimStacks(layersMap);\n      return rawClips;\n    } // parse nodes in FBXTree.Objects.AnimationCurveNode\n    // each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n    // and is referenced by an AnimationLayer\n  }, {\n    key: \"parseAnimationCurveNodes\",\n    value: function parseAnimationCurveNodes() {\n      var rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n      var curveNodesMap = new Map();\n      for (var nodeID in rawCurveNodes) {\n        var rawCurveNode = rawCurveNodes[nodeID];\n        if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {\n          var curveNode = {\n            id: rawCurveNode.id,\n            attr: rawCurveNode.attrName,\n            curves: {}\n          };\n          curveNodesMap.set(curveNode.id, curveNode);\n        }\n      }\n      return curveNodesMap;\n    } // parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n    // previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n    // axis ( e.g. times and values of x rotation)\n  }, {\n    key: \"parseAnimationCurves\",\n    value: function parseAnimationCurves(curveNodesMap) {\n      var rawCurves = fbxTree.Objects.AnimationCurve; // TODO: Many values are identical up to roundoff error, but won't be optimised\n      // e.g. position times: [0, 0.4, 0. 8]\n      // position values: [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.235384487103147e-7, 93.67520904541016, -0.9982695579528809]\n      // clearly, this should be optimised to\n      // times: [0], positions [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809]\n      // this shows up in nearly every FBX file, and generally time array is length > 100\n\n      for (var nodeID in rawCurves) {\n        var animationCurve = {\n          id: rawCurves[nodeID].id,\n          times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),\n          values: rawCurves[nodeID].KeyValueFloat.a\n        };\n        var relationships = connections.get(animationCurve.id);\n        if (relationships !== undefined) {\n          var animationCurveID = relationships.parents[0].ID;\n          var animationCurveRelationship = relationships.parents[0].relationship;\n          if (animationCurveRelationship.match(/X/)) {\n            curveNodesMap.get(animationCurveID).curves['x'] = animationCurve;\n          } else if (animationCurveRelationship.match(/Y/)) {\n            curveNodesMap.get(animationCurveID).curves['y'] = animationCurve;\n          } else if (animationCurveRelationship.match(/Z/)) {\n            curveNodesMap.get(animationCurveID).curves['z'] = animationCurve;\n          } else if (animationCurveRelationship.match(/d|DeformPercent/) && curveNodesMap.has(animationCurveID)) {\n            curveNodesMap.get(animationCurveID).curves['morph'] = animationCurve;\n          }\n        }\n      }\n    } // parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n    // to various AnimationCurveNodes and is referenced by an AnimationStack node\n    // note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n  }, {\n    key: \"parseAnimationLayers\",\n    value: function parseAnimationLayers(curveNodesMap) {\n      var rawLayers = fbxTree.Objects.AnimationLayer;\n      var layersMap = new Map();\n      var _loop4 = function _loop4() {\n        var layerCurveNodes = [];\n        var connection = connections.get(parseInt(nodeID));\n        if (connection !== undefined) {\n          // all the animationCurveNodes used in the layer\n          var children = connection.children;\n          children.forEach(function (child, i) {\n            if (curveNodesMap.has(child.ID)) {\n              var curveNode = curveNodesMap.get(child.ID); // check that the curves are defined for at least one axis, otherwise ignore the curveNode\n\n              if (curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined) {\n                if (layerCurveNodes[i] === undefined) {\n                  var modelID = connections.get(child.ID).parents.filter(function (parent) {\n                    return parent.relationship !== undefined;\n                  })[0].ID;\n                  if (modelID !== undefined) {\n                    var rawModel = fbxTree.Objects.Model[modelID.toString()];\n                    if (rawModel === undefined) {\n                      console.warn('THREE.FBXLoader: Encountered a unused curve.', child);\n                      return;\n                    }\n                    var node = {\n                      modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                      ID: rawModel.id,\n                      initialPosition: [0, 0, 0],\n                      initialRotation: [0, 0, 0],\n                      initialScale: [1, 1, 1]\n                    };\n                    sceneGraph.traverse(function (child) {\n                      if (child.ID === rawModel.id) {\n                        node.transform = child.matrix;\n                        if (child.userData.transformData) node.eulerOrder = child.userData.transformData.eulerOrder;\n                      }\n                    });\n                    if (!node.transform) node.transform = new Matrix4(); // if the animated model is pre rotated, we'll have to apply the pre rotations to every\n                    // animation value as well\n\n                    if ('PreRotation' in rawModel) node.preRotation = rawModel.PreRotation.value;\n                    if ('PostRotation' in rawModel) node.postRotation = rawModel.PostRotation.value;\n                    layerCurveNodes[i] = node;\n                  }\n                }\n                if (layerCurveNodes[i]) layerCurveNodes[i][curveNode.attr] = curveNode;\n              } else if (curveNode.curves.morph !== undefined) {\n                if (layerCurveNodes[i] === undefined) {\n                  var deformerID = connections.get(child.ID).parents.filter(function (parent) {\n                    return parent.relationship !== undefined;\n                  })[0].ID;\n                  var morpherID = connections.get(deformerID).parents[0].ID;\n                  var geoID = connections.get(morpherID).parents[0].ID; // assuming geometry is not used in more than one model\n\n                  var _modelID = connections.get(geoID).parents[0].ID;\n                  var _rawModel = fbxTree.Objects.Model[_modelID];\n                  var _node = {\n                    modelName: _rawModel.attrName ? PropertyBinding.sanitizeNodeName(_rawModel.attrName) : '',\n                    morphName: fbxTree.Objects.Deformer[deformerID].attrName\n                  };\n                  layerCurveNodes[i] = _node;\n                }\n                layerCurveNodes[i][curveNode.attr] = curveNode;\n              }\n            }\n          });\n          layersMap.set(parseInt(nodeID), layerCurveNodes);\n        }\n      };\n      for (var nodeID in rawLayers) {\n        _loop4();\n      }\n      return layersMap;\n    } // parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n    // hierarchy. Each Stack node will be used to create a AnimationClip\n  }, {\n    key: \"parseAnimStacks\",\n    value: function parseAnimStacks(layersMap) {\n      var rawStacks = fbxTree.Objects.AnimationStack; // connect the stacks (clips) up to the layers\n\n      var rawClips = {};\n      for (var nodeID in rawStacks) {\n        var children = connections.get(parseInt(nodeID)).children;\n        if (children.length > 1) {\n          // it seems like stacks will always be associated with a single layer. But just in case there are files\n          // where there are multiple layers per stack, we'll display a warning\n          console.warn('THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.');\n        }\n        var layer = layersMap.get(children[0].ID);\n        rawClips[nodeID] = {\n          name: rawStacks[nodeID].attrName,\n          layer: layer\n        };\n      }\n      return rawClips;\n    }\n  }, {\n    key: \"addClip\",\n    value: function addClip(rawClip) {\n      var tracks = [];\n      var scope = this;\n      rawClip.layer.forEach(function (rawTracks) {\n        tracks = tracks.concat(scope.generateTracks(rawTracks));\n      });\n      return new AnimationClip(rawClip.name, -1, tracks);\n    }\n  }, {\n    key: \"generateTracks\",\n    value: function generateTracks(rawTracks) {\n      var tracks = [];\n      var initialPosition = new Vector3();\n      var initialRotation = new Quaternion();\n      var initialScale = new Vector3();\n      if (rawTracks.transform) rawTracks.transform.decompose(initialPosition, initialRotation, initialScale);\n      initialPosition = initialPosition.toArray();\n      initialRotation = new Euler().setFromQuaternion(initialRotation, rawTracks.eulerOrder).toArray();\n      initialScale = initialScale.toArray();\n      if (rawTracks.T !== undefined && Object.keys(rawTracks.T.curves).length > 0) {\n        var positionTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position');\n        if (positionTrack !== undefined) tracks.push(positionTrack);\n      }\n      if (rawTracks.R !== undefined && Object.keys(rawTracks.R.curves).length > 0) {\n        var rotationTrack = this.generateRotationTrack(rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder);\n        if (rotationTrack !== undefined) tracks.push(rotationTrack);\n      }\n      if (rawTracks.S !== undefined && Object.keys(rawTracks.S.curves).length > 0) {\n        var scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale');\n        if (scaleTrack !== undefined) tracks.push(scaleTrack);\n      }\n      if (rawTracks.DeformPercent !== undefined) {\n        var morphTrack = this.generateMorphTrack(rawTracks);\n        if (morphTrack !== undefined) tracks.push(morphTrack);\n      }\n      return tracks;\n    }\n  }, {\n    key: \"generateVectorTrack\",\n    value: function generateVectorTrack(modelName, curves, initialValue, type) {\n      var times = this.getTimesForAllAxes(curves);\n      var values = this.getKeyframeTrackValues(times, curves, initialValue);\n      return new VectorKeyframeTrack(modelName + '.' + type, times, values);\n    }\n  }, {\n    key: \"generateRotationTrack\",\n    value: function generateRotationTrack(modelName, curves, initialValue, preRotation, postRotation, eulerOrder) {\n      if (curves.x !== undefined) {\n        this.interpolateRotations(curves.x);\n        curves.x.values = curves.x.values.map(MathUtils.degToRad);\n      }\n      if (curves.y !== undefined) {\n        this.interpolateRotations(curves.y);\n        curves.y.values = curves.y.values.map(MathUtils.degToRad);\n      }\n      if (curves.z !== undefined) {\n        this.interpolateRotations(curves.z);\n        curves.z.values = curves.z.values.map(MathUtils.degToRad);\n      }\n      var times = this.getTimesForAllAxes(curves);\n      var values = this.getKeyframeTrackValues(times, curves, initialValue);\n      if (preRotation !== undefined) {\n        preRotation = preRotation.map(MathUtils.degToRad);\n        preRotation.push(eulerOrder);\n        preRotation = new Euler().fromArray(preRotation);\n        preRotation = new Quaternion().setFromEuler(preRotation);\n      }\n      if (postRotation !== undefined) {\n        postRotation = postRotation.map(MathUtils.degToRad);\n        postRotation.push(eulerOrder);\n        postRotation = new Euler().fromArray(postRotation);\n        postRotation = new Quaternion().setFromEuler(postRotation).invert();\n      }\n      var quaternion = new Quaternion();\n      var euler = new Euler();\n      var quaternionValues = [];\n      for (var i = 0; i < values.length; i += 3) {\n        euler.set(values[i], values[i + 1], values[i + 2], eulerOrder);\n        quaternion.setFromEuler(euler);\n        if (preRotation !== undefined) quaternion.premultiply(preRotation);\n        if (postRotation !== undefined) quaternion.multiply(postRotation);\n        quaternion.toArray(quaternionValues, i / 3 * 4);\n      }\n      return new QuaternionKeyframeTrack(modelName + '.quaternion', times, quaternionValues);\n    }\n  }, {\n    key: \"generateMorphTrack\",\n    value: function generateMorphTrack(rawTracks) {\n      var curves = rawTracks.DeformPercent.curves.morph;\n      var values = curves.values.map(function (val) {\n        return val / 100;\n      });\n      var morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName];\n      return new NumberKeyframeTrack(rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values);\n    } // For all animated objects, times are defined separately for each axis\n    // Here we'll combine the times into one sorted array without duplicates\n  }, {\n    key: \"getTimesForAllAxes\",\n    value: function getTimesForAllAxes(curves) {\n      var times = []; // first join together the times for each axis, if defined\n\n      if (curves.x !== undefined) times = times.concat(curves.x.times);\n      if (curves.y !== undefined) times = times.concat(curves.y.times);\n      if (curves.z !== undefined) times = times.concat(curves.z.times); // then sort them\n\n      times = times.sort(function (a, b) {\n        return a - b;\n      }); // and remove duplicates\n\n      if (times.length > 1) {\n        var targetIndex = 1;\n        var lastValue = times[0];\n        for (var i = 1; i < times.length; i++) {\n          var currentValue = times[i];\n          if (currentValue !== lastValue) {\n            times[targetIndex] = currentValue;\n            lastValue = currentValue;\n            targetIndex++;\n          }\n        }\n        times = times.slice(0, targetIndex);\n      }\n      return times;\n    }\n  }, {\n    key: \"getKeyframeTrackValues\",\n    value: function getKeyframeTrackValues(times, curves, initialValue) {\n      var prevValue = initialValue;\n      var values = [];\n      var xIndex = -1;\n      var yIndex = -1;\n      var zIndex = -1;\n      times.forEach(function (time) {\n        if (curves.x) xIndex = curves.x.times.indexOf(time);\n        if (curves.y) yIndex = curves.y.times.indexOf(time);\n        if (curves.z) zIndex = curves.z.times.indexOf(time); // if there is an x value defined for this frame, use that\n\n        if (xIndex !== -1) {\n          var xValue = curves.x.values[xIndex];\n          values.push(xValue);\n          prevValue[0] = xValue;\n        } else {\n          // otherwise use the x value from the previous frame\n          values.push(prevValue[0]);\n        }\n        if (yIndex !== -1) {\n          var yValue = curves.y.values[yIndex];\n          values.push(yValue);\n          prevValue[1] = yValue;\n        } else {\n          values.push(prevValue[1]);\n        }\n        if (zIndex !== -1) {\n          var zValue = curves.z.values[zIndex];\n          values.push(zValue);\n          prevValue[2] = zValue;\n        } else {\n          values.push(prevValue[2]);\n        }\n      });\n      return values;\n    } // Rotations are defined as Euler angles which can have values  of any size\n    // These will be converted to quaternions which don't support values greater than\n    // PI, so we'll interpolate large rotations\n  }, {\n    key: \"interpolateRotations\",\n    value: function interpolateRotations(curve) {\n      for (var i = 1; i < curve.values.length; i++) {\n        var initialValue = curve.values[i - 1];\n        var valuesSpan = curve.values[i] - initialValue;\n        var absoluteSpan = Math.abs(valuesSpan);\n        if (absoluteSpan >= 180) {\n          var numSubIntervals = absoluteSpan / 180;\n          var step = valuesSpan / numSubIntervals;\n          var nextValue = initialValue + step;\n          var initialTime = curve.times[i - 1];\n          var timeSpan = curve.times[i] - initialTime;\n          var interval = timeSpan / numSubIntervals;\n          var nextTime = initialTime + interval;\n          var interpolatedTimes = [];\n          var interpolatedValues = [];\n          while (nextTime < curve.times[i]) {\n            interpolatedTimes.push(nextTime);\n            nextTime += interval;\n            interpolatedValues.push(nextValue);\n            nextValue += step;\n          }\n          curve.times = inject(curve.times, i, interpolatedTimes);\n          curve.values = inject(curve.values, i, interpolatedValues);\n        }\n      }\n    }\n  }]);\n  return AnimationParser;\n}(); // parse an FBX file in ASCII format\nvar TextParser = /*#__PURE__*/function () {\n  function TextParser() {\n    _classCallCheck(this, TextParser);\n  }\n  _createClass(TextParser, [{\n    key: \"getPrevNode\",\n    value: function getPrevNode() {\n      return this.nodeStack[this.currentIndent - 2];\n    }\n  }, {\n    key: \"getCurrentNode\",\n    value: function getCurrentNode() {\n      return this.nodeStack[this.currentIndent - 1];\n    }\n  }, {\n    key: \"getCurrentProp\",\n    value: function getCurrentProp() {\n      return this.currentProp;\n    }\n  }, {\n    key: \"pushStack\",\n    value: function pushStack(node) {\n      this.nodeStack.push(node);\n      this.currentIndent += 1;\n    }\n  }, {\n    key: \"popStack\",\n    value: function popStack() {\n      this.nodeStack.pop();\n      this.currentIndent -= 1;\n    }\n  }, {\n    key: \"setCurrentProp\",\n    value: function setCurrentProp(val, name) {\n      this.currentProp = val;\n      this.currentPropName = name;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(text) {\n      this.currentIndent = 0;\n      this.allNodes = new FBXTree();\n      this.nodeStack = [];\n      this.currentProp = [];\n      this.currentPropName = '';\n      var scope = this;\n      var split = text.split(/[\\r\\n]+/);\n      split.forEach(function (line, i) {\n        var matchComment = line.match(/^[\\s\\t]*;/);\n        var matchEmpty = line.match(/^[\\s\\t]*$/);\n        if (matchComment || matchEmpty) return;\n        var matchBeginning = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):(.*){', '');\n        var matchProperty = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)');\n        var matchEnd = line.match('^\\\\t{' + (scope.currentIndent - 1) + '}}');\n        if (matchBeginning) {\n          scope.parseNodeBegin(line, matchBeginning);\n        } else if (matchProperty) {\n          scope.parseNodeProperty(line, matchProperty, split[++i]);\n        } else if (matchEnd) {\n          scope.popStack();\n        } else if (line.match(/^[^\\s\\t}]/)) {\n          // large arrays are split over multiple lines terminated with a ',' character\n          // if this is encountered the line needs to be joined to the previous line\n          scope.parseNodePropertyContinued(line);\n        }\n      });\n      return this.allNodes;\n    }\n  }, {\n    key: \"parseNodeBegin\",\n    value: function parseNodeBegin(line, property) {\n      var nodeName = property[1].trim().replace(/^\"/, '').replace(/\"$/, '');\n      var nodeAttrs = property[2].split(',').map(function (attr) {\n        return attr.trim().replace(/^\"/, '').replace(/\"$/, '');\n      });\n      var node = {\n        name: nodeName\n      };\n      var attrs = this.parseNodeAttr(nodeAttrs);\n      var currentNode = this.getCurrentNode(); // a top node\n\n      if (this.currentIndent === 0) {\n        this.allNodes.add(nodeName, node);\n      } else {\n        // a subnode\n        // if the subnode already exists, append it\n        if (nodeName in currentNode) {\n          // special case Pose needs PoseNodes as an array\n          if (nodeName === 'PoseNode') {\n            currentNode.PoseNode.push(node);\n          } else if (currentNode[nodeName].id !== undefined) {\n            currentNode[nodeName] = {};\n            currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName];\n          }\n          if (attrs.id !== '') currentNode[nodeName][attrs.id] = node;\n        } else if (typeof attrs.id === 'number') {\n          currentNode[nodeName] = {};\n          currentNode[nodeName][attrs.id] = node;\n        } else if (nodeName !== 'Properties70') {\n          if (nodeName === 'PoseNode') currentNode[nodeName] = [node];else currentNode[nodeName] = node;\n        }\n      }\n      if (typeof attrs.id === 'number') node.id = attrs.id;\n      if (attrs.name !== '') node.attrName = attrs.name;\n      if (attrs.type !== '') node.attrType = attrs.type;\n      this.pushStack(node);\n    }\n  }, {\n    key: \"parseNodeAttr\",\n    value: function parseNodeAttr(attrs) {\n      var id = attrs[0];\n      if (attrs[0] !== '') {\n        id = parseInt(attrs[0]);\n        if (isNaN(id)) {\n          id = attrs[0];\n        }\n      }\n      var name = '',\n        type = '';\n      if (attrs.length > 1) {\n        name = attrs[1].replace(/^(\\w+)::/, '');\n        type = attrs[2];\n      }\n      return {\n        id: id,\n        name: name,\n        type: type\n      };\n    }\n  }, {\n    key: \"parseNodeProperty\",\n    value: function parseNodeProperty(line, property, contentLine) {\n      var propName = property[1].replace(/^\"/, '').replace(/\"$/, '').trim();\n      var propValue = property[2].replace(/^\"/, '').replace(/\"$/, '').trim(); // for special case: base64 image data follows \"Content: ,\" line\n      //\tContent: ,\n      //\t \"/9j/4RDaRXhpZgAATU0A...\"\n\n      if (propName === 'Content' && propValue === ',') {\n        propValue = contentLine.replace(/\"/g, '').replace(/,$/, '').trim();\n      }\n      var currentNode = this.getCurrentNode();\n      var parentName = currentNode.name;\n      if (parentName === 'Properties70') {\n        this.parseNodeSpecialProperty(line, propName, propValue);\n        return;\n      } // Connections\n\n      if (propName === 'C') {\n        var connProps = propValue.split(',').slice(1);\n        var from = parseInt(connProps[0]);\n        var to = parseInt(connProps[1]);\n        var rest = propValue.split(',').slice(3);\n        rest = rest.map(function (elem) {\n          return elem.trim().replace(/^\"/, '');\n        });\n        propName = 'connections';\n        propValue = [from, to];\n        append(propValue, rest);\n        if (currentNode[propName] === undefined) {\n          currentNode[propName] = [];\n        }\n      } // Node\n\n      if (propName === 'Node') currentNode.id = propValue; // connections\n\n      if (propName in currentNode && Array.isArray(currentNode[propName])) {\n        currentNode[propName].push(propValue);\n      } else {\n        if (propName !== 'a') currentNode[propName] = propValue;else currentNode.a = propValue;\n      }\n      this.setCurrentProp(currentNode, propName); // convert string to array, unless it ends in ',' in which case more will be added to it\n\n      if (propName === 'a' && propValue.slice(-1) !== ',') {\n        currentNode.a = parseNumberArray(propValue);\n      }\n    }\n  }, {\n    key: \"parseNodePropertyContinued\",\n    value: function parseNodePropertyContinued(line) {\n      var currentNode = this.getCurrentNode();\n      currentNode.a += line; // if the line doesn't end in ',' we have reached the end of the property value\n      // so convert the string to an array\n\n      if (line.slice(-1) !== ',') {\n        currentNode.a = parseNumberArray(currentNode.a);\n      }\n    } // parse \"Property70\"\n  }, {\n    key: \"parseNodeSpecialProperty\",\n    value: function parseNodeSpecialProperty(line, propName, propValue) {\n      // split this\n      // P: \"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\",1,1,1\n      // into array like below\n      // [\"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\", \"1,1,1\" ]\n      var props = propValue.split('\",').map(function (prop) {\n        return prop.trim().replace(/^\\\"/, '').replace(/\\s/, '_');\n      });\n      var innerPropName = props[0];\n      var innerPropType1 = props[1];\n      var innerPropType2 = props[2];\n      var innerPropFlag = props[3];\n      var innerPropValue = props[4]; // cast values where needed, otherwise leave as strings\n\n      switch (innerPropType1) {\n        case 'int':\n        case 'enum':\n        case 'bool':\n        case 'ULongLong':\n        case 'double':\n        case 'Number':\n        case 'FieldOfView':\n          innerPropValue = parseFloat(innerPropValue);\n          break;\n        case 'Color':\n        case 'ColorRGB':\n        case 'Vector3D':\n        case 'Lcl_Translation':\n        case 'Lcl_Rotation':\n        case 'Lcl_Scaling':\n          innerPropValue = parseNumberArray(innerPropValue);\n          break;\n      } // CAUTION: these props must append to parent's parent\n\n      this.getPrevNode()[innerPropName] = {\n        type: innerPropType1,\n        type2: innerPropType2,\n        flag: innerPropFlag,\n        value: innerPropValue\n      };\n      this.setCurrentProp(this.getPrevNode(), innerPropName);\n    }\n  }]);\n  return TextParser;\n}(); // Parse an FBX file in Binary format\nvar BinaryParser = /*#__PURE__*/function () {\n  function BinaryParser() {\n    _classCallCheck(this, BinaryParser);\n  }\n  _createClass(BinaryParser, [{\n    key: \"parse\",\n    value: function parse(buffer) {\n      var reader = new BinaryReader(buffer);\n      reader.skip(23); // skip magic 23 bytes\n\n      var version = reader.getUint32();\n      if (version < 6400) {\n        throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + version);\n      }\n      var allNodes = new FBXTree();\n      while (!this.endOfContent(reader)) {\n        var node = this.parseNode(reader, version);\n        if (node !== null) allNodes.add(node.name, node);\n      }\n      return allNodes;\n    } // Check if reader has reached the end of content.\n  }, {\n    key: \"endOfContent\",\n    value: function endOfContent(reader) {\n      // footer size: 160bytes + 16-byte alignment padding\n      // - 16bytes: magic\n      // - padding til 16-byte alignment (at least 1byte?)\n      //\t(seems like some exporters embed fixed 15 or 16bytes?)\n      // - 4bytes: magic\n      // - 4bytes: version\n      // - 120bytes: zero\n      // - 16bytes: magic\n      if (reader.size() % 16 === 0) {\n        return (reader.getOffset() + 160 + 16 & ~0xf) >= reader.size();\n      } else {\n        return reader.getOffset() + 160 + 16 >= reader.size();\n      }\n    } // recursively parse nodes until the end of the file is reached\n  }, {\n    key: \"parseNode\",\n    value: function parseNode(reader, version) {\n      var node = {}; // The first three data sizes depends on version.\n\n      var endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();\n      var numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32();\n      version >= 7500 ? reader.getUint64() : reader.getUint32(); // the returned propertyListLen is not used\n\n      var nameLen = reader.getUint8();\n      var name = reader.getString(nameLen); // Regards this node as NULL-record if endOffset is zero\n\n      if (endOffset === 0) return null;\n      var propertyList = [];\n      for (var i = 0; i < numProperties; i++) {\n        propertyList.push(this.parseProperty(reader));\n      } // Regards the first three elements in propertyList as id, attrName, and attrType\n\n      var id = propertyList.length > 0 ? propertyList[0] : '';\n      var attrName = propertyList.length > 1 ? propertyList[1] : '';\n      var attrType = propertyList.length > 2 ? propertyList[2] : ''; // check if this node represents just a single property\n      // like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}\n\n      node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false;\n      while (endOffset > reader.getOffset()) {\n        var subNode = this.parseNode(reader, version);\n        if (subNode !== null) this.parseSubNode(name, node, subNode);\n      }\n      node.propertyList = propertyList; // raw property list used by parent\n\n      if (typeof id === 'number') node.id = id;\n      if (attrName !== '') node.attrName = attrName;\n      if (attrType !== '') node.attrType = attrType;\n      if (name !== '') node.name = name;\n      return node;\n    }\n  }, {\n    key: \"parseSubNode\",\n    value: function parseSubNode(name, node, subNode) {\n      // special case: child node is single property\n      if (subNode.singleProperty === true) {\n        var value = subNode.propertyList[0];\n        if (Array.isArray(value)) {\n          node[subNode.name] = subNode;\n          subNode.a = value;\n        } else {\n          node[subNode.name] = value;\n        }\n      } else if (name === 'Connections' && subNode.name === 'C') {\n        var array = [];\n        subNode.propertyList.forEach(function (property, i) {\n          // first Connection is FBX type (OO, OP, etc.). We'll discard these\n          if (i !== 0) array.push(property);\n        });\n        if (node.connections === undefined) {\n          node.connections = [];\n        }\n        node.connections.push(array);\n      } else if (subNode.name === 'Properties70') {\n        var keys = Object.keys(subNode);\n        keys.forEach(function (key) {\n          node[key] = subNode[key];\n        });\n      } else if (name === 'Properties70' && subNode.name === 'P') {\n        var innerPropName = subNode.propertyList[0];\n        var innerPropType1 = subNode.propertyList[1];\n        var innerPropType2 = subNode.propertyList[2];\n        var innerPropFlag = subNode.propertyList[3];\n        var innerPropValue;\n        if (innerPropName.indexOf('Lcl ') === 0) innerPropName = innerPropName.replace('Lcl ', 'Lcl_');\n        if (innerPropType1.indexOf('Lcl ') === 0) innerPropType1 = innerPropType1.replace('Lcl ', 'Lcl_');\n        if (innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf('Lcl_') === 0) {\n          innerPropValue = [subNode.propertyList[4], subNode.propertyList[5], subNode.propertyList[6]];\n        } else {\n          innerPropValue = subNode.propertyList[4];\n        } // this will be copied to parent, see above\n\n        node[innerPropName] = {\n          type: innerPropType1,\n          type2: innerPropType2,\n          flag: innerPropFlag,\n          value: innerPropValue\n        };\n      } else if (node[subNode.name] === undefined) {\n        if (typeof subNode.id === 'number') {\n          node[subNode.name] = {};\n          node[subNode.name][subNode.id] = subNode;\n        } else {\n          node[subNode.name] = subNode;\n        }\n      } else {\n        if (subNode.name === 'PoseNode') {\n          if (!Array.isArray(node[subNode.name])) {\n            node[subNode.name] = [node[subNode.name]];\n          }\n          node[subNode.name].push(subNode);\n        } else if (node[subNode.name][subNode.id] === undefined) {\n          node[subNode.name][subNode.id] = subNode;\n        }\n      }\n    }\n  }, {\n    key: \"parseProperty\",\n    value: function parseProperty(reader) {\n      var type = reader.getString(1);\n      var length;\n      switch (type) {\n        case 'C':\n          return reader.getBoolean();\n        case 'D':\n          return reader.getFloat64();\n        case 'F':\n          return reader.getFloat32();\n        case 'I':\n          return reader.getInt32();\n        case 'L':\n          return reader.getInt64();\n        case 'R':\n          length = reader.getUint32();\n          return reader.getArrayBuffer(length);\n        case 'S':\n          length = reader.getUint32();\n          return reader.getString(length);\n        case 'Y':\n          return reader.getInt16();\n        case 'b':\n        case 'c':\n        case 'd':\n        case 'f':\n        case 'i':\n        case 'l':\n          var arrayLength = reader.getUint32();\n          var encoding = reader.getUint32(); // 0: non-compressed, 1: compressed\n\n          var compressedLength = reader.getUint32();\n          if (encoding === 0) {\n            switch (type) {\n              case 'b':\n              case 'c':\n                return reader.getBooleanArray(arrayLength);\n              case 'd':\n                return reader.getFloat64Array(arrayLength);\n              case 'f':\n                return reader.getFloat32Array(arrayLength);\n              case 'i':\n                return reader.getInt32Array(arrayLength);\n              case 'l':\n                return reader.getInt64Array(arrayLength);\n            }\n          }\n          var data = unzlibSync(new Uint8Array(reader.getArrayBuffer(compressedLength))); // eslint-disable-line no-undef\n\n          var reader2 = new BinaryReader(data.buffer);\n          switch (type) {\n            case 'b':\n            case 'c':\n              return reader2.getBooleanArray(arrayLength);\n            case 'd':\n              return reader2.getFloat64Array(arrayLength);\n            case 'f':\n              return reader2.getFloat32Array(arrayLength);\n            case 'i':\n              return reader2.getInt32Array(arrayLength);\n            case 'l':\n              return reader2.getInt64Array(arrayLength);\n          }\n        default:\n          throw new Error('THREE.FBXLoader: Unknown property type ' + type);\n      }\n    }\n  }]);\n  return BinaryParser;\n}();\nvar BinaryReader = /*#__PURE__*/function () {\n  function BinaryReader(buffer, littleEndian) {\n    _classCallCheck(this, BinaryReader);\n    this.dv = new DataView(buffer);\n    this.offset = 0;\n    this.littleEndian = littleEndian !== undefined ? littleEndian : true;\n  }\n  _createClass(BinaryReader, [{\n    key: \"getOffset\",\n    value: function getOffset() {\n      return this.offset;\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      return this.dv.buffer.byteLength;\n    }\n  }, {\n    key: \"skip\",\n    value: function skip(length) {\n      this.offset += length;\n    } // seems like true/false representation depends on exporter.\n    // true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n    // then sees LSB.\n  }, {\n    key: \"getBoolean\",\n    value: function getBoolean() {\n      return (this.getUint8() & 1) === 1;\n    }\n  }, {\n    key: \"getBooleanArray\",\n    value: function getBooleanArray(size) {\n      var a = [];\n      for (var i = 0; i < size; i++) {\n        a.push(this.getBoolean());\n      }\n      return a;\n    }\n  }, {\n    key: \"getUint8\",\n    value: function getUint8() {\n      var value = this.dv.getUint8(this.offset);\n      this.offset += 1;\n      return value;\n    }\n  }, {\n    key: \"getInt16\",\n    value: function getInt16() {\n      var value = this.dv.getInt16(this.offset, this.littleEndian);\n      this.offset += 2;\n      return value;\n    }\n  }, {\n    key: \"getInt32\",\n    value: function getInt32() {\n      var value = this.dv.getInt32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    }\n  }, {\n    key: \"getInt32Array\",\n    value: function getInt32Array(size) {\n      var a = [];\n      for (var i = 0; i < size; i++) {\n        a.push(this.getInt32());\n      }\n      return a;\n    }\n  }, {\n    key: \"getUint32\",\n    value: function getUint32() {\n      var value = this.dv.getUint32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    } // JavaScript doesn't support 64-bit integer so calculate this here\n    // 1 << 32 will return 1 so using multiply operation instead here.\n    // There's a possibility that this method returns wrong value if the value\n    // is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n    // TODO: safely handle 64-bit integer\n  }, {\n    key: \"getInt64\",\n    value: function getInt64() {\n      var low, high;\n      if (this.littleEndian) {\n        low = this.getUint32();\n        high = this.getUint32();\n      } else {\n        high = this.getUint32();\n        low = this.getUint32();\n      } // calculate negative value\n\n      if (high & 0x80000000) {\n        high = ~high & 0xffffffff;\n        low = ~low & 0xffffffff;\n        if (low === 0xffffffff) high = high + 1 & 0xffffffff;\n        low = low + 1 & 0xffffffff;\n        return -(high * 0x100000000 + low);\n      }\n      return high * 0x100000000 + low;\n    }\n  }, {\n    key: \"getInt64Array\",\n    value: function getInt64Array(size) {\n      var a = [];\n      for (var i = 0; i < size; i++) {\n        a.push(this.getInt64());\n      }\n      return a;\n    } // Note: see getInt64() comment\n  }, {\n    key: \"getUint64\",\n    value: function getUint64() {\n      var low, high;\n      if (this.littleEndian) {\n        low = this.getUint32();\n        high = this.getUint32();\n      } else {\n        high = this.getUint32();\n        low = this.getUint32();\n      }\n      return high * 0x100000000 + low;\n    }\n  }, {\n    key: \"getFloat32\",\n    value: function getFloat32() {\n      var value = this.dv.getFloat32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    }\n  }, {\n    key: \"getFloat32Array\",\n    value: function getFloat32Array(size) {\n      var a = [];\n      for (var i = 0; i < size; i++) {\n        a.push(this.getFloat32());\n      }\n      return a;\n    }\n  }, {\n    key: \"getFloat64\",\n    value: function getFloat64() {\n      var value = this.dv.getFloat64(this.offset, this.littleEndian);\n      this.offset += 8;\n      return value;\n    }\n  }, {\n    key: \"getFloat64Array\",\n    value: function getFloat64Array(size) {\n      var a = [];\n      for (var i = 0; i < size; i++) {\n        a.push(this.getFloat64());\n      }\n      return a;\n    }\n  }, {\n    key: \"getArrayBuffer\",\n    value: function getArrayBuffer(size) {\n      var value = this.dv.buffer.slice(this.offset, this.offset + size);\n      this.offset += size;\n      return value;\n    }\n  }, {\n    key: \"getString\",\n    value: function getString(size) {\n      // note: safari 9 doesn't support Uint8Array.indexOf; create intermediate array instead\n      var a = [];\n      for (var i = 0; i < size; i++) {\n        a[i] = this.getUint8();\n      }\n      var nullByte = a.indexOf(0);\n      if (nullByte >= 0) a = a.slice(0, nullByte);\n      return LoaderUtils.decodeText(new Uint8Array(a));\n    }\n  }]);\n  return BinaryReader;\n}(); // FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)\n// and BinaryParser( FBX Binary format)\nvar FBXTree = /*#__PURE__*/function () {\n  function FBXTree() {\n    _classCallCheck(this, FBXTree);\n  }\n  _createClass(FBXTree, [{\n    key: \"add\",\n    value: function add(key, val) {\n      this[key] = val;\n    }\n  }]);\n  return FBXTree;\n}(); // ************** UTILITY FUNCTIONS **************\nfunction isFbxFormatBinary(buffer) {\n  var CORRECT = \"Kaydara FBX Binary  \\0\";\n  return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);\n}\nfunction isFbxFormatASCII(text) {\n  var CORRECT = ['K', 'a', 'y', 'd', 'a', 'r', 'a', '\\\\', 'F', 'B', 'X', '\\\\', 'B', 'i', 'n', 'a', 'r', 'y', '\\\\', '\\\\'];\n  var cursor = 0;\n  function read(offset) {\n    var result = text[offset - 1];\n    text = text.slice(cursor + offset);\n    cursor++;\n    return result;\n  }\n  for (var i = 0; i < CORRECT.length; ++i) {\n    var num = read(1);\n    if (num === CORRECT[i]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction getFbxVersion(text) {\n  var versionRegExp = /FBXVersion: (\\d+)/;\n  var match = text.match(versionRegExp);\n  if (match) {\n    var version = parseInt(match[1]);\n    return version;\n  }\n  throw new Error('THREE.FBXLoader: Cannot find the version number for the file given.');\n} // Converts FBX ticks into real time seconds.\n\nfunction convertFBXTimeToSeconds(time) {\n  return time / 46186158000;\n}\nvar dataArray = []; // extracts the data from the correct position in the FBX array based on indexing type\n\nfunction getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n  var index;\n  switch (infoObject.mappingType) {\n    case 'ByPolygonVertex':\n      index = polygonVertexIndex;\n      break;\n    case 'ByPolygon':\n      index = polygonIndex;\n      break;\n    case 'ByVertice':\n      index = vertexIndex;\n      break;\n    case 'AllSame':\n      index = infoObject.indices[0];\n      break;\n    default:\n      console.warn('THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType);\n  }\n  if (infoObject.referenceType === 'IndexToDirect') index = infoObject.indices[index];\n  var from = index * infoObject.dataSize;\n  var to = from + infoObject.dataSize;\n  return slice(dataArray, infoObject.buffer, from, to);\n}\nvar tempEuler = new Euler();\nvar tempVec = new Vector3(); // generate transformation from FBX transform data\n// ref: https://help.autodesk.com/view/FBX/2017/ENU/?guid=__files_GUID_10CDD63C_79C1_4F2D_BB28_AD2BE65A02ED_htm\n// ref: http://docs.autodesk.com/FBX/2014/ENU/FBX-SDK-Documentation/index.html?url=cpp_ref/_transformations_2main_8cxx-example.html,topicNumber=cpp_ref__transformations_2main_8cxx_example_htmlfc10a1e1-b18d-4e72-9dc0-70d0f1959f5e\n\nfunction generateTransform(transformData) {\n  var lTranslationM = new Matrix4();\n  var lPreRotationM = new Matrix4();\n  var lRotationM = new Matrix4();\n  var lPostRotationM = new Matrix4();\n  var lScalingM = new Matrix4();\n  var lScalingPivotM = new Matrix4();\n  var lScalingOffsetM = new Matrix4();\n  var lRotationOffsetM = new Matrix4();\n  var lRotationPivotM = new Matrix4();\n  var lParentGX = new Matrix4();\n  var lParentLX = new Matrix4();\n  var lGlobalT = new Matrix4();\n  var inheritType = transformData.inheritType ? transformData.inheritType : 0;\n  if (transformData.translation) lTranslationM.setPosition(tempVec.fromArray(transformData.translation));\n  if (transformData.preRotation) {\n    var array = transformData.preRotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n  }\n  if (transformData.rotation) {\n    var _array = transformData.rotation.map(MathUtils.degToRad);\n    _array.push(transformData.eulerOrder);\n    lRotationM.makeRotationFromEuler(tempEuler.fromArray(_array));\n  }\n  if (transformData.postRotation) {\n    var _array2 = transformData.postRotation.map(MathUtils.degToRad);\n    _array2.push(transformData.eulerOrder);\n    lPostRotationM.makeRotationFromEuler(tempEuler.fromArray(_array2));\n    lPostRotationM.invert();\n  }\n  if (transformData.scale) lScalingM.scale(tempVec.fromArray(transformData.scale)); // Pivots and offsets\n\n  if (transformData.scalingOffset) lScalingOffsetM.setPosition(tempVec.fromArray(transformData.scalingOffset));\n  if (transformData.scalingPivot) lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot));\n  if (transformData.rotationOffset) lRotationOffsetM.setPosition(tempVec.fromArray(transformData.rotationOffset));\n  if (transformData.rotationPivot) lRotationPivotM.setPosition(tempVec.fromArray(transformData.rotationPivot)); // parent transform\n\n  if (transformData.parentMatrixWorld) {\n    lParentLX.copy(transformData.parentMatrix);\n    lParentGX.copy(transformData.parentMatrixWorld);\n  }\n  var lLRM = lPreRotationM.clone().multiply(lRotationM).multiply(lPostRotationM); // Global Rotation\n\n  var lParentGRM = new Matrix4();\n  lParentGRM.extractRotation(lParentGX); // Global Shear*Scaling\n\n  var lParentTM = new Matrix4();\n  lParentTM.copyPosition(lParentGX);\n  var lParentGRSM = lParentTM.clone().invert().multiply(lParentGX);\n  var lParentGSM = lParentGRM.clone().invert().multiply(lParentGRSM);\n  var lLSM = lScalingM;\n  var lGlobalRS = new Matrix4();\n  if (inheritType === 0) {\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM).multiply(lLSM);\n  } else if (inheritType === 1) {\n    lGlobalRS.copy(lParentGRM).multiply(lParentGSM).multiply(lLRM).multiply(lLSM);\n  } else {\n    var lParentLSM = new Matrix4().scale(new Vector3().setFromMatrixScale(lParentLX));\n    var lParentLSM_inv = lParentLSM.clone().invert();\n    var lParentGSM_noLocal = lParentGSM.clone().multiply(lParentLSM_inv);\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM_noLocal).multiply(lLSM);\n  }\n  var lRotationPivotM_inv = lRotationPivotM.clone().invert();\n  var lScalingPivotM_inv = lScalingPivotM.clone().invert(); // Calculate the local transform matrix\n\n  var lTransform = lTranslationM.clone().multiply(lRotationOffsetM).multiply(lRotationPivotM).multiply(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM).multiply(lRotationPivotM_inv).multiply(lScalingOffsetM).multiply(lScalingPivotM).multiply(lScalingM).multiply(lScalingPivotM_inv);\n  var lLocalTWithAllPivotAndOffsetInfo = new Matrix4().copyPosition(lTransform);\n  var lGlobalTranslation = lParentGX.clone().multiply(lLocalTWithAllPivotAndOffsetInfo);\n  lGlobalT.copyPosition(lGlobalTranslation);\n  lTransform = lGlobalT.clone().multiply(lGlobalRS); // from global to local\n\n  lTransform.premultiply(lParentGX.invert());\n  return lTransform;\n} // Returns the three.js intrinsic Euler order corresponding to FBX extrinsic Euler order\n// ref: http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html\n\nfunction getEulerOrder(order) {\n  order = order || 0;\n  var enums = ['ZYX',\n  // -> XYZ extrinsic\n  'YZX',\n  // -> XZY extrinsic\n  'XZY',\n  // -> YZX extrinsic\n  'ZXY',\n  // -> YXZ extrinsic\n  'YXZ',\n  // -> ZXY extrinsic\n  'XYZ' // -> ZYX extrinsic\n  //'SphericXYZ', // not possible to support\n  ];\n\n  if (order === 6) {\n    console.warn('THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.');\n    return enums[0];\n  }\n  return enums[order];\n} // Parses comma separated list of numbers and returns them an array.\n// Used internally by the TextParser\n\nfunction parseNumberArray(value) {\n  var array = value.split(',').map(function (val) {\n    return parseFloat(val);\n  });\n  return array;\n}\nfunction convertArrayBufferToString(buffer, from, to) {\n  if (from === undefined) from = 0;\n  if (to === undefined) to = buffer.byteLength;\n  return LoaderUtils.decodeText(new Uint8Array(buffer, from, to));\n}\nfunction append(a, b) {\n  for (var i = 0, j = a.length, l = b.length; i < l; i++, j++) {\n    a[j] = b[i];\n  }\n}\nfunction slice(a, b, from, to) {\n  for (var i = from, j = 0; i < to; i++, j++) {\n    a[j] = b[i];\n  }\n  return a;\n} // inject array a2 into array a1 at index\n\nfunction inject(a1, index, a2) {\n  return a1.slice(0, index).concat(a2).concat(a1.slice(index));\n}\nexport { FBXLoader };","map":{"version":3,"names":["Loader","LoaderUtils","FileLoader","TextureLoader","RepeatWrapping","ClampToEdgeWrapping","Texture","MeshPhongMaterial","MeshLambertMaterial","Color","sRGBEncoding","EquirectangularReflectionMapping","Matrix4","Group","Bone","PropertyBinding","Object3D","OrthographicCamera","PerspectiveCamera","PointLight","MathUtils","SpotLight","DirectionalLight","SkinnedMesh","Mesh","LineBasicMaterial","Line","Vector3","Skeleton","AmbientLight","BufferGeometry","Float32BufferAttribute","Uint16BufferAttribute","Matrix3","Vector4","AnimationClip","Quaternion","Euler","VectorKeyframeTrack","QuaternionKeyframeTrack","NumberKeyframeTrack","unzlibSync","NURBSCurve","fbxTree","connections","sceneGraph","FBXLoader","_Loader","_inherits","_super","_createSuper","manager","_classCallCheck","call","_createClass","key","value","load","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","parse","e","console","error","itemError","FBXBuffer","isFbxFormatBinary","BinaryParser","FBXText","convertArrayBufferToString","isFbxFormatASCII","Error","getFbxVersion","TextParser","textureLoader","resourcePath","setCrossOrigin","crossOrigin","FBXTreeParser","parseConnections","images","parseImages","textures","parseTextures","materials","parseMaterials","deformers","parseDeformers","geometryMap","GeometryParser","parseScene","connectionMap","Map","rawConnections","Connections","forEach","rawConnection","fromID","toID","relationship","has","set","parents","children","parentRelationship","ID","get","push","childRelationship","blobs","Objects","videoNodes","Video","nodeID","videoNode","id","parseInt","RelativeFilename","Filename","arrayBufferContent","Content","ArrayBuffer","byteLength","base64Content","image","parseImage","filename","undefined","split","pop","content","fileName","extension","slice","lastIndexOf","toLowerCase","type","getHandler","warn","array","Uint8Array","window","URL","createObjectURL","Blob","textureMap","textureNodes","texture","parseTexture","textureNode","loadTexture","name","attrName","wrapModeU","WrapModeU","wrapModeV","WrapModeV","valueU","valueV","wrapS","wrapT","values","Scaling","repeat","x","y","currentPath","length","indexOf","FileName","materialMap","materialNodes","Material","material","parseMaterial","materialNode","ShadingModel","parameters","parseParameters","setValues","BumpFactor","bumpScale","Diffuse","color","fromArray","DiffuseColor","DisplacementFactor","displacementScale","Emissive","emissive","EmissiveColor","EmissiveFactor","emissiveIntensity","parseFloat","Opacity","opacity","transparent","ReflectionFactor","reflectivity","Shininess","shininess","Specular","specular","SpecularColor","child","bumpMap","getTexture","aoMap","map","encoding","displacementMap","emissiveMap","normalMap","envMap","mapping","specularMap","alphaMap","LayeredTexture","skeletons","morphTargets","DeformerNodes","Deformer","deformerNode","relationships","attrType","skeleton","parseSkeleton","geometryID","morphTarget","rawTargets","parseMorphTargets","deformerNodes","rawBones","boneNode","rawBone","indices","weights","transformLink","TransformLink","a","Indexes","Weights","bones","rawMorphTargets","i","morphTargetNode","rawMorphTarget","initialWeight","DeformPercent","fullWeights","FullWeights","geoID","filter","modelMap","parseModels","modelNodes","Model","model","modelNode","setLookAtProperties","parentConnections","connection","parent","add","bindSkeleton","createAmbientLight","traverse","node","userData","transformData","parentMatrix","matrix","parentMatrixWorld","matrixWorld","transform","generateTransform","applyMatrix4","updateWorldMatrix","animations","AnimationParser","isGroup","buildSkeleton","createCamera","createLight","createMesh","createCurve","sanitizeNodeName","getTransformData","bone","_loop","subBone","copy","cameraAttribute","attr","NodeAttribute","CameraProjectionType","nearClippingPlane","NearPlane","farClippingPlane","FarPlane","width","innerWidth","height","innerHeight","AspectWidth","AspectHeight","aspect","fov","FieldOfView","focalLength","FocalLength","setFocalLength","lightAttribute","LightType","intensity","Intensity","CastLightOnObject","distance","FarAttenuationEnd","EnableFarAttenuation","decay","angle","Math","PI","InnerAngle","degToRad","penumbra","OuterAngle","max","CastShadows","castShadow","geometry","attributes","vertexColors","FBX_Deformer","normalizeSkinWeights","reduce","geo","linewidth","inheritType","InheritType","eulerOrder","getEulerOrder","RotationOrder","translation","Lcl_Translation","preRotation","PreRotation","rotation","Lcl_Rotation","postRotation","PostRotation","scale","Lcl_Scaling","scalingOffset","ScalingOffset","scalingPivot","ScalingPivot","rotationOffset","RotationOffset","rotationPivot","RotationPivot","lookAtTarget","pos","target","position","lookAt","bindMatrices","parsePoseNodes","_loop2","geoRelationships","geoConnParent","bind","BindPoseNode","Pose","NbPoseNodes","poseNodes","PoseNode","Array","isArray","poseNode","Node","Matrix","GlobalSettings","ambientColor","AmbientColor","r","g","b","geoNodes","Geometry","parseGeometry","geoNode","parseMeshGeometry","parseNurbsGeometry","GeometricTranslation","GeometricRotation","GeometricScaling","genGeometry","preTransform","geoInfo","parseGeoNode","buffers","genBuffers","positionAttribute","vertex","setAttribute","colors","weightsIndices","vertexWeights","normal","normalMatrix","getNormalMatrix","normalAttribute","applyNormalMatrix","uvs","uvBuffer","toString","mappingType","prevMaterialIndex","materialIndex","startIndex","currentIndex","addGroup","groups","lastGroup","lastIndex","start","count","addMorphTargets","vertexPositions","Vertices","vertexIndices","PolygonVertexIndex","LayerElementColor","parseVertexColors","LayerElementMaterial","parseMaterialIndices","LayerElementNormal","parseNormals","LayerElementUV","uv","UV","parseUVs","weightTable","index","j","weight","polygonIndex","faceLength","displayedWeightsWarning","facePositionIndexes","faceNormals","faceColors","faceUVs","faceWeights","faceWeightIndices","vertexIndex","polygonVertexIndex","endOfFace","weightIndices","data","getData","wt","wIndex","Weight","weightIndex","currentWeight","comparedWeight","comparedWeightIndex","comparedWeightArray","tmp","genFace","_loop3","parentGeo","parentGeoNode","morphTargetsRelative","morphAttributes","rawTarget","morphGeoNode","genMorphGeometry","morphPositionsSparse","morphPositions","Float32Array","morphIndex","morphGeoInfo","morphBuffers","NormalNode","MappingInformationType","referenceType","ReferenceInformationType","Normals","indexBuffer","NormalIndex","NormalsIndex","dataSize","UVNode","UVIndex","ColorNode","Colors","ColorIndex","MaterialNode","materialIndexBuffer","Materials","materialIndices","order","Order","isNaN","degree","knots","KnotVector","controlPoints","pointsValues","Points","l","startKnot","endKnot","Form","curve","points","getPoints","setFromPoints","animationClips","rawClips","parseClips","rawClip","clip","addClip","AnimationCurve","curveNodesMap","parseAnimationCurveNodes","parseAnimationCurves","layersMap","parseAnimationLayers","parseAnimStacks","rawCurveNodes","AnimationCurveNode","rawCurveNode","match","curveNode","curves","rawCurves","animationCurve","times","KeyTime","convertFBXTimeToSeconds","KeyValueFloat","animationCurveID","animationCurveRelationship","rawLayers","AnimationLayer","_loop4","layerCurveNodes","z","modelID","rawModel","modelName","initialPosition","initialRotation","initialScale","morph","deformerID","morpherID","morphName","rawStacks","AnimationStack","layer","tracks","rawTracks","concat","generateTracks","decompose","toArray","setFromQuaternion","T","Object","keys","positionTrack","generateVectorTrack","R","rotationTrack","generateRotationTrack","S","scaleTrack","morphTrack","generateMorphTrack","initialValue","getTimesForAllAxes","getKeyframeTrackValues","interpolateRotations","setFromEuler","invert","quaternion","euler","quaternionValues","premultiply","multiply","val","morphNum","getObjectByName","morphTargetDictionary","sort","targetIndex","lastValue","currentValue","prevValue","xIndex","yIndex","zIndex","time","xValue","yValue","zValue","valuesSpan","absoluteSpan","abs","numSubIntervals","step","nextValue","initialTime","timeSpan","interval","nextTime","interpolatedTimes","interpolatedValues","inject","getPrevNode","nodeStack","currentIndent","getCurrentNode","getCurrentProp","currentProp","pushStack","popStack","setCurrentProp","currentPropName","text","allNodes","FBXTree","line","matchComment","matchEmpty","matchBeginning","matchProperty","matchEnd","parseNodeBegin","parseNodeProperty","parseNodePropertyContinued","property","nodeName","trim","replace","nodeAttrs","attrs","parseNodeAttr","currentNode","contentLine","propName","propValue","parentName","parseNodeSpecialProperty","connProps","from","to","rest","elem","append","parseNumberArray","props","prop","innerPropName","innerPropType1","innerPropType2","innerPropFlag","innerPropValue","type2","flag","reader","BinaryReader","skip","version","getUint32","endOfContent","parseNode","size","getOffset","endOffset","getUint64","numProperties","nameLen","getUint8","getString","propertyList","parseProperty","singleProperty","subNode","parseSubNode","getBoolean","getFloat64","getFloat32","getInt32","getInt64","getArrayBuffer","getInt16","arrayLength","compressedLength","getBooleanArray","getFloat64Array","getFloat32Array","getInt32Array","getInt64Array","reader2","littleEndian","dv","DataView","offset","low","high","nullByte","decodeText","CORRECT","cursor","read","result","num","versionRegExp","dataArray","infoObject","tempEuler","tempVec","lTranslationM","lPreRotationM","lRotationM","lPostRotationM","lScalingM","lScalingPivotM","lScalingOffsetM","lRotationOffsetM","lRotationPivotM","lParentGX","lParentLX","lGlobalT","setPosition","makeRotationFromEuler","lLRM","clone","lParentGRM","extractRotation","lParentTM","copyPosition","lParentGRSM","lParentGSM","lLSM","lGlobalRS","lParentLSM","setFromMatrixScale","lParentLSM_inv","lParentGSM_noLocal","lRotationPivotM_inv","lScalingPivotM_inv","lTransform","lLocalTWithAllPivotAndOffsetInfo","lGlobalTranslation","enums","a1","a2"],"sources":["/home/samuel/experiment/3d/farm/frontend/node_modules/three-stdlib/loaders/FBXLoader.js"],"sourcesContent":["import { Loader, LoaderUtils, FileLoader, TextureLoader, RepeatWrapping, ClampToEdgeWrapping, Texture, MeshPhongMaterial, MeshLambertMaterial, Color, sRGBEncoding, EquirectangularReflectionMapping, Matrix4, Group, Bone, PropertyBinding, Object3D, OrthographicCamera, PerspectiveCamera, PointLight, MathUtils, SpotLight, DirectionalLight, SkinnedMesh, Mesh, LineBasicMaterial, Line, Vector3, Skeleton, AmbientLight, BufferGeometry, Float32BufferAttribute, Uint16BufferAttribute, Matrix3, Vector4, AnimationClip, Quaternion, Euler, VectorKeyframeTrack, QuaternionKeyframeTrack, NumberKeyframeTrack } from 'three';\nimport { unzlibSync } from 'fflate';\nimport { NURBSCurve } from '../curves/NURBSCurve.js';\n\n/**\n * Loader loads FBX file and generates Group representing FBX scene.\n * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\n * Versions lower than this may load but will probably have errors\n *\n * Needs Support:\n *  Morph normals / blend shape normals\n *\n * FBX format references:\n * \thttps://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\n *\n * Binary format specification:\n *\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\n */\n\nlet fbxTree;\nlet connections;\nlet sceneGraph;\n\nclass FBXLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = scope.path === '' ? LoaderUtils.extractUrlBase(url) : scope.path;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (buffer) {\n      try {\n        onLoad(scope.parse(buffer, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(FBXBuffer, path) {\n    if (isFbxFormatBinary(FBXBuffer)) {\n      fbxTree = new BinaryParser().parse(FBXBuffer);\n    } else {\n      const FBXText = convertArrayBufferToString(FBXBuffer);\n\n      if (!isFbxFormatASCII(FBXText)) {\n        throw new Error('THREE.FBXLoader: Unknown format.');\n      }\n\n      if (getFbxVersion(FBXText) < 7000) {\n        throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion(FBXText));\n      }\n\n      fbxTree = new TextParser().parse(FBXText);\n    } // console.log( fbxTree );\n\n\n    const textureLoader = new TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    return new FBXTreeParser(textureLoader, this.manager).parse(fbxTree);\n  }\n\n} // Parse the FBXTree object returned by the BinaryParser or TextParser and return a Group\n\n\nclass FBXTreeParser {\n  constructor(textureLoader, manager) {\n    this.textureLoader = textureLoader;\n    this.manager = manager;\n  }\n\n  parse() {\n    connections = this.parseConnections();\n    const images = this.parseImages();\n    const textures = this.parseTextures(images);\n    const materials = this.parseMaterials(textures);\n    const deformers = this.parseDeformers();\n    const geometryMap = new GeometryParser().parse(deformers);\n    this.parseScene(deformers, geometryMap, materials);\n    return sceneGraph;\n  } // Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n  // and details the connection type\n\n\n  parseConnections() {\n    const connectionMap = new Map();\n\n    if ('Connections' in fbxTree) {\n      const rawConnections = fbxTree.Connections.connections;\n      rawConnections.forEach(function (rawConnection) {\n        const fromID = rawConnection[0];\n        const toID = rawConnection[1];\n        const relationship = rawConnection[2];\n\n        if (!connectionMap.has(fromID)) {\n          connectionMap.set(fromID, {\n            parents: [],\n            children: []\n          });\n        }\n\n        const parentRelationship = {\n          ID: toID,\n          relationship: relationship\n        };\n        connectionMap.get(fromID).parents.push(parentRelationship);\n\n        if (!connectionMap.has(toID)) {\n          connectionMap.set(toID, {\n            parents: [],\n            children: []\n          });\n        }\n\n        const childRelationship = {\n          ID: fromID,\n          relationship: relationship\n        };\n        connectionMap.get(toID).children.push(childRelationship);\n      });\n    }\n\n    return connectionMap;\n  } // Parse FBXTree.Objects.Video for embedded image data\n  // These images are connected to textures in FBXTree.Objects.Textures\n  // via FBXTree.Connections.\n\n\n  parseImages() {\n    const images = {};\n    const blobs = {};\n\n    if ('Video' in fbxTree.Objects) {\n      const videoNodes = fbxTree.Objects.Video;\n\n      for (const nodeID in videoNodes) {\n        const videoNode = videoNodes[nodeID];\n        const id = parseInt(nodeID);\n        images[id] = videoNode.RelativeFilename || videoNode.Filename; // raw image data is in videoNode.Content\n\n        if ('Content' in videoNode) {\n          const arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0;\n          const base64Content = typeof videoNode.Content === 'string' && videoNode.Content !== '';\n\n          if (arrayBufferContent || base64Content) {\n            const image = this.parseImage(videoNodes[nodeID]);\n            blobs[videoNode.RelativeFilename || videoNode.Filename] = image;\n          }\n        }\n      }\n    }\n\n    for (const id in images) {\n      const filename = images[id];\n      if (blobs[filename] !== undefined) images[id] = blobs[filename];else images[id] = images[id].split('\\\\').pop();\n    }\n\n    return images;\n  } // Parse embedded image data in FBXTree.Video.Content\n\n\n  parseImage(videoNode) {\n    const content = videoNode.Content;\n    const fileName = videoNode.RelativeFilename || videoNode.Filename;\n    const extension = fileName.slice(fileName.lastIndexOf('.') + 1).toLowerCase();\n    let type;\n\n    switch (extension) {\n      case 'bmp':\n        type = 'image/bmp';\n        break;\n\n      case 'jpg':\n      case 'jpeg':\n        type = 'image/jpeg';\n        break;\n\n      case 'png':\n        type = 'image/png';\n        break;\n\n      case 'tif':\n        type = 'image/tiff';\n        break;\n\n      case 'tga':\n        if (this.manager.getHandler('.tga') === null) {\n          console.warn('FBXLoader: TGA loader not found, skipping ', fileName);\n        }\n\n        type = 'image/tga';\n        break;\n\n      default:\n        console.warn('FBXLoader: Image type \"' + extension + '\" is not supported.');\n        return;\n    }\n\n    if (typeof content === 'string') {\n      // ASCII format\n      return 'data:' + type + ';base64,' + content;\n    } else {\n      // Binary Format\n      const array = new Uint8Array(content);\n      return window.URL.createObjectURL(new Blob([array], {\n        type: type\n      }));\n    }\n  } // Parse nodes in FBXTree.Objects.Texture\n  // These contain details such as UV scaling, cropping, rotation etc and are connected\n  // to images in FBXTree.Objects.Video\n\n\n  parseTextures(images) {\n    const textureMap = new Map();\n\n    if ('Texture' in fbxTree.Objects) {\n      const textureNodes = fbxTree.Objects.Texture;\n\n      for (const nodeID in textureNodes) {\n        const texture = this.parseTexture(textureNodes[nodeID], images);\n        textureMap.set(parseInt(nodeID), texture);\n      }\n    }\n\n    return textureMap;\n  } // Parse individual node in FBXTree.Objects.Texture\n\n\n  parseTexture(textureNode, images) {\n    const texture = this.loadTexture(textureNode, images);\n    texture.ID = textureNode.id;\n    texture.name = textureNode.attrName;\n    const wrapModeU = textureNode.WrapModeU;\n    const wrapModeV = textureNode.WrapModeV;\n    const valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\n    const valueV = wrapModeV !== undefined ? wrapModeV.value : 0; // http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a\n    // 0: repeat(default), 1: clamp\n\n    texture.wrapS = valueU === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n    texture.wrapT = valueV === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n\n    if ('Scaling' in textureNode) {\n      const values = textureNode.Scaling.value;\n      texture.repeat.x = values[0];\n      texture.repeat.y = values[1];\n    }\n\n    return texture;\n  } // load a texture specified as a blob or data URI, or via an external URL using TextureLoader\n\n\n  loadTexture(textureNode, images) {\n    let fileName;\n    const currentPath = this.textureLoader.path;\n    const children = connections.get(textureNode.id).children;\n\n    if (children !== undefined && children.length > 0 && images[children[0].ID] !== undefined) {\n      fileName = images[children[0].ID];\n\n      if (fileName.indexOf('blob:') === 0 || fileName.indexOf('data:') === 0) {\n        this.textureLoader.setPath(undefined);\n      }\n    }\n\n    let texture;\n    const extension = textureNode.FileName.slice(-3).toLowerCase();\n\n    if (extension === 'tga') {\n      const loader = this.manager.getHandler('.tga');\n\n      if (loader === null) {\n        console.warn('FBXLoader: TGA loader not found, creating placeholder texture for', textureNode.RelativeFilename);\n        texture = new Texture();\n      } else {\n        loader.setPath(this.textureLoader.path);\n        texture = loader.load(fileName);\n      }\n    } else if (extension === 'psd') {\n      console.warn('FBXLoader: PSD textures are not supported, creating placeholder texture for', textureNode.RelativeFilename);\n      texture = new Texture();\n    } else {\n      texture = this.textureLoader.load(fileName);\n    }\n\n    this.textureLoader.setPath(currentPath);\n    return texture;\n  } // Parse nodes in FBXTree.Objects.Material\n\n\n  parseMaterials(textureMap) {\n    const materialMap = new Map();\n\n    if ('Material' in fbxTree.Objects) {\n      const materialNodes = fbxTree.Objects.Material;\n\n      for (const nodeID in materialNodes) {\n        const material = this.parseMaterial(materialNodes[nodeID], textureMap);\n        if (material !== null) materialMap.set(parseInt(nodeID), material);\n      }\n    }\n\n    return materialMap;\n  } // Parse single node in FBXTree.Objects.Material\n  // Materials are connected to texture maps in FBXTree.Objects.Textures\n  // FBX format currently only supports Lambert and Phong shading models\n\n\n  parseMaterial(materialNode, textureMap) {\n    const ID = materialNode.id;\n    const name = materialNode.attrName;\n    let type = materialNode.ShadingModel; // Case where FBX wraps shading model in property object.\n\n    if (typeof type === 'object') {\n      type = type.value;\n    } // Ignore unused materials which don't have any connections.\n\n\n    if (!connections.has(ID)) return null;\n    const parameters = this.parseParameters(materialNode, textureMap, ID);\n    let material;\n\n    switch (type.toLowerCase()) {\n      case 'phong':\n        material = new MeshPhongMaterial();\n        break;\n\n      case 'lambert':\n        material = new MeshLambertMaterial();\n        break;\n\n      default:\n        console.warn('THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type);\n        material = new MeshPhongMaterial();\n        break;\n    }\n\n    material.setValues(parameters);\n    material.name = name;\n    return material;\n  } // Parse FBX material and return parameters suitable for a three.js material\n  // Also parse the texture map and return any textures associated with the material\n\n\n  parseParameters(materialNode, textureMap, ID) {\n    const parameters = {};\n\n    if (materialNode.BumpFactor) {\n      parameters.bumpScale = materialNode.BumpFactor.value;\n    }\n\n    if (materialNode.Diffuse) {\n      parameters.color = new Color().fromArray(materialNode.Diffuse.value);\n    } else if (materialNode.DiffuseColor && (materialNode.DiffuseColor.type === 'Color' || materialNode.DiffuseColor.type === 'ColorRGB')) {\n      // The blender exporter exports diffuse here instead of in materialNode.Diffuse\n      parameters.color = new Color().fromArray(materialNode.DiffuseColor.value);\n    }\n\n    if (materialNode.DisplacementFactor) {\n      parameters.displacementScale = materialNode.DisplacementFactor.value;\n    }\n\n    if (materialNode.Emissive) {\n      parameters.emissive = new Color().fromArray(materialNode.Emissive.value);\n    } else if (materialNode.EmissiveColor && (materialNode.EmissiveColor.type === 'Color' || materialNode.EmissiveColor.type === 'ColorRGB')) {\n      // The blender exporter exports emissive color here instead of in materialNode.Emissive\n      parameters.emissive = new Color().fromArray(materialNode.EmissiveColor.value);\n    }\n\n    if (materialNode.EmissiveFactor) {\n      parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value);\n    }\n\n    if (materialNode.Opacity) {\n      parameters.opacity = parseFloat(materialNode.Opacity.value);\n    }\n\n    if (parameters.opacity < 1.0) {\n      parameters.transparent = true;\n    }\n\n    if (materialNode.ReflectionFactor) {\n      parameters.reflectivity = materialNode.ReflectionFactor.value;\n    }\n\n    if (materialNode.Shininess) {\n      parameters.shininess = materialNode.Shininess.value;\n    }\n\n    if (materialNode.Specular) {\n      parameters.specular = new Color().fromArray(materialNode.Specular.value);\n    } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color') {\n      // The blender exporter exports specular color here instead of in materialNode.Specular\n      parameters.specular = new Color().fromArray(materialNode.SpecularColor.value);\n    }\n\n    const scope = this;\n    connections.get(ID).children.forEach(function (child) {\n      const type = child.relationship;\n\n      switch (type) {\n        case 'Bump':\n          parameters.bumpMap = scope.getTexture(textureMap, child.ID);\n          break;\n\n        case 'Maya|TEX_ao_map':\n          parameters.aoMap = scope.getTexture(textureMap, child.ID);\n          break;\n\n        case 'DiffuseColor':\n        case 'Maya|TEX_color_map':\n          parameters.map = scope.getTexture(textureMap, child.ID);\n\n          if (parameters.map !== undefined) {\n            parameters.map.encoding = sRGBEncoding;\n          }\n\n          break;\n\n        case 'DisplacementColor':\n          parameters.displacementMap = scope.getTexture(textureMap, child.ID);\n          break;\n\n        case 'EmissiveColor':\n          parameters.emissiveMap = scope.getTexture(textureMap, child.ID);\n\n          if (parameters.emissiveMap !== undefined) {\n            parameters.emissiveMap.encoding = sRGBEncoding;\n          }\n\n          break;\n\n        case 'NormalMap':\n        case 'Maya|TEX_normal_map':\n          parameters.normalMap = scope.getTexture(textureMap, child.ID);\n          break;\n\n        case 'ReflectionColor':\n          parameters.envMap = scope.getTexture(textureMap, child.ID);\n\n          if (parameters.envMap !== undefined) {\n            parameters.envMap.mapping = EquirectangularReflectionMapping;\n            parameters.envMap.encoding = sRGBEncoding;\n          }\n\n          break;\n\n        case 'SpecularColor':\n          parameters.specularMap = scope.getTexture(textureMap, child.ID);\n\n          if (parameters.specularMap !== undefined) {\n            parameters.specularMap.encoding = sRGBEncoding;\n          }\n\n          break;\n\n        case 'TransparentColor':\n        case 'TransparencyFactor':\n          parameters.alphaMap = scope.getTexture(textureMap, child.ID);\n          parameters.transparent = true;\n          break;\n\n        case 'AmbientColor':\n        case 'ShininessExponent': // AKA glossiness map\n\n        case 'SpecularFactor': // AKA specularLevel\n\n        case 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor\n\n        default:\n          console.warn('THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type);\n          break;\n      }\n    });\n    return parameters;\n  } // get a texture from the textureMap for use by a material.\n\n\n  getTexture(textureMap, id) {\n    // if the texture is a layered texture, just use the first layer and issue a warning\n    if ('LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {\n      console.warn('THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.');\n      id = connections.get(id).children[0].ID;\n    }\n\n    return textureMap.get(id);\n  } // Parse nodes in FBXTree.Objects.Deformer\n  // Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n  // Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n\n\n  parseDeformers() {\n    const skeletons = {};\n    const morphTargets = {};\n\n    if ('Deformer' in fbxTree.Objects) {\n      const DeformerNodes = fbxTree.Objects.Deformer;\n\n      for (const nodeID in DeformerNodes) {\n        const deformerNode = DeformerNodes[nodeID];\n        const relationships = connections.get(parseInt(nodeID));\n\n        if (deformerNode.attrType === 'Skin') {\n          const skeleton = this.parseSkeleton(relationships, DeformerNodes);\n          skeleton.ID = nodeID;\n\n          if (relationships.parents.length > 1) {\n            console.warn('THREE.FBXLoader: skeleton attached to more than one geometry is not supported.');\n          }\n\n          skeleton.geometryID = relationships.parents[0].ID;\n          skeletons[nodeID] = skeleton;\n        } else if (deformerNode.attrType === 'BlendShape') {\n          const morphTarget = {\n            id: nodeID\n          };\n          morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes);\n          morphTarget.id = nodeID;\n\n          if (relationships.parents.length > 1) {\n            console.warn('THREE.FBXLoader: morph target attached to more than one geometry is not supported.');\n          }\n\n          morphTargets[nodeID] = morphTarget;\n        }\n      }\n    }\n\n    return {\n      skeletons: skeletons,\n      morphTargets: morphTargets\n    };\n  } // Parse single nodes in FBXTree.Objects.Deformer\n  // The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n  // Each skin node represents a skeleton and each cluster node represents a bone\n\n\n  parseSkeleton(relationships, deformerNodes) {\n    const rawBones = [];\n    relationships.children.forEach(function (child) {\n      const boneNode = deformerNodes[child.ID];\n      if (boneNode.attrType !== 'Cluster') return;\n      const rawBone = {\n        ID: child.ID,\n        indices: [],\n        weights: [],\n        transformLink: new Matrix4().fromArray(boneNode.TransformLink.a) // transform: new Matrix4().fromArray( boneNode.Transform.a ),\n        // linkMode: boneNode.Mode,\n\n      };\n\n      if ('Indexes' in boneNode) {\n        rawBone.indices = boneNode.Indexes.a;\n        rawBone.weights = boneNode.Weights.a;\n      }\n\n      rawBones.push(rawBone);\n    });\n    return {\n      rawBones: rawBones,\n      bones: []\n    };\n  } // The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n\n\n  parseMorphTargets(relationships, deformerNodes) {\n    const rawMorphTargets = [];\n\n    for (let i = 0; i < relationships.children.length; i++) {\n      const child = relationships.children[i];\n      const morphTargetNode = deformerNodes[child.ID];\n      const rawMorphTarget = {\n        name: morphTargetNode.attrName,\n        initialWeight: morphTargetNode.DeformPercent,\n        id: morphTargetNode.id,\n        fullWeights: morphTargetNode.FullWeights.a\n      };\n      if (morphTargetNode.attrType !== 'BlendShapeChannel') return;\n      rawMorphTarget.geoID = connections.get(parseInt(child.ID)).children.filter(function (child) {\n        return child.relationship === undefined;\n      })[0].ID;\n      rawMorphTargets.push(rawMorphTarget);\n    }\n\n    return rawMorphTargets;\n  } // create the main Group() to be returned by the loader\n\n\n  parseScene(deformers, geometryMap, materialMap) {\n    sceneGraph = new Group();\n    const modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap);\n    const modelNodes = fbxTree.Objects.Model;\n    const scope = this;\n    modelMap.forEach(function (model) {\n      const modelNode = modelNodes[model.ID];\n      scope.setLookAtProperties(model, modelNode);\n      const parentConnections = connections.get(model.ID).parents;\n      parentConnections.forEach(function (connection) {\n        const parent = modelMap.get(connection.ID);\n        if (parent !== undefined) parent.add(model);\n      });\n\n      if (model.parent === null) {\n        sceneGraph.add(model);\n      }\n    });\n    this.bindSkeleton(deformers.skeletons, geometryMap, modelMap);\n    this.createAmbientLight();\n    sceneGraph.traverse(function (node) {\n      if (node.userData.transformData) {\n        if (node.parent) {\n          node.userData.transformData.parentMatrix = node.parent.matrix;\n          node.userData.transformData.parentMatrixWorld = node.parent.matrixWorld;\n        }\n\n        const transform = generateTransform(node.userData.transformData);\n        node.applyMatrix4(transform);\n        node.updateWorldMatrix();\n      }\n    });\n    const animations = new AnimationParser().parse(); // if all the models where already combined in a single group, just return that\n\n    if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {\n      sceneGraph.children[0].animations = animations;\n      sceneGraph = sceneGraph.children[0];\n    }\n\n    sceneGraph.animations = animations;\n  } // parse nodes in FBXTree.Objects.Model\n\n\n  parseModels(skeletons, geometryMap, materialMap) {\n    const modelMap = new Map();\n    const modelNodes = fbxTree.Objects.Model;\n\n    for (const nodeID in modelNodes) {\n      const id = parseInt(nodeID);\n      const node = modelNodes[nodeID];\n      const relationships = connections.get(id);\n      let model = this.buildSkeleton(relationships, skeletons, id, node.attrName);\n\n      if (!model) {\n        switch (node.attrType) {\n          case 'Camera':\n            model = this.createCamera(relationships);\n            break;\n\n          case 'Light':\n            model = this.createLight(relationships);\n            break;\n\n          case 'Mesh':\n            model = this.createMesh(relationships, geometryMap, materialMap);\n            break;\n\n          case 'NurbsCurve':\n            model = this.createCurve(relationships, geometryMap);\n            break;\n\n          case 'LimbNode':\n          case 'Root':\n            model = new Bone();\n            break;\n\n          case 'Null':\n          default:\n            model = new Group();\n            break;\n        }\n\n        model.name = node.attrName ? PropertyBinding.sanitizeNodeName(node.attrName) : '';\n        model.ID = id;\n      }\n\n      this.getTransformData(model, node);\n      modelMap.set(id, model);\n    }\n\n    return modelMap;\n  }\n\n  buildSkeleton(relationships, skeletons, id, name) {\n    let bone = null;\n    relationships.parents.forEach(function (parent) {\n      for (const ID in skeletons) {\n        const skeleton = skeletons[ID];\n        skeleton.rawBones.forEach(function (rawBone, i) {\n          if (rawBone.ID === parent.ID) {\n            const subBone = bone;\n            bone = new Bone();\n            bone.matrixWorld.copy(rawBone.transformLink); // set name and id here - otherwise in cases where \"subBone\" is created it will not have a name / id\n\n            bone.name = name ? PropertyBinding.sanitizeNodeName(name) : '';\n            bone.ID = id;\n            skeleton.bones[i] = bone; // In cases where a bone is shared between multiple meshes\n            // duplicate the bone here and and it as a child of the first bone\n\n            if (subBone !== null) {\n              bone.add(subBone);\n            }\n          }\n        });\n      }\n    });\n    return bone;\n  } // create a PerspectiveCamera or OrthographicCamera\n\n\n  createCamera(relationships) {\n    let model;\n    let cameraAttribute;\n    relationships.children.forEach(function (child) {\n      const attr = fbxTree.Objects.NodeAttribute[child.ID];\n\n      if (attr !== undefined) {\n        cameraAttribute = attr;\n      }\n    });\n\n    if (cameraAttribute === undefined) {\n      model = new Object3D();\n    } else {\n      let type = 0;\n\n      if (cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1) {\n        type = 1;\n      }\n\n      let nearClippingPlane = 1;\n\n      if (cameraAttribute.NearPlane !== undefined) {\n        nearClippingPlane = cameraAttribute.NearPlane.value / 1000;\n      }\n\n      let farClippingPlane = 1000;\n\n      if (cameraAttribute.FarPlane !== undefined) {\n        farClippingPlane = cameraAttribute.FarPlane.value / 1000;\n      }\n\n      let width = window.innerWidth;\n      let height = window.innerHeight;\n\n      if (cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined) {\n        width = cameraAttribute.AspectWidth.value;\n        height = cameraAttribute.AspectHeight.value;\n      }\n\n      const aspect = width / height;\n      let fov = 45;\n\n      if (cameraAttribute.FieldOfView !== undefined) {\n        fov = cameraAttribute.FieldOfView.value;\n      }\n\n      const focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n\n      switch (type) {\n        case 0:\n          // Perspective\n          model = new PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);\n          if (focalLength !== null) model.setFocalLength(focalLength);\n          break;\n\n        case 1:\n          // Orthographic\n          model = new OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, nearClippingPlane, farClippingPlane);\n          break;\n\n        default:\n          console.warn('THREE.FBXLoader: Unknown camera type ' + type + '.');\n          model = new Object3D();\n          break;\n      }\n    }\n\n    return model;\n  } // Create a DirectionalLight, PointLight or SpotLight\n\n\n  createLight(relationships) {\n    let model;\n    let lightAttribute;\n    relationships.children.forEach(function (child) {\n      const attr = fbxTree.Objects.NodeAttribute[child.ID];\n\n      if (attr !== undefined) {\n        lightAttribute = attr;\n      }\n    });\n\n    if (lightAttribute === undefined) {\n      model = new Object3D();\n    } else {\n      let type; // LightType can be undefined for Point lights\n\n      if (lightAttribute.LightType === undefined) {\n        type = 0;\n      } else {\n        type = lightAttribute.LightType.value;\n      }\n\n      let color = 0xffffff;\n\n      if (lightAttribute.Color !== undefined) {\n        color = new Color().fromArray(lightAttribute.Color.value);\n      }\n\n      let intensity = lightAttribute.Intensity === undefined ? 1 : lightAttribute.Intensity.value / 100; // light disabled\n\n      if (lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0) {\n        intensity = 0;\n      }\n\n      let distance = 0;\n\n      if (lightAttribute.FarAttenuationEnd !== undefined) {\n        if (lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0) {\n          distance = 0;\n        } else {\n          distance = lightAttribute.FarAttenuationEnd.value;\n        }\n      } // TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?\n\n\n      const decay = 1;\n\n      switch (type) {\n        case 0:\n          // Point\n          model = new PointLight(color, intensity, distance, decay);\n          break;\n\n        case 1:\n          // Directional\n          model = new DirectionalLight(color, intensity);\n          break;\n\n        case 2:\n          // Spot\n          let angle = Math.PI / 3;\n\n          if (lightAttribute.InnerAngle !== undefined) {\n            angle = MathUtils.degToRad(lightAttribute.InnerAngle.value);\n          }\n\n          let penumbra = 0;\n\n          if (lightAttribute.OuterAngle !== undefined) {\n            // TODO: this is not correct - FBX calculates outer and inner angle in degrees\n            // with OuterAngle > InnerAngle && OuterAngle <= Math.PI\n            // while three.js uses a penumbra between (0, 1) to attenuate the inner angle\n            penumbra = MathUtils.degToRad(lightAttribute.OuterAngle.value);\n            penumbra = Math.max(penumbra, 1);\n          }\n\n          model = new SpotLight(color, intensity, distance, angle, penumbra, decay);\n          break;\n\n        default:\n          console.warn('THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a PointLight.');\n          model = new PointLight(color, intensity);\n          break;\n      }\n\n      if (lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1) {\n        model.castShadow = true;\n      }\n    }\n\n    return model;\n  }\n\n  createMesh(relationships, geometryMap, materialMap) {\n    let model;\n    let geometry = null;\n    let material = null;\n    const materials = []; // get geometry and materials(s) from connections\n\n    relationships.children.forEach(function (child) {\n      if (geometryMap.has(child.ID)) {\n        geometry = geometryMap.get(child.ID);\n      }\n\n      if (materialMap.has(child.ID)) {\n        materials.push(materialMap.get(child.ID));\n      }\n    });\n\n    if (materials.length > 1) {\n      material = materials;\n    } else if (materials.length > 0) {\n      material = materials[0];\n    } else {\n      material = new MeshPhongMaterial({\n        color: 0xcccccc\n      });\n      materials.push(material);\n    }\n\n    if ('color' in geometry.attributes) {\n      materials.forEach(function (material) {\n        material.vertexColors = true;\n      });\n    }\n\n    if (geometry.FBX_Deformer) {\n      model = new SkinnedMesh(geometry, material);\n      model.normalizeSkinWeights();\n    } else {\n      model = new Mesh(geometry, material);\n    }\n\n    return model;\n  }\n\n  createCurve(relationships, geometryMap) {\n    const geometry = relationships.children.reduce(function (geo, child) {\n      if (geometryMap.has(child.ID)) geo = geometryMap.get(child.ID);\n      return geo;\n    }, null); // FBX does not list materials for Nurbs lines, so we'll just put our own in here.\n\n    const material = new LineBasicMaterial({\n      color: 0x3300ff,\n      linewidth: 1\n    });\n    return new Line(geometry, material);\n  } // parse the model node for transform data\n\n\n  getTransformData(model, modelNode) {\n    const transformData = {};\n    if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n    if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);else transformData.eulerOrder = 'ZYX';\n    if ('Lcl_Translation' in modelNode) transformData.translation = modelNode.Lcl_Translation.value;\n    if ('PreRotation' in modelNode) transformData.preRotation = modelNode.PreRotation.value;\n    if ('Lcl_Rotation' in modelNode) transformData.rotation = modelNode.Lcl_Rotation.value;\n    if ('PostRotation' in modelNode) transformData.postRotation = modelNode.PostRotation.value;\n    if ('Lcl_Scaling' in modelNode) transformData.scale = modelNode.Lcl_Scaling.value;\n    if ('ScalingOffset' in modelNode) transformData.scalingOffset = modelNode.ScalingOffset.value;\n    if ('ScalingPivot' in modelNode) transformData.scalingPivot = modelNode.ScalingPivot.value;\n    if ('RotationOffset' in modelNode) transformData.rotationOffset = modelNode.RotationOffset.value;\n    if ('RotationPivot' in modelNode) transformData.rotationPivot = modelNode.RotationPivot.value;\n    model.userData.transformData = transformData;\n  }\n\n  setLookAtProperties(model, modelNode) {\n    if ('LookAtProperty' in modelNode) {\n      const children = connections.get(model.ID).children;\n      children.forEach(function (child) {\n        if (child.relationship === 'LookAtProperty') {\n          const lookAtTarget = fbxTree.Objects.Model[child.ID];\n\n          if ('Lcl_Translation' in lookAtTarget) {\n            const pos = lookAtTarget.Lcl_Translation.value; // DirectionalLight, SpotLight\n\n            if (model.target !== undefined) {\n              model.target.position.fromArray(pos);\n              sceneGraph.add(model.target);\n            } else {\n              // Cameras and other Object3Ds\n              model.lookAt(new Vector3().fromArray(pos));\n            }\n          }\n        }\n      });\n    }\n  }\n\n  bindSkeleton(skeletons, geometryMap, modelMap) {\n    const bindMatrices = this.parsePoseNodes();\n\n    for (const ID in skeletons) {\n      const skeleton = skeletons[ID];\n      const parents = connections.get(parseInt(skeleton.ID)).parents;\n      parents.forEach(function (parent) {\n        if (geometryMap.has(parent.ID)) {\n          const geoID = parent.ID;\n          const geoRelationships = connections.get(geoID);\n          geoRelationships.parents.forEach(function (geoConnParent) {\n            if (modelMap.has(geoConnParent.ID)) {\n              const model = modelMap.get(geoConnParent.ID);\n              model.bind(new Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID]);\n            }\n          });\n        }\n      });\n    }\n  }\n\n  parsePoseNodes() {\n    const bindMatrices = {};\n\n    if ('Pose' in fbxTree.Objects) {\n      const BindPoseNode = fbxTree.Objects.Pose;\n\n      for (const nodeID in BindPoseNode) {\n        if (BindPoseNode[nodeID].attrType === 'BindPose' && BindPoseNode[nodeID].NbPoseNodes > 0) {\n          const poseNodes = BindPoseNode[nodeID].PoseNode;\n\n          if (Array.isArray(poseNodes)) {\n            poseNodes.forEach(function (poseNode) {\n              bindMatrices[poseNode.Node] = new Matrix4().fromArray(poseNode.Matrix.a);\n            });\n          } else {\n            bindMatrices[poseNodes.Node] = new Matrix4().fromArray(poseNodes.Matrix.a);\n          }\n        }\n      }\n    }\n\n    return bindMatrices;\n  } // Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\n\n\n  createAmbientLight() {\n    if ('GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings) {\n      const ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n      const r = ambientColor[0];\n      const g = ambientColor[1];\n      const b = ambientColor[2];\n\n      if (r !== 0 || g !== 0 || b !== 0) {\n        const color = new Color(r, g, b);\n        sceneGraph.add(new AmbientLight(color, 1));\n      }\n    }\n  }\n\n} // parse Geometry data from FBXTree and return map of BufferGeometries\n\n\nclass GeometryParser {\n  // Parse nodes in FBXTree.Objects.Geometry\n  parse(deformers) {\n    const geometryMap = new Map();\n\n    if ('Geometry' in fbxTree.Objects) {\n      const geoNodes = fbxTree.Objects.Geometry;\n\n      for (const nodeID in geoNodes) {\n        const relationships = connections.get(parseInt(nodeID));\n        const geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers);\n        geometryMap.set(parseInt(nodeID), geo);\n      }\n    }\n\n    return geometryMap;\n  } // Parse single node in FBXTree.Objects.Geometry\n\n\n  parseGeometry(relationships, geoNode, deformers) {\n    switch (geoNode.attrType) {\n      case 'Mesh':\n        return this.parseMeshGeometry(relationships, geoNode, deformers);\n\n      case 'NurbsCurve':\n        return this.parseNurbsGeometry(geoNode);\n    }\n  } // Parse single node mesh geometry in FBXTree.Objects.Geometry\n\n\n  parseMeshGeometry(relationships, geoNode, deformers) {\n    const skeletons = deformers.skeletons;\n    const morphTargets = [];\n    const modelNodes = relationships.parents.map(function (parent) {\n      return fbxTree.Objects.Model[parent.ID];\n    }); // don't create geometry if it is not associated with any models\n\n    if (modelNodes.length === 0) return;\n    const skeleton = relationships.children.reduce(function (skeleton, child) {\n      if (skeletons[child.ID] !== undefined) skeleton = skeletons[child.ID];\n      return skeleton;\n    }, null);\n    relationships.children.forEach(function (child) {\n      if (deformers.morphTargets[child.ID] !== undefined) {\n        morphTargets.push(deformers.morphTargets[child.ID]);\n      }\n    }); // Assume one model and get the preRotation from that\n    // if there is more than one model associated with the geometry this may cause problems\n\n    const modelNode = modelNodes[0];\n    const transformData = {};\n    if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\n    if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n    if ('GeometricTranslation' in modelNode) transformData.translation = modelNode.GeometricTranslation.value;\n    if ('GeometricRotation' in modelNode) transformData.rotation = modelNode.GeometricRotation.value;\n    if ('GeometricScaling' in modelNode) transformData.scale = modelNode.GeometricScaling.value;\n    const transform = generateTransform(transformData);\n    return this.genGeometry(geoNode, skeleton, morphTargets, transform);\n  } // Generate a BufferGeometry from a node in FBXTree.Objects.Geometry\n\n\n  genGeometry(geoNode, skeleton, morphTargets, preTransform) {\n    const geo = new BufferGeometry();\n    if (geoNode.attrName) geo.name = geoNode.attrName;\n    const geoInfo = this.parseGeoNode(geoNode, skeleton);\n    const buffers = this.genBuffers(geoInfo);\n    const positionAttribute = new Float32BufferAttribute(buffers.vertex, 3);\n    positionAttribute.applyMatrix4(preTransform);\n    geo.setAttribute('position', positionAttribute);\n\n    if (buffers.colors.length > 0) {\n      geo.setAttribute('color', new Float32BufferAttribute(buffers.colors, 3));\n    }\n\n    if (skeleton) {\n      geo.setAttribute('skinIndex', new Uint16BufferAttribute(buffers.weightsIndices, 4));\n      geo.setAttribute('skinWeight', new Float32BufferAttribute(buffers.vertexWeights, 4)); // used later to bind the skeleton to the model\n\n      geo.FBX_Deformer = skeleton;\n    }\n\n    if (buffers.normal.length > 0) {\n      const normalMatrix = new Matrix3().getNormalMatrix(preTransform);\n      const normalAttribute = new Float32BufferAttribute(buffers.normal, 3);\n      normalAttribute.applyNormalMatrix(normalMatrix);\n      geo.setAttribute('normal', normalAttribute);\n    }\n\n    buffers.uvs.forEach(function (uvBuffer, i) {\n      // subsequent uv buffers are called 'uv1', 'uv2', ...\n      let name = 'uv' + (i + 1).toString(); // the first uv buffer is just called 'uv'\n\n      if (i === 0) {\n        name = 'uv';\n      }\n\n      geo.setAttribute(name, new Float32BufferAttribute(buffers.uvs[i], 2));\n    });\n\n    if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n      // Convert the material indices of each vertex into rendering groups on the geometry.\n      let prevMaterialIndex = buffers.materialIndex[0];\n      let startIndex = 0;\n      buffers.materialIndex.forEach(function (currentIndex, i) {\n        if (currentIndex !== prevMaterialIndex) {\n          geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);\n          prevMaterialIndex = currentIndex;\n          startIndex = i;\n        }\n      }); // the loop above doesn't add the last group, do that here.\n\n      if (geo.groups.length > 0) {\n        const lastGroup = geo.groups[geo.groups.length - 1];\n        const lastIndex = lastGroup.start + lastGroup.count;\n\n        if (lastIndex !== buffers.materialIndex.length) {\n          geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex);\n        }\n      } // case where there are multiple materials but the whole geometry is only\n      // using one of them\n\n\n      if (geo.groups.length === 0) {\n        geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0]);\n      }\n    }\n\n    this.addMorphTargets(geo, geoNode, morphTargets, preTransform);\n    return geo;\n  }\n\n  parseGeoNode(geoNode, skeleton) {\n    const geoInfo = {};\n    geoInfo.vertexPositions = geoNode.Vertices !== undefined ? geoNode.Vertices.a : [];\n    geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== undefined ? geoNode.PolygonVertexIndex.a : [];\n\n    if (geoNode.LayerElementColor) {\n      geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);\n    }\n\n    if (geoNode.LayerElementMaterial) {\n      geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0]);\n    }\n\n    if (geoNode.LayerElementNormal) {\n      geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);\n    }\n\n    if (geoNode.LayerElementUV) {\n      geoInfo.uv = [];\n      let i = 0;\n\n      while (geoNode.LayerElementUV[i]) {\n        if (geoNode.LayerElementUV[i].UV) {\n          geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));\n        }\n\n        i++;\n      }\n    }\n\n    geoInfo.weightTable = {};\n\n    if (skeleton !== null) {\n      geoInfo.skeleton = skeleton;\n      skeleton.rawBones.forEach(function (rawBone, i) {\n        // loop over the bone's vertex indices and weights\n        rawBone.indices.forEach(function (index, j) {\n          if (geoInfo.weightTable[index] === undefined) geoInfo.weightTable[index] = [];\n          geoInfo.weightTable[index].push({\n            id: i,\n            weight: rawBone.weights[j]\n          });\n        });\n      });\n    }\n\n    return geoInfo;\n  }\n\n  genBuffers(geoInfo) {\n    const buffers = {\n      vertex: [],\n      normal: [],\n      colors: [],\n      uvs: [],\n      materialIndex: [],\n      vertexWeights: [],\n      weightsIndices: []\n    };\n    let polygonIndex = 0;\n    let faceLength = 0;\n    let displayedWeightsWarning = false; // these will hold data for a single face\n\n    let facePositionIndexes = [];\n    let faceNormals = [];\n    let faceColors = [];\n    let faceUVs = [];\n    let faceWeights = [];\n    let faceWeightIndices = [];\n    const scope = this;\n    geoInfo.vertexIndices.forEach(function (vertexIndex, polygonVertexIndex) {\n      let materialIndex;\n      let endOfFace = false; // Face index and vertex index arrays are combined in a single array\n      // A cube with quad faces looks like this:\n      // PolygonVertexIndex: *24 {\n      //  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5\n      //  }\n      // Negative numbers mark the end of a face - first face here is 0, 1, 3, -3\n      // to find index of last vertex bit shift the index: ^ - 1\n\n      if (vertexIndex < 0) {\n        vertexIndex = vertexIndex ^ -1; // equivalent to ( x * -1 ) - 1\n\n        endOfFace = true;\n      }\n\n      let weightIndices = [];\n      let weights = [];\n      facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);\n\n      if (geoInfo.color) {\n        const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color);\n        faceColors.push(data[0], data[1], data[2]);\n      }\n\n      if (geoInfo.skeleton) {\n        if (geoInfo.weightTable[vertexIndex] !== undefined) {\n          geoInfo.weightTable[vertexIndex].forEach(function (wt) {\n            weights.push(wt.weight);\n            weightIndices.push(wt.id);\n          });\n        }\n\n        if (weights.length > 4) {\n          if (!displayedWeightsWarning) {\n            console.warn('THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.');\n            displayedWeightsWarning = true;\n          }\n\n          const wIndex = [0, 0, 0, 0];\n          const Weight = [0, 0, 0, 0];\n          weights.forEach(function (weight, weightIndex) {\n            let currentWeight = weight;\n            let currentIndex = weightIndices[weightIndex];\n            Weight.forEach(function (comparedWeight, comparedWeightIndex, comparedWeightArray) {\n              if (currentWeight > comparedWeight) {\n                comparedWeightArray[comparedWeightIndex] = currentWeight;\n                currentWeight = comparedWeight;\n                const tmp = wIndex[comparedWeightIndex];\n                wIndex[comparedWeightIndex] = currentIndex;\n                currentIndex = tmp;\n              }\n            });\n          });\n          weightIndices = wIndex;\n          weights = Weight;\n        } // if the weight array is shorter than 4 pad with 0s\n\n\n        while (weights.length < 4) {\n          weights.push(0);\n          weightIndices.push(0);\n        }\n\n        for (let i = 0; i < 4; ++i) {\n          faceWeights.push(weights[i]);\n          faceWeightIndices.push(weightIndices[i]);\n        }\n      }\n\n      if (geoInfo.normal) {\n        const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal);\n        faceNormals.push(data[0], data[1], data[2]);\n      }\n\n      if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n        materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0];\n      }\n\n      if (geoInfo.uv) {\n        geoInfo.uv.forEach(function (uv, i) {\n          const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv);\n\n          if (faceUVs[i] === undefined) {\n            faceUVs[i] = [];\n          }\n\n          faceUVs[i].push(data[0]);\n          faceUVs[i].push(data[1]);\n        });\n      }\n\n      faceLength++;\n\n      if (endOfFace) {\n        scope.genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength);\n        polygonIndex++;\n        faceLength = 0; // reset arrays for the next face\n\n        facePositionIndexes = [];\n        faceNormals = [];\n        faceColors = [];\n        faceUVs = [];\n        faceWeights = [];\n        faceWeightIndices = [];\n      }\n    });\n    return buffers;\n  } // Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n\n\n  genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength) {\n    for (let i = 2; i < faceLength; i++) {\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]]);\n\n      if (geoInfo.skeleton) {\n        buffers.vertexWeights.push(faceWeights[0]);\n        buffers.vertexWeights.push(faceWeights[1]);\n        buffers.vertexWeights.push(faceWeights[2]);\n        buffers.vertexWeights.push(faceWeights[3]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3]);\n        buffers.vertexWeights.push(faceWeights[i * 4]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 1]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 2]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 3]);\n        buffers.weightsIndices.push(faceWeightIndices[0]);\n        buffers.weightsIndices.push(faceWeightIndices[1]);\n        buffers.weightsIndices.push(faceWeightIndices[2]);\n        buffers.weightsIndices.push(faceWeightIndices[3]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 1]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 2]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 3]);\n      }\n\n      if (geoInfo.color) {\n        buffers.colors.push(faceColors[0]);\n        buffers.colors.push(faceColors[1]);\n        buffers.colors.push(faceColors[2]);\n        buffers.colors.push(faceColors[(i - 1) * 3]);\n        buffers.colors.push(faceColors[(i - 1) * 3 + 1]);\n        buffers.colors.push(faceColors[(i - 1) * 3 + 2]);\n        buffers.colors.push(faceColors[i * 3]);\n        buffers.colors.push(faceColors[i * 3 + 1]);\n        buffers.colors.push(faceColors[i * 3 + 2]);\n      }\n\n      if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n        buffers.materialIndex.push(materialIndex);\n        buffers.materialIndex.push(materialIndex);\n        buffers.materialIndex.push(materialIndex);\n      }\n\n      if (geoInfo.normal) {\n        buffers.normal.push(faceNormals[0]);\n        buffers.normal.push(faceNormals[1]);\n        buffers.normal.push(faceNormals[2]);\n        buffers.normal.push(faceNormals[(i - 1) * 3]);\n        buffers.normal.push(faceNormals[(i - 1) * 3 + 1]);\n        buffers.normal.push(faceNormals[(i - 1) * 3 + 2]);\n        buffers.normal.push(faceNormals[i * 3]);\n        buffers.normal.push(faceNormals[i * 3 + 1]);\n        buffers.normal.push(faceNormals[i * 3 + 2]);\n      }\n\n      if (geoInfo.uv) {\n        geoInfo.uv.forEach(function (uv, j) {\n          if (buffers.uvs[j] === undefined) buffers.uvs[j] = [];\n          buffers.uvs[j].push(faceUVs[j][0]);\n          buffers.uvs[j].push(faceUVs[j][1]);\n          buffers.uvs[j].push(faceUVs[j][(i - 1) * 2]);\n          buffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1]);\n          buffers.uvs[j].push(faceUVs[j][i * 2]);\n          buffers.uvs[j].push(faceUVs[j][i * 2 + 1]);\n        });\n      }\n    }\n  }\n\n  addMorphTargets(parentGeo, parentGeoNode, morphTargets, preTransform) {\n    if (morphTargets.length === 0) return;\n    parentGeo.morphTargetsRelative = true;\n    parentGeo.morphAttributes.position = []; // parentGeo.morphAttributes.normal = []; // not implemented\n\n    const scope = this;\n    morphTargets.forEach(function (morphTarget) {\n      morphTarget.rawTargets.forEach(function (rawTarget) {\n        const morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];\n\n        if (morphGeoNode !== undefined) {\n          scope.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name);\n        }\n      });\n    });\n  } // a morph geometry node is similar to a standard  node, and the node is also contained\n  // in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n  // and a special attribute Index defining which vertices of the original geometry are affected\n  // Normal and position attributes only have data for the vertices that are affected by the morph\n\n\n  genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, name) {\n    const vertexIndices = parentGeoNode.PolygonVertexIndex !== undefined ? parentGeoNode.PolygonVertexIndex.a : [];\n    const morphPositionsSparse = morphGeoNode.Vertices !== undefined ? morphGeoNode.Vertices.a : [];\n    const indices = morphGeoNode.Indexes !== undefined ? morphGeoNode.Indexes.a : [];\n    const length = parentGeo.attributes.position.count * 3;\n    const morphPositions = new Float32Array(length);\n\n    for (let i = 0; i < indices.length; i++) {\n      const morphIndex = indices[i] * 3;\n      morphPositions[morphIndex] = morphPositionsSparse[i * 3];\n      morphPositions[morphIndex + 1] = morphPositionsSparse[i * 3 + 1];\n      morphPositions[morphIndex + 2] = morphPositionsSparse[i * 3 + 2];\n    } // TODO: add morph normal support\n\n\n    const morphGeoInfo = {\n      vertexIndices: vertexIndices,\n      vertexPositions: morphPositions\n    };\n    const morphBuffers = this.genBuffers(morphGeoInfo);\n    const positionAttribute = new Float32BufferAttribute(morphBuffers.vertex, 3);\n    positionAttribute.name = name || morphGeoNode.attrName;\n    positionAttribute.applyMatrix4(preTransform);\n    parentGeo.morphAttributes.position.push(positionAttribute);\n  } // Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n\n\n  parseNormals(NormalNode) {\n    const mappingType = NormalNode.MappingInformationType;\n    const referenceType = NormalNode.ReferenceInformationType;\n    const buffer = NormalNode.Normals.a;\n    let indexBuffer = [];\n\n    if (referenceType === 'IndexToDirect') {\n      if ('NormalIndex' in NormalNode) {\n        indexBuffer = NormalNode.NormalIndex.a;\n      } else if ('NormalsIndex' in NormalNode) {\n        indexBuffer = NormalNode.NormalsIndex.a;\n      }\n    }\n\n    return {\n      dataSize: 3,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  } // Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n\n\n  parseUVs(UVNode) {\n    const mappingType = UVNode.MappingInformationType;\n    const referenceType = UVNode.ReferenceInformationType;\n    const buffer = UVNode.UV.a;\n    let indexBuffer = [];\n\n    if (referenceType === 'IndexToDirect') {\n      indexBuffer = UVNode.UVIndex.a;\n    }\n\n    return {\n      dataSize: 2,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  } // Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n\n\n  parseVertexColors(ColorNode) {\n    const mappingType = ColorNode.MappingInformationType;\n    const referenceType = ColorNode.ReferenceInformationType;\n    const buffer = ColorNode.Colors.a;\n    let indexBuffer = [];\n\n    if (referenceType === 'IndexToDirect') {\n      indexBuffer = ColorNode.ColorIndex.a;\n    }\n\n    return {\n      dataSize: 4,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  } // Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n\n\n  parseMaterialIndices(MaterialNode) {\n    const mappingType = MaterialNode.MappingInformationType;\n    const referenceType = MaterialNode.ReferenceInformationType;\n\n    if (mappingType === 'NoMappingInformation') {\n      return {\n        dataSize: 1,\n        buffer: [0],\n        indices: [0],\n        mappingType: 'AllSame',\n        referenceType: referenceType\n      };\n    }\n\n    const materialIndexBuffer = MaterialNode.Materials.a; // Since materials are stored as indices, there's a bit of a mismatch between FBX and what\n    // we expect.So we create an intermediate buffer that points to the index in the buffer,\n    // for conforming with the other functions we've written for other data.\n\n    const materialIndices = [];\n\n    for (let i = 0; i < materialIndexBuffer.length; ++i) {\n      materialIndices.push(i);\n    }\n\n    return {\n      dataSize: 1,\n      buffer: materialIndexBuffer,\n      indices: materialIndices,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  } // Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n\n\n  parseNurbsGeometry(geoNode) {\n    if (NURBSCurve === undefined) {\n      console.error('THREE.FBXLoader: The loader relies on NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.');\n      return new BufferGeometry();\n    }\n\n    const order = parseInt(geoNode.Order);\n\n    if (isNaN(order)) {\n      console.error('THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id);\n      return new BufferGeometry();\n    }\n\n    const degree = order - 1;\n    const knots = geoNode.KnotVector.a;\n    const controlPoints = [];\n    const pointsValues = geoNode.Points.a;\n\n    for (let i = 0, l = pointsValues.length; i < l; i += 4) {\n      controlPoints.push(new Vector4().fromArray(pointsValues, i));\n    }\n\n    let startKnot, endKnot;\n\n    if (geoNode.Form === 'Closed') {\n      controlPoints.push(controlPoints[0]);\n    } else if (geoNode.Form === 'Periodic') {\n      startKnot = degree;\n      endKnot = knots.length - 1 - startKnot;\n\n      for (let i = 0; i < degree; ++i) {\n        controlPoints.push(controlPoints[i]);\n      }\n    }\n\n    const curve = new NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);\n    const points = curve.getPoints(controlPoints.length * 12);\n    return new BufferGeometry().setFromPoints(points);\n  }\n\n} // parse animation data from FBXTree\n\n\nclass AnimationParser {\n  // take raw animation clips and turn them into three.js animation clips\n  parse() {\n    const animationClips = [];\n    const rawClips = this.parseClips();\n\n    if (rawClips !== undefined) {\n      for (const key in rawClips) {\n        const rawClip = rawClips[key];\n        const clip = this.addClip(rawClip);\n        animationClips.push(clip);\n      }\n    }\n\n    return animationClips;\n  }\n\n  parseClips() {\n    // since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,\n    // if this is undefined we can safely assume there are no animations\n    if (fbxTree.Objects.AnimationCurve === undefined) return undefined;\n    const curveNodesMap = this.parseAnimationCurveNodes();\n    this.parseAnimationCurves(curveNodesMap);\n    const layersMap = this.parseAnimationLayers(curveNodesMap);\n    const rawClips = this.parseAnimStacks(layersMap);\n    return rawClips;\n  } // parse nodes in FBXTree.Objects.AnimationCurveNode\n  // each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n  // and is referenced by an AnimationLayer\n\n\n  parseAnimationCurveNodes() {\n    const rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n    const curveNodesMap = new Map();\n\n    for (const nodeID in rawCurveNodes) {\n      const rawCurveNode = rawCurveNodes[nodeID];\n\n      if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {\n        const curveNode = {\n          id: rawCurveNode.id,\n          attr: rawCurveNode.attrName,\n          curves: {}\n        };\n        curveNodesMap.set(curveNode.id, curveNode);\n      }\n    }\n\n    return curveNodesMap;\n  } // parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n  // previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n  // axis ( e.g. times and values of x rotation)\n\n\n  parseAnimationCurves(curveNodesMap) {\n    const rawCurves = fbxTree.Objects.AnimationCurve; // TODO: Many values are identical up to roundoff error, but won't be optimised\n    // e.g. position times: [0, 0.4, 0. 8]\n    // position values: [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.235384487103147e-7, 93.67520904541016, -0.9982695579528809]\n    // clearly, this should be optimised to\n    // times: [0], positions [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809]\n    // this shows up in nearly every FBX file, and generally time array is length > 100\n\n    for (const nodeID in rawCurves) {\n      const animationCurve = {\n        id: rawCurves[nodeID].id,\n        times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),\n        values: rawCurves[nodeID].KeyValueFloat.a\n      };\n      const relationships = connections.get(animationCurve.id);\n\n      if (relationships !== undefined) {\n        const animationCurveID = relationships.parents[0].ID;\n        const animationCurveRelationship = relationships.parents[0].relationship;\n\n        if (animationCurveRelationship.match(/X/)) {\n          curveNodesMap.get(animationCurveID).curves['x'] = animationCurve;\n        } else if (animationCurveRelationship.match(/Y/)) {\n          curveNodesMap.get(animationCurveID).curves['y'] = animationCurve;\n        } else if (animationCurveRelationship.match(/Z/)) {\n          curveNodesMap.get(animationCurveID).curves['z'] = animationCurve;\n        } else if (animationCurveRelationship.match(/d|DeformPercent/) && curveNodesMap.has(animationCurveID)) {\n          curveNodesMap.get(animationCurveID).curves['morph'] = animationCurve;\n        }\n      }\n    }\n  } // parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n  // to various AnimationCurveNodes and is referenced by an AnimationStack node\n  // note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n\n\n  parseAnimationLayers(curveNodesMap) {\n    const rawLayers = fbxTree.Objects.AnimationLayer;\n    const layersMap = new Map();\n\n    for (const nodeID in rawLayers) {\n      const layerCurveNodes = [];\n      const connection = connections.get(parseInt(nodeID));\n\n      if (connection !== undefined) {\n        // all the animationCurveNodes used in the layer\n        const children = connection.children;\n        children.forEach(function (child, i) {\n          if (curveNodesMap.has(child.ID)) {\n            const curveNode = curveNodesMap.get(child.ID); // check that the curves are defined for at least one axis, otherwise ignore the curveNode\n\n            if (curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined) {\n              if (layerCurveNodes[i] === undefined) {\n                const modelID = connections.get(child.ID).parents.filter(function (parent) {\n                  return parent.relationship !== undefined;\n                })[0].ID;\n\n                if (modelID !== undefined) {\n                  const rawModel = fbxTree.Objects.Model[modelID.toString()];\n\n                  if (rawModel === undefined) {\n                    console.warn('THREE.FBXLoader: Encountered a unused curve.', child);\n                    return;\n                  }\n\n                  const node = {\n                    modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                    ID: rawModel.id,\n                    initialPosition: [0, 0, 0],\n                    initialRotation: [0, 0, 0],\n                    initialScale: [1, 1, 1]\n                  };\n                  sceneGraph.traverse(function (child) {\n                    if (child.ID === rawModel.id) {\n                      node.transform = child.matrix;\n                      if (child.userData.transformData) node.eulerOrder = child.userData.transformData.eulerOrder;\n                    }\n                  });\n                  if (!node.transform) node.transform = new Matrix4(); // if the animated model is pre rotated, we'll have to apply the pre rotations to every\n                  // animation value as well\n\n                  if ('PreRotation' in rawModel) node.preRotation = rawModel.PreRotation.value;\n                  if ('PostRotation' in rawModel) node.postRotation = rawModel.PostRotation.value;\n                  layerCurveNodes[i] = node;\n                }\n              }\n\n              if (layerCurveNodes[i]) layerCurveNodes[i][curveNode.attr] = curveNode;\n            } else if (curveNode.curves.morph !== undefined) {\n              if (layerCurveNodes[i] === undefined) {\n                const deformerID = connections.get(child.ID).parents.filter(function (parent) {\n                  return parent.relationship !== undefined;\n                })[0].ID;\n                const morpherID = connections.get(deformerID).parents[0].ID;\n                const geoID = connections.get(morpherID).parents[0].ID; // assuming geometry is not used in more than one model\n\n                const modelID = connections.get(geoID).parents[0].ID;\n                const rawModel = fbxTree.Objects.Model[modelID];\n                const node = {\n                  modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                  morphName: fbxTree.Objects.Deformer[deformerID].attrName\n                };\n                layerCurveNodes[i] = node;\n              }\n\n              layerCurveNodes[i][curveNode.attr] = curveNode;\n            }\n          }\n        });\n        layersMap.set(parseInt(nodeID), layerCurveNodes);\n      }\n    }\n\n    return layersMap;\n  } // parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n  // hierarchy. Each Stack node will be used to create a AnimationClip\n\n\n  parseAnimStacks(layersMap) {\n    const rawStacks = fbxTree.Objects.AnimationStack; // connect the stacks (clips) up to the layers\n\n    const rawClips = {};\n\n    for (const nodeID in rawStacks) {\n      const children = connections.get(parseInt(nodeID)).children;\n\n      if (children.length > 1) {\n        // it seems like stacks will always be associated with a single layer. But just in case there are files\n        // where there are multiple layers per stack, we'll display a warning\n        console.warn('THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.');\n      }\n\n      const layer = layersMap.get(children[0].ID);\n      rawClips[nodeID] = {\n        name: rawStacks[nodeID].attrName,\n        layer: layer\n      };\n    }\n\n    return rawClips;\n  }\n\n  addClip(rawClip) {\n    let tracks = [];\n    const scope = this;\n    rawClip.layer.forEach(function (rawTracks) {\n      tracks = tracks.concat(scope.generateTracks(rawTracks));\n    });\n    return new AnimationClip(rawClip.name, -1, tracks);\n  }\n\n  generateTracks(rawTracks) {\n    const tracks = [];\n    let initialPosition = new Vector3();\n    let initialRotation = new Quaternion();\n    let initialScale = new Vector3();\n    if (rawTracks.transform) rawTracks.transform.decompose(initialPosition, initialRotation, initialScale);\n    initialPosition = initialPosition.toArray();\n    initialRotation = new Euler().setFromQuaternion(initialRotation, rawTracks.eulerOrder).toArray();\n    initialScale = initialScale.toArray();\n\n    if (rawTracks.T !== undefined && Object.keys(rawTracks.T.curves).length > 0) {\n      const positionTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position');\n      if (positionTrack !== undefined) tracks.push(positionTrack);\n    }\n\n    if (rawTracks.R !== undefined && Object.keys(rawTracks.R.curves).length > 0) {\n      const rotationTrack = this.generateRotationTrack(rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder);\n      if (rotationTrack !== undefined) tracks.push(rotationTrack);\n    }\n\n    if (rawTracks.S !== undefined && Object.keys(rawTracks.S.curves).length > 0) {\n      const scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale');\n      if (scaleTrack !== undefined) tracks.push(scaleTrack);\n    }\n\n    if (rawTracks.DeformPercent !== undefined) {\n      const morphTrack = this.generateMorphTrack(rawTracks);\n      if (morphTrack !== undefined) tracks.push(morphTrack);\n    }\n\n    return tracks;\n  }\n\n  generateVectorTrack(modelName, curves, initialValue, type) {\n    const times = this.getTimesForAllAxes(curves);\n    const values = this.getKeyframeTrackValues(times, curves, initialValue);\n    return new VectorKeyframeTrack(modelName + '.' + type, times, values);\n  }\n\n  generateRotationTrack(modelName, curves, initialValue, preRotation, postRotation, eulerOrder) {\n    if (curves.x !== undefined) {\n      this.interpolateRotations(curves.x);\n      curves.x.values = curves.x.values.map(MathUtils.degToRad);\n    }\n\n    if (curves.y !== undefined) {\n      this.interpolateRotations(curves.y);\n      curves.y.values = curves.y.values.map(MathUtils.degToRad);\n    }\n\n    if (curves.z !== undefined) {\n      this.interpolateRotations(curves.z);\n      curves.z.values = curves.z.values.map(MathUtils.degToRad);\n    }\n\n    const times = this.getTimesForAllAxes(curves);\n    const values = this.getKeyframeTrackValues(times, curves, initialValue);\n\n    if (preRotation !== undefined) {\n      preRotation = preRotation.map(MathUtils.degToRad);\n      preRotation.push(eulerOrder);\n      preRotation = new Euler().fromArray(preRotation);\n      preRotation = new Quaternion().setFromEuler(preRotation);\n    }\n\n    if (postRotation !== undefined) {\n      postRotation = postRotation.map(MathUtils.degToRad);\n      postRotation.push(eulerOrder);\n      postRotation = new Euler().fromArray(postRotation);\n      postRotation = new Quaternion().setFromEuler(postRotation).invert();\n    }\n\n    const quaternion = new Quaternion();\n    const euler = new Euler();\n    const quaternionValues = [];\n\n    for (let i = 0; i < values.length; i += 3) {\n      euler.set(values[i], values[i + 1], values[i + 2], eulerOrder);\n      quaternion.setFromEuler(euler);\n      if (preRotation !== undefined) quaternion.premultiply(preRotation);\n      if (postRotation !== undefined) quaternion.multiply(postRotation);\n      quaternion.toArray(quaternionValues, i / 3 * 4);\n    }\n\n    return new QuaternionKeyframeTrack(modelName + '.quaternion', times, quaternionValues);\n  }\n\n  generateMorphTrack(rawTracks) {\n    const curves = rawTracks.DeformPercent.curves.morph;\n    const values = curves.values.map(function (val) {\n      return val / 100;\n    });\n    const morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName];\n    return new NumberKeyframeTrack(rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values);\n  } // For all animated objects, times are defined separately for each axis\n  // Here we'll combine the times into one sorted array without duplicates\n\n\n  getTimesForAllAxes(curves) {\n    let times = []; // first join together the times for each axis, if defined\n\n    if (curves.x !== undefined) times = times.concat(curves.x.times);\n    if (curves.y !== undefined) times = times.concat(curves.y.times);\n    if (curves.z !== undefined) times = times.concat(curves.z.times); // then sort them\n\n    times = times.sort(function (a, b) {\n      return a - b;\n    }); // and remove duplicates\n\n    if (times.length > 1) {\n      let targetIndex = 1;\n      let lastValue = times[0];\n\n      for (let i = 1; i < times.length; i++) {\n        const currentValue = times[i];\n\n        if (currentValue !== lastValue) {\n          times[targetIndex] = currentValue;\n          lastValue = currentValue;\n          targetIndex++;\n        }\n      }\n\n      times = times.slice(0, targetIndex);\n    }\n\n    return times;\n  }\n\n  getKeyframeTrackValues(times, curves, initialValue) {\n    const prevValue = initialValue;\n    const values = [];\n    let xIndex = -1;\n    let yIndex = -1;\n    let zIndex = -1;\n    times.forEach(function (time) {\n      if (curves.x) xIndex = curves.x.times.indexOf(time);\n      if (curves.y) yIndex = curves.y.times.indexOf(time);\n      if (curves.z) zIndex = curves.z.times.indexOf(time); // if there is an x value defined for this frame, use that\n\n      if (xIndex !== -1) {\n        const xValue = curves.x.values[xIndex];\n        values.push(xValue);\n        prevValue[0] = xValue;\n      } else {\n        // otherwise use the x value from the previous frame\n        values.push(prevValue[0]);\n      }\n\n      if (yIndex !== -1) {\n        const yValue = curves.y.values[yIndex];\n        values.push(yValue);\n        prevValue[1] = yValue;\n      } else {\n        values.push(prevValue[1]);\n      }\n\n      if (zIndex !== -1) {\n        const zValue = curves.z.values[zIndex];\n        values.push(zValue);\n        prevValue[2] = zValue;\n      } else {\n        values.push(prevValue[2]);\n      }\n    });\n    return values;\n  } // Rotations are defined as Euler angles which can have values  of any size\n  // These will be converted to quaternions which don't support values greater than\n  // PI, so we'll interpolate large rotations\n\n\n  interpolateRotations(curve) {\n    for (let i = 1; i < curve.values.length; i++) {\n      const initialValue = curve.values[i - 1];\n      const valuesSpan = curve.values[i] - initialValue;\n      const absoluteSpan = Math.abs(valuesSpan);\n\n      if (absoluteSpan >= 180) {\n        const numSubIntervals = absoluteSpan / 180;\n        const step = valuesSpan / numSubIntervals;\n        let nextValue = initialValue + step;\n        const initialTime = curve.times[i - 1];\n        const timeSpan = curve.times[i] - initialTime;\n        const interval = timeSpan / numSubIntervals;\n        let nextTime = initialTime + interval;\n        const interpolatedTimes = [];\n        const interpolatedValues = [];\n\n        while (nextTime < curve.times[i]) {\n          interpolatedTimes.push(nextTime);\n          nextTime += interval;\n          interpolatedValues.push(nextValue);\n          nextValue += step;\n        }\n\n        curve.times = inject(curve.times, i, interpolatedTimes);\n        curve.values = inject(curve.values, i, interpolatedValues);\n      }\n    }\n  }\n\n} // parse an FBX file in ASCII format\n\n\nclass TextParser {\n  getPrevNode() {\n    return this.nodeStack[this.currentIndent - 2];\n  }\n\n  getCurrentNode() {\n    return this.nodeStack[this.currentIndent - 1];\n  }\n\n  getCurrentProp() {\n    return this.currentProp;\n  }\n\n  pushStack(node) {\n    this.nodeStack.push(node);\n    this.currentIndent += 1;\n  }\n\n  popStack() {\n    this.nodeStack.pop();\n    this.currentIndent -= 1;\n  }\n\n  setCurrentProp(val, name) {\n    this.currentProp = val;\n    this.currentPropName = name;\n  }\n\n  parse(text) {\n    this.currentIndent = 0;\n    this.allNodes = new FBXTree();\n    this.nodeStack = [];\n    this.currentProp = [];\n    this.currentPropName = '';\n    const scope = this;\n    const split = text.split(/[\\r\\n]+/);\n    split.forEach(function (line, i) {\n      const matchComment = line.match(/^[\\s\\t]*;/);\n      const matchEmpty = line.match(/^[\\s\\t]*$/);\n      if (matchComment || matchEmpty) return;\n      const matchBeginning = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):(.*){', '');\n      const matchProperty = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)');\n      const matchEnd = line.match('^\\\\t{' + (scope.currentIndent - 1) + '}}');\n\n      if (matchBeginning) {\n        scope.parseNodeBegin(line, matchBeginning);\n      } else if (matchProperty) {\n        scope.parseNodeProperty(line, matchProperty, split[++i]);\n      } else if (matchEnd) {\n        scope.popStack();\n      } else if (line.match(/^[^\\s\\t}]/)) {\n        // large arrays are split over multiple lines terminated with a ',' character\n        // if this is encountered the line needs to be joined to the previous line\n        scope.parseNodePropertyContinued(line);\n      }\n    });\n    return this.allNodes;\n  }\n\n  parseNodeBegin(line, property) {\n    const nodeName = property[1].trim().replace(/^\"/, '').replace(/\"$/, '');\n    const nodeAttrs = property[2].split(',').map(function (attr) {\n      return attr.trim().replace(/^\"/, '').replace(/\"$/, '');\n    });\n    const node = {\n      name: nodeName\n    };\n    const attrs = this.parseNodeAttr(nodeAttrs);\n    const currentNode = this.getCurrentNode(); // a top node\n\n    if (this.currentIndent === 0) {\n      this.allNodes.add(nodeName, node);\n    } else {\n      // a subnode\n      // if the subnode already exists, append it\n      if (nodeName in currentNode) {\n        // special case Pose needs PoseNodes as an array\n        if (nodeName === 'PoseNode') {\n          currentNode.PoseNode.push(node);\n        } else if (currentNode[nodeName].id !== undefined) {\n          currentNode[nodeName] = {};\n          currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName];\n        }\n\n        if (attrs.id !== '') currentNode[nodeName][attrs.id] = node;\n      } else if (typeof attrs.id === 'number') {\n        currentNode[nodeName] = {};\n        currentNode[nodeName][attrs.id] = node;\n      } else if (nodeName !== 'Properties70') {\n        if (nodeName === 'PoseNode') currentNode[nodeName] = [node];else currentNode[nodeName] = node;\n      }\n    }\n\n    if (typeof attrs.id === 'number') node.id = attrs.id;\n    if (attrs.name !== '') node.attrName = attrs.name;\n    if (attrs.type !== '') node.attrType = attrs.type;\n    this.pushStack(node);\n  }\n\n  parseNodeAttr(attrs) {\n    let id = attrs[0];\n\n    if (attrs[0] !== '') {\n      id = parseInt(attrs[0]);\n\n      if (isNaN(id)) {\n        id = attrs[0];\n      }\n    }\n\n    let name = '',\n        type = '';\n\n    if (attrs.length > 1) {\n      name = attrs[1].replace(/^(\\w+)::/, '');\n      type = attrs[2];\n    }\n\n    return {\n      id: id,\n      name: name,\n      type: type\n    };\n  }\n\n  parseNodeProperty(line, property, contentLine) {\n    let propName = property[1].replace(/^\"/, '').replace(/\"$/, '').trim();\n    let propValue = property[2].replace(/^\"/, '').replace(/\"$/, '').trim(); // for special case: base64 image data follows \"Content: ,\" line\n    //\tContent: ,\n    //\t \"/9j/4RDaRXhpZgAATU0A...\"\n\n    if (propName === 'Content' && propValue === ',') {\n      propValue = contentLine.replace(/\"/g, '').replace(/,$/, '').trim();\n    }\n\n    const currentNode = this.getCurrentNode();\n    const parentName = currentNode.name;\n\n    if (parentName === 'Properties70') {\n      this.parseNodeSpecialProperty(line, propName, propValue);\n      return;\n    } // Connections\n\n\n    if (propName === 'C') {\n      const connProps = propValue.split(',').slice(1);\n      const from = parseInt(connProps[0]);\n      const to = parseInt(connProps[1]);\n      let rest = propValue.split(',').slice(3);\n      rest = rest.map(function (elem) {\n        return elem.trim().replace(/^\"/, '');\n      });\n      propName = 'connections';\n      propValue = [from, to];\n      append(propValue, rest);\n\n      if (currentNode[propName] === undefined) {\n        currentNode[propName] = [];\n      }\n    } // Node\n\n\n    if (propName === 'Node') currentNode.id = propValue; // connections\n\n    if (propName in currentNode && Array.isArray(currentNode[propName])) {\n      currentNode[propName].push(propValue);\n    } else {\n      if (propName !== 'a') currentNode[propName] = propValue;else currentNode.a = propValue;\n    }\n\n    this.setCurrentProp(currentNode, propName); // convert string to array, unless it ends in ',' in which case more will be added to it\n\n    if (propName === 'a' && propValue.slice(-1) !== ',') {\n      currentNode.a = parseNumberArray(propValue);\n    }\n  }\n\n  parseNodePropertyContinued(line) {\n    const currentNode = this.getCurrentNode();\n    currentNode.a += line; // if the line doesn't end in ',' we have reached the end of the property value\n    // so convert the string to an array\n\n    if (line.slice(-1) !== ',') {\n      currentNode.a = parseNumberArray(currentNode.a);\n    }\n  } // parse \"Property70\"\n\n\n  parseNodeSpecialProperty(line, propName, propValue) {\n    // split this\n    // P: \"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\",1,1,1\n    // into array like below\n    // [\"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\", \"1,1,1\" ]\n    const props = propValue.split('\",').map(function (prop) {\n      return prop.trim().replace(/^\\\"/, '').replace(/\\s/, '_');\n    });\n    const innerPropName = props[0];\n    const innerPropType1 = props[1];\n    const innerPropType2 = props[2];\n    const innerPropFlag = props[3];\n    let innerPropValue = props[4]; // cast values where needed, otherwise leave as strings\n\n    switch (innerPropType1) {\n      case 'int':\n      case 'enum':\n      case 'bool':\n      case 'ULongLong':\n      case 'double':\n      case 'Number':\n      case 'FieldOfView':\n        innerPropValue = parseFloat(innerPropValue);\n        break;\n\n      case 'Color':\n      case 'ColorRGB':\n      case 'Vector3D':\n      case 'Lcl_Translation':\n      case 'Lcl_Rotation':\n      case 'Lcl_Scaling':\n        innerPropValue = parseNumberArray(innerPropValue);\n        break;\n    } // CAUTION: these props must append to parent's parent\n\n\n    this.getPrevNode()[innerPropName] = {\n      type: innerPropType1,\n      type2: innerPropType2,\n      flag: innerPropFlag,\n      value: innerPropValue\n    };\n    this.setCurrentProp(this.getPrevNode(), innerPropName);\n  }\n\n} // Parse an FBX file in Binary format\n\n\nclass BinaryParser {\n  parse(buffer) {\n    const reader = new BinaryReader(buffer);\n    reader.skip(23); // skip magic 23 bytes\n\n    const version = reader.getUint32();\n\n    if (version < 6400) {\n      throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + version);\n    }\n\n    const allNodes = new FBXTree();\n\n    while (!this.endOfContent(reader)) {\n      const node = this.parseNode(reader, version);\n      if (node !== null) allNodes.add(node.name, node);\n    }\n\n    return allNodes;\n  } // Check if reader has reached the end of content.\n\n\n  endOfContent(reader) {\n    // footer size: 160bytes + 16-byte alignment padding\n    // - 16bytes: magic\n    // - padding til 16-byte alignment (at least 1byte?)\n    //\t(seems like some exporters embed fixed 15 or 16bytes?)\n    // - 4bytes: magic\n    // - 4bytes: version\n    // - 120bytes: zero\n    // - 16bytes: magic\n    if (reader.size() % 16 === 0) {\n      return (reader.getOffset() + 160 + 16 & ~0xf) >= reader.size();\n    } else {\n      return reader.getOffset() + 160 + 16 >= reader.size();\n    }\n  } // recursively parse nodes until the end of the file is reached\n\n\n  parseNode(reader, version) {\n    const node = {}; // The first three data sizes depends on version.\n\n    const endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();\n    const numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32();\n    version >= 7500 ? reader.getUint64() : reader.getUint32(); // the returned propertyListLen is not used\n\n    const nameLen = reader.getUint8();\n    const name = reader.getString(nameLen); // Regards this node as NULL-record if endOffset is zero\n\n    if (endOffset === 0) return null;\n    const propertyList = [];\n\n    for (let i = 0; i < numProperties; i++) {\n      propertyList.push(this.parseProperty(reader));\n    } // Regards the first three elements in propertyList as id, attrName, and attrType\n\n\n    const id = propertyList.length > 0 ? propertyList[0] : '';\n    const attrName = propertyList.length > 1 ? propertyList[1] : '';\n    const attrType = propertyList.length > 2 ? propertyList[2] : ''; // check if this node represents just a single property\n    // like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}\n\n    node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false;\n\n    while (endOffset > reader.getOffset()) {\n      const subNode = this.parseNode(reader, version);\n      if (subNode !== null) this.parseSubNode(name, node, subNode);\n    }\n\n    node.propertyList = propertyList; // raw property list used by parent\n\n    if (typeof id === 'number') node.id = id;\n    if (attrName !== '') node.attrName = attrName;\n    if (attrType !== '') node.attrType = attrType;\n    if (name !== '') node.name = name;\n    return node;\n  }\n\n  parseSubNode(name, node, subNode) {\n    // special case: child node is single property\n    if (subNode.singleProperty === true) {\n      const value = subNode.propertyList[0];\n\n      if (Array.isArray(value)) {\n        node[subNode.name] = subNode;\n        subNode.a = value;\n      } else {\n        node[subNode.name] = value;\n      }\n    } else if (name === 'Connections' && subNode.name === 'C') {\n      const array = [];\n      subNode.propertyList.forEach(function (property, i) {\n        // first Connection is FBX type (OO, OP, etc.). We'll discard these\n        if (i !== 0) array.push(property);\n      });\n\n      if (node.connections === undefined) {\n        node.connections = [];\n      }\n\n      node.connections.push(array);\n    } else if (subNode.name === 'Properties70') {\n      const keys = Object.keys(subNode);\n      keys.forEach(function (key) {\n        node[key] = subNode[key];\n      });\n    } else if (name === 'Properties70' && subNode.name === 'P') {\n      let innerPropName = subNode.propertyList[0];\n      let innerPropType1 = subNode.propertyList[1];\n      const innerPropType2 = subNode.propertyList[2];\n      const innerPropFlag = subNode.propertyList[3];\n      let innerPropValue;\n      if (innerPropName.indexOf('Lcl ') === 0) innerPropName = innerPropName.replace('Lcl ', 'Lcl_');\n      if (innerPropType1.indexOf('Lcl ') === 0) innerPropType1 = innerPropType1.replace('Lcl ', 'Lcl_');\n\n      if (innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf('Lcl_') === 0) {\n        innerPropValue = [subNode.propertyList[4], subNode.propertyList[5], subNode.propertyList[6]];\n      } else {\n        innerPropValue = subNode.propertyList[4];\n      } // this will be copied to parent, see above\n\n\n      node[innerPropName] = {\n        type: innerPropType1,\n        type2: innerPropType2,\n        flag: innerPropFlag,\n        value: innerPropValue\n      };\n    } else if (node[subNode.name] === undefined) {\n      if (typeof subNode.id === 'number') {\n        node[subNode.name] = {};\n        node[subNode.name][subNode.id] = subNode;\n      } else {\n        node[subNode.name] = subNode;\n      }\n    } else {\n      if (subNode.name === 'PoseNode') {\n        if (!Array.isArray(node[subNode.name])) {\n          node[subNode.name] = [node[subNode.name]];\n        }\n\n        node[subNode.name].push(subNode);\n      } else if (node[subNode.name][subNode.id] === undefined) {\n        node[subNode.name][subNode.id] = subNode;\n      }\n    }\n  }\n\n  parseProperty(reader) {\n    const type = reader.getString(1);\n    let length;\n\n    switch (type) {\n      case 'C':\n        return reader.getBoolean();\n\n      case 'D':\n        return reader.getFloat64();\n\n      case 'F':\n        return reader.getFloat32();\n\n      case 'I':\n        return reader.getInt32();\n\n      case 'L':\n        return reader.getInt64();\n\n      case 'R':\n        length = reader.getUint32();\n        return reader.getArrayBuffer(length);\n\n      case 'S':\n        length = reader.getUint32();\n        return reader.getString(length);\n\n      case 'Y':\n        return reader.getInt16();\n\n      case 'b':\n      case 'c':\n      case 'd':\n      case 'f':\n      case 'i':\n      case 'l':\n        const arrayLength = reader.getUint32();\n        const encoding = reader.getUint32(); // 0: non-compressed, 1: compressed\n\n        const compressedLength = reader.getUint32();\n\n        if (encoding === 0) {\n          switch (type) {\n            case 'b':\n            case 'c':\n              return reader.getBooleanArray(arrayLength);\n\n            case 'd':\n              return reader.getFloat64Array(arrayLength);\n\n            case 'f':\n              return reader.getFloat32Array(arrayLength);\n\n            case 'i':\n              return reader.getInt32Array(arrayLength);\n\n            case 'l':\n              return reader.getInt64Array(arrayLength);\n          }\n        }\n\n        const data = unzlibSync(new Uint8Array(reader.getArrayBuffer(compressedLength))); // eslint-disable-line no-undef\n\n        const reader2 = new BinaryReader(data.buffer);\n\n        switch (type) {\n          case 'b':\n          case 'c':\n            return reader2.getBooleanArray(arrayLength);\n\n          case 'd':\n            return reader2.getFloat64Array(arrayLength);\n\n          case 'f':\n            return reader2.getFloat32Array(arrayLength);\n\n          case 'i':\n            return reader2.getInt32Array(arrayLength);\n\n          case 'l':\n            return reader2.getInt64Array(arrayLength);\n        }\n\n      default:\n        throw new Error('THREE.FBXLoader: Unknown property type ' + type);\n    }\n  }\n\n}\n\nclass BinaryReader {\n  constructor(buffer, littleEndian) {\n    this.dv = new DataView(buffer);\n    this.offset = 0;\n    this.littleEndian = littleEndian !== undefined ? littleEndian : true;\n  }\n\n  getOffset() {\n    return this.offset;\n  }\n\n  size() {\n    return this.dv.buffer.byteLength;\n  }\n\n  skip(length) {\n    this.offset += length;\n  } // seems like true/false representation depends on exporter.\n  // true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n  // then sees LSB.\n\n\n  getBoolean() {\n    return (this.getUint8() & 1) === 1;\n  }\n\n  getBooleanArray(size) {\n    const a = [];\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getBoolean());\n    }\n\n    return a;\n  }\n\n  getUint8() {\n    const value = this.dv.getUint8(this.offset);\n    this.offset += 1;\n    return value;\n  }\n\n  getInt16() {\n    const value = this.dv.getInt16(this.offset, this.littleEndian);\n    this.offset += 2;\n    return value;\n  }\n\n  getInt32() {\n    const value = this.dv.getInt32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n\n  getInt32Array(size) {\n    const a = [];\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getInt32());\n    }\n\n    return a;\n  }\n\n  getUint32() {\n    const value = this.dv.getUint32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  } // JavaScript doesn't support 64-bit integer so calculate this here\n  // 1 << 32 will return 1 so using multiply operation instead here.\n  // There's a possibility that this method returns wrong value if the value\n  // is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n  // TODO: safely handle 64-bit integer\n\n\n  getInt64() {\n    let low, high;\n\n    if (this.littleEndian) {\n      low = this.getUint32();\n      high = this.getUint32();\n    } else {\n      high = this.getUint32();\n      low = this.getUint32();\n    } // calculate negative value\n\n\n    if (high & 0x80000000) {\n      high = ~high & 0xffffffff;\n      low = ~low & 0xffffffff;\n      if (low === 0xffffffff) high = high + 1 & 0xffffffff;\n      low = low + 1 & 0xffffffff;\n      return -(high * 0x100000000 + low);\n    }\n\n    return high * 0x100000000 + low;\n  }\n\n  getInt64Array(size) {\n    const a = [];\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getInt64());\n    }\n\n    return a;\n  } // Note: see getInt64() comment\n\n\n  getUint64() {\n    let low, high;\n\n    if (this.littleEndian) {\n      low = this.getUint32();\n      high = this.getUint32();\n    } else {\n      high = this.getUint32();\n      low = this.getUint32();\n    }\n\n    return high * 0x100000000 + low;\n  }\n\n  getFloat32() {\n    const value = this.dv.getFloat32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n\n  getFloat32Array(size) {\n    const a = [];\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getFloat32());\n    }\n\n    return a;\n  }\n\n  getFloat64() {\n    const value = this.dv.getFloat64(this.offset, this.littleEndian);\n    this.offset += 8;\n    return value;\n  }\n\n  getFloat64Array(size) {\n    const a = [];\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getFloat64());\n    }\n\n    return a;\n  }\n\n  getArrayBuffer(size) {\n    const value = this.dv.buffer.slice(this.offset, this.offset + size);\n    this.offset += size;\n    return value;\n  }\n\n  getString(size) {\n    // note: safari 9 doesn't support Uint8Array.indexOf; create intermediate array instead\n    let a = [];\n\n    for (let i = 0; i < size; i++) {\n      a[i] = this.getUint8();\n    }\n\n    const nullByte = a.indexOf(0);\n    if (nullByte >= 0) a = a.slice(0, nullByte);\n    return LoaderUtils.decodeText(new Uint8Array(a));\n  }\n\n} // FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)\n// and BinaryParser( FBX Binary format)\n\n\nclass FBXTree {\n  add(key, val) {\n    this[key] = val;\n  }\n\n} // ************** UTILITY FUNCTIONS **************\n\n\nfunction isFbxFormatBinary(buffer) {\n  const CORRECT = 'Kaydara\\u0020FBX\\u0020Binary\\u0020\\u0020\\0';\n  return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);\n}\n\nfunction isFbxFormatASCII(text) {\n  const CORRECT = ['K', 'a', 'y', 'd', 'a', 'r', 'a', '\\\\', 'F', 'B', 'X', '\\\\', 'B', 'i', 'n', 'a', 'r', 'y', '\\\\', '\\\\'];\n  let cursor = 0;\n\n  function read(offset) {\n    const result = text[offset - 1];\n    text = text.slice(cursor + offset);\n    cursor++;\n    return result;\n  }\n\n  for (let i = 0; i < CORRECT.length; ++i) {\n    const num = read(1);\n\n    if (num === CORRECT[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction getFbxVersion(text) {\n  const versionRegExp = /FBXVersion: (\\d+)/;\n  const match = text.match(versionRegExp);\n\n  if (match) {\n    const version = parseInt(match[1]);\n    return version;\n  }\n\n  throw new Error('THREE.FBXLoader: Cannot find the version number for the file given.');\n} // Converts FBX ticks into real time seconds.\n\n\nfunction convertFBXTimeToSeconds(time) {\n  return time / 46186158000;\n}\n\nconst dataArray = []; // extracts the data from the correct position in the FBX array based on indexing type\n\nfunction getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n  let index;\n\n  switch (infoObject.mappingType) {\n    case 'ByPolygonVertex':\n      index = polygonVertexIndex;\n      break;\n\n    case 'ByPolygon':\n      index = polygonIndex;\n      break;\n\n    case 'ByVertice':\n      index = vertexIndex;\n      break;\n\n    case 'AllSame':\n      index = infoObject.indices[0];\n      break;\n\n    default:\n      console.warn('THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType);\n  }\n\n  if (infoObject.referenceType === 'IndexToDirect') index = infoObject.indices[index];\n  const from = index * infoObject.dataSize;\n  const to = from + infoObject.dataSize;\n  return slice(dataArray, infoObject.buffer, from, to);\n}\n\nconst tempEuler = new Euler();\nconst tempVec = new Vector3(); // generate transformation from FBX transform data\n// ref: https://help.autodesk.com/view/FBX/2017/ENU/?guid=__files_GUID_10CDD63C_79C1_4F2D_BB28_AD2BE65A02ED_htm\n// ref: http://docs.autodesk.com/FBX/2014/ENU/FBX-SDK-Documentation/index.html?url=cpp_ref/_transformations_2main_8cxx-example.html,topicNumber=cpp_ref__transformations_2main_8cxx_example_htmlfc10a1e1-b18d-4e72-9dc0-70d0f1959f5e\n\nfunction generateTransform(transformData) {\n  const lTranslationM = new Matrix4();\n  const lPreRotationM = new Matrix4();\n  const lRotationM = new Matrix4();\n  const lPostRotationM = new Matrix4();\n  const lScalingM = new Matrix4();\n  const lScalingPivotM = new Matrix4();\n  const lScalingOffsetM = new Matrix4();\n  const lRotationOffsetM = new Matrix4();\n  const lRotationPivotM = new Matrix4();\n  const lParentGX = new Matrix4();\n  const lParentLX = new Matrix4();\n  const lGlobalT = new Matrix4();\n  const inheritType = transformData.inheritType ? transformData.inheritType : 0;\n  if (transformData.translation) lTranslationM.setPosition(tempVec.fromArray(transformData.translation));\n\n  if (transformData.preRotation) {\n    const array = transformData.preRotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n  }\n\n  if (transformData.rotation) {\n    const array = transformData.rotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n  }\n\n  if (transformData.postRotation) {\n    const array = transformData.postRotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lPostRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n    lPostRotationM.invert();\n  }\n\n  if (transformData.scale) lScalingM.scale(tempVec.fromArray(transformData.scale)); // Pivots and offsets\n\n  if (transformData.scalingOffset) lScalingOffsetM.setPosition(tempVec.fromArray(transformData.scalingOffset));\n  if (transformData.scalingPivot) lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot));\n  if (transformData.rotationOffset) lRotationOffsetM.setPosition(tempVec.fromArray(transformData.rotationOffset));\n  if (transformData.rotationPivot) lRotationPivotM.setPosition(tempVec.fromArray(transformData.rotationPivot)); // parent transform\n\n  if (transformData.parentMatrixWorld) {\n    lParentLX.copy(transformData.parentMatrix);\n    lParentGX.copy(transformData.parentMatrixWorld);\n  }\n\n  const lLRM = lPreRotationM.clone().multiply(lRotationM).multiply(lPostRotationM); // Global Rotation\n\n  const lParentGRM = new Matrix4();\n  lParentGRM.extractRotation(lParentGX); // Global Shear*Scaling\n\n  const lParentTM = new Matrix4();\n  lParentTM.copyPosition(lParentGX);\n  const lParentGRSM = lParentTM.clone().invert().multiply(lParentGX);\n  const lParentGSM = lParentGRM.clone().invert().multiply(lParentGRSM);\n  const lLSM = lScalingM;\n  const lGlobalRS = new Matrix4();\n\n  if (inheritType === 0) {\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM).multiply(lLSM);\n  } else if (inheritType === 1) {\n    lGlobalRS.copy(lParentGRM).multiply(lParentGSM).multiply(lLRM).multiply(lLSM);\n  } else {\n    const lParentLSM = new Matrix4().scale(new Vector3().setFromMatrixScale(lParentLX));\n    const lParentLSM_inv = lParentLSM.clone().invert();\n    const lParentGSM_noLocal = lParentGSM.clone().multiply(lParentLSM_inv);\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM_noLocal).multiply(lLSM);\n  }\n\n  const lRotationPivotM_inv = lRotationPivotM.clone().invert();\n  const lScalingPivotM_inv = lScalingPivotM.clone().invert(); // Calculate the local transform matrix\n\n  let lTransform = lTranslationM.clone().multiply(lRotationOffsetM).multiply(lRotationPivotM).multiply(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM).multiply(lRotationPivotM_inv).multiply(lScalingOffsetM).multiply(lScalingPivotM).multiply(lScalingM).multiply(lScalingPivotM_inv);\n  const lLocalTWithAllPivotAndOffsetInfo = new Matrix4().copyPosition(lTransform);\n  const lGlobalTranslation = lParentGX.clone().multiply(lLocalTWithAllPivotAndOffsetInfo);\n  lGlobalT.copyPosition(lGlobalTranslation);\n  lTransform = lGlobalT.clone().multiply(lGlobalRS); // from global to local\n\n  lTransform.premultiply(lParentGX.invert());\n  return lTransform;\n} // Returns the three.js intrinsic Euler order corresponding to FBX extrinsic Euler order\n// ref: http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html\n\n\nfunction getEulerOrder(order) {\n  order = order || 0;\n  const enums = ['ZYX', // -> XYZ extrinsic\n  'YZX', // -> XZY extrinsic\n  'XZY', // -> YZX extrinsic\n  'ZXY', // -> YXZ extrinsic\n  'YXZ', // -> ZXY extrinsic\n  'XYZ' // -> ZYX extrinsic\n  //'SphericXYZ', // not possible to support\n  ];\n\n  if (order === 6) {\n    console.warn('THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.');\n    return enums[0];\n  }\n\n  return enums[order];\n} // Parses comma separated list of numbers and returns them an array.\n// Used internally by the TextParser\n\n\nfunction parseNumberArray(value) {\n  const array = value.split(',').map(function (val) {\n    return parseFloat(val);\n  });\n  return array;\n}\n\nfunction convertArrayBufferToString(buffer, from, to) {\n  if (from === undefined) from = 0;\n  if (to === undefined) to = buffer.byteLength;\n  return LoaderUtils.decodeText(new Uint8Array(buffer, from, to));\n}\n\nfunction append(a, b) {\n  for (let i = 0, j = a.length, l = b.length; i < l; i++, j++) {\n    a[j] = b[i];\n  }\n}\n\nfunction slice(a, b, from, to) {\n  for (let i = from, j = 0; i < to; i++, j++) {\n    a[j] = b[i];\n  }\n\n  return a;\n} // inject array a2 into array a1 at index\n\n\nfunction inject(a1, index, a2) {\n  return a1.slice(0, index).concat(a2).concat(a1.slice(index));\n}\n\nexport { FBXLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}