{"ast":null,"code":"import { useLoader } from '@react-three/fiber';\nimport { CubeReflectionMapping, EquirectangularReflectionMapping, sRGBEncoding, LinearEncoding, CubeTextureLoader } from 'three';\nimport { RGBELoader } from 'three-stdlib';\nimport { presetsObj } from '../helpers/environment-assets.js';\nvar CUBEMAP_ROOT = 'https://market-assets.fra1.cdn.digitaloceanspaces.com/market-assets/hdris/';\nfunction useEnvironment() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    _ref$files = _ref.files,\n    files = _ref$files === void 0 ? ['/px.png', '/nx.png', '/py.png', '/ny.png', '/pz.png', '/nz.png'] : _ref$files,\n    _ref$path = _ref.path,\n    path = _ref$path === void 0 ? '' : _ref$path,\n    _ref$preset = _ref.preset,\n    preset = _ref$preset === void 0 ? undefined : _ref$preset,\n    _ref$encoding = _ref.encoding,\n    encoding = _ref$encoding === void 0 ? undefined : _ref$encoding,\n    extensions = _ref.extensions;\n  if (preset) {\n    if (!(preset in presetsObj)) throw new Error('Preset must be one of: ' + Object.keys(presetsObj).join(', '));\n    files = presetsObj[preset];\n    path = CUBEMAP_ROOT;\n  }\n  var isCubeMap = Array.isArray(files);\n  var loader = isCubeMap ? CubeTextureLoader : RGBELoader;\n  var loaderResult = useLoader(\n  // @ts-expect-error\n  loader, isCubeMap ? [files] : files, function (loader) {\n    loader.setPath(path);\n    if (extensions) extensions(loader);\n  });\n  var texture = isCubeMap ?\n  // @ts-ignore\n  loaderResult[0] : loaderResult;\n  texture.mapping = isCubeMap ? CubeReflectionMapping : EquirectangularReflectionMapping;\n  texture.encoding = (encoding !== null && encoding !== void 0 ? encoding : isCubeMap) ? sRGBEncoding : LinearEncoding;\n  return texture;\n}\nexport { useEnvironment };","map":{"version":3,"names":["useLoader","CubeReflectionMapping","EquirectangularReflectionMapping","sRGBEncoding","LinearEncoding","CubeTextureLoader","RGBELoader","presetsObj","CUBEMAP_ROOT","useEnvironment","_ref","arguments","length","undefined","_ref$files","files","_ref$path","path","_ref$preset","preset","_ref$encoding","encoding","extensions","Error","Object","keys","join","isCubeMap","Array","isArray","loader","loaderResult","setPath","texture","mapping"],"sources":["/home/samuel/experiment/3d/farm/frontend/node_modules/@react-three/drei/core/useEnvironment.js"],"sourcesContent":["import { useLoader } from '@react-three/fiber';\nimport { CubeReflectionMapping, EquirectangularReflectionMapping, sRGBEncoding, LinearEncoding, CubeTextureLoader } from 'three';\nimport { RGBELoader } from 'three-stdlib';\nimport { presetsObj } from '../helpers/environment-assets.js';\n\nconst CUBEMAP_ROOT = 'https://market-assets.fra1.cdn.digitaloceanspaces.com/market-assets/hdris/';\nfunction useEnvironment({\n  files = ['/px.png', '/nx.png', '/py.png', '/ny.png', '/pz.png', '/nz.png'],\n  path = '',\n  preset = undefined,\n  encoding = undefined,\n  extensions\n} = {}) {\n  if (preset) {\n    if (!(preset in presetsObj)) throw new Error('Preset must be one of: ' + Object.keys(presetsObj).join(', '));\n    files = presetsObj[preset];\n    path = CUBEMAP_ROOT;\n  }\n\n  const isCubeMap = Array.isArray(files);\n  const loader = isCubeMap ? CubeTextureLoader : RGBELoader;\n  const loaderResult = useLoader( // @ts-expect-error\n  loader, isCubeMap ? [files] : files, loader => {\n    loader.setPath(path);\n    if (extensions) extensions(loader);\n  });\n  const texture = isCubeMap ? // @ts-ignore\n  loaderResult[0] : loaderResult;\n  texture.mapping = isCubeMap ? CubeReflectionMapping : EquirectangularReflectionMapping;\n  texture.encoding = (encoding !== null && encoding !== void 0 ? encoding : isCubeMap) ? sRGBEncoding : LinearEncoding;\n  return texture;\n}\n\nexport { useEnvironment };\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,oBAAoB;AAC9C,SAASC,qBAAqB,EAAEC,gCAAgC,EAAEC,YAAY,EAAEC,cAAc,EAAEC,iBAAiB,QAAQ,OAAO;AAChI,SAASC,UAAU,QAAQ,cAAc;AACzC,SAASC,UAAU,QAAQ,kCAAkC;AAE7D,IAAMC,YAAY,GAAG,4EAA4E;AACjG,SAASC,cAAcA,CAAA,EAMf;EAAA,IAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAJ,CAAC,CAAC;IAAAG,UAAA,GAAAJ,IAAA,CALJK,KAAK;IAALA,KAAK,GAAAD,UAAA,cAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,GAAAA,UAAA;IAAAE,SAAA,GAAAN,IAAA,CAC1EO,IAAI;IAAJA,IAAI,GAAAD,SAAA,cAAG,EAAE,GAAAA,SAAA;IAAAE,WAAA,GAAAR,IAAA,CACTS,MAAM;IAANA,MAAM,GAAAD,WAAA,cAAGL,SAAS,GAAAK,WAAA;IAAAE,aAAA,GAAAV,IAAA,CAClBW,QAAQ;IAARA,QAAQ,GAAAD,aAAA,cAAGP,SAAS,GAAAO,aAAA;IACpBE,UAAU,GAAAZ,IAAA,CAAVY,UAAU;EAEV,IAAIH,MAAM,EAAE;IACV,IAAI,EAAEA,MAAM,IAAIZ,UAAU,CAAC,EAAE,MAAM,IAAIgB,KAAK,CAAC,yBAAyB,GAAGC,MAAM,CAACC,IAAI,CAAClB,UAAU,CAAC,CAACmB,IAAI,CAAC,IAAI,CAAC,CAAC;IAC5GX,KAAK,GAAGR,UAAU,CAACY,MAAM,CAAC;IAC1BF,IAAI,GAAGT,YAAY;EACrB;EAEA,IAAMmB,SAAS,GAAGC,KAAK,CAACC,OAAO,CAACd,KAAK,CAAC;EACtC,IAAMe,MAAM,GAAGH,SAAS,GAAGtB,iBAAiB,GAAGC,UAAU;EACzD,IAAMyB,YAAY,GAAG/B,SAAS;EAAE;EAChC8B,MAAM,EAAEH,SAAS,GAAG,CAACZ,KAAK,CAAC,GAAGA,KAAK,EAAE,UAAAe,MAAM,EAAI;IAC7CA,MAAM,CAACE,OAAO,CAACf,IAAI,CAAC;IACpB,IAAIK,UAAU,EAAEA,UAAU,CAACQ,MAAM,CAAC;EACpC,CAAC,CAAC;EACF,IAAMG,OAAO,GAAGN,SAAS;EAAG;EAC5BI,YAAY,CAAC,CAAC,CAAC,GAAGA,YAAY;EAC9BE,OAAO,CAACC,OAAO,GAAGP,SAAS,GAAG1B,qBAAqB,GAAGC,gCAAgC;EACtF+B,OAAO,CAACZ,QAAQ,GAAG,CAACA,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,KAAK,CAAC,GAAGA,QAAQ,GAAGM,SAAS,IAAIxB,YAAY,GAAGC,cAAc;EACpH,OAAO6B,OAAO;AAChB;AAEA,SAASxB,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}